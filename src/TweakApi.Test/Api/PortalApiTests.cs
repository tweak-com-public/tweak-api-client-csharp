/* 
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 0.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TweakApi.Client;
using TweakApi.Api;
using TweakApi.Model;

namespace TweakApi.Test
{
    /// <summary>
    ///  Class for testing PortalApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PortalApiTests
    {
        private PortalApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PortalApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PortalApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PortalApi
            //Assert.IsInstanceOfType(typeof(PortalApi), instance, "instance is a PortalApi");
        }

        
        /// <summary>
        /// Test PortalsChangeStreamGet
        /// </summary>
        [Test]
        public void PortalsChangeStreamGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string options = null;
            //var response = instance.PortalsChangeStreamGet(options);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test PortalsChangeStreamPost
        /// </summary>
        [Test]
        public void PortalsChangeStreamPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string options = null;
            //var response = instance.PortalsChangeStreamPost(options);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test PortalsCountGet
        /// </summary>
        [Test]
        public void PortalsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //var response = instance.PortalsCountGet(where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test PortalsFindOneGet
        /// </summary>
        [Test]
        public void PortalsFindOneGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //var response = instance.PortalsFindOneGet(filter);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test PortalsGet
        /// </summary>
        [Test]
        public void PortalsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //var response = instance.PortalsGet(filter);
            //Assert.IsInstanceOf<List<Portal>> (response, "response is List<Portal>");
        }
        
        /// <summary>
        /// Test PortalsIdDelete
        /// </summary>
        [Test]
        public void PortalsIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.PortalsIdDelete(id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test PortalsIdDesignFoldersCountGet
        /// </summary>
        [Test]
        public void PortalsIdDesignFoldersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.PortalsIdDesignFoldersCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test PortalsIdDesignFoldersDelete
        /// </summary>
        [Test]
        public void PortalsIdDesignFoldersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.PortalsIdDesignFoldersDelete(id);
            
        }
        
        /// <summary>
        /// Test PortalsIdDesignFoldersFkDelete
        /// </summary>
        [Test]
        public void PortalsIdDesignFoldersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.PortalsIdDesignFoldersFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test PortalsIdDesignFoldersFkGet
        /// </summary>
        [Test]
        public void PortalsIdDesignFoldersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.PortalsIdDesignFoldersFkGet(id, fk);
            //Assert.IsInstanceOf<DesignFolder> (response, "response is DesignFolder");
        }
        
        /// <summary>
        /// Test PortalsIdDesignFoldersFkPut
        /// </summary>
        [Test]
        public void PortalsIdDesignFoldersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //DesignFolder data = null;
            //var response = instance.PortalsIdDesignFoldersFkPut(id, fk, data);
            //Assert.IsInstanceOf<DesignFolder> (response, "response is DesignFolder");
        }
        
        /// <summary>
        /// Test PortalsIdDesignFoldersGet
        /// </summary>
        [Test]
        public void PortalsIdDesignFoldersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.PortalsIdDesignFoldersGet(id, filter);
            //Assert.IsInstanceOf<List<DesignFolder>> (response, "response is List<DesignFolder>");
        }
        
        /// <summary>
        /// Test PortalsIdDesignFoldersPost
        /// </summary>
        [Test]
        public void PortalsIdDesignFoldersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DesignFolder data = null;
            //var response = instance.PortalsIdDesignFoldersPost(id, data);
            //Assert.IsInstanceOf<DesignFolder> (response, "response is DesignFolder");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsCountGet
        /// </summary>
        [Test]
        public void PortalsIdDesignsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.PortalsIdDesignsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsDelete
        /// </summary>
        [Test]
        public void PortalsIdDesignsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.PortalsIdDesignsDelete(id);
            
        }
        
        /// <summary>
        /// Test PortalsIdDesignsFkDelete
        /// </summary>
        [Test]
        public void PortalsIdDesignsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.PortalsIdDesignsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test PortalsIdDesignsFkGet
        /// </summary>
        [Test]
        public void PortalsIdDesignsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.PortalsIdDesignsFkGet(id, fk);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsFkPut
        /// </summary>
        [Test]
        public void PortalsIdDesignsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //Design data = null;
            //var response = instance.PortalsIdDesignsFkPut(id, fk, data);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsGet
        /// </summary>
        [Test]
        public void PortalsIdDesignsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.PortalsIdDesignsGet(id, filter);
            //Assert.IsInstanceOf<List<Design>> (response, "response is List<Design>");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkAssigneeGet
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkAssigneeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.PortalsIdDesignsNkAssigneeGet(id, nk, refresh);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkCommentersCountGet
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkCommentersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.PortalsIdDesignsNkCommentersCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkCommentersDelete
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkCommentersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.PortalsIdDesignsNkCommentersDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkCommentersFkDelete
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkCommentersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.PortalsIdDesignsNkCommentersFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkCommentersFkGet
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkCommentersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.PortalsIdDesignsNkCommentersFkGet(id, nk, fk);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkCommentersFkPut
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkCommentersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //TeamMember data = null;
            //var response = instance.PortalsIdDesignsNkCommentersFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkCommentersGet
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkCommentersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.PortalsIdDesignsNkCommentersGet(id, nk, filter);
            //Assert.IsInstanceOf<List<TeamMember>> (response, "response is List<TeamMember>");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkCommentersPost
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkCommentersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //TeamMember data = null;
            //var response = instance.PortalsIdDesignsNkCommentersPost(id, nk, data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkCommentersRelFkDelete
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkCommentersRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.PortalsIdDesignsNkCommentersRelFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkCommentersRelFkHead
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkCommentersRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.PortalsIdDesignsNkCommentersRelFkHead(id, nk, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkCommentersRelFkPut
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkCommentersRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //DesignComment data = null;
            //var response = instance.PortalsIdDesignsNkCommentersRelFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<DesignComment> (response, "response is DesignComment");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkCommentsCountGet
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkCommentsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.PortalsIdDesignsNkCommentsCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkCommentsDelete
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkCommentsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.PortalsIdDesignsNkCommentsDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkCommentsFkDelete
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkCommentsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.PortalsIdDesignsNkCommentsFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkCommentsFkGet
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkCommentsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.PortalsIdDesignsNkCommentsFkGet(id, nk, fk);
            //Assert.IsInstanceOf<DesignComment> (response, "response is DesignComment");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkCommentsFkPut
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkCommentsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //DesignComment data = null;
            //var response = instance.PortalsIdDesignsNkCommentsFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<DesignComment> (response, "response is DesignComment");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkCommentsGet
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkCommentsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.PortalsIdDesignsNkCommentsGet(id, nk, filter);
            //Assert.IsInstanceOf<List<DesignComment>> (response, "response is List<DesignComment>");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkCommentsPost
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkCommentsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //DesignComment data = null;
            //var response = instance.PortalsIdDesignsNkCommentsPost(id, nk, data);
            //Assert.IsInstanceOf<DesignComment> (response, "response is DesignComment");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkCustomerGet
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkCustomerGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.PortalsIdDesignsNkCustomerGet(id, nk, refresh);
            //Assert.IsInstanceOf<Customer> (response, "response is Customer");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkExportsCountGet
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkExportsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.PortalsIdDesignsNkExportsCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkExportsDelete
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkExportsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.PortalsIdDesignsNkExportsDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkExportsFkDelete
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkExportsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.PortalsIdDesignsNkExportsFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkExportsFkGet
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkExportsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.PortalsIdDesignsNkExportsFkGet(id, nk, fk);
            //Assert.IsInstanceOf<DesignExport> (response, "response is DesignExport");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkExportsFkPut
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkExportsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //DesignExport data = null;
            //var response = instance.PortalsIdDesignsNkExportsFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<DesignExport> (response, "response is DesignExport");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkExportsGet
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkExportsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.PortalsIdDesignsNkExportsGet(id, nk, filter);
            //Assert.IsInstanceOf<List<DesignExport>> (response, "response is List<DesignExport>");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkExportsPost
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkExportsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //DesignExport data = null;
            //var response = instance.PortalsIdDesignsNkExportsPost(id, nk, data);
            //Assert.IsInstanceOf<DesignExport> (response, "response is DesignExport");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkFolderGet
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkFolderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.PortalsIdDesignsNkFolderGet(id, nk, refresh);
            //Assert.IsInstanceOf<DesignFolder> (response, "response is DesignFolder");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkPortalGet
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkPortalGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.PortalsIdDesignsNkPortalGet(id, nk, refresh);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkRequesterGet
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkRequesterGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.PortalsIdDesignsNkRequesterGet(id, nk, refresh);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkReviewerGet
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkReviewerGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.PortalsIdDesignsNkReviewerGet(id, nk, refresh);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkTagsCountGet
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkTagsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.PortalsIdDesignsNkTagsCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkTagsDelete
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkTagsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.PortalsIdDesignsNkTagsDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkTagsFkDelete
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkTagsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.PortalsIdDesignsNkTagsFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkTagsFkGet
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkTagsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.PortalsIdDesignsNkTagsFkGet(id, nk, fk);
            //Assert.IsInstanceOf<Tag> (response, "response is Tag");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkTagsFkPut
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkTagsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //Tag data = null;
            //var response = instance.PortalsIdDesignsNkTagsFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<Tag> (response, "response is Tag");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkTagsGet
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkTagsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.PortalsIdDesignsNkTagsGet(id, nk, filter);
            //Assert.IsInstanceOf<List<Tag>> (response, "response is List<Tag>");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkTagsPost
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkTagsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //Tag data = null;
            //var response = instance.PortalsIdDesignsNkTagsPost(id, nk, data);
            //Assert.IsInstanceOf<Tag> (response, "response is Tag");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkTagsRelFkDelete
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkTagsRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.PortalsIdDesignsNkTagsRelFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkTagsRelFkHead
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkTagsRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.PortalsIdDesignsNkTagsRelFkHead(id, nk, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkTagsRelFkPut
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkTagsRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //DesignTag data = null;
            //var response = instance.PortalsIdDesignsNkTagsRelFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<DesignTag> (response, "response is DesignTag");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsNkTemplateGet
        /// </summary>
        [Test]
        public void PortalsIdDesignsNkTemplateGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.PortalsIdDesignsNkTemplateGet(id, nk, refresh);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test PortalsIdDesignsPost
        /// </summary>
        [Test]
        public void PortalsIdDesignsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Design data = null;
            //var response = instance.PortalsIdDesignsPost(id, data);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test PortalsIdExistsGet
        /// </summary>
        [Test]
        public void PortalsIdExistsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.PortalsIdExistsGet(id);
            //Assert.IsInstanceOf<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        
        /// <summary>
        /// Test PortalsIdGet
        /// </summary>
        [Test]
        public void PortalsIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.PortalsIdGet(id, filter);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test PortalsIdHead
        /// </summary>
        [Test]
        public void PortalsIdHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.PortalsIdHead(id);
            //Assert.IsInstanceOf<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        
        /// <summary>
        /// Test PortalsIdImageFoldersCountGet
        /// </summary>
        [Test]
        public void PortalsIdImageFoldersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.PortalsIdImageFoldersCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test PortalsIdImageFoldersDelete
        /// </summary>
        [Test]
        public void PortalsIdImageFoldersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.PortalsIdImageFoldersDelete(id);
            
        }
        
        /// <summary>
        /// Test PortalsIdImageFoldersFkDelete
        /// </summary>
        [Test]
        public void PortalsIdImageFoldersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.PortalsIdImageFoldersFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test PortalsIdImageFoldersFkGet
        /// </summary>
        [Test]
        public void PortalsIdImageFoldersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.PortalsIdImageFoldersFkGet(id, fk);
            //Assert.IsInstanceOf<ImageFolder> (response, "response is ImageFolder");
        }
        
        /// <summary>
        /// Test PortalsIdImageFoldersFkPut
        /// </summary>
        [Test]
        public void PortalsIdImageFoldersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //ImageFolder data = null;
            //var response = instance.PortalsIdImageFoldersFkPut(id, fk, data);
            //Assert.IsInstanceOf<ImageFolder> (response, "response is ImageFolder");
        }
        
        /// <summary>
        /// Test PortalsIdImageFoldersGet
        /// </summary>
        [Test]
        public void PortalsIdImageFoldersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.PortalsIdImageFoldersGet(id, filter);
            //Assert.IsInstanceOf<List<ImageFolder>> (response, "response is List<ImageFolder>");
        }
        
        /// <summary>
        /// Test PortalsIdImageFoldersPost
        /// </summary>
        [Test]
        public void PortalsIdImageFoldersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ImageFolder data = null;
            //var response = instance.PortalsIdImageFoldersPost(id, data);
            //Assert.IsInstanceOf<ImageFolder> (response, "response is ImageFolder");
        }
        
        /// <summary>
        /// Test PortalsIdImageFoldersRelFkDelete
        /// </summary>
        [Test]
        public void PortalsIdImageFoldersRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.PortalsIdImageFoldersRelFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test PortalsIdImageFoldersRelFkHead
        /// </summary>
        [Test]
        public void PortalsIdImageFoldersRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.PortalsIdImageFoldersRelFkHead(id, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test PortalsIdImageFoldersRelFkPut
        /// </summary>
        [Test]
        public void PortalsIdImageFoldersRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //PortalImageFolder data = null;
            //var response = instance.PortalsIdImageFoldersRelFkPut(id, fk, data);
            //Assert.IsInstanceOf<PortalImageFolder> (response, "response is PortalImageFolder");
        }
        
        /// <summary>
        /// Test PortalsIdInvitationTicketsFkDelete
        /// </summary>
        [Test]
        public void PortalsIdInvitationTicketsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string fk = null;
            //var response = instance.PortalsIdInvitationTicketsFkDelete(id, id2, fk);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test PortalsIdInvitationTicketsFkGet
        /// </summary>
        [Test]
        public void PortalsIdInvitationTicketsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string fk = null;
            //string filter = null;
            //var response = instance.PortalsIdInvitationTicketsFkGet(id, id2, fk, filter);
            //Assert.IsInstanceOf<InvitationTicket> (response, "response is InvitationTicket");
        }
        
        /// <summary>
        /// Test PortalsIdInvitationTicketsGet
        /// </summary>
        [Test]
        public void PortalsIdInvitationTicketsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string filter = null;
            //var response = instance.PortalsIdInvitationTicketsGet(id, id2, filter);
            //Assert.IsInstanceOf<List<InvitationTicket>> (response, "response is List<InvitationTicket>");
        }
        
        /// <summary>
        /// Test PortalsIdLogoPut
        /// </summary>
        [Test]
        public void PortalsIdLogoPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //Portal data = null;
            //var response = instance.PortalsIdLogoPut(id, id2, data);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test PortalsIdMembersCountGet
        /// </summary>
        [Test]
        public void PortalsIdMembersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.PortalsIdMembersCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test PortalsIdMembersDelete
        /// </summary>
        [Test]
        public void PortalsIdMembersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.PortalsIdMembersDelete(id);
            
        }
        
        /// <summary>
        /// Test PortalsIdMembersFkDelete
        /// </summary>
        [Test]
        public void PortalsIdMembersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.PortalsIdMembersFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test PortalsIdMembersFkGet
        /// </summary>
        [Test]
        public void PortalsIdMembersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.PortalsIdMembersFkGet(id, fk);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test PortalsIdMembersFkPut
        /// </summary>
        [Test]
        public void PortalsIdMembersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //TeamMember data = null;
            //var response = instance.PortalsIdMembersFkPut(id, fk, data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test PortalsIdMembersGet
        /// </summary>
        [Test]
        public void PortalsIdMembersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.PortalsIdMembersGet(id, filter);
            //Assert.IsInstanceOf<List<TeamMember>> (response, "response is List<TeamMember>");
        }
        
        /// <summary>
        /// Test PortalsIdMembersPost
        /// </summary>
        [Test]
        public void PortalsIdMembersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamMember data = null;
            //var response = instance.PortalsIdMembersPost(id, data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test PortalsIdMembersRelFkDelete
        /// </summary>
        [Test]
        public void PortalsIdMembersRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.PortalsIdMembersRelFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test PortalsIdMembersRelFkHead
        /// </summary>
        [Test]
        public void PortalsIdMembersRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.PortalsIdMembersRelFkHead(id, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test PortalsIdMembersRelFkPut
        /// </summary>
        [Test]
        public void PortalsIdMembersRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //PortalMember data = null;
            //var response = instance.PortalsIdMembersRelFkPut(id, fk, data);
            //Assert.IsInstanceOf<PortalMember> (response, "response is PortalMember");
        }
        
        /// <summary>
        /// Test PortalsIdPatch
        /// </summary>
        [Test]
        public void PortalsIdPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Portal data = null;
            //var response = instance.PortalsIdPatch(id, data);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test PortalsIdPortalMembersCountGet
        /// </summary>
        [Test]
        public void PortalsIdPortalMembersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.PortalsIdPortalMembersCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test PortalsIdPortalMembersDelete
        /// </summary>
        [Test]
        public void PortalsIdPortalMembersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.PortalsIdPortalMembersDelete(id);
            
        }
        
        /// <summary>
        /// Test PortalsIdPortalMembersFkDelete
        /// </summary>
        [Test]
        public void PortalsIdPortalMembersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.PortalsIdPortalMembersFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test PortalsIdPortalMembersFkGet
        /// </summary>
        [Test]
        public void PortalsIdPortalMembersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.PortalsIdPortalMembersFkGet(id, fk);
            //Assert.IsInstanceOf<PortalMember> (response, "response is PortalMember");
        }
        
        /// <summary>
        /// Test PortalsIdPortalMembersFkPut
        /// </summary>
        [Test]
        public void PortalsIdPortalMembersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //PortalMember data = null;
            //var response = instance.PortalsIdPortalMembersFkPut(id, fk, data);
            //Assert.IsInstanceOf<PortalMember> (response, "response is PortalMember");
        }
        
        /// <summary>
        /// Test PortalsIdPortalMembersGet
        /// </summary>
        [Test]
        public void PortalsIdPortalMembersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.PortalsIdPortalMembersGet(id, filter);
            //Assert.IsInstanceOf<List<PortalMember>> (response, "response is List<PortalMember>");
        }
        
        /// <summary>
        /// Test PortalsIdPortalMembersPost
        /// </summary>
        [Test]
        public void PortalsIdPortalMembersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //PortalMember data = null;
            //var response = instance.PortalsIdPortalMembersPost(id, data);
            //Assert.IsInstanceOf<PortalMember> (response, "response is PortalMember");
        }
        
        /// <summary>
        /// Test PortalsIdPut
        /// </summary>
        [Test]
        public void PortalsIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Portal data = null;
            //var response = instance.PortalsIdPut(id, data);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test PortalsIdReplacePost
        /// </summary>
        [Test]
        public void PortalsIdReplacePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Portal data = null;
            //var response = instance.PortalsIdReplacePost(id, data);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test PortalsIdTeamGet
        /// </summary>
        [Test]
        public void PortalsIdTeamGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? refresh = null;
            //var response = instance.PortalsIdTeamGet(id, refresh);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test PortalsIdTemplateFoldersCountGet
        /// </summary>
        [Test]
        public void PortalsIdTemplateFoldersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.PortalsIdTemplateFoldersCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test PortalsIdTemplateFoldersDelete
        /// </summary>
        [Test]
        public void PortalsIdTemplateFoldersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.PortalsIdTemplateFoldersDelete(id);
            
        }
        
        /// <summary>
        /// Test PortalsIdTemplateFoldersFkDelete
        /// </summary>
        [Test]
        public void PortalsIdTemplateFoldersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.PortalsIdTemplateFoldersFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test PortalsIdTemplateFoldersFkGet
        /// </summary>
        [Test]
        public void PortalsIdTemplateFoldersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.PortalsIdTemplateFoldersFkGet(id, fk);
            //Assert.IsInstanceOf<PortalTemplateFolder> (response, "response is PortalTemplateFolder");
        }
        
        /// <summary>
        /// Test PortalsIdTemplateFoldersFkPut
        /// </summary>
        [Test]
        public void PortalsIdTemplateFoldersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //PortalTemplateFolder data = null;
            //var response = instance.PortalsIdTemplateFoldersFkPut(id, fk, data);
            //Assert.IsInstanceOf<PortalTemplateFolder> (response, "response is PortalTemplateFolder");
        }
        
        /// <summary>
        /// Test PortalsIdTemplateFoldersGet
        /// </summary>
        [Test]
        public void PortalsIdTemplateFoldersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.PortalsIdTemplateFoldersGet(id, filter);
            //Assert.IsInstanceOf<List<PortalTemplateFolder>> (response, "response is List<PortalTemplateFolder>");
        }
        
        /// <summary>
        /// Test PortalsIdTemplateFoldersNkTemplatesFkRelDelete
        /// </summary>
        [Test]
        public void PortalsIdTemplateFoldersNkTemplatesFkRelDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.PortalsIdTemplateFoldersNkTemplatesFkRelDelete(id, id2, nk, fk);
            //Assert.IsInstanceOf<PortalTemplate> (response, "response is PortalTemplate");
        }
        
        /// <summary>
        /// Test PortalsIdTemplateFoldersNkTemplatesFkRelPut
        /// </summary>
        [Test]
        public void PortalsIdTemplateFoldersNkTemplatesFkRelPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.PortalsIdTemplateFoldersNkTemplatesFkRelPut(id, id2, nk, fk);
            //Assert.IsInstanceOf<PortalTemplate> (response, "response is PortalTemplate");
        }
        
        /// <summary>
        /// Test PortalsIdTemplateFoldersPost
        /// </summary>
        [Test]
        public void PortalsIdTemplateFoldersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //PortalTemplateFolder data = null;
            //var response = instance.PortalsIdTemplateFoldersPost(id, data);
            //Assert.IsInstanceOf<PortalTemplateFolder> (response, "response is PortalTemplateFolder");
        }
        
        /// <summary>
        /// Test PortalsIdTemplateFoldersRootTemplatesGet
        /// </summary>
        [Test]
        public void PortalsIdTemplateFoldersRootTemplatesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string filter = null;
            //var response = instance.PortalsIdTemplateFoldersRootTemplatesGet(id, id2, filter);
            //Assert.IsInstanceOf<List<PortalTemplate>> (response, "response is List<PortalTemplate>");
        }
        
        /// <summary>
        /// Test PortalsIdTemplateRelsCountGet
        /// </summary>
        [Test]
        public void PortalsIdTemplateRelsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.PortalsIdTemplateRelsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test PortalsIdTemplateRelsDelete
        /// </summary>
        [Test]
        public void PortalsIdTemplateRelsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.PortalsIdTemplateRelsDelete(id);
            
        }
        
        /// <summary>
        /// Test PortalsIdTemplateRelsFkDelete
        /// </summary>
        [Test]
        public void PortalsIdTemplateRelsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.PortalsIdTemplateRelsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test PortalsIdTemplateRelsFkGet
        /// </summary>
        [Test]
        public void PortalsIdTemplateRelsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.PortalsIdTemplateRelsFkGet(id, fk);
            //Assert.IsInstanceOf<PortalTemplate> (response, "response is PortalTemplate");
        }
        
        /// <summary>
        /// Test PortalsIdTemplateRelsFkPut
        /// </summary>
        [Test]
        public void PortalsIdTemplateRelsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //PortalTemplate data = null;
            //var response = instance.PortalsIdTemplateRelsFkPut(id, fk, data);
            //Assert.IsInstanceOf<PortalTemplate> (response, "response is PortalTemplate");
        }
        
        /// <summary>
        /// Test PortalsIdTemplateRelsGet
        /// </summary>
        [Test]
        public void PortalsIdTemplateRelsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.PortalsIdTemplateRelsGet(id, filter);
            //Assert.IsInstanceOf<List<PortalTemplate>> (response, "response is List<PortalTemplate>");
        }
        
        /// <summary>
        /// Test PortalsIdTemplateRelsPost
        /// </summary>
        [Test]
        public void PortalsIdTemplateRelsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //PortalTemplate data = null;
            //var response = instance.PortalsIdTemplateRelsPost(id, data);
            //Assert.IsInstanceOf<PortalTemplate> (response, "response is PortalTemplate");
        }
        
        /// <summary>
        /// Test PortalsIdTemplatesCountGet
        /// </summary>
        [Test]
        public void PortalsIdTemplatesCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.PortalsIdTemplatesCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test PortalsIdTemplatesDelete
        /// </summary>
        [Test]
        public void PortalsIdTemplatesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.PortalsIdTemplatesDelete(id);
            
        }
        
        /// <summary>
        /// Test PortalsIdTemplatesFkDelete
        /// </summary>
        [Test]
        public void PortalsIdTemplatesFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.PortalsIdTemplatesFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test PortalsIdTemplatesFkDesignsGenerateBulkPost
        /// </summary>
        [Test]
        public void PortalsIdTemplatesFkDesignsGenerateBulkPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string fk = null;
            //List<Object> data = null;
            //var response = instance.PortalsIdTemplatesFkDesignsGenerateBulkPost(id, id2, fk, data);
            //Assert.IsInstanceOf<List<Design>> (response, "response is List<Design>");
        }
        
        /// <summary>
        /// Test PortalsIdTemplatesFkDesignsGeneratePost
        /// </summary>
        [Test]
        public void PortalsIdTemplatesFkDesignsGeneratePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string fk = null;
            //Portal data = null;
            //var response = instance.PortalsIdTemplatesFkDesignsGeneratePost(id, id2, fk, data);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test PortalsIdTemplatesFkGet
        /// </summary>
        [Test]
        public void PortalsIdTemplatesFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.PortalsIdTemplatesFkGet(id, fk);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test PortalsIdTemplatesFkPut
        /// </summary>
        [Test]
        public void PortalsIdTemplatesFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //Template data = null;
            //var response = instance.PortalsIdTemplatesFkPut(id, fk, data);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test PortalsIdTemplatesGet
        /// </summary>
        [Test]
        public void PortalsIdTemplatesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.PortalsIdTemplatesGet(id, filter);
            //Assert.IsInstanceOf<List<Template>> (response, "response is List<Template>");
        }
        
        /// <summary>
        /// Test PortalsIdTemplatesPost
        /// </summary>
        [Test]
        public void PortalsIdTemplatesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Template data = null;
            //var response = instance.PortalsIdTemplatesPost(id, data);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test PortalsIdTemplatesRelFkDelete
        /// </summary>
        [Test]
        public void PortalsIdTemplatesRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.PortalsIdTemplatesRelFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test PortalsIdTemplatesRelFkHead
        /// </summary>
        [Test]
        public void PortalsIdTemplatesRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.PortalsIdTemplatesRelFkHead(id, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test PortalsIdTemplatesRelFkPut
        /// </summary>
        [Test]
        public void PortalsIdTemplatesRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //PortalTemplate data = null;
            //var response = instance.PortalsIdTemplatesRelFkPut(id, fk, data);
            //Assert.IsInstanceOf<PortalTemplate> (response, "response is PortalTemplate");
        }
        
        /// <summary>
        /// Test PortalsPatch
        /// </summary>
        [Test]
        public void PortalsPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Portal data = null;
            //var response = instance.PortalsPatch(data);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test PortalsPost
        /// </summary>
        [Test]
        public void PortalsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Portal data = null;
            //var response = instance.PortalsPost(data);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test PortalsPut
        /// </summary>
        [Test]
        public void PortalsPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Portal data = null;
            //var response = instance.PortalsPut(data);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test PortalsReplaceOrCreatePost
        /// </summary>
        [Test]
        public void PortalsReplaceOrCreatePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Portal data = null;
            //var response = instance.PortalsReplaceOrCreatePost(data);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test PortalsUpdatePost
        /// </summary>
        [Test]
        public void PortalsUpdatePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //Portal data = null;
            //var response = instance.PortalsUpdatePost(where, data);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test PortalsUpsertWithWherePost
        /// </summary>
        [Test]
        public void PortalsUpsertWithWherePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //Portal data = null;
            //var response = instance.PortalsUpsertWithWherePost(where, data);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
    }

}
