/* 
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.6-beta.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TweakApi.Client;
using TweakApi.Api;
using TweakApi.Model;

namespace TweakApi.Test
{
    /// <summary>
    ///  Class for testing TeamApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TeamApiTests
    {
        private TeamApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TeamApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TeamApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TeamApi
            //Assert.IsInstanceOfType(typeof(TeamApi), instance, "instance is a TeamApi");
        }

        
        /// <summary>
        /// Test TeamsChangeStreamGet
        /// </summary>
        [Test]
        public void TeamsChangeStreamGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string options = null;
            //var response = instance.TeamsChangeStreamGet(options);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test TeamsChangeStreamPost
        /// </summary>
        [Test]
        public void TeamsChangeStreamPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string options = null;
            //var response = instance.TeamsChangeStreamPost(options);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test TeamsCountGet
        /// </summary>
        [Test]
        public void TeamsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //var response = instance.TeamsCountGet(where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsFindOneGet
        /// </summary>
        [Test]
        public void TeamsFindOneGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //var response = instance.TeamsFindOneGet(filter);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test TeamsGet
        /// </summary>
        [Test]
        public void TeamsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //var response = instance.TeamsGet(filter);
            //Assert.IsInstanceOf<List<Team>> (response, "response is List<Team>");
        }
        
        /// <summary>
        /// Test TeamsIdAuthResetKeysDelete
        /// </summary>
        [Test]
        public void TeamsIdAuthResetKeysDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.TeamsIdAuthResetKeysDelete(id);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test TeamsIdBrandDelete
        /// </summary>
        [Test]
        public void TeamsIdBrandDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamsIdBrandDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamsIdBrandGet
        /// </summary>
        [Test]
        public void TeamsIdBrandGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? refresh = null;
            //var response = instance.TeamsIdBrandGet(id, refresh);
            //Assert.IsInstanceOf<TeamBrand> (response, "response is TeamBrand");
        }
        
        /// <summary>
        /// Test TeamsIdBrandPost
        /// </summary>
        [Test]
        public void TeamsIdBrandPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamBrand data = null;
            //var response = instance.TeamsIdBrandPost(id, data);
            //Assert.IsInstanceOf<TeamBrand> (response, "response is TeamBrand");
        }
        
        /// <summary>
        /// Test TeamsIdBrandPut
        /// </summary>
        [Test]
        public void TeamsIdBrandPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamBrand data = null;
            //var response = instance.TeamsIdBrandPut(id, data);
            //Assert.IsInstanceOf<TeamBrand> (response, "response is TeamBrand");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsCountGet
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamsIdBuilderConfigsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsDefaultGet
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsDefaultGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.TeamsIdBuilderConfigsDefaultGet(id);
            //Assert.IsInstanceOf<TeamBuilderConfig> (response, "response is TeamBuilderConfig");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsDelete
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamsIdBuilderConfigsDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsFkDelete
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamsIdBuilderConfigsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsFkGet
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamsIdBuilderConfigsFkGet(id, fk);
            //Assert.IsInstanceOf<TeamBuilderConfig> (response, "response is TeamBuilderConfig");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsFkLogoPut
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsFkLogoPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //Team data = null;
            //var response = instance.TeamsIdBuilderConfigsFkLogoPut(id, fk, data);
            //Assert.IsInstanceOf<TeamBuilderConfig> (response, "response is TeamBuilderConfig");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsFkPut
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //TeamBuilderConfig data = null;
            //var response = instance.TeamsIdBuilderConfigsFkPut(id, fk, data);
            //Assert.IsInstanceOf<TeamBuilderConfig> (response, "response is TeamBuilderConfig");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsFkWatermarkPut
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsFkWatermarkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //Team data = null;
            //var response = instance.TeamsIdBuilderConfigsFkWatermarkPut(id, fk, data);
            //Assert.IsInstanceOf<TeamBuilderConfig> (response, "response is TeamBuilderConfig");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsGet
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamsIdBuilderConfigsGet(id, filter);
            //Assert.IsInstanceOf<List<TeamBuilderConfig>> (response, "response is List<TeamBuilderConfig>");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkPortalsCountGet
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkPortalsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamsIdBuilderConfigsNkPortalsCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkPortalsDelete
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkPortalsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamsIdBuilderConfigsNkPortalsDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkPortalsFkDelete
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkPortalsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdBuilderConfigsNkPortalsFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkPortalsFkGet
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkPortalsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdBuilderConfigsNkPortalsFkGet(id, nk, fk);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkPortalsFkPut
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkPortalsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //Portal data = null;
            //var response = instance.TeamsIdBuilderConfigsNkPortalsFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkPortalsGet
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkPortalsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamsIdBuilderConfigsNkPortalsGet(id, nk, filter);
            //Assert.IsInstanceOf<List<Portal>> (response, "response is List<Portal>");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkPortalsPost
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkPortalsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //Portal data = null;
            //var response = instance.TeamsIdBuilderConfigsNkPortalsPost(id, nk, data);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductGroupsCountGet
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductGroupsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductGroupsCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductGroupsDelete
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductGroupsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamsIdBuilderConfigsNkProductGroupsDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductGroupsFkDelete
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductGroupsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdBuilderConfigsNkProductGroupsFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductGroupsFkGet
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductGroupsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductGroupsFkGet(id, nk, fk);
            //Assert.IsInstanceOf<ProductGroup> (response, "response is ProductGroup");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductGroupsFkPut
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductGroupsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //ProductGroup data = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductGroupsFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<ProductGroup> (response, "response is ProductGroup");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductGroupsGet
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductGroupsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductGroupsGet(id, nk, filter);
            //Assert.IsInstanceOf<List<ProductGroup>> (response, "response is List<ProductGroup>");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductGroupsPost
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductGroupsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //ProductGroup data = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductGroupsPost(id, nk, data);
            //Assert.IsInstanceOf<ProductGroup> (response, "response is ProductGroup");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductGroupsRelFkDelete
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductGroupsRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdBuilderConfigsNkProductGroupsRelFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductGroupsRelFkHead
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductGroupsRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductGroupsRelFkHead(id, nk, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductGroupsRelFkPut
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductGroupsRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //TeamBuilderConfigProductGroup data = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductGroupsRelFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<TeamBuilderConfigProductGroup> (response, "response is TeamBuilderConfigProductGroup");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductSizeMaterialsCountGet
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductSizeMaterialsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductSizeMaterialsCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductSizeMaterialsDelete
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductSizeMaterialsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamsIdBuilderConfigsNkProductSizeMaterialsDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductSizeMaterialsFkDelete
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductSizeMaterialsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdBuilderConfigsNkProductSizeMaterialsFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductSizeMaterialsFkGet
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductSizeMaterialsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductSizeMaterialsFkGet(id, nk, fk);
            //Assert.IsInstanceOf<ProductSizeMaterial> (response, "response is ProductSizeMaterial");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductSizeMaterialsFkPut
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductSizeMaterialsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //ProductSizeMaterial data = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductSizeMaterialsFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<ProductSizeMaterial> (response, "response is ProductSizeMaterial");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductSizeMaterialsGet
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductSizeMaterialsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductSizeMaterialsGet(id, nk, filter);
            //Assert.IsInstanceOf<List<ProductSizeMaterial>> (response, "response is List<ProductSizeMaterial>");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductSizeMaterialsPost
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductSizeMaterialsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //ProductSizeMaterial data = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductSizeMaterialsPost(id, nk, data);
            //Assert.IsInstanceOf<ProductSizeMaterial> (response, "response is ProductSizeMaterial");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductSizeMaterialsRelCountGet
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductSizeMaterialsRelCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductSizeMaterialsRelCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductSizeMaterialsRelDelete
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductSizeMaterialsRelDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamsIdBuilderConfigsNkProductSizeMaterialsRelDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductSizeMaterialsRelFkDelete
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductSizeMaterialsRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdBuilderConfigsNkProductSizeMaterialsRelFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductSizeMaterialsRelFkDelete_0
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductSizeMaterialsRelFkDelete_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdBuilderConfigsNkProductSizeMaterialsRelFkDelete_0(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductSizeMaterialsRelFkGet
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductSizeMaterialsRelFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductSizeMaterialsRelFkGet(id, nk, fk);
            //Assert.IsInstanceOf<TeamBuilderConfigProductSizeMaterial> (response, "response is TeamBuilderConfigProductSizeMaterial");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductSizeMaterialsRelFkHead
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductSizeMaterialsRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductSizeMaterialsRelFkHead(id, nk, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductSizeMaterialsRelFkPut
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductSizeMaterialsRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //TeamBuilderConfigProductSizeMaterial data = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductSizeMaterialsRelFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<TeamBuilderConfigProductSizeMaterial> (response, "response is TeamBuilderConfigProductSizeMaterial");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductSizeMaterialsRelFkPut_0
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductSizeMaterialsRelFkPut_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //TeamBuilderConfigProductSizeMaterial data = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductSizeMaterialsRelFkPut_0(id, nk, fk, data);
            //Assert.IsInstanceOf<TeamBuilderConfigProductSizeMaterial> (response, "response is TeamBuilderConfigProductSizeMaterial");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductSizeMaterialsRelGet
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductSizeMaterialsRelGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductSizeMaterialsRelGet(id, nk, filter);
            //Assert.IsInstanceOf<List<TeamBuilderConfigProductSizeMaterial>> (response, "response is List<TeamBuilderConfigProductSizeMaterial>");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductSizeMaterialsRelPost
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductSizeMaterialsRelPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //TeamBuilderConfigProductSizeMaterial data = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductSizeMaterialsRelPost(id, nk, data);
            //Assert.IsInstanceOf<TeamBuilderConfigProductSizeMaterial> (response, "response is TeamBuilderConfigProductSizeMaterial");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductSizesCountGet
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductSizesCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductSizesCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductSizesDelete
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductSizesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamsIdBuilderConfigsNkProductSizesDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductSizesFkDelete
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductSizesFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdBuilderConfigsNkProductSizesFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductSizesFkGet
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductSizesFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductSizesFkGet(id, nk, fk);
            //Assert.IsInstanceOf<ProductSize> (response, "response is ProductSize");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductSizesFkPut
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductSizesFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //ProductSize data = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductSizesFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<ProductSize> (response, "response is ProductSize");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductSizesGet
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductSizesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductSizesGet(id, nk, filter);
            //Assert.IsInstanceOf<List<ProductSize>> (response, "response is List<ProductSize>");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductSizesPost
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductSizesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //ProductSize data = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductSizesPost(id, nk, data);
            //Assert.IsInstanceOf<ProductSize> (response, "response is ProductSize");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductSizesRelFkDelete
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductSizesRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdBuilderConfigsNkProductSizesRelFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductSizesRelFkHead
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductSizesRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductSizesRelFkHead(id, nk, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductSizesRelFkPut
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductSizesRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //TeamBuilderConfigProductSize data = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductSizesRelFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<TeamBuilderConfigProductSize> (response, "response is TeamBuilderConfigProductSize");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductTypesCountGet
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductTypesCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductTypesCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductTypesDelete
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductTypesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamsIdBuilderConfigsNkProductTypesDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductTypesFkDelete
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductTypesFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdBuilderConfigsNkProductTypesFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductTypesFkGet
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductTypesFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductTypesFkGet(id, nk, fk);
            //Assert.IsInstanceOf<ProductType> (response, "response is ProductType");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductTypesFkPut
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductTypesFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //ProductType data = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductTypesFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<ProductType> (response, "response is ProductType");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductTypesGet
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductTypesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductTypesGet(id, nk, filter);
            //Assert.IsInstanceOf<List<ProductType>> (response, "response is List<ProductType>");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductTypesPost
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductTypesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //ProductType data = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductTypesPost(id, nk, data);
            //Assert.IsInstanceOf<ProductType> (response, "response is ProductType");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductTypesRelFkDelete
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductTypesRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdBuilderConfigsNkProductTypesRelFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductTypesRelFkHead
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductTypesRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductTypesRelFkHead(id, nk, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkProductTypesRelFkPut
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkProductTypesRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //TeamBuilderConfigProductType data = null;
            //var response = instance.TeamsIdBuilderConfigsNkProductTypesRelFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<TeamBuilderConfigProductType> (response, "response is TeamBuilderConfigProductType");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsNkTeamGet
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsNkTeamGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.TeamsIdBuilderConfigsNkTeamGet(id, nk, refresh);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test TeamsIdBuilderConfigsPost
        /// </summary>
        [Test]
        public void TeamsIdBuilderConfigsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamBuilderConfig data = null;
            //var response = instance.TeamsIdBuilderConfigsPost(id, data);
            //Assert.IsInstanceOf<TeamBuilderConfig> (response, "response is TeamBuilderConfig");
        }
        
        /// <summary>
        /// Test TeamsIdDataSourcesCountGet
        /// </summary>
        [Test]
        public void TeamsIdDataSourcesCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamsIdDataSourcesCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdDataSourcesDelete
        /// </summary>
        [Test]
        public void TeamsIdDataSourcesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamsIdDataSourcesDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamsIdDataSourcesFkDelete
        /// </summary>
        [Test]
        public void TeamsIdDataSourcesFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamsIdDataSourcesFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdDataSourcesFkGet
        /// </summary>
        [Test]
        public void TeamsIdDataSourcesFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamsIdDataSourcesFkGet(id, fk);
            //Assert.IsInstanceOf<DataSource> (response, "response is DataSource");
        }
        
        /// <summary>
        /// Test TeamsIdDataSourcesFkPut
        /// </summary>
        [Test]
        public void TeamsIdDataSourcesFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //DataSource data = null;
            //var response = instance.TeamsIdDataSourcesFkPut(id, fk, data);
            //Assert.IsInstanceOf<DataSource> (response, "response is DataSource");
        }
        
        /// <summary>
        /// Test TeamsIdDataSourcesGet
        /// </summary>
        [Test]
        public void TeamsIdDataSourcesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamsIdDataSourcesGet(id, filter);
            //Assert.IsInstanceOf<List<DataSource>> (response, "response is List<DataSource>");
        }
        
        /// <summary>
        /// Test TeamsIdDataSourcesPost
        /// </summary>
        [Test]
        public void TeamsIdDataSourcesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DataSource data = null;
            //var response = instance.TeamsIdDataSourcesPost(id, data);
            //Assert.IsInstanceOf<DataSource> (response, "response is DataSource");
        }
        
        /// <summary>
        /// Test TeamsIdDelete
        /// </summary>
        [Test]
        public void TeamsIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.TeamsIdDelete(id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TeamsIdDynamicDatasCountGet
        /// </summary>
        [Test]
        public void TeamsIdDynamicDatasCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamsIdDynamicDatasCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdDynamicDatasDelete
        /// </summary>
        [Test]
        public void TeamsIdDynamicDatasDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamsIdDynamicDatasDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamsIdDynamicDatasFkDelete
        /// </summary>
        [Test]
        public void TeamsIdDynamicDatasFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamsIdDynamicDatasFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdDynamicDatasFkGet
        /// </summary>
        [Test]
        public void TeamsIdDynamicDatasFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamsIdDynamicDatasFkGet(id, fk);
            //Assert.IsInstanceOf<DynamicData> (response, "response is DynamicData");
        }
        
        /// <summary>
        /// Test TeamsIdDynamicDatasFkPut
        /// </summary>
        [Test]
        public void TeamsIdDynamicDatasFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //DynamicData data = null;
            //var response = instance.TeamsIdDynamicDatasFkPut(id, fk, data);
            //Assert.IsInstanceOf<DynamicData> (response, "response is DynamicData");
        }
        
        /// <summary>
        /// Test TeamsIdDynamicDatasGet
        /// </summary>
        [Test]
        public void TeamsIdDynamicDatasGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamsIdDynamicDatasGet(id, filter);
            //Assert.IsInstanceOf<List<DynamicData>> (response, "response is List<DynamicData>");
        }
        
        /// <summary>
        /// Test TeamsIdDynamicDatasNkDesignsCountGet
        /// </summary>
        [Test]
        public void TeamsIdDynamicDatasNkDesignsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamsIdDynamicDatasNkDesignsCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdDynamicDatasNkDesignsDelete
        /// </summary>
        [Test]
        public void TeamsIdDynamicDatasNkDesignsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamsIdDynamicDatasNkDesignsDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamsIdDynamicDatasNkDesignsFkDelete
        /// </summary>
        [Test]
        public void TeamsIdDynamicDatasNkDesignsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdDynamicDatasNkDesignsFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdDynamicDatasNkDesignsFkGet
        /// </summary>
        [Test]
        public void TeamsIdDynamicDatasNkDesignsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdDynamicDatasNkDesignsFkGet(id, nk, fk);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TeamsIdDynamicDatasNkDesignsFkPut
        /// </summary>
        [Test]
        public void TeamsIdDynamicDatasNkDesignsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //Design data = null;
            //var response = instance.TeamsIdDynamicDatasNkDesignsFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TeamsIdDynamicDatasNkDesignsGet
        /// </summary>
        [Test]
        public void TeamsIdDynamicDatasNkDesignsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamsIdDynamicDatasNkDesignsGet(id, nk, filter);
            //Assert.IsInstanceOf<List<Design>> (response, "response is List<Design>");
        }
        
        /// <summary>
        /// Test TeamsIdDynamicDatasNkDesignsPost
        /// </summary>
        [Test]
        public void TeamsIdDynamicDatasNkDesignsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //Design data = null;
            //var response = instance.TeamsIdDynamicDatasNkDesignsPost(id, nk, data);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TeamsIdDynamicDatasNkRecordsCountGet
        /// </summary>
        [Test]
        public void TeamsIdDynamicDatasNkRecordsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamsIdDynamicDatasNkRecordsCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdDynamicDatasNkRecordsDelete
        /// </summary>
        [Test]
        public void TeamsIdDynamicDatasNkRecordsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamsIdDynamicDatasNkRecordsDelete(id, nk, where);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TeamsIdDynamicDatasNkRecordsFkDelete
        /// </summary>
        [Test]
        public void TeamsIdDynamicDatasNkRecordsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdDynamicDatasNkRecordsFkDelete(id, nk, fk);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TeamsIdDynamicDatasNkRecordsFkGet
        /// </summary>
        [Test]
        public void TeamsIdDynamicDatasNkRecordsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //string filter = null;
            //var response = instance.TeamsIdDynamicDatasNkRecordsFkGet(id, nk, fk, filter);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TeamsIdDynamicDatasNkRecordsFkPropertyNameUploadPut
        /// </summary>
        [Test]
        public void TeamsIdDynamicDatasNkRecordsFkPropertyNameUploadPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //string propertyName = null;
            //Team data = null;
            //var response = instance.TeamsIdDynamicDatasNkRecordsFkPropertyNameUploadPut(id, nk, fk, propertyName, data);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TeamsIdDynamicDatasNkRecordsFkPut
        /// </summary>
        [Test]
        public void TeamsIdDynamicDatasNkRecordsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //Team data = null;
            //var response = instance.TeamsIdDynamicDatasNkRecordsFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TeamsIdDynamicDatasNkRecordsGet
        /// </summary>
        [Test]
        public void TeamsIdDynamicDatasNkRecordsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamsIdDynamicDatasNkRecordsGet(id, nk, filter);
            //Assert.IsInstanceOf<List<Object>> (response, "response is List<Object>");
        }
        
        /// <summary>
        /// Test TeamsIdDynamicDatasNkRecordsMigratePost
        /// </summary>
        [Test]
        public void TeamsIdDynamicDatasNkRecordsMigratePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //Team data = null;
            //var response = instance.TeamsIdDynamicDatasNkRecordsMigratePost(id, nk, data);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TeamsIdDynamicDatasNkRecordsPost
        /// </summary>
        [Test]
        public void TeamsIdDynamicDatasNkRecordsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //Team data = null;
            //var response = instance.TeamsIdDynamicDatasNkRecordsPost(id, nk, data);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TeamsIdDynamicDatasNkRecordsUploadCsvPost
        /// </summary>
        [Test]
        public void TeamsIdDynamicDatasNkRecordsUploadCsvPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //var response = instance.TeamsIdDynamicDatasNkRecordsUploadCsvPost(id, nk);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TeamsIdDynamicDatasNkTeamGet
        /// </summary>
        [Test]
        public void TeamsIdDynamicDatasNkTeamGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.TeamsIdDynamicDatasNkTeamGet(id, nk, refresh);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test TeamsIdDynamicDatasPost
        /// </summary>
        [Test]
        public void TeamsIdDynamicDatasPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DynamicData data = null;
            //var response = instance.TeamsIdDynamicDatasPost(id, data);
            //Assert.IsInstanceOf<DynamicData> (response, "response is DynamicData");
        }
        
        /// <summary>
        /// Test TeamsIdExistsGet
        /// </summary>
        [Test]
        public void TeamsIdExistsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.TeamsIdExistsGet(id);
            //Assert.IsInstanceOf<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        
        /// <summary>
        /// Test TeamsIdGet
        /// </summary>
        [Test]
        public void TeamsIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamsIdGet(id, filter);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test TeamsIdHead
        /// </summary>
        [Test]
        public void TeamsIdHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.TeamsIdHead(id);
            //Assert.IsInstanceOf<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersCountGet
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamsIdImageFoldersCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersDelete
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamsIdImageFoldersDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersFkDelete
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamsIdImageFoldersFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersFkGet
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamsIdImageFoldersFkGet(id, fk);
            //Assert.IsInstanceOf<ImageFolder> (response, "response is ImageFolder");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersFkPut
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //ImageFolder data = null;
            //var response = instance.TeamsIdImageFoldersFkPut(id, fk, data);
            //Assert.IsInstanceOf<ImageFolder> (response, "response is ImageFolder");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersGet
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamsIdImageFoldersGet(id, filter);
            //Assert.IsInstanceOf<List<ImageFolder>> (response, "response is List<ImageFolder>");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkChildrenCountGet
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkChildrenCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamsIdImageFoldersNkChildrenCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkChildrenDelete
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkChildrenDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamsIdImageFoldersNkChildrenDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkChildrenFkDelete
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkChildrenFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdImageFoldersNkChildrenFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkChildrenFkGet
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkChildrenFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdImageFoldersNkChildrenFkGet(id, nk, fk);
            //Assert.IsInstanceOf<ImageFolder> (response, "response is ImageFolder");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkChildrenFkPut
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkChildrenFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //ImageFolder data = null;
            //var response = instance.TeamsIdImageFoldersNkChildrenFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<ImageFolder> (response, "response is ImageFolder");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkChildrenGet
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkChildrenGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamsIdImageFoldersNkChildrenGet(id, nk, filter);
            //Assert.IsInstanceOf<List<ImageFolder>> (response, "response is List<ImageFolder>");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkChildrenPost
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkChildrenPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //ImageFolder data = null;
            //var response = instance.TeamsIdImageFoldersNkChildrenPost(id, nk, data);
            //Assert.IsInstanceOf<ImageFolder> (response, "response is ImageFolder");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkFolderMembersCountGet
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkFolderMembersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamsIdImageFoldersNkFolderMembersCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkFolderMembersDelete
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkFolderMembersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamsIdImageFoldersNkFolderMembersDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkFolderMembersFkDelete
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkFolderMembersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdImageFoldersNkFolderMembersFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkFolderMembersFkGet
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkFolderMembersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdImageFoldersNkFolderMembersFkGet(id, nk, fk);
            //Assert.IsInstanceOf<ImageFolderMember> (response, "response is ImageFolderMember");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkFolderMembersFkPut
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkFolderMembersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //ImageFolderMember data = null;
            //var response = instance.TeamsIdImageFoldersNkFolderMembersFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<ImageFolderMember> (response, "response is ImageFolderMember");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkFolderMembersGet
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkFolderMembersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamsIdImageFoldersNkFolderMembersGet(id, nk, filter);
            //Assert.IsInstanceOf<List<ImageFolderMember>> (response, "response is List<ImageFolderMember>");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkFolderMembersPost
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkFolderMembersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //ImageFolderMember data = null;
            //var response = instance.TeamsIdImageFoldersNkFolderMembersPost(id, nk, data);
            //Assert.IsInstanceOf<ImageFolderMember> (response, "response is ImageFolderMember");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkImagesCountGet
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkImagesCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamsIdImageFoldersNkImagesCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkImagesDelete
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkImagesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamsIdImageFoldersNkImagesDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkImagesFkDelete
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkImagesFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdImageFoldersNkImagesFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkImagesFkGet
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkImagesFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdImageFoldersNkImagesFkGet(id, nk, fk);
            //Assert.IsInstanceOf<Image> (response, "response is Image");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkImagesFkPut
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkImagesFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //Image data = null;
            //var response = instance.TeamsIdImageFoldersNkImagesFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<Image> (response, "response is Image");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkImagesGet
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkImagesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamsIdImageFoldersNkImagesGet(id, nk, filter);
            //Assert.IsInstanceOf<List<Image>> (response, "response is List<Image>");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkImagesPost
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkImagesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //Image data = null;
            //var response = instance.TeamsIdImageFoldersNkImagesPost(id, nk, data);
            //Assert.IsInstanceOf<Image> (response, "response is Image");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkMembersCountGet
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkMembersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamsIdImageFoldersNkMembersCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkMembersDelete
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkMembersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamsIdImageFoldersNkMembersDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkMembersFkDelete
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkMembersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdImageFoldersNkMembersFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkMembersFkGet
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkMembersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdImageFoldersNkMembersFkGet(id, nk, fk);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkMembersFkPut
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkMembersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //TeamMember data = null;
            //var response = instance.TeamsIdImageFoldersNkMembersFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkMembersGet
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkMembersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamsIdImageFoldersNkMembersGet(id, nk, filter);
            //Assert.IsInstanceOf<List<TeamMember>> (response, "response is List<TeamMember>");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkMembersPost
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkMembersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //TeamMember data = null;
            //var response = instance.TeamsIdImageFoldersNkMembersPost(id, nk, data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkMembersRelFkDelete
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkMembersRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdImageFoldersNkMembersRelFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkMembersRelFkHead
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkMembersRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdImageFoldersNkMembersRelFkHead(id, nk, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkMembersRelFkPut
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkMembersRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //ImageFolderMember data = null;
            //var response = instance.TeamsIdImageFoldersNkMembersRelFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<ImageFolderMember> (response, "response is ImageFolderMember");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkParentGet
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkParentGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.TeamsIdImageFoldersNkParentGet(id, nk, refresh);
            //Assert.IsInstanceOf<ImageFolder> (response, "response is ImageFolder");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkPortalsCountGet
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkPortalsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamsIdImageFoldersNkPortalsCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkPortalsDelete
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkPortalsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamsIdImageFoldersNkPortalsDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkPortalsFkDelete
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkPortalsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdImageFoldersNkPortalsFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkPortalsFkGet
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkPortalsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdImageFoldersNkPortalsFkGet(id, nk, fk);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkPortalsFkPut
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkPortalsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //Portal data = null;
            //var response = instance.TeamsIdImageFoldersNkPortalsFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkPortalsGet
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkPortalsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamsIdImageFoldersNkPortalsGet(id, nk, filter);
            //Assert.IsInstanceOf<List<Portal>> (response, "response is List<Portal>");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkPortalsPost
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkPortalsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //Portal data = null;
            //var response = instance.TeamsIdImageFoldersNkPortalsPost(id, nk, data);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkPortalsRelFkDelete
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkPortalsRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdImageFoldersNkPortalsRelFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkPortalsRelFkHead
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkPortalsRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdImageFoldersNkPortalsRelFkHead(id, nk, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkPortalsRelFkPut
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkPortalsRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //PortalImageFolder data = null;
            //var response = instance.TeamsIdImageFoldersNkPortalsRelFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<PortalImageFolder> (response, "response is PortalImageFolder");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersNkTeamGet
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersNkTeamGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.TeamsIdImageFoldersNkTeamGet(id, nk, refresh);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test TeamsIdImageFoldersPost
        /// </summary>
        [Test]
        public void TeamsIdImageFoldersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ImageFolder data = null;
            //var response = instance.TeamsIdImageFoldersPost(id, data);
            //Assert.IsInstanceOf<ImageFolder> (response, "response is ImageFolder");
        }
        
        /// <summary>
        /// Test TeamsIdImagesCountGet
        /// </summary>
        [Test]
        public void TeamsIdImagesCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamsIdImagesCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdImagesDelete
        /// </summary>
        [Test]
        public void TeamsIdImagesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamsIdImagesDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamsIdImagesFkDelete
        /// </summary>
        [Test]
        public void TeamsIdImagesFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamsIdImagesFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdImagesFkGet
        /// </summary>
        [Test]
        public void TeamsIdImagesFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamsIdImagesFkGet(id, fk);
            //Assert.IsInstanceOf<Image> (response, "response is Image");
        }
        
        /// <summary>
        /// Test TeamsIdImagesFkPut
        /// </summary>
        [Test]
        public void TeamsIdImagesFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //Image data = null;
            //var response = instance.TeamsIdImagesFkPut(id, fk, data);
            //Assert.IsInstanceOf<Image> (response, "response is Image");
        }
        
        /// <summary>
        /// Test TeamsIdImagesGet
        /// </summary>
        [Test]
        public void TeamsIdImagesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamsIdImagesGet(id, filter);
            //Assert.IsInstanceOf<List<Image>> (response, "response is List<Image>");
        }
        
        /// <summary>
        /// Test TeamsIdImagesNkFolderGet
        /// </summary>
        [Test]
        public void TeamsIdImagesNkFolderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.TeamsIdImagesNkFolderGet(id, nk, refresh);
            //Assert.IsInstanceOf<ImageFolder> (response, "response is ImageFolder");
        }
        
        /// <summary>
        /// Test TeamsIdImagesNkTeamGet
        /// </summary>
        [Test]
        public void TeamsIdImagesNkTeamGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.TeamsIdImagesNkTeamGet(id, nk, refresh);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test TeamsIdImagesPost
        /// </summary>
        [Test]
        public void TeamsIdImagesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Image data = null;
            //var response = instance.TeamsIdImagesPost(id, data);
            //Assert.IsInstanceOf<Image> (response, "response is Image");
        }
        
        /// <summary>
        /// Test TeamsIdInvitationTicketsFkDelete
        /// </summary>
        [Test]
        public void TeamsIdInvitationTicketsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string fk = null;
            //var response = instance.TeamsIdInvitationTicketsFkDelete(id, id2, fk);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TeamsIdInvitationTicketsFkGet
        /// </summary>
        [Test]
        public void TeamsIdInvitationTicketsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string fk = null;
            //string filter = null;
            //var response = instance.TeamsIdInvitationTicketsFkGet(id, id2, fk, filter);
            //Assert.IsInstanceOf<InvitationTicket> (response, "response is InvitationTicket");
        }
        
        /// <summary>
        /// Test TeamsIdInvitationTicketsGet
        /// </summary>
        [Test]
        public void TeamsIdInvitationTicketsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string filter = null;
            //var response = instance.TeamsIdInvitationTicketsGet(id, id2, filter);
            //Assert.IsInstanceOf<List<InvitationTicket>> (response, "response is List<InvitationTicket>");
        }
        
        /// <summary>
        /// Test TeamsIdLogoPut
        /// </summary>
        [Test]
        public void TeamsIdLogoPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //Team data = null;
            //var response = instance.TeamsIdLogoPut(id, id2, data);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test TeamsIdMembersCountGet
        /// </summary>
        [Test]
        public void TeamsIdMembersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamsIdMembersCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdMembersDelete
        /// </summary>
        [Test]
        public void TeamsIdMembersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamsIdMembersDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamsIdMembersFkDelete
        /// </summary>
        [Test]
        public void TeamsIdMembersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamsIdMembersFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdMembersFkGet
        /// </summary>
        [Test]
        public void TeamsIdMembersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamsIdMembersFkGet(id, fk);
            //Assert.IsInstanceOf<Customer> (response, "response is Customer");
        }
        
        /// <summary>
        /// Test TeamsIdMembersFkPut
        /// </summary>
        [Test]
        public void TeamsIdMembersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //Customer data = null;
            //var response = instance.TeamsIdMembersFkPut(id, fk, data);
            //Assert.IsInstanceOf<Customer> (response, "response is Customer");
        }
        
        /// <summary>
        /// Test TeamsIdMembersGet
        /// </summary>
        [Test]
        public void TeamsIdMembersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamsIdMembersGet(id, filter);
            //Assert.IsInstanceOf<List<Customer>> (response, "response is List<Customer>");
        }
        
        /// <summary>
        /// Test TeamsIdMembersPost
        /// </summary>
        [Test]
        public void TeamsIdMembersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Customer data = null;
            //var response = instance.TeamsIdMembersPost(id, data);
            //Assert.IsInstanceOf<Customer> (response, "response is Customer");
        }
        
        /// <summary>
        /// Test TeamsIdMembersRelFkDelete
        /// </summary>
        [Test]
        public void TeamsIdMembersRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamsIdMembersRelFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdMembersRelFkHead
        /// </summary>
        [Test]
        public void TeamsIdMembersRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamsIdMembersRelFkHead(id, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test TeamsIdMembersRelFkPut
        /// </summary>
        [Test]
        public void TeamsIdMembersRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //TeamMember data = null;
            //var response = instance.TeamsIdMembersRelFkPut(id, fk, data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TeamsIdPatch
        /// </summary>
        [Test]
        public void TeamsIdPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Team data = null;
            //var response = instance.TeamsIdPatch(id, data);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test TeamsIdPermissionDelete
        /// </summary>
        [Test]
        public void TeamsIdPermissionDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamsIdPermissionDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamsIdPermissionGet
        /// </summary>
        [Test]
        public void TeamsIdPermissionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? refresh = null;
            //var response = instance.TeamsIdPermissionGet(id, refresh);
            //Assert.IsInstanceOf<TeamPermissionSet> (response, "response is TeamPermissionSet");
        }
        
        /// <summary>
        /// Test TeamsIdPermissionPost
        /// </summary>
        [Test]
        public void TeamsIdPermissionPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamPermissionSet data = null;
            //var response = instance.TeamsIdPermissionPost(id, data);
            //Assert.IsInstanceOf<TeamPermissionSet> (response, "response is TeamPermissionSet");
        }
        
        /// <summary>
        /// Test TeamsIdPermissionPut
        /// </summary>
        [Test]
        public void TeamsIdPermissionPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamPermissionSet data = null;
            //var response = instance.TeamsIdPermissionPut(id, data);
            //Assert.IsInstanceOf<TeamPermissionSet> (response, "response is TeamPermissionSet");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsCountGet
        /// </summary>
        [Test]
        public void TeamsIdPortalsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamsIdPortalsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsDelete
        /// </summary>
        [Test]
        public void TeamsIdPortalsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamsIdPortalsDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamsIdPortalsFkDelete
        /// </summary>
        [Test]
        public void TeamsIdPortalsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamsIdPortalsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdPortalsFkGet
        /// </summary>
        [Test]
        public void TeamsIdPortalsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamsIdPortalsFkGet(id, fk);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsFkPut
        /// </summary>
        [Test]
        public void TeamsIdPortalsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //Portal data = null;
            //var response = instance.TeamsIdPortalsFkPut(id, fk, data);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsGet
        /// </summary>
        [Test]
        public void TeamsIdPortalsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamsIdPortalsGet(id, filter);
            //Assert.IsInstanceOf<List<Portal>> (response, "response is List<Portal>");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkDefaultBuilderConfigGet
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkDefaultBuilderConfigGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.TeamsIdPortalsNkDefaultBuilderConfigGet(id, nk, refresh);
            //Assert.IsInstanceOf<TeamBuilderConfig> (response, "response is TeamBuilderConfig");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkDesignFoldersCountGet
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkDesignFoldersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamsIdPortalsNkDesignFoldersCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkDesignFoldersDelete
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkDesignFoldersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamsIdPortalsNkDesignFoldersDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkDesignFoldersFkDelete
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkDesignFoldersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdPortalsNkDesignFoldersFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkDesignFoldersFkGet
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkDesignFoldersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdPortalsNkDesignFoldersFkGet(id, nk, fk);
            //Assert.IsInstanceOf<DesignFolder> (response, "response is DesignFolder");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkDesignFoldersFkPut
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkDesignFoldersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //DesignFolder data = null;
            //var response = instance.TeamsIdPortalsNkDesignFoldersFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<DesignFolder> (response, "response is DesignFolder");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkDesignFoldersGet
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkDesignFoldersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamsIdPortalsNkDesignFoldersGet(id, nk, filter);
            //Assert.IsInstanceOf<List<DesignFolder>> (response, "response is List<DesignFolder>");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkDesignFoldersPost
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkDesignFoldersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //DesignFolder data = null;
            //var response = instance.TeamsIdPortalsNkDesignFoldersPost(id, nk, data);
            //Assert.IsInstanceOf<DesignFolder> (response, "response is DesignFolder");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkDesignsCountGet
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkDesignsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamsIdPortalsNkDesignsCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkDesignsDelete
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkDesignsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamsIdPortalsNkDesignsDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkDesignsFkDelete
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkDesignsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdPortalsNkDesignsFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkDesignsFkGet
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkDesignsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdPortalsNkDesignsFkGet(id, nk, fk);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkDesignsFkPut
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkDesignsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //Design data = null;
            //var response = instance.TeamsIdPortalsNkDesignsFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkDesignsGet
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkDesignsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamsIdPortalsNkDesignsGet(id, nk, filter);
            //Assert.IsInstanceOf<List<Design>> (response, "response is List<Design>");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkDesignsPost
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkDesignsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //Design data = null;
            //var response = instance.TeamsIdPortalsNkDesignsPost(id, nk, data);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkImageFoldersCountGet
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkImageFoldersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamsIdPortalsNkImageFoldersCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkImageFoldersDelete
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkImageFoldersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamsIdPortalsNkImageFoldersDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkImageFoldersFkDelete
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkImageFoldersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdPortalsNkImageFoldersFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkImageFoldersFkGet
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkImageFoldersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdPortalsNkImageFoldersFkGet(id, nk, fk);
            //Assert.IsInstanceOf<ImageFolder> (response, "response is ImageFolder");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkImageFoldersFkPut
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkImageFoldersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //ImageFolder data = null;
            //var response = instance.TeamsIdPortalsNkImageFoldersFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<ImageFolder> (response, "response is ImageFolder");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkImageFoldersGet
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkImageFoldersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamsIdPortalsNkImageFoldersGet(id, nk, filter);
            //Assert.IsInstanceOf<List<ImageFolder>> (response, "response is List<ImageFolder>");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkImageFoldersPost
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkImageFoldersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //ImageFolder data = null;
            //var response = instance.TeamsIdPortalsNkImageFoldersPost(id, nk, data);
            //Assert.IsInstanceOf<ImageFolder> (response, "response is ImageFolder");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkImageFoldersRelFkDelete
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkImageFoldersRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdPortalsNkImageFoldersRelFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkImageFoldersRelFkHead
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkImageFoldersRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdPortalsNkImageFoldersRelFkHead(id, nk, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkImageFoldersRelFkPut
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkImageFoldersRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //PortalImageFolder data = null;
            //var response = instance.TeamsIdPortalsNkImageFoldersRelFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<PortalImageFolder> (response, "response is PortalImageFolder");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkMembersCountGet
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkMembersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamsIdPortalsNkMembersCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkMembersDelete
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkMembersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamsIdPortalsNkMembersDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkMembersFkDelete
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkMembersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdPortalsNkMembersFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkMembersFkGet
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkMembersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdPortalsNkMembersFkGet(id, nk, fk);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkMembersFkPut
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkMembersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //TeamMember data = null;
            //var response = instance.TeamsIdPortalsNkMembersFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkMembersGet
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkMembersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamsIdPortalsNkMembersGet(id, nk, filter);
            //Assert.IsInstanceOf<List<TeamMember>> (response, "response is List<TeamMember>");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkMembersPost
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkMembersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //TeamMember data = null;
            //var response = instance.TeamsIdPortalsNkMembersPost(id, nk, data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkMembersRelFkDelete
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkMembersRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdPortalsNkMembersRelFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkMembersRelFkHead
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkMembersRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdPortalsNkMembersRelFkHead(id, nk, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkMembersRelFkPut
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkMembersRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //PortalMember data = null;
            //var response = instance.TeamsIdPortalsNkMembersRelFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<PortalMember> (response, "response is PortalMember");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkPermissionDelete
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkPermissionDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamsIdPortalsNkPermissionDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkPermissionGet
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkPermissionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.TeamsIdPortalsNkPermissionGet(id, nk, refresh);
            //Assert.IsInstanceOf<PortalPermissionSet> (response, "response is PortalPermissionSet");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkPermissionPost
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkPermissionPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //PortalPermissionSet data = null;
            //var response = instance.TeamsIdPortalsNkPermissionPost(id, nk, data);
            //Assert.IsInstanceOf<PortalPermissionSet> (response, "response is PortalPermissionSet");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkPermissionPut
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkPermissionPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //PortalPermissionSet data = null;
            //var response = instance.TeamsIdPortalsNkPermissionPut(id, nk, data);
            //Assert.IsInstanceOf<PortalPermissionSet> (response, "response is PortalPermissionSet");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkPortalMembersCountGet
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkPortalMembersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamsIdPortalsNkPortalMembersCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkPortalMembersDelete
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkPortalMembersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamsIdPortalsNkPortalMembersDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkPortalMembersFkDelete
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkPortalMembersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdPortalsNkPortalMembersFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkPortalMembersFkGet
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkPortalMembersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdPortalsNkPortalMembersFkGet(id, nk, fk);
            //Assert.IsInstanceOf<PortalMember> (response, "response is PortalMember");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkPortalMembersFkPut
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkPortalMembersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //PortalMember data = null;
            //var response = instance.TeamsIdPortalsNkPortalMembersFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<PortalMember> (response, "response is PortalMember");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkPortalMembersGet
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkPortalMembersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamsIdPortalsNkPortalMembersGet(id, nk, filter);
            //Assert.IsInstanceOf<List<PortalMember>> (response, "response is List<PortalMember>");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkPortalMembersPost
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkPortalMembersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //PortalMember data = null;
            //var response = instance.TeamsIdPortalsNkPortalMembersPost(id, nk, data);
            //Assert.IsInstanceOf<PortalMember> (response, "response is PortalMember");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkTeamGet
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkTeamGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.TeamsIdPortalsNkTeamGet(id, nk, refresh);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkTemplateFoldersCountGet
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkTemplateFoldersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamsIdPortalsNkTemplateFoldersCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkTemplateFoldersDelete
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkTemplateFoldersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamsIdPortalsNkTemplateFoldersDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkTemplateFoldersFkDelete
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkTemplateFoldersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdPortalsNkTemplateFoldersFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkTemplateFoldersFkGet
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkTemplateFoldersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdPortalsNkTemplateFoldersFkGet(id, nk, fk);
            //Assert.IsInstanceOf<PortalTemplateFolder> (response, "response is PortalTemplateFolder");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkTemplateFoldersFkPut
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkTemplateFoldersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //PortalTemplateFolder data = null;
            //var response = instance.TeamsIdPortalsNkTemplateFoldersFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<PortalTemplateFolder> (response, "response is PortalTemplateFolder");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkTemplateFoldersGet
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkTemplateFoldersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamsIdPortalsNkTemplateFoldersGet(id, nk, filter);
            //Assert.IsInstanceOf<List<PortalTemplateFolder>> (response, "response is List<PortalTemplateFolder>");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkTemplateFoldersPost
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkTemplateFoldersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //PortalTemplateFolder data = null;
            //var response = instance.TeamsIdPortalsNkTemplateFoldersPost(id, nk, data);
            //Assert.IsInstanceOf<PortalTemplateFolder> (response, "response is PortalTemplateFolder");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkTemplateRelsCountGet
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkTemplateRelsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamsIdPortalsNkTemplateRelsCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkTemplateRelsDelete
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkTemplateRelsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamsIdPortalsNkTemplateRelsDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkTemplateRelsFkDelete
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkTemplateRelsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdPortalsNkTemplateRelsFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkTemplateRelsFkGet
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkTemplateRelsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdPortalsNkTemplateRelsFkGet(id, nk, fk);
            //Assert.IsInstanceOf<PortalTemplate> (response, "response is PortalTemplate");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkTemplateRelsFkPut
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkTemplateRelsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //PortalTemplate data = null;
            //var response = instance.TeamsIdPortalsNkTemplateRelsFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<PortalTemplate> (response, "response is PortalTemplate");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkTemplateRelsGet
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkTemplateRelsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamsIdPortalsNkTemplateRelsGet(id, nk, filter);
            //Assert.IsInstanceOf<List<PortalTemplate>> (response, "response is List<PortalTemplate>");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkTemplateRelsPost
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkTemplateRelsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //PortalTemplate data = null;
            //var response = instance.TeamsIdPortalsNkTemplateRelsPost(id, nk, data);
            //Assert.IsInstanceOf<PortalTemplate> (response, "response is PortalTemplate");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkTemplatesCountGet
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkTemplatesCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamsIdPortalsNkTemplatesCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkTemplatesDelete
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkTemplatesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamsIdPortalsNkTemplatesDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkTemplatesFkDelete
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkTemplatesFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdPortalsNkTemplatesFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkTemplatesFkGet
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkTemplatesFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdPortalsNkTemplatesFkGet(id, nk, fk);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkTemplatesFkPut
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkTemplatesFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //Template data = null;
            //var response = instance.TeamsIdPortalsNkTemplatesFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkTemplatesGet
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkTemplatesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamsIdPortalsNkTemplatesGet(id, nk, filter);
            //Assert.IsInstanceOf<List<Template>> (response, "response is List<Template>");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkTemplatesPost
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkTemplatesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //Template data = null;
            //var response = instance.TeamsIdPortalsNkTemplatesPost(id, nk, data);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkTemplatesRelFkDelete
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkTemplatesRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdPortalsNkTemplatesRelFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkTemplatesRelFkHead
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkTemplatesRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdPortalsNkTemplatesRelFkHead(id, nk, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsNkTemplatesRelFkPut
        /// </summary>
        [Test]
        public void TeamsIdPortalsNkTemplatesRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //PortalTemplate data = null;
            //var response = instance.TeamsIdPortalsNkTemplatesRelFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<PortalTemplate> (response, "response is PortalTemplate");
        }
        
        /// <summary>
        /// Test TeamsIdPortalsPost
        /// </summary>
        [Test]
        public void TeamsIdPortalsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Portal data = null;
            //var response = instance.TeamsIdPortalsPost(id, data);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test TeamsIdProductMaterialsCountGet
        /// </summary>
        [Test]
        public void TeamsIdProductMaterialsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamsIdProductMaterialsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdProductMaterialsDelete
        /// </summary>
        [Test]
        public void TeamsIdProductMaterialsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamsIdProductMaterialsDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamsIdProductMaterialsFkDelete
        /// </summary>
        [Test]
        public void TeamsIdProductMaterialsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamsIdProductMaterialsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdProductMaterialsFkGet
        /// </summary>
        [Test]
        public void TeamsIdProductMaterialsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamsIdProductMaterialsFkGet(id, fk);
            //Assert.IsInstanceOf<ProductMaterial> (response, "response is ProductMaterial");
        }
        
        /// <summary>
        /// Test TeamsIdProductMaterialsFkPut
        /// </summary>
        [Test]
        public void TeamsIdProductMaterialsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //ProductMaterial data = null;
            //var response = instance.TeamsIdProductMaterialsFkPut(id, fk, data);
            //Assert.IsInstanceOf<ProductMaterial> (response, "response is ProductMaterial");
        }
        
        /// <summary>
        /// Test TeamsIdProductMaterialsGet
        /// </summary>
        [Test]
        public void TeamsIdProductMaterialsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamsIdProductMaterialsGet(id, filter);
            //Assert.IsInstanceOf<List<ProductMaterial>> (response, "response is List<ProductMaterial>");
        }
        
        /// <summary>
        /// Test TeamsIdProductMaterialsNkTeamGet
        /// </summary>
        [Test]
        public void TeamsIdProductMaterialsNkTeamGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.TeamsIdProductMaterialsNkTeamGet(id, nk, refresh);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test TeamsIdProductMaterialsPost
        /// </summary>
        [Test]
        public void TeamsIdProductMaterialsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ProductMaterial data = null;
            //var response = instance.TeamsIdProductMaterialsPost(id, data);
            //Assert.IsInstanceOf<ProductMaterial> (response, "response is ProductMaterial");
        }
        
        /// <summary>
        /// Test TeamsIdProductPdfColorProfilesAvailableGet
        /// </summary>
        [Test]
        public void TeamsIdProductPdfColorProfilesAvailableGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamsIdProductPdfColorProfilesAvailableGet(id, filter);
            //Assert.IsInstanceOf<List<ProductPdfColorProfile>> (response, "response is List<ProductPdfColorProfile>");
        }
        
        /// <summary>
        /// Test TeamsIdProductPdfColorProfilesCountGet
        /// </summary>
        [Test]
        public void TeamsIdProductPdfColorProfilesCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamsIdProductPdfColorProfilesCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdProductPdfColorProfilesDelete
        /// </summary>
        [Test]
        public void TeamsIdProductPdfColorProfilesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamsIdProductPdfColorProfilesDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamsIdProductPdfColorProfilesFkDelete
        /// </summary>
        [Test]
        public void TeamsIdProductPdfColorProfilesFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamsIdProductPdfColorProfilesFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdProductPdfColorProfilesFkGet
        /// </summary>
        [Test]
        public void TeamsIdProductPdfColorProfilesFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamsIdProductPdfColorProfilesFkGet(id, fk);
            //Assert.IsInstanceOf<ProductPdfColorProfile> (response, "response is ProductPdfColorProfile");
        }
        
        /// <summary>
        /// Test TeamsIdProductPdfColorProfilesFkPut
        /// </summary>
        [Test]
        public void TeamsIdProductPdfColorProfilesFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //ProductPdfColorProfile data = null;
            //var response = instance.TeamsIdProductPdfColorProfilesFkPut(id, fk, data);
            //Assert.IsInstanceOf<ProductPdfColorProfile> (response, "response is ProductPdfColorProfile");
        }
        
        /// <summary>
        /// Test TeamsIdProductPdfColorProfilesGet
        /// </summary>
        [Test]
        public void TeamsIdProductPdfColorProfilesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamsIdProductPdfColorProfilesGet(id, filter);
            //Assert.IsInstanceOf<List<ProductPdfColorProfile>> (response, "response is List<ProductPdfColorProfile>");
        }
        
        /// <summary>
        /// Test TeamsIdProductPdfColorProfilesUploadPost
        /// </summary>
        [Test]
        public void TeamsIdProductPdfColorProfilesUploadPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.TeamsIdProductPdfColorProfilesUploadPost(id);
            //Assert.IsInstanceOf<ProductPdfColorProfile> (response, "response is ProductPdfColorProfile");
        }
        
        /// <summary>
        /// Test TeamsIdProductSizeMaterialsCountGet
        /// </summary>
        [Test]
        public void TeamsIdProductSizeMaterialsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamsIdProductSizeMaterialsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdProductSizeMaterialsDelete
        /// </summary>
        [Test]
        public void TeamsIdProductSizeMaterialsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamsIdProductSizeMaterialsDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamsIdProductSizeMaterialsFkDelete
        /// </summary>
        [Test]
        public void TeamsIdProductSizeMaterialsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamsIdProductSizeMaterialsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdProductSizeMaterialsFkGet
        /// </summary>
        [Test]
        public void TeamsIdProductSizeMaterialsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamsIdProductSizeMaterialsFkGet(id, fk);
            //Assert.IsInstanceOf<ProductSizeMaterial> (response, "response is ProductSizeMaterial");
        }
        
        /// <summary>
        /// Test TeamsIdProductSizeMaterialsFkPut
        /// </summary>
        [Test]
        public void TeamsIdProductSizeMaterialsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //ProductSizeMaterial data = null;
            //var response = instance.TeamsIdProductSizeMaterialsFkPut(id, fk, data);
            //Assert.IsInstanceOf<ProductSizeMaterial> (response, "response is ProductSizeMaterial");
        }
        
        /// <summary>
        /// Test TeamsIdProductSizeMaterialsGet
        /// </summary>
        [Test]
        public void TeamsIdProductSizeMaterialsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamsIdProductSizeMaterialsGet(id, filter);
            //Assert.IsInstanceOf<List<ProductSizeMaterial>> (response, "response is List<ProductSizeMaterial>");
        }
        
        /// <summary>
        /// Test TeamsIdProductSizeMaterialsNkMaterialGet
        /// </summary>
        [Test]
        public void TeamsIdProductSizeMaterialsNkMaterialGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.TeamsIdProductSizeMaterialsNkMaterialGet(id, nk, refresh);
            //Assert.IsInstanceOf<ProductMaterial> (response, "response is ProductMaterial");
        }
        
        /// <summary>
        /// Test TeamsIdProductSizeMaterialsNkPdfColorProfileGet
        /// </summary>
        [Test]
        public void TeamsIdProductSizeMaterialsNkPdfColorProfileGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.TeamsIdProductSizeMaterialsNkPdfColorProfileGet(id, nk, refresh);
            //Assert.IsInstanceOf<ProductPdfColorProfile> (response, "response is ProductPdfColorProfile");
        }
        
        /// <summary>
        /// Test TeamsIdProductSizeMaterialsNkSizeGet
        /// </summary>
        [Test]
        public void TeamsIdProductSizeMaterialsNkSizeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.TeamsIdProductSizeMaterialsNkSizeGet(id, nk, refresh);
            //Assert.IsInstanceOf<ProductSize> (response, "response is ProductSize");
        }
        
        /// <summary>
        /// Test TeamsIdProductSizeMaterialsNkTeamGet
        /// </summary>
        [Test]
        public void TeamsIdProductSizeMaterialsNkTeamGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.TeamsIdProductSizeMaterialsNkTeamGet(id, nk, refresh);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test TeamsIdProductSizeMaterialsPost
        /// </summary>
        [Test]
        public void TeamsIdProductSizeMaterialsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ProductSizeMaterial data = null;
            //var response = instance.TeamsIdProductSizeMaterialsPost(id, data);
            //Assert.IsInstanceOf<ProductSizeMaterial> (response, "response is ProductSizeMaterial");
        }
        
        /// <summary>
        /// Test TeamsIdPut
        /// </summary>
        [Test]
        public void TeamsIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Team data = null;
            //var response = instance.TeamsIdPut(id, data);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test TeamsIdReplacePost
        /// </summary>
        [Test]
        public void TeamsIdReplacePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Team data = null;
            //var response = instance.TeamsIdReplacePost(id, data);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test TeamsIdTeamDataDesignsCountGet
        /// </summary>
        [Test]
        public void TeamsIdTeamDataDesignsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamsIdTeamDataDesignsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdTeamDataDesignsDelete
        /// </summary>
        [Test]
        public void TeamsIdTeamDataDesignsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamsIdTeamDataDesignsDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamsIdTeamDataDesignsFkDelete
        /// </summary>
        [Test]
        public void TeamsIdTeamDataDesignsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamsIdTeamDataDesignsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdTeamDataDesignsFkGet
        /// </summary>
        [Test]
        public void TeamsIdTeamDataDesignsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamsIdTeamDataDesignsFkGet(id, fk);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TeamsIdTeamDataDesignsFkPut
        /// </summary>
        [Test]
        public void TeamsIdTeamDataDesignsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //Design data = null;
            //var response = instance.TeamsIdTeamDataDesignsFkPut(id, fk, data);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TeamsIdTeamDataDesignsGet
        /// </summary>
        [Test]
        public void TeamsIdTeamDataDesignsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamsIdTeamDataDesignsGet(id, filter);
            //Assert.IsInstanceOf<List<Design>> (response, "response is List<Design>");
        }
        
        /// <summary>
        /// Test TeamsIdTeamDataDesignsPost
        /// </summary>
        [Test]
        public void TeamsIdTeamDataDesignsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Design data = null;
            //var response = instance.TeamsIdTeamDataDesignsPost(id, data);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TeamsIdTeamDataGet
        /// </summary>
        [Test]
        public void TeamsIdTeamDataGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? refresh = null;
            //var response = instance.TeamsIdTeamDataGet(id, refresh);
            //Assert.IsInstanceOf<DynamicData> (response, "response is DynamicData");
        }
        
        /// <summary>
        /// Test TeamsIdTeamDataRecordsCountGet
        /// </summary>
        [Test]
        public void TeamsIdTeamDataRecordsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamsIdTeamDataRecordsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdTeamDataRecordsDelete
        /// </summary>
        [Test]
        public void TeamsIdTeamDataRecordsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamsIdTeamDataRecordsDelete(id, where);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TeamsIdTeamDataRecordsFkDelete
        /// </summary>
        [Test]
        public void TeamsIdTeamDataRecordsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamsIdTeamDataRecordsFkDelete(id, fk);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TeamsIdTeamDataRecordsFkGet
        /// </summary>
        [Test]
        public void TeamsIdTeamDataRecordsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //string filter = null;
            //var response = instance.TeamsIdTeamDataRecordsFkGet(id, fk, filter);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TeamsIdTeamDataRecordsFkPropertyNameUploadPut
        /// </summary>
        [Test]
        public void TeamsIdTeamDataRecordsFkPropertyNameUploadPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //string propertyName = null;
            //Team data = null;
            //var response = instance.TeamsIdTeamDataRecordsFkPropertyNameUploadPut(id, fk, propertyName, data);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TeamsIdTeamDataRecordsFkPut
        /// </summary>
        [Test]
        public void TeamsIdTeamDataRecordsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //Team data = null;
            //var response = instance.TeamsIdTeamDataRecordsFkPut(id, fk, data);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TeamsIdTeamDataRecordsGet
        /// </summary>
        [Test]
        public void TeamsIdTeamDataRecordsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamsIdTeamDataRecordsGet(id, filter);
            //Assert.IsInstanceOf<List<Object>> (response, "response is List<Object>");
        }
        
        /// <summary>
        /// Test TeamsIdTeamDataRecordsMigratePost
        /// </summary>
        [Test]
        public void TeamsIdTeamDataRecordsMigratePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Team data = null;
            //var response = instance.TeamsIdTeamDataRecordsMigratePost(id, data);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TeamsIdTeamDataRecordsPost
        /// </summary>
        [Test]
        public void TeamsIdTeamDataRecordsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Team data = null;
            //var response = instance.TeamsIdTeamDataRecordsPost(id, data);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TeamsIdTeamDataRecordsUploadCsvPost
        /// </summary>
        [Test]
        public void TeamsIdTeamDataRecordsUploadCsvPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.TeamsIdTeamDataRecordsUploadCsvPost(id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TeamsIdTeamDataTeamGet
        /// </summary>
        [Test]
        public void TeamsIdTeamDataTeamGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? refresh = null;
            //var response = instance.TeamsIdTeamDataTeamGet(id, refresh);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test TeamsIdTeamMembersCountGet
        /// </summary>
        [Test]
        public void TeamsIdTeamMembersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamsIdTeamMembersCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdTeamMembersDelete
        /// </summary>
        [Test]
        public void TeamsIdTeamMembersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamsIdTeamMembersDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamsIdTeamMembersFkDelete
        /// </summary>
        [Test]
        public void TeamsIdTeamMembersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamsIdTeamMembersFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdTeamMembersFkGet
        /// </summary>
        [Test]
        public void TeamsIdTeamMembersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamsIdTeamMembersFkGet(id, fk);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TeamsIdTeamMembersFkPut
        /// </summary>
        [Test]
        public void TeamsIdTeamMembersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //TeamMember data = null;
            //var response = instance.TeamsIdTeamMembersFkPut(id, fk, data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TeamsIdTeamMembersGet
        /// </summary>
        [Test]
        public void TeamsIdTeamMembersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamsIdTeamMembersGet(id, filter);
            //Assert.IsInstanceOf<List<TeamMember>> (response, "response is List<TeamMember>");
        }
        
        /// <summary>
        /// Test TeamsIdTeamMembersMapKeysGet
        /// </summary>
        [Test]
        public void TeamsIdTeamMembersMapKeysGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Team data = null;
            //var response = instance.TeamsIdTeamMembersMapKeysGet(id, data);
            //Assert.IsInstanceOf<List<Object>> (response, "response is List<Object>");
        }
        
        /// <summary>
        /// Test TeamsIdTeamMembersPost
        /// </summary>
        [Test]
        public void TeamsIdTeamMembersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamMember data = null;
            //var response = instance.TeamsIdTeamMembersPost(id, data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TeamsIdTemplateFoldersCountGet
        /// </summary>
        [Test]
        public void TeamsIdTemplateFoldersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamsIdTemplateFoldersCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdTemplateFoldersDelete
        /// </summary>
        [Test]
        public void TeamsIdTemplateFoldersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamsIdTemplateFoldersDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamsIdTemplateFoldersFkDelete
        /// </summary>
        [Test]
        public void TeamsIdTemplateFoldersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamsIdTemplateFoldersFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdTemplateFoldersFkGet
        /// </summary>
        [Test]
        public void TeamsIdTemplateFoldersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamsIdTemplateFoldersFkGet(id, fk);
            //Assert.IsInstanceOf<TeamTemplateFolder> (response, "response is TeamTemplateFolder");
        }
        
        /// <summary>
        /// Test TeamsIdTemplateFoldersFkPut
        /// </summary>
        [Test]
        public void TeamsIdTemplateFoldersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //TeamTemplateFolder data = null;
            //var response = instance.TeamsIdTemplateFoldersFkPut(id, fk, data);
            //Assert.IsInstanceOf<TeamTemplateFolder> (response, "response is TeamTemplateFolder");
        }
        
        /// <summary>
        /// Test TeamsIdTemplateFoldersGet
        /// </summary>
        [Test]
        public void TeamsIdTemplateFoldersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamsIdTemplateFoldersGet(id, filter);
            //Assert.IsInstanceOf<List<TeamTemplateFolder>> (response, "response is List<TeamTemplateFolder>");
        }
        
        /// <summary>
        /// Test TeamsIdTemplateFoldersPost
        /// </summary>
        [Test]
        public void TeamsIdTemplateFoldersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamTemplateFolder data = null;
            //var response = instance.TeamsIdTemplateFoldersPost(id, data);
            //Assert.IsInstanceOf<TeamTemplateFolder> (response, "response is TeamTemplateFolder");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesCountGet
        /// </summary>
        [Test]
        public void TeamsIdTemplatesCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamsIdTemplatesCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesDelete
        /// </summary>
        [Test]
        public void TeamsIdTemplatesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamsIdTemplatesDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesFkDelete
        /// </summary>
        [Test]
        public void TeamsIdTemplatesFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamsIdTemplatesFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesFkGet
        /// </summary>
        [Test]
        public void TeamsIdTemplatesFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamsIdTemplatesFkGet(id, fk);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesFkPut
        /// </summary>
        [Test]
        public void TeamsIdTemplatesFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //Template data = null;
            //var response = instance.TeamsIdTemplatesFkPut(id, fk, data);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesGet
        /// </summary>
        [Test]
        public void TeamsIdTemplatesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamsIdTemplatesGet(id, filter);
            //Assert.IsInstanceOf<List<Template>> (response, "response is List<Template>");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkDesignsCountGet
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkDesignsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamsIdTemplatesNkDesignsCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkDesignsDelete
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkDesignsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamsIdTemplatesNkDesignsDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkDesignsFkDelete
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkDesignsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdTemplatesNkDesignsFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkDesignsFkGet
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkDesignsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdTemplatesNkDesignsFkGet(id, nk, fk);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkDesignsFkPut
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkDesignsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //Design data = null;
            //var response = instance.TeamsIdTemplatesNkDesignsFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkDesignsGet
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkDesignsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamsIdTemplatesNkDesignsGet(id, nk, filter);
            //Assert.IsInstanceOf<List<Design>> (response, "response is List<Design>");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkDesignsPost
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkDesignsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //Design data = null;
            //var response = instance.TeamsIdTemplatesNkDesignsPost(id, nk, data);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkMembersCountGet
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkMembersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamsIdTemplatesNkMembersCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkMembersDelete
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkMembersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamsIdTemplatesNkMembersDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkMembersFkDelete
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkMembersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdTemplatesNkMembersFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkMembersFkGet
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkMembersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdTemplatesNkMembersFkGet(id, nk, fk);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkMembersFkPut
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkMembersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //TeamMember data = null;
            //var response = instance.TeamsIdTemplatesNkMembersFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkMembersGet
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkMembersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamsIdTemplatesNkMembersGet(id, nk, filter);
            //Assert.IsInstanceOf<List<TeamMember>> (response, "response is List<TeamMember>");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkMembersPost
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkMembersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //TeamMember data = null;
            //var response = instance.TeamsIdTemplatesNkMembersPost(id, nk, data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkMembersRelFkDelete
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkMembersRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdTemplatesNkMembersRelFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkMembersRelFkHead
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkMembersRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdTemplatesNkMembersRelFkHead(id, nk, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkMembersRelFkPut
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkMembersRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //TemplateMember data = null;
            //var response = instance.TeamsIdTemplatesNkMembersRelFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<TemplateMember> (response, "response is TemplateMember");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkPermissionDelete
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkPermissionDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamsIdTemplatesNkPermissionDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkPermissionGet
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkPermissionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.TeamsIdTemplatesNkPermissionGet(id, nk, refresh);
            //Assert.IsInstanceOf<TemplatePermissionSet> (response, "response is TemplatePermissionSet");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkPermissionPost
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkPermissionPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //TemplatePermissionSet data = null;
            //var response = instance.TeamsIdTemplatesNkPermissionPost(id, nk, data);
            //Assert.IsInstanceOf<TemplatePermissionSet> (response, "response is TemplatePermissionSet");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkPermissionPut
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkPermissionPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //TemplatePermissionSet data = null;
            //var response = instance.TeamsIdTemplatesNkPermissionPut(id, nk, data);
            //Assert.IsInstanceOf<TemplatePermissionSet> (response, "response is TemplatePermissionSet");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkPortalFoldersCountGet
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkPortalFoldersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamsIdTemplatesNkPortalFoldersCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkPortalFoldersDelete
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkPortalFoldersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamsIdTemplatesNkPortalFoldersDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkPortalFoldersFkDelete
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkPortalFoldersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdTemplatesNkPortalFoldersFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkPortalFoldersFkGet
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkPortalFoldersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdTemplatesNkPortalFoldersFkGet(id, nk, fk);
            //Assert.IsInstanceOf<PortalTemplateFolder> (response, "response is PortalTemplateFolder");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkPortalFoldersFkPut
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkPortalFoldersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //PortalTemplateFolder data = null;
            //var response = instance.TeamsIdTemplatesNkPortalFoldersFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<PortalTemplateFolder> (response, "response is PortalTemplateFolder");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkPortalFoldersGet
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkPortalFoldersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamsIdTemplatesNkPortalFoldersGet(id, nk, filter);
            //Assert.IsInstanceOf<List<PortalTemplateFolder>> (response, "response is List<PortalTemplateFolder>");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkPortalFoldersPost
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkPortalFoldersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //PortalTemplateFolder data = null;
            //var response = instance.TeamsIdTemplatesNkPortalFoldersPost(id, nk, data);
            //Assert.IsInstanceOf<PortalTemplateFolder> (response, "response is PortalTemplateFolder");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkPortalFoldersRelFkDelete
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkPortalFoldersRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdTemplatesNkPortalFoldersRelFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkPortalFoldersRelFkHead
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkPortalFoldersRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdTemplatesNkPortalFoldersRelFkHead(id, nk, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkPortalFoldersRelFkPut
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkPortalFoldersRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //PortalTemplate data = null;
            //var response = instance.TeamsIdTemplatesNkPortalFoldersRelFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<PortalTemplate> (response, "response is PortalTemplate");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkPortalsCountGet
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkPortalsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamsIdTemplatesNkPortalsCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkPortalsDelete
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkPortalsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamsIdTemplatesNkPortalsDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkPortalsFkDelete
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkPortalsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdTemplatesNkPortalsFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkPortalsFkGet
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkPortalsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdTemplatesNkPortalsFkGet(id, nk, fk);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkPortalsFkPut
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkPortalsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //Portal data = null;
            //var response = instance.TeamsIdTemplatesNkPortalsFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkPortalsGet
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkPortalsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamsIdTemplatesNkPortalsGet(id, nk, filter);
            //Assert.IsInstanceOf<List<Portal>> (response, "response is List<Portal>");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkPortalsPost
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkPortalsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //Portal data = null;
            //var response = instance.TeamsIdTemplatesNkPortalsPost(id, nk, data);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkPortalsRelFkDelete
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkPortalsRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdTemplatesNkPortalsRelFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkPortalsRelFkHead
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkPortalsRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdTemplatesNkPortalsRelFkHead(id, nk, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkPortalsRelFkPut
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkPortalsRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //PortalTemplate data = null;
            //var response = instance.TeamsIdTemplatesNkPortalsRelFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<PortalTemplate> (response, "response is PortalTemplate");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkTagsCountGet
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkTagsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamsIdTemplatesNkTagsCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkTagsDelete
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkTagsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamsIdTemplatesNkTagsDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkTagsFkDelete
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkTagsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdTemplatesNkTagsFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkTagsFkGet
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkTagsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdTemplatesNkTagsFkGet(id, nk, fk);
            //Assert.IsInstanceOf<Tag> (response, "response is Tag");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkTagsFkPut
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkTagsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //Tag data = null;
            //var response = instance.TeamsIdTemplatesNkTagsFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<Tag> (response, "response is Tag");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkTagsGet
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkTagsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamsIdTemplatesNkTagsGet(id, nk, filter);
            //Assert.IsInstanceOf<List<Tag>> (response, "response is List<Tag>");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkTagsPost
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkTagsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //Tag data = null;
            //var response = instance.TeamsIdTemplatesNkTagsPost(id, nk, data);
            //Assert.IsInstanceOf<Tag> (response, "response is Tag");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkTagsRelFkDelete
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkTagsRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdTemplatesNkTagsRelFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkTagsRelFkHead
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkTagsRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdTemplatesNkTagsRelFkHead(id, nk, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkTagsRelFkPut
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkTagsRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //TemplateTag data = null;
            //var response = instance.TeamsIdTemplatesNkTagsRelFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<TemplateTag> (response, "response is TemplateTag");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkTeamFolderGet
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkTeamFolderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.TeamsIdTemplatesNkTeamFolderGet(id, nk, refresh);
            //Assert.IsInstanceOf<TeamTemplateFolder> (response, "response is TeamTemplateFolder");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkTeamGet
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkTeamGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.TeamsIdTemplatesNkTeamGet(id, nk, refresh);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkTemplateMembersCountGet
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkTemplateMembersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamsIdTemplatesNkTemplateMembersCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkTemplateMembersDelete
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkTemplateMembersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamsIdTemplatesNkTemplateMembersDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkTemplateMembersFkDelete
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkTemplateMembersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamsIdTemplatesNkTemplateMembersFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkTemplateMembersFkGet
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkTemplateMembersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamsIdTemplatesNkTemplateMembersFkGet(id, nk, fk);
            //Assert.IsInstanceOf<TemplateMember> (response, "response is TemplateMember");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkTemplateMembersFkPut
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkTemplateMembersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //TemplateMember data = null;
            //var response = instance.TeamsIdTemplatesNkTemplateMembersFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<TemplateMember> (response, "response is TemplateMember");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkTemplateMembersGet
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkTemplateMembersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamsIdTemplatesNkTemplateMembersGet(id, nk, filter);
            //Assert.IsInstanceOf<List<TemplateMember>> (response, "response is List<TemplateMember>");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkTemplateMembersPost
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkTemplateMembersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //TemplateMember data = null;
            //var response = instance.TeamsIdTemplatesNkTemplateMembersPost(id, nk, data);
            //Assert.IsInstanceOf<TemplateMember> (response, "response is TemplateMember");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkUploaderGet
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkUploaderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.TeamsIdTemplatesNkUploaderGet(id, nk, refresh);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesNkWorkflowGet
        /// </summary>
        [Test]
        public void TeamsIdTemplatesNkWorkflowGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.TeamsIdTemplatesNkWorkflowGet(id, nk, refresh);
            //Assert.IsInstanceOf<Workflow> (response, "response is Workflow");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesPost
        /// </summary>
        [Test]
        public void TeamsIdTemplatesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Template data = null;
            //var response = instance.TeamsIdTemplatesPost(id, data);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test TeamsIdTemplatesWithDesignsGet
        /// </summary>
        [Test]
        public void TeamsIdTemplatesWithDesignsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string filter = null;
            //var response = instance.TeamsIdTemplatesWithDesignsGet(id, id2, filter);
            //Assert.IsInstanceOf<List<Template>> (response, "response is List<Template>");
        }
        
        /// <summary>
        /// Test TeamsIdWorkflowsCountGet
        /// </summary>
        [Test]
        public void TeamsIdWorkflowsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamsIdWorkflowsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamsIdWorkflowsDelete
        /// </summary>
        [Test]
        public void TeamsIdWorkflowsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamsIdWorkflowsDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamsIdWorkflowsFkDelete
        /// </summary>
        [Test]
        public void TeamsIdWorkflowsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamsIdWorkflowsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamsIdWorkflowsFkGet
        /// </summary>
        [Test]
        public void TeamsIdWorkflowsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamsIdWorkflowsFkGet(id, fk);
            //Assert.IsInstanceOf<Workflow> (response, "response is Workflow");
        }
        
        /// <summary>
        /// Test TeamsIdWorkflowsFkPut
        /// </summary>
        [Test]
        public void TeamsIdWorkflowsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //Workflow data = null;
            //var response = instance.TeamsIdWorkflowsFkPut(id, fk, data);
            //Assert.IsInstanceOf<Workflow> (response, "response is Workflow");
        }
        
        /// <summary>
        /// Test TeamsIdWorkflowsGet
        /// </summary>
        [Test]
        public void TeamsIdWorkflowsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamsIdWorkflowsGet(id, filter);
            //Assert.IsInstanceOf<List<Workflow>> (response, "response is List<Workflow>");
        }
        
        /// <summary>
        /// Test TeamsIdWorkflowsPost
        /// </summary>
        [Test]
        public void TeamsIdWorkflowsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Workflow data = null;
            //var response = instance.TeamsIdWorkflowsPost(id, data);
            //Assert.IsInstanceOf<Workflow> (response, "response is Workflow");
        }
        
        /// <summary>
        /// Test TeamsNameNameExistsGet
        /// </summary>
        [Test]
        public void TeamsNameNameExistsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.TeamsNameNameExistsGet(name);
            //Assert.IsInstanceOf<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        
        /// <summary>
        /// Test TeamsPatch
        /// </summary>
        [Test]
        public void TeamsPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Team data = null;
            //var response = instance.TeamsPatch(data);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test TeamsPost
        /// </summary>
        [Test]
        public void TeamsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Team data = null;
            //var response = instance.TeamsPost(data);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test TeamsPut
        /// </summary>
        [Test]
        public void TeamsPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Team data = null;
            //var response = instance.TeamsPut(data);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test TeamsReplaceOrCreatePost
        /// </summary>
        [Test]
        public void TeamsReplaceOrCreatePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Team data = null;
            //var response = instance.TeamsReplaceOrCreatePost(data);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test TeamsSubdomainSubdomainExistsGet
        /// </summary>
        [Test]
        public void TeamsSubdomainSubdomainExistsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string subdomain = null;
            //var response = instance.TeamsSubdomainSubdomainExistsGet(subdomain);
            //Assert.IsInstanceOf<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        
        /// <summary>
        /// Test TeamsUpdatePost
        /// </summary>
        [Test]
        public void TeamsUpdatePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //Team data = null;
            //var response = instance.TeamsUpdatePost(where, data);
            //Assert.IsInstanceOf<InlineResponse2003> (response, "response is InlineResponse2003");
        }
        
        /// <summary>
        /// Test TeamsUpsertWithWherePost
        /// </summary>
        [Test]
        public void TeamsUpsertWithWherePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //Team data = null;
            //var response = instance.TeamsUpsertWithWherePost(where, data);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
    }

}
