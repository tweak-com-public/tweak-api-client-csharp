/* 
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.3-alpha.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TweakApi.Client;
using TweakApi.Api;
using TweakApi.Model;

namespace TweakApi.Test
{
    /// <summary>
    ///  Class for testing TemplateApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TemplateApiTests
    {
        private TemplateApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TemplateApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TemplateApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TemplateApi
            //Assert.IsInstanceOfType(typeof(TemplateApi), instance, "instance is a TemplateApi");
        }

        
        /// <summary>
        /// Test TemplatesChangeStreamGet
        /// </summary>
        [Test]
        public void TemplatesChangeStreamGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string options = null;
            //var response = instance.TemplatesChangeStreamGet(options);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test TemplatesChangeStreamPost
        /// </summary>
        [Test]
        public void TemplatesChangeStreamPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string options = null;
            //var response = instance.TemplatesChangeStreamPost(options);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test TemplatesCountGet
        /// </summary>
        [Test]
        public void TemplatesCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //var response = instance.TemplatesCountGet(where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TemplatesFindOneGet
        /// </summary>
        [Test]
        public void TemplatesFindOneGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //var response = instance.TemplatesFindOneGet(filter);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test TemplatesGet
        /// </summary>
        [Test]
        public void TemplatesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //var response = instance.TemplatesGet(filter);
            //Assert.IsInstanceOf<List<Template>> (response, "response is List<Template>");
        }
        
        /// <summary>
        /// Test TemplatesIdDelete
        /// </summary>
        [Test]
        public void TemplatesIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.TemplatesIdDelete(id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TemplatesIdDesignsCountGet
        /// </summary>
        [Test]
        public void TemplatesIdDesignsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TemplatesIdDesignsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TemplatesIdDesignsDelete
        /// </summary>
        [Test]
        public void TemplatesIdDesignsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TemplatesIdDesignsDelete(id);
            
        }
        
        /// <summary>
        /// Test TemplatesIdDesignsFkDelete
        /// </summary>
        [Test]
        public void TemplatesIdDesignsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TemplatesIdDesignsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TemplatesIdDesignsFkGet
        /// </summary>
        [Test]
        public void TemplatesIdDesignsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TemplatesIdDesignsFkGet(id, fk);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TemplatesIdDesignsFkPut
        /// </summary>
        [Test]
        public void TemplatesIdDesignsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //Design data = null;
            //var response = instance.TemplatesIdDesignsFkPut(id, fk, data);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TemplatesIdDesignsGeneratePost
        /// </summary>
        [Test]
        public void TemplatesIdDesignsGeneratePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //Template data = null;
            //var response = instance.TemplatesIdDesignsGeneratePost(id, id2, data);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TemplatesIdDesignsGet
        /// </summary>
        [Test]
        public void TemplatesIdDesignsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TemplatesIdDesignsGet(id, filter);
            //Assert.IsInstanceOf<List<Design>> (response, "response is List<Design>");
        }
        
        /// <summary>
        /// Test TemplatesIdDesignsPost
        /// </summary>
        [Test]
        public void TemplatesIdDesignsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Design data = null;
            //var response = instance.TemplatesIdDesignsPost(id, data);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TemplatesIdExistsGet
        /// </summary>
        [Test]
        public void TemplatesIdExistsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.TemplatesIdExistsGet(id);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TemplatesIdGet
        /// </summary>
        [Test]
        public void TemplatesIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TemplatesIdGet(id, filter);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test TemplatesIdHead
        /// </summary>
        [Test]
        public void TemplatesIdHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.TemplatesIdHead(id);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TemplatesIdInvitationTicketsFkDelete
        /// </summary>
        [Test]
        public void TemplatesIdInvitationTicketsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string fk = null;
            //var response = instance.TemplatesIdInvitationTicketsFkDelete(id, id2, fk);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TemplatesIdInvitationTicketsFkGet
        /// </summary>
        [Test]
        public void TemplatesIdInvitationTicketsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string fk = null;
            //string filter = null;
            //var response = instance.TemplatesIdInvitationTicketsFkGet(id, id2, fk, filter);
            //Assert.IsInstanceOf<InvitationTicket> (response, "response is InvitationTicket");
        }
        
        /// <summary>
        /// Test TemplatesIdInvitationTicketsGet
        /// </summary>
        [Test]
        public void TemplatesIdInvitationTicketsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string filter = null;
            //var response = instance.TemplatesIdInvitationTicketsGet(id, id2, filter);
            //Assert.IsInstanceOf<List<InvitationTicket>> (response, "response is List<InvitationTicket>");
        }
        
        /// <summary>
        /// Test TemplatesIdMembersCountGet
        /// </summary>
        [Test]
        public void TemplatesIdMembersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TemplatesIdMembersCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TemplatesIdMembersDelete
        /// </summary>
        [Test]
        public void TemplatesIdMembersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TemplatesIdMembersDelete(id);
            
        }
        
        /// <summary>
        /// Test TemplatesIdMembersFkDelete
        /// </summary>
        [Test]
        public void TemplatesIdMembersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TemplatesIdMembersFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TemplatesIdMembersFkGet
        /// </summary>
        [Test]
        public void TemplatesIdMembersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TemplatesIdMembersFkGet(id, fk);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TemplatesIdMembersFkPut
        /// </summary>
        [Test]
        public void TemplatesIdMembersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //TeamMember data = null;
            //var response = instance.TemplatesIdMembersFkPut(id, fk, data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TemplatesIdMembersGet
        /// </summary>
        [Test]
        public void TemplatesIdMembersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TemplatesIdMembersGet(id, filter);
            //Assert.IsInstanceOf<List<TeamMember>> (response, "response is List<TeamMember>");
        }
        
        /// <summary>
        /// Test TemplatesIdMembersPost
        /// </summary>
        [Test]
        public void TemplatesIdMembersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamMember data = null;
            //var response = instance.TemplatesIdMembersPost(id, data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TemplatesIdMembersRelFkDelete
        /// </summary>
        [Test]
        public void TemplatesIdMembersRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TemplatesIdMembersRelFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TemplatesIdMembersRelFkHead
        /// </summary>
        [Test]
        public void TemplatesIdMembersRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TemplatesIdMembersRelFkHead(id, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test TemplatesIdMembersRelFkPut
        /// </summary>
        [Test]
        public void TemplatesIdMembersRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //TemplateMember data = null;
            //var response = instance.TemplatesIdMembersRelFkPut(id, fk, data);
            //Assert.IsInstanceOf<TemplateMember> (response, "response is TemplateMember");
        }
        
        /// <summary>
        /// Test TemplatesIdPatch
        /// </summary>
        [Test]
        public void TemplatesIdPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Template data = null;
            //var response = instance.TemplatesIdPatch(id, data);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test TemplatesIdPermissionDelete
        /// </summary>
        [Test]
        public void TemplatesIdPermissionDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TemplatesIdPermissionDelete(id);
            
        }
        
        /// <summary>
        /// Test TemplatesIdPermissionGet
        /// </summary>
        [Test]
        public void TemplatesIdPermissionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? refresh = null;
            //var response = instance.TemplatesIdPermissionGet(id, refresh);
            //Assert.IsInstanceOf<TemplatePermissionSet> (response, "response is TemplatePermissionSet");
        }
        
        /// <summary>
        /// Test TemplatesIdPermissionPost
        /// </summary>
        [Test]
        public void TemplatesIdPermissionPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TemplatePermissionSet data = null;
            //var response = instance.TemplatesIdPermissionPost(id, data);
            //Assert.IsInstanceOf<TemplatePermissionSet> (response, "response is TemplatePermissionSet");
        }
        
        /// <summary>
        /// Test TemplatesIdPermissionPut
        /// </summary>
        [Test]
        public void TemplatesIdPermissionPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TemplatePermissionSet data = null;
            //var response = instance.TemplatesIdPermissionPut(id, data);
            //Assert.IsInstanceOf<TemplatePermissionSet> (response, "response is TemplatePermissionSet");
        }
        
        /// <summary>
        /// Test TemplatesIdPortalFoldersCountGet
        /// </summary>
        [Test]
        public void TemplatesIdPortalFoldersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TemplatesIdPortalFoldersCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TemplatesIdPortalFoldersDelete
        /// </summary>
        [Test]
        public void TemplatesIdPortalFoldersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TemplatesIdPortalFoldersDelete(id);
            
        }
        
        /// <summary>
        /// Test TemplatesIdPortalFoldersFkDelete
        /// </summary>
        [Test]
        public void TemplatesIdPortalFoldersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TemplatesIdPortalFoldersFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TemplatesIdPortalFoldersFkGet
        /// </summary>
        [Test]
        public void TemplatesIdPortalFoldersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TemplatesIdPortalFoldersFkGet(id, fk);
            //Assert.IsInstanceOf<PortalTemplateFolder> (response, "response is PortalTemplateFolder");
        }
        
        /// <summary>
        /// Test TemplatesIdPortalFoldersFkPut
        /// </summary>
        [Test]
        public void TemplatesIdPortalFoldersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //PortalTemplateFolder data = null;
            //var response = instance.TemplatesIdPortalFoldersFkPut(id, fk, data);
            //Assert.IsInstanceOf<PortalTemplateFolder> (response, "response is PortalTemplateFolder");
        }
        
        /// <summary>
        /// Test TemplatesIdPortalFoldersGet
        /// </summary>
        [Test]
        public void TemplatesIdPortalFoldersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TemplatesIdPortalFoldersGet(id, filter);
            //Assert.IsInstanceOf<List<PortalTemplateFolder>> (response, "response is List<PortalTemplateFolder>");
        }
        
        /// <summary>
        /// Test TemplatesIdPortalFoldersPost
        /// </summary>
        [Test]
        public void TemplatesIdPortalFoldersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //PortalTemplateFolder data = null;
            //var response = instance.TemplatesIdPortalFoldersPost(id, data);
            //Assert.IsInstanceOf<PortalTemplateFolder> (response, "response is PortalTemplateFolder");
        }
        
        /// <summary>
        /// Test TemplatesIdPortalFoldersRelFkDelete
        /// </summary>
        [Test]
        public void TemplatesIdPortalFoldersRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TemplatesIdPortalFoldersRelFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TemplatesIdPortalFoldersRelFkHead
        /// </summary>
        [Test]
        public void TemplatesIdPortalFoldersRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TemplatesIdPortalFoldersRelFkHead(id, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test TemplatesIdPortalFoldersRelFkPut
        /// </summary>
        [Test]
        public void TemplatesIdPortalFoldersRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //PortalTemplate data = null;
            //var response = instance.TemplatesIdPortalFoldersRelFkPut(id, fk, data);
            //Assert.IsInstanceOf<PortalTemplate> (response, "response is PortalTemplate");
        }
        
        /// <summary>
        /// Test TemplatesIdPortalsCountGet
        /// </summary>
        [Test]
        public void TemplatesIdPortalsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TemplatesIdPortalsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TemplatesIdPortalsDelete
        /// </summary>
        [Test]
        public void TemplatesIdPortalsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TemplatesIdPortalsDelete(id);
            
        }
        
        /// <summary>
        /// Test TemplatesIdPortalsFkDelete
        /// </summary>
        [Test]
        public void TemplatesIdPortalsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TemplatesIdPortalsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TemplatesIdPortalsFkGet
        /// </summary>
        [Test]
        public void TemplatesIdPortalsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TemplatesIdPortalsFkGet(id, fk);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test TemplatesIdPortalsFkPut
        /// </summary>
        [Test]
        public void TemplatesIdPortalsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //Portal data = null;
            //var response = instance.TemplatesIdPortalsFkPut(id, fk, data);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test TemplatesIdPortalsGet
        /// </summary>
        [Test]
        public void TemplatesIdPortalsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TemplatesIdPortalsGet(id, filter);
            //Assert.IsInstanceOf<List<Portal>> (response, "response is List<Portal>");
        }
        
        /// <summary>
        /// Test TemplatesIdPortalsPost
        /// </summary>
        [Test]
        public void TemplatesIdPortalsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Portal data = null;
            //var response = instance.TemplatesIdPortalsPost(id, data);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test TemplatesIdPortalsRelFkDelete
        /// </summary>
        [Test]
        public void TemplatesIdPortalsRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TemplatesIdPortalsRelFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TemplatesIdPortalsRelFkHead
        /// </summary>
        [Test]
        public void TemplatesIdPortalsRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TemplatesIdPortalsRelFkHead(id, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test TemplatesIdPortalsRelFkPut
        /// </summary>
        [Test]
        public void TemplatesIdPortalsRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //PortalTemplate data = null;
            //var response = instance.TemplatesIdPortalsRelFkPut(id, fk, data);
            //Assert.IsInstanceOf<PortalTemplate> (response, "response is PortalTemplate");
        }
        
        /// <summary>
        /// Test TemplatesIdPut
        /// </summary>
        [Test]
        public void TemplatesIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Template data = null;
            //var response = instance.TemplatesIdPut(id, data);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test TemplatesIdReplacePost
        /// </summary>
        [Test]
        public void TemplatesIdReplacePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Template data = null;
            //var response = instance.TemplatesIdReplacePost(id, data);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test TemplatesIdTagsCountGet
        /// </summary>
        [Test]
        public void TemplatesIdTagsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TemplatesIdTagsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TemplatesIdTagsDelete
        /// </summary>
        [Test]
        public void TemplatesIdTagsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TemplatesIdTagsDelete(id);
            
        }
        
        /// <summary>
        /// Test TemplatesIdTagsFkDelete
        /// </summary>
        [Test]
        public void TemplatesIdTagsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TemplatesIdTagsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TemplatesIdTagsFkGet
        /// </summary>
        [Test]
        public void TemplatesIdTagsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TemplatesIdTagsFkGet(id, fk);
            //Assert.IsInstanceOf<Tag> (response, "response is Tag");
        }
        
        /// <summary>
        /// Test TemplatesIdTagsFkPut
        /// </summary>
        [Test]
        public void TemplatesIdTagsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //Tag data = null;
            //var response = instance.TemplatesIdTagsFkPut(id, fk, data);
            //Assert.IsInstanceOf<Tag> (response, "response is Tag");
        }
        
        /// <summary>
        /// Test TemplatesIdTagsGet
        /// </summary>
        [Test]
        public void TemplatesIdTagsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TemplatesIdTagsGet(id, filter);
            //Assert.IsInstanceOf<List<Tag>> (response, "response is List<Tag>");
        }
        
        /// <summary>
        /// Test TemplatesIdTagsPost
        /// </summary>
        [Test]
        public void TemplatesIdTagsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Tag data = null;
            //var response = instance.TemplatesIdTagsPost(id, data);
            //Assert.IsInstanceOf<Tag> (response, "response is Tag");
        }
        
        /// <summary>
        /// Test TemplatesIdTagsRelFkDelete
        /// </summary>
        [Test]
        public void TemplatesIdTagsRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TemplatesIdTagsRelFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TemplatesIdTagsRelFkHead
        /// </summary>
        [Test]
        public void TemplatesIdTagsRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TemplatesIdTagsRelFkHead(id, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test TemplatesIdTagsRelFkPut
        /// </summary>
        [Test]
        public void TemplatesIdTagsRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //TemplateTag data = null;
            //var response = instance.TemplatesIdTagsRelFkPut(id, fk, data);
            //Assert.IsInstanceOf<TemplateTag> (response, "response is TemplateTag");
        }
        
        /// <summary>
        /// Test TemplatesIdTeamFolderGet
        /// </summary>
        [Test]
        public void TemplatesIdTeamFolderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? refresh = null;
            //var response = instance.TemplatesIdTeamFolderGet(id, refresh);
            //Assert.IsInstanceOf<TeamTemplateFolder> (response, "response is TeamTemplateFolder");
        }
        
        /// <summary>
        /// Test TemplatesIdTeamGet
        /// </summary>
        [Test]
        public void TemplatesIdTeamGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? refresh = null;
            //var response = instance.TemplatesIdTeamGet(id, refresh);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test TemplatesIdTemplateMembersCountGet
        /// </summary>
        [Test]
        public void TemplatesIdTemplateMembersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TemplatesIdTemplateMembersCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TemplatesIdTemplateMembersDelete
        /// </summary>
        [Test]
        public void TemplatesIdTemplateMembersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TemplatesIdTemplateMembersDelete(id);
            
        }
        
        /// <summary>
        /// Test TemplatesIdTemplateMembersFkDelete
        /// </summary>
        [Test]
        public void TemplatesIdTemplateMembersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TemplatesIdTemplateMembersFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TemplatesIdTemplateMembersFkGet
        /// </summary>
        [Test]
        public void TemplatesIdTemplateMembersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TemplatesIdTemplateMembersFkGet(id, fk);
            //Assert.IsInstanceOf<TemplateMember> (response, "response is TemplateMember");
        }
        
        /// <summary>
        /// Test TemplatesIdTemplateMembersFkPut
        /// </summary>
        [Test]
        public void TemplatesIdTemplateMembersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //TemplateMember data = null;
            //var response = instance.TemplatesIdTemplateMembersFkPut(id, fk, data);
            //Assert.IsInstanceOf<TemplateMember> (response, "response is TemplateMember");
        }
        
        /// <summary>
        /// Test TemplatesIdTemplateMembersGet
        /// </summary>
        [Test]
        public void TemplatesIdTemplateMembersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TemplatesIdTemplateMembersGet(id, filter);
            //Assert.IsInstanceOf<List<TemplateMember>> (response, "response is List<TemplateMember>");
        }
        
        /// <summary>
        /// Test TemplatesIdTemplateMembersPost
        /// </summary>
        [Test]
        public void TemplatesIdTemplateMembersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TemplateMember data = null;
            //var response = instance.TemplatesIdTemplateMembersPost(id, data);
            //Assert.IsInstanceOf<TemplateMember> (response, "response is TemplateMember");
        }
        
        /// <summary>
        /// Test TemplatesIdUploaderGet
        /// </summary>
        [Test]
        public void TemplatesIdUploaderGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? refresh = null;
            //var response = instance.TemplatesIdUploaderGet(id, refresh);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TemplatesIdUrlReviewGet
        /// </summary>
        [Test]
        public void TemplatesIdUrlReviewGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.TemplatesIdUrlReviewGet(id);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test TemplatesIdWorkflowGet
        /// </summary>
        [Test]
        public void TemplatesIdWorkflowGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? refresh = null;
            //var response = instance.TemplatesIdWorkflowGet(id, refresh);
            //Assert.IsInstanceOf<Workflow> (response, "response is Workflow");
        }
        
        /// <summary>
        /// Test TemplatesPatch
        /// </summary>
        [Test]
        public void TemplatesPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Template data = null;
            //var response = instance.TemplatesPatch(data);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test TemplatesPost
        /// </summary>
        [Test]
        public void TemplatesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Template data = null;
            //var response = instance.TemplatesPost(data);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test TemplatesPut
        /// </summary>
        [Test]
        public void TemplatesPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Template data = null;
            //var response = instance.TemplatesPut(data);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test TemplatesReplaceOrCreatePost
        /// </summary>
        [Test]
        public void TemplatesReplaceOrCreatePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Template data = null;
            //var response = instance.TemplatesReplaceOrCreatePost(data);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test TemplatesUpdatePost
        /// </summary>
        [Test]
        public void TemplatesUpdatePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //Template data = null;
            //var response = instance.TemplatesUpdatePost(where, data);
            //Assert.IsInstanceOf<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        
        /// <summary>
        /// Test TemplatesUpsertWithWherePost
        /// </summary>
        [Test]
        public void TemplatesUpsertWithWherePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //Template data = null;
            //var response = instance.TemplatesUpsertWithWherePost(where, data);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
    }

}
