/* 
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.8-beta.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TweakApi.Client;
using TweakApi.Api;
using TweakApi.Model;

namespace TweakApi.Test
{
    /// <summary>
    ///  Class for testing DataSourceSoapApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DataSourceSoapApiTests
    {
        private DataSourceSoapApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DataSourceSoapApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DataSourceSoapApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DataSourceSoapApi
            //Assert.IsInstanceOfType(typeof(DataSourceSoapApi), instance, "instance is a DataSourceSoapApi");
        }

        
        /// <summary>
        /// Test DataSourceSoapsChangeStreamGet
        /// </summary>
        [Test]
        public void DataSourceSoapsChangeStreamGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string options = null;
            //var response = instance.DataSourceSoapsChangeStreamGet(options);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test DataSourceSoapsChangeStreamPost
        /// </summary>
        [Test]
        public void DataSourceSoapsChangeStreamPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string options = null;
            //var response = instance.DataSourceSoapsChangeStreamPost(options);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test DataSourceSoapsCountGet
        /// </summary>
        [Test]
        public void DataSourceSoapsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //var response = instance.DataSourceSoapsCountGet(where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test DataSourceSoapsFindOneGet
        /// </summary>
        [Test]
        public void DataSourceSoapsFindOneGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //var response = instance.DataSourceSoapsFindOneGet(filter);
            //Assert.IsInstanceOf<DataSourceSoap> (response, "response is DataSourceSoap");
        }
        
        /// <summary>
        /// Test DataSourceSoapsGet
        /// </summary>
        [Test]
        public void DataSourceSoapsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //var response = instance.DataSourceSoapsGet(filter);
            //Assert.IsInstanceOf<List<DataSourceSoap>> (response, "response is List<DataSourceSoap>");
        }
        
        /// <summary>
        /// Test DataSourceSoapsIdDelete
        /// </summary>
        [Test]
        public void DataSourceSoapsIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DataSourceSoapsIdDelete(id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test DataSourceSoapsIdDynamicDatasCountGet
        /// </summary>
        [Test]
        public void DataSourceSoapsIdDynamicDatasCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.DataSourceSoapsIdDynamicDatasCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test DataSourceSoapsIdDynamicDatasDelete
        /// </summary>
        [Test]
        public void DataSourceSoapsIdDynamicDatasDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DataSourceSoapsIdDynamicDatasDelete(id);
            
        }
        
        /// <summary>
        /// Test DataSourceSoapsIdDynamicDatasFkDelete
        /// </summary>
        [Test]
        public void DataSourceSoapsIdDynamicDatasFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.DataSourceSoapsIdDynamicDatasFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test DataSourceSoapsIdDynamicDatasFkGet
        /// </summary>
        [Test]
        public void DataSourceSoapsIdDynamicDatasFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.DataSourceSoapsIdDynamicDatasFkGet(id, fk);
            //Assert.IsInstanceOf<DynamicData> (response, "response is DynamicData");
        }
        
        /// <summary>
        /// Test DataSourceSoapsIdDynamicDatasFkPut
        /// </summary>
        [Test]
        public void DataSourceSoapsIdDynamicDatasFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //DynamicData data = null;
            //var response = instance.DataSourceSoapsIdDynamicDatasFkPut(id, fk, data);
            //Assert.IsInstanceOf<DynamicData> (response, "response is DynamicData");
        }
        
        /// <summary>
        /// Test DataSourceSoapsIdDynamicDatasGet
        /// </summary>
        [Test]
        public void DataSourceSoapsIdDynamicDatasGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.DataSourceSoapsIdDynamicDatasGet(id, filter);
            //Assert.IsInstanceOf<List<DynamicData>> (response, "response is List<DynamicData>");
        }
        
        /// <summary>
        /// Test DataSourceSoapsIdDynamicDatasPost
        /// </summary>
        [Test]
        public void DataSourceSoapsIdDynamicDatasPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DynamicData data = null;
            //var response = instance.DataSourceSoapsIdDynamicDatasPost(id, data);
            //Assert.IsInstanceOf<DynamicData> (response, "response is DynamicData");
        }
        
        /// <summary>
        /// Test DataSourceSoapsIdExistsGet
        /// </summary>
        [Test]
        public void DataSourceSoapsIdExistsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DataSourceSoapsIdExistsGet(id);
            //Assert.IsInstanceOf<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        
        /// <summary>
        /// Test DataSourceSoapsIdGet
        /// </summary>
        [Test]
        public void DataSourceSoapsIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.DataSourceSoapsIdGet(id, filter);
            //Assert.IsInstanceOf<DataSourceSoap> (response, "response is DataSourceSoap");
        }
        
        /// <summary>
        /// Test DataSourceSoapsIdHead
        /// </summary>
        [Test]
        public void DataSourceSoapsIdHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DataSourceSoapsIdHead(id);
            //Assert.IsInstanceOf<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        
        /// <summary>
        /// Test DataSourceSoapsIdPatch
        /// </summary>
        [Test]
        public void DataSourceSoapsIdPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DataSourceSoap data = null;
            //var response = instance.DataSourceSoapsIdPatch(id, data);
            //Assert.IsInstanceOf<DataSourceSoap> (response, "response is DataSourceSoap");
        }
        
        /// <summary>
        /// Test DataSourceSoapsIdPut
        /// </summary>
        [Test]
        public void DataSourceSoapsIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DataSourceSoap data = null;
            //var response = instance.DataSourceSoapsIdPut(id, data);
            //Assert.IsInstanceOf<DataSourceSoap> (response, "response is DataSourceSoap");
        }
        
        /// <summary>
        /// Test DataSourceSoapsIdReplacePost
        /// </summary>
        [Test]
        public void DataSourceSoapsIdReplacePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DataSourceSoap data = null;
            //var response = instance.DataSourceSoapsIdReplacePost(id, data);
            //Assert.IsInstanceOf<DataSourceSoap> (response, "response is DataSourceSoap");
        }
        
        /// <summary>
        /// Test DataSourceSoapsIdTeamGet
        /// </summary>
        [Test]
        public void DataSourceSoapsIdTeamGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? refresh = null;
            //var response = instance.DataSourceSoapsIdTeamGet(id, refresh);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test DataSourceSoapsPost
        /// </summary>
        [Test]
        public void DataSourceSoapsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DataSourceSoap data = null;
            //var response = instance.DataSourceSoapsPost(data);
            //Assert.IsInstanceOf<DataSourceSoap> (response, "response is DataSourceSoap");
        }
        
    }

}
