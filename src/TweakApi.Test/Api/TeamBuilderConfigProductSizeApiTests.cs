/* 
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.3-alpha.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TweakApi.Client;
using TweakApi.Api;
using TweakApi.Model;

namespace TweakApi.Test
{
    /// <summary>
    ///  Class for testing TeamBuilderConfigProductSizeApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TeamBuilderConfigProductSizeApiTests
    {
        private TeamBuilderConfigProductSizeApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TeamBuilderConfigProductSizeApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TeamBuilderConfigProductSizeApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TeamBuilderConfigProductSizeApi
            //Assert.IsInstanceOfType(typeof(TeamBuilderConfigProductSizeApi), instance, "instance is a TeamBuilderConfigProductSizeApi");
        }

        
        /// <summary>
        /// Test TeamBuilderConfigProductSizesChangeStreamGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigProductSizesChangeStreamGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string options = null;
            //var response = instance.TeamBuilderConfigProductSizesChangeStreamGet(options);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigProductSizesChangeStreamPost
        /// </summary>
        [Test]
        public void TeamBuilderConfigProductSizesChangeStreamPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string options = null;
            //var response = instance.TeamBuilderConfigProductSizesChangeStreamPost(options);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigProductSizesCountGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigProductSizesCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //var response = instance.TeamBuilderConfigProductSizesCountGet(where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigProductSizesFindOneGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigProductSizesFindOneGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //var response = instance.TeamBuilderConfigProductSizesFindOneGet(filter);
            //Assert.IsInstanceOf<TeamBuilderConfigProductSize> (response, "response is TeamBuilderConfigProductSize");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigProductSizesGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigProductSizesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //var response = instance.TeamBuilderConfigProductSizesGet(filter);
            //Assert.IsInstanceOf<List<TeamBuilderConfigProductSize>> (response, "response is List<TeamBuilderConfigProductSize>");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigProductSizesIdBuilderConfigGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigProductSizesIdBuilderConfigGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? refresh = null;
            //var response = instance.TeamBuilderConfigProductSizesIdBuilderConfigGet(id, refresh);
            //Assert.IsInstanceOf<TeamBuilderConfig> (response, "response is TeamBuilderConfig");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigProductSizesIdDelete
        /// </summary>
        [Test]
        public void TeamBuilderConfigProductSizesIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.TeamBuilderConfigProductSizesIdDelete(id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigProductSizesIdExistsGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigProductSizesIdExistsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.TeamBuilderConfigProductSizesIdExistsGet(id);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigProductSizesIdGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigProductSizesIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamBuilderConfigProductSizesIdGet(id, filter);
            //Assert.IsInstanceOf<TeamBuilderConfigProductSize> (response, "response is TeamBuilderConfigProductSize");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigProductSizesIdHead
        /// </summary>
        [Test]
        public void TeamBuilderConfigProductSizesIdHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.TeamBuilderConfigProductSizesIdHead(id);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigProductSizesIdPatch
        /// </summary>
        [Test]
        public void TeamBuilderConfigProductSizesIdPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamBuilderConfigProductSize data = null;
            //var response = instance.TeamBuilderConfigProductSizesIdPatch(id, data);
            //Assert.IsInstanceOf<TeamBuilderConfigProductSize> (response, "response is TeamBuilderConfigProductSize");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigProductSizesIdProductSizeGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigProductSizesIdProductSizeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? refresh = null;
            //var response = instance.TeamBuilderConfigProductSizesIdProductSizeGet(id, refresh);
            //Assert.IsInstanceOf<ProductSize> (response, "response is ProductSize");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigProductSizesIdPut
        /// </summary>
        [Test]
        public void TeamBuilderConfigProductSizesIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamBuilderConfigProductSize data = null;
            //var response = instance.TeamBuilderConfigProductSizesIdPut(id, data);
            //Assert.IsInstanceOf<TeamBuilderConfigProductSize> (response, "response is TeamBuilderConfigProductSize");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigProductSizesIdReplacePost
        /// </summary>
        [Test]
        public void TeamBuilderConfigProductSizesIdReplacePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamBuilderConfigProductSize data = null;
            //var response = instance.TeamBuilderConfigProductSizesIdReplacePost(id, data);
            //Assert.IsInstanceOf<TeamBuilderConfigProductSize> (response, "response is TeamBuilderConfigProductSize");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigProductSizesPatch
        /// </summary>
        [Test]
        public void TeamBuilderConfigProductSizesPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TeamBuilderConfigProductSize data = null;
            //var response = instance.TeamBuilderConfigProductSizesPatch(data);
            //Assert.IsInstanceOf<TeamBuilderConfigProductSize> (response, "response is TeamBuilderConfigProductSize");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigProductSizesPost
        /// </summary>
        [Test]
        public void TeamBuilderConfigProductSizesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TeamBuilderConfigProductSize data = null;
            //var response = instance.TeamBuilderConfigProductSizesPost(data);
            //Assert.IsInstanceOf<TeamBuilderConfigProductSize> (response, "response is TeamBuilderConfigProductSize");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigProductSizesPut
        /// </summary>
        [Test]
        public void TeamBuilderConfigProductSizesPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TeamBuilderConfigProductSize data = null;
            //var response = instance.TeamBuilderConfigProductSizesPut(data);
            //Assert.IsInstanceOf<TeamBuilderConfigProductSize> (response, "response is TeamBuilderConfigProductSize");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigProductSizesReplaceOrCreatePost
        /// </summary>
        [Test]
        public void TeamBuilderConfigProductSizesReplaceOrCreatePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TeamBuilderConfigProductSize data = null;
            //var response = instance.TeamBuilderConfigProductSizesReplaceOrCreatePost(data);
            //Assert.IsInstanceOf<TeamBuilderConfigProductSize> (response, "response is TeamBuilderConfigProductSize");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigProductSizesUpdatePost
        /// </summary>
        [Test]
        public void TeamBuilderConfigProductSizesUpdatePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //TeamBuilderConfigProductSize data = null;
            //var response = instance.TeamBuilderConfigProductSizesUpdatePost(where, data);
            //Assert.IsInstanceOf<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigProductSizesUpsertWithWherePost
        /// </summary>
        [Test]
        public void TeamBuilderConfigProductSizesUpsertWithWherePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //TeamBuilderConfigProductSize data = null;
            //var response = instance.TeamBuilderConfigProductSizesUpsertWithWherePost(where, data);
            //Assert.IsInstanceOf<TeamBuilderConfigProductSize> (response, "response is TeamBuilderConfigProductSize");
        }
        
    }

}
