/* 
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.8-beta.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TweakApi.Client;
using TweakApi.Api;
using TweakApi.Model;

namespace TweakApi.Test
{
    /// <summary>
    ///  Class for testing DataSourceRestApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DataSourceRestApiTests
    {
        private DataSourceRestApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DataSourceRestApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DataSourceRestApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DataSourceRestApi
            //Assert.IsInstanceOfType(typeof(DataSourceRestApi), instance, "instance is a DataSourceRestApi");
        }

        
        /// <summary>
        /// Test DataSourceRestsChangeStreamGet
        /// </summary>
        [Test]
        public void DataSourceRestsChangeStreamGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string options = null;
            //var response = instance.DataSourceRestsChangeStreamGet(options);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test DataSourceRestsChangeStreamPost
        /// </summary>
        [Test]
        public void DataSourceRestsChangeStreamPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string options = null;
            //var response = instance.DataSourceRestsChangeStreamPost(options);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test DataSourceRestsCountGet
        /// </summary>
        [Test]
        public void DataSourceRestsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //var response = instance.DataSourceRestsCountGet(where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test DataSourceRestsFindOneGet
        /// </summary>
        [Test]
        public void DataSourceRestsFindOneGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //var response = instance.DataSourceRestsFindOneGet(filter);
            //Assert.IsInstanceOf<DataSourceRest> (response, "response is DataSourceRest");
        }
        
        /// <summary>
        /// Test DataSourceRestsGet
        /// </summary>
        [Test]
        public void DataSourceRestsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //var response = instance.DataSourceRestsGet(filter);
            //Assert.IsInstanceOf<List<DataSourceRest>> (response, "response is List<DataSourceRest>");
        }
        
        /// <summary>
        /// Test DataSourceRestsIdDelete
        /// </summary>
        [Test]
        public void DataSourceRestsIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DataSourceRestsIdDelete(id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test DataSourceRestsIdDynamicDatasCountGet
        /// </summary>
        [Test]
        public void DataSourceRestsIdDynamicDatasCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.DataSourceRestsIdDynamicDatasCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test DataSourceRestsIdDynamicDatasDelete
        /// </summary>
        [Test]
        public void DataSourceRestsIdDynamicDatasDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DataSourceRestsIdDynamicDatasDelete(id);
            
        }
        
        /// <summary>
        /// Test DataSourceRestsIdDynamicDatasFkDelete
        /// </summary>
        [Test]
        public void DataSourceRestsIdDynamicDatasFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.DataSourceRestsIdDynamicDatasFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test DataSourceRestsIdDynamicDatasFkGet
        /// </summary>
        [Test]
        public void DataSourceRestsIdDynamicDatasFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.DataSourceRestsIdDynamicDatasFkGet(id, fk);
            //Assert.IsInstanceOf<DynamicData> (response, "response is DynamicData");
        }
        
        /// <summary>
        /// Test DataSourceRestsIdDynamicDatasFkPut
        /// </summary>
        [Test]
        public void DataSourceRestsIdDynamicDatasFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //DynamicData data = null;
            //var response = instance.DataSourceRestsIdDynamicDatasFkPut(id, fk, data);
            //Assert.IsInstanceOf<DynamicData> (response, "response is DynamicData");
        }
        
        /// <summary>
        /// Test DataSourceRestsIdDynamicDatasGet
        /// </summary>
        [Test]
        public void DataSourceRestsIdDynamicDatasGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.DataSourceRestsIdDynamicDatasGet(id, filter);
            //Assert.IsInstanceOf<List<DynamicData>> (response, "response is List<DynamicData>");
        }
        
        /// <summary>
        /// Test DataSourceRestsIdDynamicDatasPost
        /// </summary>
        [Test]
        public void DataSourceRestsIdDynamicDatasPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DynamicData data = null;
            //var response = instance.DataSourceRestsIdDynamicDatasPost(id, data);
            //Assert.IsInstanceOf<DynamicData> (response, "response is DynamicData");
        }
        
        /// <summary>
        /// Test DataSourceRestsIdExistsGet
        /// </summary>
        [Test]
        public void DataSourceRestsIdExistsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DataSourceRestsIdExistsGet(id);
            //Assert.IsInstanceOf<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        
        /// <summary>
        /// Test DataSourceRestsIdGet
        /// </summary>
        [Test]
        public void DataSourceRestsIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.DataSourceRestsIdGet(id, filter);
            //Assert.IsInstanceOf<DataSourceRest> (response, "response is DataSourceRest");
        }
        
        /// <summary>
        /// Test DataSourceRestsIdHead
        /// </summary>
        [Test]
        public void DataSourceRestsIdHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DataSourceRestsIdHead(id);
            //Assert.IsInstanceOf<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        
        /// <summary>
        /// Test DataSourceRestsIdPatch
        /// </summary>
        [Test]
        public void DataSourceRestsIdPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DataSourceRest data = null;
            //var response = instance.DataSourceRestsIdPatch(id, data);
            //Assert.IsInstanceOf<DataSourceRest> (response, "response is DataSourceRest");
        }
        
        /// <summary>
        /// Test DataSourceRestsIdPut
        /// </summary>
        [Test]
        public void DataSourceRestsIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DataSourceRest data = null;
            //var response = instance.DataSourceRestsIdPut(id, data);
            //Assert.IsInstanceOf<DataSourceRest> (response, "response is DataSourceRest");
        }
        
        /// <summary>
        /// Test DataSourceRestsIdReplacePost
        /// </summary>
        [Test]
        public void DataSourceRestsIdReplacePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DataSourceRest data = null;
            //var response = instance.DataSourceRestsIdReplacePost(id, data);
            //Assert.IsInstanceOf<DataSourceRest> (response, "response is DataSourceRest");
        }
        
        /// <summary>
        /// Test DataSourceRestsIdTeamGet
        /// </summary>
        [Test]
        public void DataSourceRestsIdTeamGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? refresh = null;
            //var response = instance.DataSourceRestsIdTeamGet(id, refresh);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test DataSourceRestsPost
        /// </summary>
        [Test]
        public void DataSourceRestsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DataSourceRest data = null;
            //var response = instance.DataSourceRestsPost(data);
            //Assert.IsInstanceOf<DataSourceRest> (response, "response is DataSourceRest");
        }
        
    }

}
