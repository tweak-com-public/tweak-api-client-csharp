/* 
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.3-alpha.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TweakApi.Client;
using TweakApi.Api;
using TweakApi.Model;

namespace TweakApi.Test
{
    /// <summary>
    ///  Class for testing TeamBuilderConfigApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TeamBuilderConfigApiTests
    {
        private TeamBuilderConfigApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TeamBuilderConfigApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TeamBuilderConfigApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TeamBuilderConfigApi
            //Assert.IsInstanceOfType(typeof(TeamBuilderConfigApi), instance, "instance is a TeamBuilderConfigApi");
        }

        
        /// <summary>
        /// Test TeamBuilderConfigsChangeStreamGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsChangeStreamGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string options = null;
            //var response = instance.TeamBuilderConfigsChangeStreamGet(options);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsChangeStreamPost
        /// </summary>
        [Test]
        public void TeamBuilderConfigsChangeStreamPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string options = null;
            //var response = instance.TeamBuilderConfigsChangeStreamPost(options);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsCountGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //var response = instance.TeamBuilderConfigsCountGet(where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsFindOneGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsFindOneGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //var response = instance.TeamBuilderConfigsFindOneGet(filter);
            //Assert.IsInstanceOf<TeamBuilderConfig> (response, "response is TeamBuilderConfig");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //var response = instance.TeamBuilderConfigsGet(filter);
            //Assert.IsInstanceOf<List<TeamBuilderConfig>> (response, "response is List<TeamBuilderConfig>");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdDelete
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.TeamBuilderConfigsIdDelete(id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdExistsGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdExistsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.TeamBuilderConfigsIdExistsGet(id);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamBuilderConfigsIdGet(id, filter);
            //Assert.IsInstanceOf<TeamBuilderConfig> (response, "response is TeamBuilderConfig");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdHead
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.TeamBuilderConfigsIdHead(id);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdPatch
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamBuilderConfig data = null;
            //var response = instance.TeamBuilderConfigsIdPatch(id, data);
            //Assert.IsInstanceOf<TeamBuilderConfig> (response, "response is TeamBuilderConfig");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductGroupsCountGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductGroupsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamBuilderConfigsIdProductGroupsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductGroupsDelete
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductGroupsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamBuilderConfigsIdProductGroupsDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductGroupsFkDelete
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductGroupsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamBuilderConfigsIdProductGroupsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductGroupsFkGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductGroupsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamBuilderConfigsIdProductGroupsFkGet(id, fk);
            //Assert.IsInstanceOf<ProductGroup> (response, "response is ProductGroup");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductGroupsFkPut
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductGroupsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //ProductGroup data = null;
            //var response = instance.TeamBuilderConfigsIdProductGroupsFkPut(id, fk, data);
            //Assert.IsInstanceOf<ProductGroup> (response, "response is ProductGroup");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductGroupsGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductGroupsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamBuilderConfigsIdProductGroupsGet(id, filter);
            //Assert.IsInstanceOf<List<ProductGroup>> (response, "response is List<ProductGroup>");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductGroupsNkTypesCountGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductGroupsNkTypesCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamBuilderConfigsIdProductGroupsNkTypesCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductGroupsNkTypesDelete
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductGroupsNkTypesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamBuilderConfigsIdProductGroupsNkTypesDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductGroupsNkTypesFkDelete
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductGroupsNkTypesFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamBuilderConfigsIdProductGroupsNkTypesFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductGroupsNkTypesFkGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductGroupsNkTypesFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamBuilderConfigsIdProductGroupsNkTypesFkGet(id, nk, fk);
            //Assert.IsInstanceOf<ProductType> (response, "response is ProductType");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductGroupsNkTypesFkPut
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductGroupsNkTypesFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //ProductType data = null;
            //var response = instance.TeamBuilderConfigsIdProductGroupsNkTypesFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<ProductType> (response, "response is ProductType");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductGroupsNkTypesGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductGroupsNkTypesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamBuilderConfigsIdProductGroupsNkTypesGet(id, nk, filter);
            //Assert.IsInstanceOf<List<ProductType>> (response, "response is List<ProductType>");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductGroupsNkTypesPost
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductGroupsNkTypesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //ProductType data = null;
            //var response = instance.TeamBuilderConfigsIdProductGroupsNkTypesPost(id, nk, data);
            //Assert.IsInstanceOf<ProductType> (response, "response is ProductType");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductGroupsPost
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductGroupsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ProductGroup data = null;
            //var response = instance.TeamBuilderConfigsIdProductGroupsPost(id, data);
            //Assert.IsInstanceOf<ProductGroup> (response, "response is ProductGroup");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductGroupsRelFkDelete
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductGroupsRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamBuilderConfigsIdProductGroupsRelFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductGroupsRelFkHead
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductGroupsRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamBuilderConfigsIdProductGroupsRelFkHead(id, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductGroupsRelFkPut
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductGroupsRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //TeamBuilderConfigProductGroup data = null;
            //var response = instance.TeamBuilderConfigsIdProductGroupsRelFkPut(id, fk, data);
            //Assert.IsInstanceOf<TeamBuilderConfigProductGroup> (response, "response is TeamBuilderConfigProductGroup");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizeMaterialsCountGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizeMaterialsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamBuilderConfigsIdProductSizeMaterialsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizeMaterialsDelete
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizeMaterialsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamBuilderConfigsIdProductSizeMaterialsDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizeMaterialsFkDelete
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizeMaterialsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamBuilderConfigsIdProductSizeMaterialsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizeMaterialsFkGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizeMaterialsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamBuilderConfigsIdProductSizeMaterialsFkGet(id, fk);
            //Assert.IsInstanceOf<ProductSizeMaterial> (response, "response is ProductSizeMaterial");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizeMaterialsFkPut
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizeMaterialsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //ProductSizeMaterial data = null;
            //var response = instance.TeamBuilderConfigsIdProductSizeMaterialsFkPut(id, fk, data);
            //Assert.IsInstanceOf<ProductSizeMaterial> (response, "response is ProductSizeMaterial");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizeMaterialsGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizeMaterialsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamBuilderConfigsIdProductSizeMaterialsGet(id, filter);
            //Assert.IsInstanceOf<List<ProductSizeMaterial>> (response, "response is List<ProductSizeMaterial>");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizeMaterialsNkMaterialGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizeMaterialsNkMaterialGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.TeamBuilderConfigsIdProductSizeMaterialsNkMaterialGet(id, nk, refresh);
            //Assert.IsInstanceOf<ProductMaterial> (response, "response is ProductMaterial");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizeMaterialsNkPdfColorProfileGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizeMaterialsNkPdfColorProfileGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.TeamBuilderConfigsIdProductSizeMaterialsNkPdfColorProfileGet(id, nk, refresh);
            //Assert.IsInstanceOf<ProductPdfColorProfile> (response, "response is ProductPdfColorProfile");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizeMaterialsNkSizeGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizeMaterialsNkSizeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.TeamBuilderConfigsIdProductSizeMaterialsNkSizeGet(id, nk, refresh);
            //Assert.IsInstanceOf<ProductSize> (response, "response is ProductSize");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizeMaterialsNkTeamGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizeMaterialsNkTeamGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.TeamBuilderConfigsIdProductSizeMaterialsNkTeamGet(id, nk, refresh);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizeMaterialsPost
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizeMaterialsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ProductSizeMaterial data = null;
            //var response = instance.TeamBuilderConfigsIdProductSizeMaterialsPost(id, data);
            //Assert.IsInstanceOf<ProductSizeMaterial> (response, "response is ProductSizeMaterial");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizeMaterialsRelCountGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizeMaterialsRelCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamBuilderConfigsIdProductSizeMaterialsRelCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizeMaterialsRelDelete
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizeMaterialsRelDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamBuilderConfigsIdProductSizeMaterialsRelDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizeMaterialsRelFkDelete
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizeMaterialsRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamBuilderConfigsIdProductSizeMaterialsRelFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizeMaterialsRelFkDelete_0
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizeMaterialsRelFkDelete_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamBuilderConfigsIdProductSizeMaterialsRelFkDelete_0(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizeMaterialsRelFkGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizeMaterialsRelFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamBuilderConfigsIdProductSizeMaterialsRelFkGet(id, fk);
            //Assert.IsInstanceOf<TeamBuilderConfigProductSizeMaterial> (response, "response is TeamBuilderConfigProductSizeMaterial");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizeMaterialsRelFkHead
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizeMaterialsRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamBuilderConfigsIdProductSizeMaterialsRelFkHead(id, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizeMaterialsRelFkPut
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizeMaterialsRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //TeamBuilderConfigProductSizeMaterial data = null;
            //var response = instance.TeamBuilderConfigsIdProductSizeMaterialsRelFkPut(id, fk, data);
            //Assert.IsInstanceOf<TeamBuilderConfigProductSizeMaterial> (response, "response is TeamBuilderConfigProductSizeMaterial");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizeMaterialsRelFkPut_0
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizeMaterialsRelFkPut_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //TeamBuilderConfigProductSizeMaterial data = null;
            //var response = instance.TeamBuilderConfigsIdProductSizeMaterialsRelFkPut_0(id, fk, data);
            //Assert.IsInstanceOf<TeamBuilderConfigProductSizeMaterial> (response, "response is TeamBuilderConfigProductSizeMaterial");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizeMaterialsRelGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizeMaterialsRelGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamBuilderConfigsIdProductSizeMaterialsRelGet(id, filter);
            //Assert.IsInstanceOf<List<TeamBuilderConfigProductSizeMaterial>> (response, "response is List<TeamBuilderConfigProductSizeMaterial>");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizeMaterialsRelNkBuilderConfigGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizeMaterialsRelNkBuilderConfigGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.TeamBuilderConfigsIdProductSizeMaterialsRelNkBuilderConfigGet(id, nk, refresh);
            //Assert.IsInstanceOf<TeamBuilderConfig> (response, "response is TeamBuilderConfig");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizeMaterialsRelNkPdfColorProfileGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizeMaterialsRelNkPdfColorProfileGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.TeamBuilderConfigsIdProductSizeMaterialsRelNkPdfColorProfileGet(id, nk, refresh);
            //Assert.IsInstanceOf<ProductPdfColorProfile> (response, "response is ProductPdfColorProfile");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizeMaterialsRelNkProductSizeMaterialGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizeMaterialsRelNkProductSizeMaterialGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.TeamBuilderConfigsIdProductSizeMaterialsRelNkProductSizeMaterialGet(id, nk, refresh);
            //Assert.IsInstanceOf<ProductSizeMaterial> (response, "response is ProductSizeMaterial");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizeMaterialsRelPost
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizeMaterialsRelPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamBuilderConfigProductSizeMaterial data = null;
            //var response = instance.TeamBuilderConfigsIdProductSizeMaterialsRelPost(id, data);
            //Assert.IsInstanceOf<TeamBuilderConfigProductSizeMaterial> (response, "response is TeamBuilderConfigProductSizeMaterial");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesCountGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamBuilderConfigsIdProductSizesCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesDelete
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamBuilderConfigsIdProductSizesDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesFkDelete
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamBuilderConfigsIdProductSizesFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesFkGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamBuilderConfigsIdProductSizesFkGet(id, fk);
            //Assert.IsInstanceOf<ProductSize> (response, "response is ProductSize");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesFkPut
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //ProductSize data = null;
            //var response = instance.TeamBuilderConfigsIdProductSizesFkPut(id, fk, data);
            //Assert.IsInstanceOf<ProductSize> (response, "response is ProductSize");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamBuilderConfigsIdProductSizesGet(id, filter);
            //Assert.IsInstanceOf<List<ProductSize>> (response, "response is List<ProductSize>");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesNkMaterialsCountGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesNkMaterialsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamBuilderConfigsIdProductSizesNkMaterialsCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesNkMaterialsDelete
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesNkMaterialsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamBuilderConfigsIdProductSizesNkMaterialsDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesNkMaterialsFkDelete
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesNkMaterialsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamBuilderConfigsIdProductSizesNkMaterialsFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesNkMaterialsFkGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesNkMaterialsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamBuilderConfigsIdProductSizesNkMaterialsFkGet(id, nk, fk);
            //Assert.IsInstanceOf<ProductMaterial> (response, "response is ProductMaterial");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesNkMaterialsFkPut
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesNkMaterialsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //ProductMaterial data = null;
            //var response = instance.TeamBuilderConfigsIdProductSizesNkMaterialsFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<ProductMaterial> (response, "response is ProductMaterial");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesNkMaterialsGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesNkMaterialsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamBuilderConfigsIdProductSizesNkMaterialsGet(id, nk, filter);
            //Assert.IsInstanceOf<List<ProductMaterial>> (response, "response is List<ProductMaterial>");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesNkMaterialsPost
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesNkMaterialsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //ProductMaterial data = null;
            //var response = instance.TeamBuilderConfigsIdProductSizesNkMaterialsPost(id, nk, data);
            //Assert.IsInstanceOf<ProductMaterial> (response, "response is ProductMaterial");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesNkMaterialsRelFkDelete
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesNkMaterialsRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamBuilderConfigsIdProductSizesNkMaterialsRelFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesNkMaterialsRelFkHead
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesNkMaterialsRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamBuilderConfigsIdProductSizesNkMaterialsRelFkHead(id, nk, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesNkMaterialsRelFkPut
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesNkMaterialsRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //ProductSizeMaterial data = null;
            //var response = instance.TeamBuilderConfigsIdProductSizesNkMaterialsRelFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<ProductSizeMaterial> (response, "response is ProductSizeMaterial");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesNkPdfColorProfileGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesNkPdfColorProfileGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.TeamBuilderConfigsIdProductSizesNkPdfColorProfileGet(id, nk, refresh);
            //Assert.IsInstanceOf<ProductPdfColorProfile> (response, "response is ProductPdfColorProfile");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesNkProductsCountGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesNkProductsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamBuilderConfigsIdProductSizesNkProductsCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesNkProductsDelete
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesNkProductsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamBuilderConfigsIdProductSizesNkProductsDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesNkProductsFkDelete
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesNkProductsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamBuilderConfigsIdProductSizesNkProductsFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesNkProductsFkGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesNkProductsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamBuilderConfigsIdProductSizesNkProductsFkGet(id, nk, fk);
            //Assert.IsInstanceOf<Product> (response, "response is Product");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesNkProductsFkPut
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesNkProductsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //Product data = null;
            //var response = instance.TeamBuilderConfigsIdProductSizesNkProductsFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<Product> (response, "response is Product");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesNkProductsGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesNkProductsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamBuilderConfigsIdProductSizesNkProductsGet(id, nk, filter);
            //Assert.IsInstanceOf<List<Product>> (response, "response is List<Product>");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesNkProductsPost
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesNkProductsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //Product data = null;
            //var response = instance.TeamBuilderConfigsIdProductSizesNkProductsPost(id, nk, data);
            //Assert.IsInstanceOf<Product> (response, "response is Product");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesNkSizeMaterialsCountGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesNkSizeMaterialsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamBuilderConfigsIdProductSizesNkSizeMaterialsCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesNkSizeMaterialsDelete
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesNkSizeMaterialsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamBuilderConfigsIdProductSizesNkSizeMaterialsDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkDelete
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkGet(id, nk, fk);
            //Assert.IsInstanceOf<ProductSizeMaterial> (response, "response is ProductSizeMaterial");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkPut
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //ProductSizeMaterial data = null;
            //var response = instance.TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<ProductSizeMaterial> (response, "response is ProductSizeMaterial");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesNkSizeMaterialsGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesNkSizeMaterialsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamBuilderConfigsIdProductSizesNkSizeMaterialsGet(id, nk, filter);
            //Assert.IsInstanceOf<List<ProductSizeMaterial>> (response, "response is List<ProductSizeMaterial>");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesNkSizeMaterialsPost
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesNkSizeMaterialsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //ProductSizeMaterial data = null;
            //var response = instance.TeamBuilderConfigsIdProductSizesNkSizeMaterialsPost(id, nk, data);
            //Assert.IsInstanceOf<ProductSizeMaterial> (response, "response is ProductSizeMaterial");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesNkTypeGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesNkTypeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.TeamBuilderConfigsIdProductSizesNkTypeGet(id, nk, refresh);
            //Assert.IsInstanceOf<ProductType> (response, "response is ProductType");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesPost
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ProductSize data = null;
            //var response = instance.TeamBuilderConfigsIdProductSizesPost(id, data);
            //Assert.IsInstanceOf<ProductSize> (response, "response is ProductSize");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesRelFkDelete
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamBuilderConfigsIdProductSizesRelFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesRelFkHead
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamBuilderConfigsIdProductSizesRelFkHead(id, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductSizesRelFkPut
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductSizesRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //TeamBuilderConfigProductSize data = null;
            //var response = instance.TeamBuilderConfigsIdProductSizesRelFkPut(id, fk, data);
            //Assert.IsInstanceOf<TeamBuilderConfigProductSize> (response, "response is TeamBuilderConfigProductSize");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductTypesCountGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductTypesCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamBuilderConfigsIdProductTypesCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductTypesDelete
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductTypesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamBuilderConfigsIdProductTypesDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductTypesFkDelete
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductTypesFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamBuilderConfigsIdProductTypesFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductTypesFkGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductTypesFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamBuilderConfigsIdProductTypesFkGet(id, fk);
            //Assert.IsInstanceOf<ProductType> (response, "response is ProductType");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductTypesFkPut
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductTypesFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //ProductType data = null;
            //var response = instance.TeamBuilderConfigsIdProductTypesFkPut(id, fk, data);
            //Assert.IsInstanceOf<ProductType> (response, "response is ProductType");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductTypesGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductTypesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamBuilderConfigsIdProductTypesGet(id, filter);
            //Assert.IsInstanceOf<List<ProductType>> (response, "response is List<ProductType>");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductTypesNkGroupGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductTypesNkGroupGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.TeamBuilderConfigsIdProductTypesNkGroupGet(id, nk, refresh);
            //Assert.IsInstanceOf<ProductGroup> (response, "response is ProductGroup");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductTypesNkSizesCountGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductTypesNkSizesCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.TeamBuilderConfigsIdProductTypesNkSizesCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductTypesNkSizesDelete
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductTypesNkSizesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.TeamBuilderConfigsIdProductTypesNkSizesDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductTypesNkSizesFkDelete
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductTypesNkSizesFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.TeamBuilderConfigsIdProductTypesNkSizesFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductTypesNkSizesFkGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductTypesNkSizesFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamBuilderConfigsIdProductTypesNkSizesFkGet(id, nk, fk);
            //Assert.IsInstanceOf<ProductSize> (response, "response is ProductSize");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductTypesNkSizesFkPut
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductTypesNkSizesFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //ProductSize data = null;
            //var response = instance.TeamBuilderConfigsIdProductTypesNkSizesFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<ProductSize> (response, "response is ProductSize");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductTypesNkSizesGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductTypesNkSizesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamBuilderConfigsIdProductTypesNkSizesGet(id, nk, filter);
            //Assert.IsInstanceOf<List<ProductSize>> (response, "response is List<ProductSize>");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductTypesNkSizesPost
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductTypesNkSizesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //ProductSize data = null;
            //var response = instance.TeamBuilderConfigsIdProductTypesNkSizesPost(id, nk, data);
            //Assert.IsInstanceOf<ProductSize> (response, "response is ProductSize");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductTypesPost
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductTypesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ProductType data = null;
            //var response = instance.TeamBuilderConfigsIdProductTypesPost(id, data);
            //Assert.IsInstanceOf<ProductType> (response, "response is ProductType");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductTypesRelFkDelete
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductTypesRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamBuilderConfigsIdProductTypesRelFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductTypesRelFkHead
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductTypesRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamBuilderConfigsIdProductTypesRelFkHead(id, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdProductTypesRelFkPut
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdProductTypesRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //TeamBuilderConfigProductType data = null;
            //var response = instance.TeamBuilderConfigsIdProductTypesRelFkPut(id, fk, data);
            //Assert.IsInstanceOf<TeamBuilderConfigProductType> (response, "response is TeamBuilderConfigProductType");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdPut
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamBuilderConfig data = null;
            //var response = instance.TeamBuilderConfigsIdPut(id, data);
            //Assert.IsInstanceOf<TeamBuilderConfig> (response, "response is TeamBuilderConfig");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdReplacePost
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdReplacePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamBuilderConfig data = null;
            //var response = instance.TeamBuilderConfigsIdReplacePost(id, data);
            //Assert.IsInstanceOf<TeamBuilderConfig> (response, "response is TeamBuilderConfig");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsIdTeamGet
        /// </summary>
        [Test]
        public void TeamBuilderConfigsIdTeamGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? refresh = null;
            //var response = instance.TeamBuilderConfigsIdTeamGet(id, refresh);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsPatch
        /// </summary>
        [Test]
        public void TeamBuilderConfigsPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TeamBuilderConfig data = null;
            //var response = instance.TeamBuilderConfigsPatch(data);
            //Assert.IsInstanceOf<TeamBuilderConfig> (response, "response is TeamBuilderConfig");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsPost
        /// </summary>
        [Test]
        public void TeamBuilderConfigsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TeamBuilderConfig data = null;
            //var response = instance.TeamBuilderConfigsPost(data);
            //Assert.IsInstanceOf<TeamBuilderConfig> (response, "response is TeamBuilderConfig");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsPut
        /// </summary>
        [Test]
        public void TeamBuilderConfigsPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TeamBuilderConfig data = null;
            //var response = instance.TeamBuilderConfigsPut(data);
            //Assert.IsInstanceOf<TeamBuilderConfig> (response, "response is TeamBuilderConfig");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsReplaceOrCreatePost
        /// </summary>
        [Test]
        public void TeamBuilderConfigsReplaceOrCreatePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TeamBuilderConfig data = null;
            //var response = instance.TeamBuilderConfigsReplaceOrCreatePost(data);
            //Assert.IsInstanceOf<TeamBuilderConfig> (response, "response is TeamBuilderConfig");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsUpdatePost
        /// </summary>
        [Test]
        public void TeamBuilderConfigsUpdatePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //TeamBuilderConfig data = null;
            //var response = instance.TeamBuilderConfigsUpdatePost(where, data);
            //Assert.IsInstanceOf<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        
        /// <summary>
        /// Test TeamBuilderConfigsUpsertWithWherePost
        /// </summary>
        [Test]
        public void TeamBuilderConfigsUpsertWithWherePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //TeamBuilderConfig data = null;
            //var response = instance.TeamBuilderConfigsUpsertWithWherePost(where, data);
            //Assert.IsInstanceOf<TeamBuilderConfig> (response, "response is TeamBuilderConfig");
        }
        
    }

}
