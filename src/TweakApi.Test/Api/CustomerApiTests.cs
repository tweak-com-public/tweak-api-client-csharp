/* 
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.3-alpha.14
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TweakApi.Client;
using TweakApi.Api;
using TweakApi.Model;

namespace TweakApi.Test
{
    /// <summary>
    ///  Class for testing CustomerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CustomerApiTests
    {
        private CustomerApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CustomerApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CustomerApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CustomerApi
            //Assert.IsInstanceOfType(typeof(CustomerApi), instance, "instance is a CustomerApi");
        }

        
        /// <summary>
        /// Test CustomersChangePasswordPost
        /// </summary>
        [Test]
        public void CustomersChangePasswordPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string oldPassword = null;
            //string newPassword = null;
            //instance.CustomersChangePasswordPost(oldPassword, newPassword);
            
        }
        
        /// <summary>
        /// Test CustomersChangeStreamGet
        /// </summary>
        [Test]
        public void CustomersChangeStreamGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string options = null;
            //var response = instance.CustomersChangeStreamGet(options);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test CustomersChangeStreamPost
        /// </summary>
        [Test]
        public void CustomersChangeStreamPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string options = null;
            //var response = instance.CustomersChangeStreamPost(options);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test CustomersConfirmGet
        /// </summary>
        [Test]
        public void CustomersConfirmGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //string token = null;
            //string redirect = null;
            //instance.CustomersConfirmGet(uid, token, redirect);
            
        }
        
        /// <summary>
        /// Test CustomersCountGet
        /// </summary>
        [Test]
        public void CustomersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //var response = instance.CustomersCountGet(where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test CustomersEmailEmailExistsGet
        /// </summary>
        [Test]
        public void CustomersEmailEmailExistsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //var response = instance.CustomersEmailEmailExistsGet(email);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test CustomersFindOneGet
        /// </summary>
        [Test]
        public void CustomersFindOneGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //var response = instance.CustomersFindOneGet(filter);
            //Assert.IsInstanceOf<Customer> (response, "response is Customer");
        }
        
        /// <summary>
        /// Test CustomersGet
        /// </summary>
        [Test]
        public void CustomersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //var response = instance.CustomersGet(filter);
            //Assert.IsInstanceOf<List<Customer>> (response, "response is List<Customer>");
        }
        
        /// <summary>
        /// Test CustomersIdAccessTokensCountGet
        /// </summary>
        [Test]
        public void CustomersIdAccessTokensCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.CustomersIdAccessTokensCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test CustomersIdAccessTokensDelete
        /// </summary>
        [Test]
        public void CustomersIdAccessTokensDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.CustomersIdAccessTokensDelete(id);
            
        }
        
        /// <summary>
        /// Test CustomersIdAccessTokensFkDelete
        /// </summary>
        [Test]
        public void CustomersIdAccessTokensFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.CustomersIdAccessTokensFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test CustomersIdAccessTokensFkGet
        /// </summary>
        [Test]
        public void CustomersIdAccessTokensFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.CustomersIdAccessTokensFkGet(id, fk);
            //Assert.IsInstanceOf<TeamMemberAccessToken> (response, "response is TeamMemberAccessToken");
        }
        
        /// <summary>
        /// Test CustomersIdAccessTokensFkPut
        /// </summary>
        [Test]
        public void CustomersIdAccessTokensFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //TeamMemberAccessToken data = null;
            //var response = instance.CustomersIdAccessTokensFkPut(id, fk, data);
            //Assert.IsInstanceOf<TeamMemberAccessToken> (response, "response is TeamMemberAccessToken");
        }
        
        /// <summary>
        /// Test CustomersIdAccessTokensGet
        /// </summary>
        [Test]
        public void CustomersIdAccessTokensGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.CustomersIdAccessTokensGet(id, filter);
            //Assert.IsInstanceOf<List<TeamMemberAccessToken>> (response, "response is List<TeamMemberAccessToken>");
        }
        
        /// <summary>
        /// Test CustomersIdAccessTokensPost
        /// </summary>
        [Test]
        public void CustomersIdAccessTokensPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamMemberAccessToken data = null;
            //var response = instance.CustomersIdAccessTokensPost(id, data);
            //Assert.IsInstanceOf<TeamMemberAccessToken> (response, "response is TeamMemberAccessToken");
        }
        
        /// <summary>
        /// Test CustomersIdActiveGet
        /// </summary>
        [Test]
        public void CustomersIdActiveGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.CustomersIdActiveGet(id);
            //Assert.IsInstanceOf<InlineResponse2003> (response, "response is InlineResponse2003");
        }
        
        /// <summary>
        /// Test CustomersIdDelete
        /// </summary>
        [Test]
        public void CustomersIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.CustomersIdDelete(id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test CustomersIdExistsGet
        /// </summary>
        [Test]
        public void CustomersIdExistsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.CustomersIdExistsGet(id);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test CustomersIdGet
        /// </summary>
        [Test]
        public void CustomersIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.CustomersIdGet(id, filter);
            //Assert.IsInstanceOf<Customer> (response, "response is Customer");
        }
        
        /// <summary>
        /// Test CustomersIdHead
        /// </summary>
        [Test]
        public void CustomersIdHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.CustomersIdHead(id);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test CustomersIdInvitationTicketsCountGet
        /// </summary>
        [Test]
        public void CustomersIdInvitationTicketsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.CustomersIdInvitationTicketsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test CustomersIdInvitationTicketsDelete
        /// </summary>
        [Test]
        public void CustomersIdInvitationTicketsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.CustomersIdInvitationTicketsDelete(id);
            
        }
        
        /// <summary>
        /// Test CustomersIdInvitationTicketsFkDelete
        /// </summary>
        [Test]
        public void CustomersIdInvitationTicketsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.CustomersIdInvitationTicketsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test CustomersIdInvitationTicketsFkGet
        /// </summary>
        [Test]
        public void CustomersIdInvitationTicketsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.CustomersIdInvitationTicketsFkGet(id, fk);
            //Assert.IsInstanceOf<InvitationTicket> (response, "response is InvitationTicket");
        }
        
        /// <summary>
        /// Test CustomersIdInvitationTicketsFkPut
        /// </summary>
        [Test]
        public void CustomersIdInvitationTicketsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //InvitationTicket data = null;
            //var response = instance.CustomersIdInvitationTicketsFkPut(id, fk, data);
            //Assert.IsInstanceOf<InvitationTicket> (response, "response is InvitationTicket");
        }
        
        /// <summary>
        /// Test CustomersIdInvitationTicketsGet
        /// </summary>
        [Test]
        public void CustomersIdInvitationTicketsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.CustomersIdInvitationTicketsGet(id, filter);
            //Assert.IsInstanceOf<List<InvitationTicket>> (response, "response is List<InvitationTicket>");
        }
        
        /// <summary>
        /// Test CustomersIdInvitationTicketsPost
        /// </summary>
        [Test]
        public void CustomersIdInvitationTicketsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //InvitationTicket data = null;
            //var response = instance.CustomersIdInvitationTicketsPost(id, data);
            //Assert.IsInstanceOf<InvitationTicket> (response, "response is InvitationTicket");
        }
        
        /// <summary>
        /// Test CustomersIdPatch
        /// </summary>
        [Test]
        public void CustomersIdPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Customer data = null;
            //var response = instance.CustomersIdPatch(id, data);
            //Assert.IsInstanceOf<Customer> (response, "response is Customer");
        }
        
        /// <summary>
        /// Test CustomersIdPermissionDelete
        /// </summary>
        [Test]
        public void CustomersIdPermissionDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.CustomersIdPermissionDelete(id);
            
        }
        
        /// <summary>
        /// Test CustomersIdPermissionGet
        /// </summary>
        [Test]
        public void CustomersIdPermissionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? refresh = null;
            //var response = instance.CustomersIdPermissionGet(id, refresh);
            //Assert.IsInstanceOf<CustomerPermissionSet> (response, "response is CustomerPermissionSet");
        }
        
        /// <summary>
        /// Test CustomersIdPermissionPost
        /// </summary>
        [Test]
        public void CustomersIdPermissionPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //CustomerPermissionSet data = null;
            //var response = instance.CustomersIdPermissionPost(id, data);
            //Assert.IsInstanceOf<CustomerPermissionSet> (response, "response is CustomerPermissionSet");
        }
        
        /// <summary>
        /// Test CustomersIdPermissionPut
        /// </summary>
        [Test]
        public void CustomersIdPermissionPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //CustomerPermissionSet data = null;
            //var response = instance.CustomersIdPermissionPut(id, data);
            //Assert.IsInstanceOf<CustomerPermissionSet> (response, "response is CustomerPermissionSet");
        }
        
        /// <summary>
        /// Test CustomersIdProfilePicturePut
        /// </summary>
        [Test]
        public void CustomersIdProfilePicturePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //Customer data = null;
            //var response = instance.CustomersIdProfilePicturePut(id, id2, data);
            //Assert.IsInstanceOf<Customer> (response, "response is Customer");
        }
        
        /// <summary>
        /// Test CustomersIdPut
        /// </summary>
        [Test]
        public void CustomersIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Customer data = null;
            //var response = instance.CustomersIdPut(id, data);
            //Assert.IsInstanceOf<Customer> (response, "response is Customer");
        }
        
        /// <summary>
        /// Test CustomersIdRegisterTeamPost
        /// </summary>
        [Test]
        public void CustomersIdRegisterTeamPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Team data = null;
            //var response = instance.CustomersIdRegisterTeamPost(id, data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test CustomersIdReplacePost
        /// </summary>
        [Test]
        public void CustomersIdReplacePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Customer data = null;
            //var response = instance.CustomersIdReplacePost(id, data);
            //Assert.IsInstanceOf<Customer> (response, "response is Customer");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsCountGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.CustomersIdTeamsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.CustomersIdTeamsDelete(id);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsFkDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.CustomersIdTeamsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsFkGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.CustomersIdTeamsFkGet(id, fk);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsFkPut
        /// </summary>
        [Test]
        public void CustomersIdTeamsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //Team data = null;
            //var response = instance.CustomersIdTeamsFkPut(id, fk, data);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.CustomersIdTeamsGet(id, filter);
            //Assert.IsInstanceOf<List<Team>> (response, "response is List<Team>");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkBrandDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkBrandDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.CustomersIdTeamsNkBrandDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkBrandGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkBrandGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.CustomersIdTeamsNkBrandGet(id, nk, refresh);
            //Assert.IsInstanceOf<TeamBrand> (response, "response is TeamBrand");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkBrandPost
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkBrandPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //TeamBrand data = null;
            //var response = instance.CustomersIdTeamsNkBrandPost(id, nk, data);
            //Assert.IsInstanceOf<TeamBrand> (response, "response is TeamBrand");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkBrandPut
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkBrandPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //TeamBrand data = null;
            //var response = instance.CustomersIdTeamsNkBrandPut(id, nk, data);
            //Assert.IsInstanceOf<TeamBrand> (response, "response is TeamBrand");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkBuilderConfigsCountGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkBuilderConfigsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.CustomersIdTeamsNkBuilderConfigsCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkBuilderConfigsDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkBuilderConfigsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.CustomersIdTeamsNkBuilderConfigsDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkBuilderConfigsFkDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkBuilderConfigsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.CustomersIdTeamsNkBuilderConfigsFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkBuilderConfigsFkGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkBuilderConfigsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.CustomersIdTeamsNkBuilderConfigsFkGet(id, nk, fk);
            //Assert.IsInstanceOf<TeamBuilderConfig> (response, "response is TeamBuilderConfig");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkBuilderConfigsFkPut
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkBuilderConfigsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //TeamBuilderConfig data = null;
            //var response = instance.CustomersIdTeamsNkBuilderConfigsFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<TeamBuilderConfig> (response, "response is TeamBuilderConfig");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkBuilderConfigsGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkBuilderConfigsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.CustomersIdTeamsNkBuilderConfigsGet(id, nk, filter);
            //Assert.IsInstanceOf<List<TeamBuilderConfig>> (response, "response is List<TeamBuilderConfig>");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkBuilderConfigsPost
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkBuilderConfigsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //TeamBuilderConfig data = null;
            //var response = instance.CustomersIdTeamsNkBuilderConfigsPost(id, nk, data);
            //Assert.IsInstanceOf<TeamBuilderConfig> (response, "response is TeamBuilderConfig");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkDataSourcesCountGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkDataSourcesCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.CustomersIdTeamsNkDataSourcesCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkDataSourcesDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkDataSourcesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.CustomersIdTeamsNkDataSourcesDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkDataSourcesFkDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkDataSourcesFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.CustomersIdTeamsNkDataSourcesFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkDataSourcesFkGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkDataSourcesFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.CustomersIdTeamsNkDataSourcesFkGet(id, nk, fk);
            //Assert.IsInstanceOf<DataSource> (response, "response is DataSource");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkDataSourcesFkPut
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkDataSourcesFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //DataSource data = null;
            //var response = instance.CustomersIdTeamsNkDataSourcesFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<DataSource> (response, "response is DataSource");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkDataSourcesGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkDataSourcesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.CustomersIdTeamsNkDataSourcesGet(id, nk, filter);
            //Assert.IsInstanceOf<List<DataSource>> (response, "response is List<DataSource>");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkDataSourcesPost
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkDataSourcesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //DataSource data = null;
            //var response = instance.CustomersIdTeamsNkDataSourcesPost(id, nk, data);
            //Assert.IsInstanceOf<DataSource> (response, "response is DataSource");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkDynamicDatasCountGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkDynamicDatasCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.CustomersIdTeamsNkDynamicDatasCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkDynamicDatasDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkDynamicDatasDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.CustomersIdTeamsNkDynamicDatasDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkDynamicDatasFkDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkDynamicDatasFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.CustomersIdTeamsNkDynamicDatasFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkDynamicDatasFkGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkDynamicDatasFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.CustomersIdTeamsNkDynamicDatasFkGet(id, nk, fk);
            //Assert.IsInstanceOf<DynamicData> (response, "response is DynamicData");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkDynamicDatasFkPut
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkDynamicDatasFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //DynamicData data = null;
            //var response = instance.CustomersIdTeamsNkDynamicDatasFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<DynamicData> (response, "response is DynamicData");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkDynamicDatasGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkDynamicDatasGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.CustomersIdTeamsNkDynamicDatasGet(id, nk, filter);
            //Assert.IsInstanceOf<List<DynamicData>> (response, "response is List<DynamicData>");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkDynamicDatasPost
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkDynamicDatasPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //DynamicData data = null;
            //var response = instance.CustomersIdTeamsNkDynamicDatasPost(id, nk, data);
            //Assert.IsInstanceOf<DynamicData> (response, "response is DynamicData");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkImageFoldersCountGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkImageFoldersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.CustomersIdTeamsNkImageFoldersCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkImageFoldersDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkImageFoldersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.CustomersIdTeamsNkImageFoldersDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkImageFoldersFkDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkImageFoldersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.CustomersIdTeamsNkImageFoldersFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkImageFoldersFkGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkImageFoldersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.CustomersIdTeamsNkImageFoldersFkGet(id, nk, fk);
            //Assert.IsInstanceOf<ImageFolder> (response, "response is ImageFolder");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkImageFoldersFkPut
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkImageFoldersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //ImageFolder data = null;
            //var response = instance.CustomersIdTeamsNkImageFoldersFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<ImageFolder> (response, "response is ImageFolder");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkImageFoldersGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkImageFoldersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.CustomersIdTeamsNkImageFoldersGet(id, nk, filter);
            //Assert.IsInstanceOf<List<ImageFolder>> (response, "response is List<ImageFolder>");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkImageFoldersPost
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkImageFoldersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //ImageFolder data = null;
            //var response = instance.CustomersIdTeamsNkImageFoldersPost(id, nk, data);
            //Assert.IsInstanceOf<ImageFolder> (response, "response is ImageFolder");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkImagesCountGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkImagesCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.CustomersIdTeamsNkImagesCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkImagesDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkImagesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.CustomersIdTeamsNkImagesDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkImagesFkDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkImagesFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.CustomersIdTeamsNkImagesFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkImagesFkGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkImagesFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.CustomersIdTeamsNkImagesFkGet(id, nk, fk);
            //Assert.IsInstanceOf<Image> (response, "response is Image");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkImagesFkPut
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkImagesFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //Image data = null;
            //var response = instance.CustomersIdTeamsNkImagesFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<Image> (response, "response is Image");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkImagesGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkImagesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.CustomersIdTeamsNkImagesGet(id, nk, filter);
            //Assert.IsInstanceOf<List<Image>> (response, "response is List<Image>");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkImagesPost
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkImagesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //Image data = null;
            //var response = instance.CustomersIdTeamsNkImagesPost(id, nk, data);
            //Assert.IsInstanceOf<Image> (response, "response is Image");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkMembersCountGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkMembersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.CustomersIdTeamsNkMembersCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkMembersDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkMembersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.CustomersIdTeamsNkMembersDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkMembersFkDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkMembersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.CustomersIdTeamsNkMembersFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkMembersFkGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkMembersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.CustomersIdTeamsNkMembersFkGet(id, nk, fk);
            //Assert.IsInstanceOf<Customer> (response, "response is Customer");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkMembersFkPut
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkMembersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //Customer data = null;
            //var response = instance.CustomersIdTeamsNkMembersFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<Customer> (response, "response is Customer");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkMembersGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkMembersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.CustomersIdTeamsNkMembersGet(id, nk, filter);
            //Assert.IsInstanceOf<List<Customer>> (response, "response is List<Customer>");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkMembersPost
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkMembersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //Customer data = null;
            //var response = instance.CustomersIdTeamsNkMembersPost(id, nk, data);
            //Assert.IsInstanceOf<Customer> (response, "response is Customer");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkMembersRelFkDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkMembersRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.CustomersIdTeamsNkMembersRelFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkMembersRelFkHead
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkMembersRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.CustomersIdTeamsNkMembersRelFkHead(id, nk, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkMembersRelFkPut
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkMembersRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //TeamMember data = null;
            //var response = instance.CustomersIdTeamsNkMembersRelFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkPermissionDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkPermissionDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.CustomersIdTeamsNkPermissionDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkPermissionGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkPermissionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.CustomersIdTeamsNkPermissionGet(id, nk, refresh);
            //Assert.IsInstanceOf<TeamPermissionSet> (response, "response is TeamPermissionSet");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkPermissionPost
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkPermissionPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //TeamPermissionSet data = null;
            //var response = instance.CustomersIdTeamsNkPermissionPost(id, nk, data);
            //Assert.IsInstanceOf<TeamPermissionSet> (response, "response is TeamPermissionSet");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkPermissionPut
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkPermissionPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //TeamPermissionSet data = null;
            //var response = instance.CustomersIdTeamsNkPermissionPut(id, nk, data);
            //Assert.IsInstanceOf<TeamPermissionSet> (response, "response is TeamPermissionSet");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkPortalsCountGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkPortalsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.CustomersIdTeamsNkPortalsCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkPortalsDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkPortalsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.CustomersIdTeamsNkPortalsDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkPortalsFkDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkPortalsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.CustomersIdTeamsNkPortalsFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkPortalsFkGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkPortalsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.CustomersIdTeamsNkPortalsFkGet(id, nk, fk);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkPortalsFkPut
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkPortalsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //Portal data = null;
            //var response = instance.CustomersIdTeamsNkPortalsFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkPortalsGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkPortalsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.CustomersIdTeamsNkPortalsGet(id, nk, filter);
            //Assert.IsInstanceOf<List<Portal>> (response, "response is List<Portal>");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkPortalsPost
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkPortalsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //Portal data = null;
            //var response = instance.CustomersIdTeamsNkPortalsPost(id, nk, data);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkProductMaterialsCountGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkProductMaterialsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.CustomersIdTeamsNkProductMaterialsCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkProductMaterialsDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkProductMaterialsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.CustomersIdTeamsNkProductMaterialsDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkProductMaterialsFkDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkProductMaterialsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.CustomersIdTeamsNkProductMaterialsFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkProductMaterialsFkGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkProductMaterialsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.CustomersIdTeamsNkProductMaterialsFkGet(id, nk, fk);
            //Assert.IsInstanceOf<ProductMaterial> (response, "response is ProductMaterial");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkProductMaterialsFkPut
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkProductMaterialsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //ProductMaterial data = null;
            //var response = instance.CustomersIdTeamsNkProductMaterialsFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<ProductMaterial> (response, "response is ProductMaterial");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkProductMaterialsGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkProductMaterialsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.CustomersIdTeamsNkProductMaterialsGet(id, nk, filter);
            //Assert.IsInstanceOf<List<ProductMaterial>> (response, "response is List<ProductMaterial>");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkProductMaterialsPost
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkProductMaterialsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //ProductMaterial data = null;
            //var response = instance.CustomersIdTeamsNkProductMaterialsPost(id, nk, data);
            //Assert.IsInstanceOf<ProductMaterial> (response, "response is ProductMaterial");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkProductPdfColorProfilesCountGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkProductPdfColorProfilesCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.CustomersIdTeamsNkProductPdfColorProfilesCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkProductPdfColorProfilesDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkProductPdfColorProfilesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.CustomersIdTeamsNkProductPdfColorProfilesDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkProductPdfColorProfilesFkDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkProductPdfColorProfilesFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.CustomersIdTeamsNkProductPdfColorProfilesFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkProductPdfColorProfilesFkGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkProductPdfColorProfilesFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.CustomersIdTeamsNkProductPdfColorProfilesFkGet(id, nk, fk);
            //Assert.IsInstanceOf<ProductPdfColorProfile> (response, "response is ProductPdfColorProfile");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkProductPdfColorProfilesFkPut
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkProductPdfColorProfilesFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //ProductPdfColorProfile data = null;
            //var response = instance.CustomersIdTeamsNkProductPdfColorProfilesFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<ProductPdfColorProfile> (response, "response is ProductPdfColorProfile");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkProductPdfColorProfilesGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkProductPdfColorProfilesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.CustomersIdTeamsNkProductPdfColorProfilesGet(id, nk, filter);
            //Assert.IsInstanceOf<List<ProductPdfColorProfile>> (response, "response is List<ProductPdfColorProfile>");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkProductSizeMaterialsCountGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkProductSizeMaterialsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.CustomersIdTeamsNkProductSizeMaterialsCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkProductSizeMaterialsDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkProductSizeMaterialsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.CustomersIdTeamsNkProductSizeMaterialsDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkProductSizeMaterialsFkDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkProductSizeMaterialsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.CustomersIdTeamsNkProductSizeMaterialsFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkProductSizeMaterialsFkGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkProductSizeMaterialsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.CustomersIdTeamsNkProductSizeMaterialsFkGet(id, nk, fk);
            //Assert.IsInstanceOf<ProductSizeMaterial> (response, "response is ProductSizeMaterial");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkProductSizeMaterialsFkPut
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkProductSizeMaterialsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //ProductSizeMaterial data = null;
            //var response = instance.CustomersIdTeamsNkProductSizeMaterialsFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<ProductSizeMaterial> (response, "response is ProductSizeMaterial");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkProductSizeMaterialsGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkProductSizeMaterialsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.CustomersIdTeamsNkProductSizeMaterialsGet(id, nk, filter);
            //Assert.IsInstanceOf<List<ProductSizeMaterial>> (response, "response is List<ProductSizeMaterial>");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkProductSizeMaterialsPost
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkProductSizeMaterialsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //ProductSizeMaterial data = null;
            //var response = instance.CustomersIdTeamsNkProductSizeMaterialsPost(id, nk, data);
            //Assert.IsInstanceOf<ProductSizeMaterial> (response, "response is ProductSizeMaterial");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkTeamDataGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkTeamDataGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //bool? refresh = null;
            //var response = instance.CustomersIdTeamsNkTeamDataGet(id, nk, refresh);
            //Assert.IsInstanceOf<DynamicData> (response, "response is DynamicData");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkTeamMembersCountGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkTeamMembersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.CustomersIdTeamsNkTeamMembersCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkTeamMembersDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkTeamMembersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.CustomersIdTeamsNkTeamMembersDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkTeamMembersFkDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkTeamMembersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.CustomersIdTeamsNkTeamMembersFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkTeamMembersFkGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkTeamMembersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.CustomersIdTeamsNkTeamMembersFkGet(id, nk, fk);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkTeamMembersFkPut
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkTeamMembersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //TeamMember data = null;
            //var response = instance.CustomersIdTeamsNkTeamMembersFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkTeamMembersGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkTeamMembersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.CustomersIdTeamsNkTeamMembersGet(id, nk, filter);
            //Assert.IsInstanceOf<List<TeamMember>> (response, "response is List<TeamMember>");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkTeamMembersPost
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkTeamMembersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //TeamMember data = null;
            //var response = instance.CustomersIdTeamsNkTeamMembersPost(id, nk, data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkTemplateFoldersCountGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkTemplateFoldersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.CustomersIdTeamsNkTemplateFoldersCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkTemplateFoldersDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkTemplateFoldersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.CustomersIdTeamsNkTemplateFoldersDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkTemplateFoldersFkDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkTemplateFoldersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.CustomersIdTeamsNkTemplateFoldersFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkTemplateFoldersFkGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkTemplateFoldersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.CustomersIdTeamsNkTemplateFoldersFkGet(id, nk, fk);
            //Assert.IsInstanceOf<TeamTemplateFolder> (response, "response is TeamTemplateFolder");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkTemplateFoldersFkPut
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkTemplateFoldersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //TeamTemplateFolder data = null;
            //var response = instance.CustomersIdTeamsNkTemplateFoldersFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<TeamTemplateFolder> (response, "response is TeamTemplateFolder");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkTemplateFoldersGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkTemplateFoldersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.CustomersIdTeamsNkTemplateFoldersGet(id, nk, filter);
            //Assert.IsInstanceOf<List<TeamTemplateFolder>> (response, "response is List<TeamTemplateFolder>");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkTemplateFoldersPost
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkTemplateFoldersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //TeamTemplateFolder data = null;
            //var response = instance.CustomersIdTeamsNkTemplateFoldersPost(id, nk, data);
            //Assert.IsInstanceOf<TeamTemplateFolder> (response, "response is TeamTemplateFolder");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkTemplatesCountGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkTemplatesCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.CustomersIdTeamsNkTemplatesCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkTemplatesDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkTemplatesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.CustomersIdTeamsNkTemplatesDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkTemplatesFkDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkTemplatesFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.CustomersIdTeamsNkTemplatesFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkTemplatesFkGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkTemplatesFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.CustomersIdTeamsNkTemplatesFkGet(id, nk, fk);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkTemplatesFkPut
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkTemplatesFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //Template data = null;
            //var response = instance.CustomersIdTeamsNkTemplatesFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkTemplatesGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkTemplatesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.CustomersIdTeamsNkTemplatesGet(id, nk, filter);
            //Assert.IsInstanceOf<List<Template>> (response, "response is List<Template>");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkTemplatesPost
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkTemplatesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //Template data = null;
            //var response = instance.CustomersIdTeamsNkTemplatesPost(id, nk, data);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkWorkflowsCountGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkWorkflowsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string where = null;
            //var response = instance.CustomersIdTeamsNkWorkflowsCountGet(id, nk, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkWorkflowsDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkWorkflowsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //instance.CustomersIdTeamsNkWorkflowsDelete(id, nk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkWorkflowsFkDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkWorkflowsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //instance.CustomersIdTeamsNkWorkflowsFkDelete(id, nk, fk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkWorkflowsFkGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkWorkflowsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.CustomersIdTeamsNkWorkflowsFkGet(id, nk, fk);
            //Assert.IsInstanceOf<Workflow> (response, "response is Workflow");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkWorkflowsFkPut
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkWorkflowsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string fk = null;
            //Workflow data = null;
            //var response = instance.CustomersIdTeamsNkWorkflowsFkPut(id, nk, fk, data);
            //Assert.IsInstanceOf<Workflow> (response, "response is Workflow");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkWorkflowsGet
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkWorkflowsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.CustomersIdTeamsNkWorkflowsGet(id, nk, filter);
            //Assert.IsInstanceOf<List<Workflow>> (response, "response is List<Workflow>");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsNkWorkflowsPost
        /// </summary>
        [Test]
        public void CustomersIdTeamsNkWorkflowsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string nk = null;
            //Workflow data = null;
            //var response = instance.CustomersIdTeamsNkWorkflowsPost(id, nk, data);
            //Assert.IsInstanceOf<Workflow> (response, "response is Workflow");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsPost
        /// </summary>
        [Test]
        public void CustomersIdTeamsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Team data = null;
            //var response = instance.CustomersIdTeamsPost(id, data);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsRelFkDelete
        /// </summary>
        [Test]
        public void CustomersIdTeamsRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.CustomersIdTeamsRelFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test CustomersIdTeamsRelFkHead
        /// </summary>
        [Test]
        public void CustomersIdTeamsRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.CustomersIdTeamsRelFkHead(id, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsRelFkPut
        /// </summary>
        [Test]
        public void CustomersIdTeamsRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //TeamMember data = null;
            //var response = instance.CustomersIdTeamsRelFkPut(id, fk, data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsTeamIdChangePost
        /// </summary>
        [Test]
        public void CustomersIdTeamsTeamIdChangePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string teamId = null;
            //var response = instance.CustomersIdTeamsTeamIdChangePost(id, id2, teamId);
            //Assert.IsInstanceOf<TeamMemberAccessToken> (response, "response is TeamMemberAccessToken");
        }
        
        /// <summary>
        /// Test CustomersIdTeamsTeamIdPortalsPortalIdChangePost
        /// </summary>
        [Test]
        public void CustomersIdTeamsTeamIdPortalsPortalIdChangePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string teamId = null;
            //string portalId = null;
            //var response = instance.CustomersIdTeamsTeamIdPortalsPortalIdChangePost(id, id2, teamId, portalId);
            //Assert.IsInstanceOf<TeamMemberAccessToken> (response, "response is TeamMemberAccessToken");
        }
        
        /// <summary>
        /// Test CustomersIdTokenGet
        /// </summary>
        [Test]
        public void CustomersIdTokenGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //var response = instance.CustomersIdTokenGet(id, id2);
            //Assert.IsInstanceOf<TeamMemberAccessToken> (response, "response is TeamMemberAccessToken");
        }
        
        /// <summary>
        /// Test CustomersIdVerifyPost
        /// </summary>
        [Test]
        public void CustomersIdVerifyPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.CustomersIdVerifyPost(id);
            
        }
        
        /// <summary>
        /// Test CustomersInvitationTicketsTokenAcceptPost
        /// </summary>
        [Test]
        public void CustomersInvitationTicketsTokenAcceptPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //Customer data = null;
            //var response = instance.CustomersInvitationTicketsTokenAcceptPost(token, data);
            //Assert.IsInstanceOf<InvitationTicket> (response, "response is InvitationTicket");
        }
        
        /// <summary>
        /// Test CustomersInvitationTicketsTokenGet
        /// </summary>
        [Test]
        public void CustomersInvitationTicketsTokenGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //var response = instance.CustomersInvitationTicketsTokenGet(token);
            //Assert.IsInstanceOf<InvitationTicket> (response, "response is InvitationTicket");
        }
        
        /// <summary>
        /// Test CustomersLoginPost
        /// </summary>
        [Test]
        public void CustomersLoginPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object credentials = null;
            //string include = null;
            //var response = instance.CustomersLoginPost(credentials, include);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test CustomersLogoutPost
        /// </summary>
        [Test]
        public void CustomersLogoutPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.CustomersLogoutPost();
            
        }
        
        /// <summary>
        /// Test CustomersMeTokenGet
        /// </summary>
        [Test]
        public void CustomersMeTokenGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CustomersMeTokenGet();
            //Assert.IsInstanceOf<TeamMemberAccessToken> (response, "response is TeamMemberAccessToken");
        }
        
        /// <summary>
        /// Test CustomersMeTokenRefreshGet
        /// </summary>
        [Test]
        public void CustomersMeTokenRefreshGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string refreshToken = null;
            //var response = instance.CustomersMeTokenRefreshGet(refreshToken);
            //Assert.IsInstanceOf<TeamMemberAccessToken> (response, "response is TeamMemberAccessToken");
        }
        
        /// <summary>
        /// Test CustomersPatch
        /// </summary>
        [Test]
        public void CustomersPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Customer data = null;
            //var response = instance.CustomersPatch(data);
            //Assert.IsInstanceOf<Customer> (response, "response is Customer");
        }
        
        /// <summary>
        /// Test CustomersPost
        /// </summary>
        [Test]
        public void CustomersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Customer data = null;
            //var response = instance.CustomersPost(data);
            //Assert.IsInstanceOf<Customer> (response, "response is Customer");
        }
        
        /// <summary>
        /// Test CustomersPut
        /// </summary>
        [Test]
        public void CustomersPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Customer data = null;
            //var response = instance.CustomersPut(data);
            //Assert.IsInstanceOf<Customer> (response, "response is Customer");
        }
        
        /// <summary>
        /// Test CustomersRegisterPost
        /// </summary>
        [Test]
        public void CustomersRegisterPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Customer data = null;
            //var response = instance.CustomersRegisterPost(data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test CustomersReplaceOrCreatePost
        /// </summary>
        [Test]
        public void CustomersReplaceOrCreatePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Customer data = null;
            //var response = instance.CustomersReplaceOrCreatePost(data);
            //Assert.IsInstanceOf<Customer> (response, "response is Customer");
        }
        
        /// <summary>
        /// Test CustomersResetPasswordPost
        /// </summary>
        [Test]
        public void CustomersResetPasswordPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string newPassword = null;
            //instance.CustomersResetPasswordPost(newPassword);
            
        }
        
        /// <summary>
        /// Test CustomersResetPasswordTokenGet
        /// </summary>
        [Test]
        public void CustomersResetPasswordTokenGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //var response = instance.CustomersResetPasswordTokenGet(token);
            //Assert.IsInstanceOf<TeamMemberAccessToken> (response, "response is TeamMemberAccessToken");
        }
        
        /// <summary>
        /// Test CustomersResetPost
        /// </summary>
        [Test]
        public void CustomersResetPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object options = null;
            //instance.CustomersResetPost(options);
            
        }
        
        /// <summary>
        /// Test CustomersUpdatePost
        /// </summary>
        [Test]
        public void CustomersUpdatePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //Customer data = null;
            //var response = instance.CustomersUpdatePost(where, data);
            //Assert.IsInstanceOf<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        
        /// <summary>
        /// Test CustomersUpsertWithWherePost
        /// </summary>
        [Test]
        public void CustomersUpsertWithWherePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //Customer data = null;
            //var response = instance.CustomersUpsertWithWherePost(where, data);
            //Assert.IsInstanceOf<Customer> (response, "response is Customer");
        }
        
    }

}
