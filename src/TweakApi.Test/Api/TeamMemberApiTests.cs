/* 
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.4-alpha.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TweakApi.Client;
using TweakApi.Api;
using TweakApi.Model;

namespace TweakApi.Test
{
    /// <summary>
    ///  Class for testing TeamMemberApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TeamMemberApiTests
    {
        private TeamMemberApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TeamMemberApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TeamMemberApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TeamMemberApi
            //Assert.IsInstanceOfType(typeof(TeamMemberApi), instance, "instance is a TeamMemberApi");
        }

        
        /// <summary>
        /// Test TeamMembersChangeStreamGet
        /// </summary>
        [Test]
        public void TeamMembersChangeStreamGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string options = null;
            //var response = instance.TeamMembersChangeStreamGet(options);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test TeamMembersChangeStreamPost
        /// </summary>
        [Test]
        public void TeamMembersChangeStreamPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string options = null;
            //var response = instance.TeamMembersChangeStreamPost(options);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test TeamMembersCountGet
        /// </summary>
        [Test]
        public void TeamMembersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //var response = instance.TeamMembersCountGet(where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersFindOneGet
        /// </summary>
        [Test]
        public void TeamMembersFindOneGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //var response = instance.TeamMembersFindOneGet(filter);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TeamMembersGet
        /// </summary>
        [Test]
        public void TeamMembersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //var response = instance.TeamMembersGet(filter);
            //Assert.IsInstanceOf<List<TeamMember>> (response, "response is List<TeamMember>");
        }
        
        /// <summary>
        /// Test TeamMembersIdAssignedDesignsCountGet
        /// </summary>
        [Test]
        public void TeamMembersIdAssignedDesignsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamMembersIdAssignedDesignsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersIdAssignedDesignsDelete
        /// </summary>
        [Test]
        public void TeamMembersIdAssignedDesignsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdAssignedDesignsDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdAssignedDesignsFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdAssignedDesignsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdAssignedDesignsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdAssignedDesignsFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdAssignedDesignsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdAssignedDesignsFkGet(id, fk);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TeamMembersIdAssignedDesignsFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdAssignedDesignsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //Design data = null;
            //var response = instance.TeamMembersIdAssignedDesignsFkPut(id, fk, data);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TeamMembersIdAssignedDesignsGet
        /// </summary>
        [Test]
        public void TeamMembersIdAssignedDesignsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdAssignedDesignsGet(id, filter);
            //Assert.IsInstanceOf<List<Design>> (response, "response is List<Design>");
        }
        
        /// <summary>
        /// Test TeamMembersIdAssignedDesignsPost
        /// </summary>
        [Test]
        public void TeamMembersIdAssignedDesignsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Design data = null;
            //var response = instance.TeamMembersIdAssignedDesignsPost(id, data);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TeamMembersIdCommentedDesignsCountGet
        /// </summary>
        [Test]
        public void TeamMembersIdCommentedDesignsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamMembersIdCommentedDesignsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersIdCommentedDesignsDelete
        /// </summary>
        [Test]
        public void TeamMembersIdCommentedDesignsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdCommentedDesignsDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdCommentedDesignsFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdCommentedDesignsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdCommentedDesignsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdCommentedDesignsFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdCommentedDesignsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdCommentedDesignsFkGet(id, fk);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TeamMembersIdCommentedDesignsFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdCommentedDesignsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //Design data = null;
            //var response = instance.TeamMembersIdCommentedDesignsFkPut(id, fk, data);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TeamMembersIdCommentedDesignsGet
        /// </summary>
        [Test]
        public void TeamMembersIdCommentedDesignsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdCommentedDesignsGet(id, filter);
            //Assert.IsInstanceOf<List<Design>> (response, "response is List<Design>");
        }
        
        /// <summary>
        /// Test TeamMembersIdCommentedDesignsPost
        /// </summary>
        [Test]
        public void TeamMembersIdCommentedDesignsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Design data = null;
            //var response = instance.TeamMembersIdCommentedDesignsPost(id, data);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TeamMembersIdCommentedDesignsRelFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdCommentedDesignsRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdCommentedDesignsRelFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdCommentedDesignsRelFkHead
        /// </summary>
        [Test]
        public void TeamMembersIdCommentedDesignsRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdCommentedDesignsRelFkHead(id, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test TeamMembersIdCommentedDesignsRelFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdCommentedDesignsRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //DesignComment data = null;
            //var response = instance.TeamMembersIdCommentedDesignsRelFkPut(id, fk, data);
            //Assert.IsInstanceOf<DesignComment> (response, "response is DesignComment");
        }
        
        /// <summary>
        /// Test TeamMembersIdCustomerGet
        /// </summary>
        [Test]
        public void TeamMembersIdCustomerGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? refresh = null;
            //var response = instance.TeamMembersIdCustomerGet(id, refresh);
            //Assert.IsInstanceOf<Customer> (response, "response is Customer");
        }
        
        /// <summary>
        /// Test TeamMembersIdDelete
        /// </summary>
        [Test]
        public void TeamMembersIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.TeamMembersIdDelete(id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TeamMembersIdDesignCommentsCountGet
        /// </summary>
        [Test]
        public void TeamMembersIdDesignCommentsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamMembersIdDesignCommentsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersIdDesignCommentsDelete
        /// </summary>
        [Test]
        public void TeamMembersIdDesignCommentsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdDesignCommentsDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdDesignCommentsFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdDesignCommentsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdDesignCommentsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdDesignCommentsFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdDesignCommentsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdDesignCommentsFkGet(id, fk);
            //Assert.IsInstanceOf<DesignComment> (response, "response is DesignComment");
        }
        
        /// <summary>
        /// Test TeamMembersIdDesignCommentsFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdDesignCommentsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //DesignComment data = null;
            //var response = instance.TeamMembersIdDesignCommentsFkPut(id, fk, data);
            //Assert.IsInstanceOf<DesignComment> (response, "response is DesignComment");
        }
        
        /// <summary>
        /// Test TeamMembersIdDesignCommentsGet
        /// </summary>
        [Test]
        public void TeamMembersIdDesignCommentsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdDesignCommentsGet(id, filter);
            //Assert.IsInstanceOf<List<DesignComment>> (response, "response is List<DesignComment>");
        }
        
        /// <summary>
        /// Test TeamMembersIdDesignCommentsPost
        /// </summary>
        [Test]
        public void TeamMembersIdDesignCommentsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DesignComment data = null;
            //var response = instance.TeamMembersIdDesignCommentsPost(id, data);
            //Assert.IsInstanceOf<DesignComment> (response, "response is DesignComment");
        }
        
        /// <summary>
        /// Test TeamMembersIdDesignFoldersCountGet
        /// </summary>
        [Test]
        public void TeamMembersIdDesignFoldersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamMembersIdDesignFoldersCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersIdDesignFoldersDelete
        /// </summary>
        [Test]
        public void TeamMembersIdDesignFoldersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdDesignFoldersDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdDesignFoldersFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdDesignFoldersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdDesignFoldersFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdDesignFoldersFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdDesignFoldersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdDesignFoldersFkGet(id, fk);
            //Assert.IsInstanceOf<DesignFolder> (response, "response is DesignFolder");
        }
        
        /// <summary>
        /// Test TeamMembersIdDesignFoldersFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdDesignFoldersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //DesignFolder data = null;
            //var response = instance.TeamMembersIdDesignFoldersFkPut(id, fk, data);
            //Assert.IsInstanceOf<DesignFolder> (response, "response is DesignFolder");
        }
        
        /// <summary>
        /// Test TeamMembersIdDesignFoldersGet
        /// </summary>
        [Test]
        public void TeamMembersIdDesignFoldersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdDesignFoldersGet(id, filter);
            //Assert.IsInstanceOf<List<DesignFolder>> (response, "response is List<DesignFolder>");
        }
        
        /// <summary>
        /// Test TeamMembersIdDesignFoldersPost
        /// </summary>
        [Test]
        public void TeamMembersIdDesignFoldersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DesignFolder data = null;
            //var response = instance.TeamMembersIdDesignFoldersPost(id, data);
            //Assert.IsInstanceOf<DesignFolder> (response, "response is DesignFolder");
        }
        
        /// <summary>
        /// Test TeamMembersIdDesignSharesCountGet
        /// </summary>
        [Test]
        public void TeamMembersIdDesignSharesCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamMembersIdDesignSharesCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersIdDesignSharesDelete
        /// </summary>
        [Test]
        public void TeamMembersIdDesignSharesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdDesignSharesDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdDesignSharesFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdDesignSharesFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdDesignSharesFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdDesignSharesFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdDesignSharesFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdDesignSharesFkGet(id, fk);
            //Assert.IsInstanceOf<DesignMember> (response, "response is DesignMember");
        }
        
        /// <summary>
        /// Test TeamMembersIdDesignSharesFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdDesignSharesFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //DesignMember data = null;
            //var response = instance.TeamMembersIdDesignSharesFkPut(id, fk, data);
            //Assert.IsInstanceOf<DesignMember> (response, "response is DesignMember");
        }
        
        /// <summary>
        /// Test TeamMembersIdDesignSharesGet
        /// </summary>
        [Test]
        public void TeamMembersIdDesignSharesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdDesignSharesGet(id, filter);
            //Assert.IsInstanceOf<List<DesignMember>> (response, "response is List<DesignMember>");
        }
        
        /// <summary>
        /// Test TeamMembersIdDesignSharesPost
        /// </summary>
        [Test]
        public void TeamMembersIdDesignSharesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DesignMember data = null;
            //var response = instance.TeamMembersIdDesignSharesPost(id, data);
            //Assert.IsInstanceOf<DesignMember> (response, "response is DesignMember");
        }
        
        /// <summary>
        /// Test TeamMembersIdExistsGet
        /// </summary>
        [Test]
        public void TeamMembersIdExistsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.TeamMembersIdExistsGet(id);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamMembersIdGet
        /// </summary>
        [Test]
        public void TeamMembersIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdGet(id, filter);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TeamMembersIdHead
        /// </summary>
        [Test]
        public void TeamMembersIdHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.TeamMembersIdHead(id);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test TeamMembersIdImageFoldersCountGet
        /// </summary>
        [Test]
        public void TeamMembersIdImageFoldersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamMembersIdImageFoldersCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersIdImageFoldersDelete
        /// </summary>
        [Test]
        public void TeamMembersIdImageFoldersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdImageFoldersDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdImageFoldersFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdImageFoldersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdImageFoldersFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdImageFoldersFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdImageFoldersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdImageFoldersFkGet(id, fk);
            //Assert.IsInstanceOf<ImageFolder> (response, "response is ImageFolder");
        }
        
        /// <summary>
        /// Test TeamMembersIdImageFoldersFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdImageFoldersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //ImageFolder data = null;
            //var response = instance.TeamMembersIdImageFoldersFkPut(id, fk, data);
            //Assert.IsInstanceOf<ImageFolder> (response, "response is ImageFolder");
        }
        
        /// <summary>
        /// Test TeamMembersIdImageFoldersGet
        /// </summary>
        [Test]
        public void TeamMembersIdImageFoldersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdImageFoldersGet(id, filter);
            //Assert.IsInstanceOf<List<ImageFolder>> (response, "response is List<ImageFolder>");
        }
        
        /// <summary>
        /// Test TeamMembersIdImageFoldersPost
        /// </summary>
        [Test]
        public void TeamMembersIdImageFoldersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ImageFolder data = null;
            //var response = instance.TeamMembersIdImageFoldersPost(id, data);
            //Assert.IsInstanceOf<ImageFolder> (response, "response is ImageFolder");
        }
        
        /// <summary>
        /// Test TeamMembersIdImageFoldersRelFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdImageFoldersRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdImageFoldersRelFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdImageFoldersRelFkHead
        /// </summary>
        [Test]
        public void TeamMembersIdImageFoldersRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdImageFoldersRelFkHead(id, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test TeamMembersIdImageFoldersRelFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdImageFoldersRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //ImageFolderMember data = null;
            //var response = instance.TeamMembersIdImageFoldersRelFkPut(id, fk, data);
            //Assert.IsInstanceOf<ImageFolderMember> (response, "response is ImageFolderMember");
        }
        
        /// <summary>
        /// Test TeamMembersIdInvitationTicketsCountGet
        /// </summary>
        [Test]
        public void TeamMembersIdInvitationTicketsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamMembersIdInvitationTicketsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersIdInvitationTicketsDelete
        /// </summary>
        [Test]
        public void TeamMembersIdInvitationTicketsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdInvitationTicketsDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdInvitationTicketsFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdInvitationTicketsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdInvitationTicketsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdInvitationTicketsFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdInvitationTicketsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdInvitationTicketsFkGet(id, fk);
            //Assert.IsInstanceOf<InvitationTicket> (response, "response is InvitationTicket");
        }
        
        /// <summary>
        /// Test TeamMembersIdInvitationTicketsFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdInvitationTicketsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //InvitationTicket data = null;
            //var response = instance.TeamMembersIdInvitationTicketsFkPut(id, fk, data);
            //Assert.IsInstanceOf<InvitationTicket> (response, "response is InvitationTicket");
        }
        
        /// <summary>
        /// Test TeamMembersIdInvitationTicketsGet
        /// </summary>
        [Test]
        public void TeamMembersIdInvitationTicketsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdInvitationTicketsGet(id, filter);
            //Assert.IsInstanceOf<List<InvitationTicket>> (response, "response is List<InvitationTicket>");
        }
        
        /// <summary>
        /// Test TeamMembersIdInvitationTicketsPost
        /// </summary>
        [Test]
        public void TeamMembersIdInvitationTicketsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //InvitationTicket data = null;
            //var response = instance.TeamMembersIdInvitationTicketsPost(id, data);
            //Assert.IsInstanceOf<InvitationTicket> (response, "response is InvitationTicket");
        }
        
        /// <summary>
        /// Test TeamMembersIdInviteInviteePost
        /// </summary>
        [Test]
        public void TeamMembersIdInviteInviteePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string invitee = null;
            //TeamMember data = null;
            //var response = instance.TeamMembersIdInviteInviteePost(id, id2, invitee, data);
            //Assert.IsInstanceOf<InvitationTicket> (response, "response is InvitationTicket");
        }
        
        /// <summary>
        /// Test TeamMembersIdNotificationsCountGet
        /// </summary>
        [Test]
        public void TeamMembersIdNotificationsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamMembersIdNotificationsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersIdNotificationsDelete
        /// </summary>
        [Test]
        public void TeamMembersIdNotificationsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdNotificationsDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdNotificationsFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdNotificationsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdNotificationsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdNotificationsFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdNotificationsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdNotificationsFkGet(id, fk);
            //Assert.IsInstanceOf<Notification> (response, "response is Notification");
        }
        
        /// <summary>
        /// Test TeamMembersIdNotificationsFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdNotificationsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //Notification data = null;
            //var response = instance.TeamMembersIdNotificationsFkPut(id, fk, data);
            //Assert.IsInstanceOf<Notification> (response, "response is Notification");
        }
        
        /// <summary>
        /// Test TeamMembersIdNotificationsGet
        /// </summary>
        [Test]
        public void TeamMembersIdNotificationsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdNotificationsGet(id, filter);
            //Assert.IsInstanceOf<List<Notification>> (response, "response is List<Notification>");
        }
        
        /// <summary>
        /// Test TeamMembersIdNotificationsPost
        /// </summary>
        [Test]
        public void TeamMembersIdNotificationsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Notification data = null;
            //var response = instance.TeamMembersIdNotificationsPost(id, data);
            //Assert.IsInstanceOf<Notification> (response, "response is Notification");
        }
        
        /// <summary>
        /// Test TeamMembersIdPatch
        /// </summary>
        [Test]
        public void TeamMembersIdPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamMember data = null;
            //var response = instance.TeamMembersIdPatch(id, data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TeamMembersIdPortalsAvailableGet
        /// </summary>
        [Test]
        public void TeamMembersIdPortalsAvailableGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string filter = null;
            //var response = instance.TeamMembersIdPortalsAvailableGet(id, id2, filter);
            //Assert.IsInstanceOf<List<Portal>> (response, "response is List<Portal>");
        }
        
        /// <summary>
        /// Test TeamMembersIdPortalsCountGet
        /// </summary>
        [Test]
        public void TeamMembersIdPortalsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamMembersIdPortalsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersIdPortalsDelete
        /// </summary>
        [Test]
        public void TeamMembersIdPortalsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdPortalsDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdPortalsFkAvailableGet
        /// </summary>
        [Test]
        public void TeamMembersIdPortalsFkAvailableGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string fk = null;
            //string include = null;
            //var response = instance.TeamMembersIdPortalsFkAvailableGet(id, id2, fk, include);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test TeamMembersIdPortalsFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdPortalsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdPortalsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdPortalsFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdPortalsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdPortalsFkGet(id, fk);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test TeamMembersIdPortalsFkLogoPut
        /// </summary>
        [Test]
        public void TeamMembersIdPortalsFkLogoPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string fk = null;
            //TeamMember data = null;
            //var response = instance.TeamMembersIdPortalsFkLogoPut(id, id2, fk, data);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test TeamMembersIdPortalsFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdPortalsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //Portal data = null;
            //var response = instance.TeamMembersIdPortalsFkPut(id, fk, data);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test TeamMembersIdPortalsGet
        /// </summary>
        [Test]
        public void TeamMembersIdPortalsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdPortalsGet(id, filter);
            //Assert.IsInstanceOf<List<Portal>> (response, "response is List<Portal>");
        }
        
        /// <summary>
        /// Test TeamMembersIdPortalsNkDesignsFkFlashvarsGet
        /// </summary>
        [Test]
        public void TeamMembersIdPortalsNkDesignsFkFlashvarsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamMembersIdPortalsNkDesignsFkFlashvarsGet(id, id2, nk, fk);
            //Assert.IsInstanceOf<FlashVar> (response, "response is FlashVar");
        }
        
        /// <summary>
        /// Test TeamMembersIdPortalsNkTemplatesFkFlashvarsGet
        /// </summary>
        [Test]
        public void TeamMembersIdPortalsNkTemplatesFkFlashvarsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string nk = null;
            //string fk = null;
            //var response = instance.TeamMembersIdPortalsNkTemplatesFkFlashvarsGet(id, id2, nk, fk);
            //Assert.IsInstanceOf<FlashVar> (response, "response is FlashVar");
        }
        
        /// <summary>
        /// Test TeamMembersIdPortalsPost
        /// </summary>
        [Test]
        public void TeamMembersIdPortalsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Portal data = null;
            //var response = instance.TeamMembersIdPortalsPost(id, data);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test TeamMembersIdPortalsRelFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdPortalsRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdPortalsRelFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdPortalsRelFkHead
        /// </summary>
        [Test]
        public void TeamMembersIdPortalsRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdPortalsRelFkHead(id, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test TeamMembersIdPortalsRelFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdPortalsRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //PortalMember data = null;
            //var response = instance.TeamMembersIdPortalsRelFkPut(id, fk, data);
            //Assert.IsInstanceOf<PortalMember> (response, "response is PortalMember");
        }
        
        /// <summary>
        /// Test TeamMembersIdPut
        /// </summary>
        [Test]
        public void TeamMembersIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamMember data = null;
            //var response = instance.TeamMembersIdPut(id, data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TeamMembersIdReplacePost
        /// </summary>
        [Test]
        public void TeamMembersIdReplacePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamMember data = null;
            //var response = instance.TeamMembersIdReplacePost(id, data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TeamMembersIdRequestedDesignExportsCountGet
        /// </summary>
        [Test]
        public void TeamMembersIdRequestedDesignExportsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamMembersIdRequestedDesignExportsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersIdRequestedDesignExportsDelete
        /// </summary>
        [Test]
        public void TeamMembersIdRequestedDesignExportsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdRequestedDesignExportsDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdRequestedDesignExportsFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdRequestedDesignExportsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdRequestedDesignExportsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdRequestedDesignExportsFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdRequestedDesignExportsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdRequestedDesignExportsFkGet(id, fk);
            //Assert.IsInstanceOf<DesignExport> (response, "response is DesignExport");
        }
        
        /// <summary>
        /// Test TeamMembersIdRequestedDesignExportsFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdRequestedDesignExportsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //DesignExport data = null;
            //var response = instance.TeamMembersIdRequestedDesignExportsFkPut(id, fk, data);
            //Assert.IsInstanceOf<DesignExport> (response, "response is DesignExport");
        }
        
        /// <summary>
        /// Test TeamMembersIdRequestedDesignExportsGet
        /// </summary>
        [Test]
        public void TeamMembersIdRequestedDesignExportsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdRequestedDesignExportsGet(id, filter);
            //Assert.IsInstanceOf<List<DesignExport>> (response, "response is List<DesignExport>");
        }
        
        /// <summary>
        /// Test TeamMembersIdRequestedDesignExportsPost
        /// </summary>
        [Test]
        public void TeamMembersIdRequestedDesignExportsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DesignExport data = null;
            //var response = instance.TeamMembersIdRequestedDesignExportsPost(id, data);
            //Assert.IsInstanceOf<DesignExport> (response, "response is DesignExport");
        }
        
        /// <summary>
        /// Test TeamMembersIdRequestedDesignsCountGet
        /// </summary>
        [Test]
        public void TeamMembersIdRequestedDesignsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamMembersIdRequestedDesignsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersIdRequestedDesignsDelete
        /// </summary>
        [Test]
        public void TeamMembersIdRequestedDesignsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdRequestedDesignsDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdRequestedDesignsFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdRequestedDesignsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdRequestedDesignsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdRequestedDesignsFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdRequestedDesignsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdRequestedDesignsFkGet(id, fk);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TeamMembersIdRequestedDesignsFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdRequestedDesignsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //Design data = null;
            //var response = instance.TeamMembersIdRequestedDesignsFkPut(id, fk, data);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TeamMembersIdRequestedDesignsGet
        /// </summary>
        [Test]
        public void TeamMembersIdRequestedDesignsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdRequestedDesignsGet(id, filter);
            //Assert.IsInstanceOf<List<Design>> (response, "response is List<Design>");
        }
        
        /// <summary>
        /// Test TeamMembersIdRequestedDesignsPost
        /// </summary>
        [Test]
        public void TeamMembersIdRequestedDesignsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Design data = null;
            //var response = instance.TeamMembersIdRequestedDesignsPost(id, data);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TeamMembersIdReviewedDesignsCountGet
        /// </summary>
        [Test]
        public void TeamMembersIdReviewedDesignsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamMembersIdReviewedDesignsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersIdReviewedDesignsDelete
        /// </summary>
        [Test]
        public void TeamMembersIdReviewedDesignsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdReviewedDesignsDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdReviewedDesignsFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdReviewedDesignsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdReviewedDesignsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdReviewedDesignsFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdReviewedDesignsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdReviewedDesignsFkGet(id, fk);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TeamMembersIdReviewedDesignsFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdReviewedDesignsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //Design data = null;
            //var response = instance.TeamMembersIdReviewedDesignsFkPut(id, fk, data);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TeamMembersIdReviewedDesignsGet
        /// </summary>
        [Test]
        public void TeamMembersIdReviewedDesignsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdReviewedDesignsGet(id, filter);
            //Assert.IsInstanceOf<List<Design>> (response, "response is List<Design>");
        }
        
        /// <summary>
        /// Test TeamMembersIdReviewedDesignsPost
        /// </summary>
        [Test]
        public void TeamMembersIdReviewedDesignsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Design data = null;
            //var response = instance.TeamMembersIdReviewedDesignsPost(id, data);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TeamMembersIdSharedDesignsCountGet
        /// </summary>
        [Test]
        public void TeamMembersIdSharedDesignsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamMembersIdSharedDesignsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersIdSharedDesignsDelete
        /// </summary>
        [Test]
        public void TeamMembersIdSharedDesignsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdSharedDesignsDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdSharedDesignsFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdSharedDesignsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdSharedDesignsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdSharedDesignsFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdSharedDesignsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdSharedDesignsFkGet(id, fk);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TeamMembersIdSharedDesignsFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdSharedDesignsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //Design data = null;
            //var response = instance.TeamMembersIdSharedDesignsFkPut(id, fk, data);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TeamMembersIdSharedDesignsGet
        /// </summary>
        [Test]
        public void TeamMembersIdSharedDesignsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdSharedDesignsGet(id, filter);
            //Assert.IsInstanceOf<List<Design>> (response, "response is List<Design>");
        }
        
        /// <summary>
        /// Test TeamMembersIdSharedDesignsPost
        /// </summary>
        [Test]
        public void TeamMembersIdSharedDesignsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Design data = null;
            //var response = instance.TeamMembersIdSharedDesignsPost(id, data);
            //Assert.IsInstanceOf<Design> (response, "response is Design");
        }
        
        /// <summary>
        /// Test TeamMembersIdSharedDesignsRelFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdSharedDesignsRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdSharedDesignsRelFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdSharedDesignsRelFkHead
        /// </summary>
        [Test]
        public void TeamMembersIdSharedDesignsRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdSharedDesignsRelFkHead(id, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test TeamMembersIdSharedDesignsRelFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdSharedDesignsRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //DesignMember data = null;
            //var response = instance.TeamMembersIdSharedDesignsRelFkPut(id, fk, data);
            //Assert.IsInstanceOf<DesignMember> (response, "response is DesignMember");
        }
        
        /// <summary>
        /// Test TeamMembersIdTargetModelTargetIdInviteInviteePost
        /// </summary>
        [Test]
        public void TeamMembersIdTargetModelTargetIdInviteInviteePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string targetModel = null;
            //string targetId = null;
            //string invitee = null;
            //TeamMember data = null;
            //var response = instance.TeamMembersIdTargetModelTargetIdInviteInviteePost(id, id2, targetModel, targetId, invitee, data);
            //Assert.IsInstanceOf<InvitationTicket> (response, "response is InvitationTicket");
        }
        
        /// <summary>
        /// Test TeamMembersIdTargetModelTargetIdInvitePost
        /// </summary>
        [Test]
        public void TeamMembersIdTargetModelTargetIdInvitePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string targetModel = null;
            //string targetId = null;
            //List<Object> data = null;
            //var response = instance.TeamMembersIdTargetModelTargetIdInvitePost(id, id2, targetModel, targetId, data);
            //Assert.IsInstanceOf<List<InvitationTicket>> (response, "response is List<InvitationTicket>");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamBillingAvailablePlansGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamBillingAvailablePlansGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdTeamBillingAvailablePlansGet(id, filter);
            //Assert.IsInstanceOf<List<BillingPlan>> (response, "response is List<BillingPlan>");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamBillingCachedGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamBillingCachedGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.TeamMembersIdTeamBillingCachedGet(id);
            //Assert.IsInstanceOf<Billing> (response, "response is Billing");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamBillingCardDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamBillingCardDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.TeamMembersIdTeamBillingCardDelete(id);
            //Assert.IsInstanceOf<Billing> (response, "response is Billing");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamBillingCardPost
        /// </summary>
        [Test]
        public void TeamMembersIdTeamBillingCardPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamMember data = null;
            //var response = instance.TeamMembersIdTeamBillingCardPost(id, data);
            //Assert.IsInstanceOf<Billing> (response, "response is Billing");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamBillingCardPut
        /// </summary>
        [Test]
        public void TeamMembersIdTeamBillingCardPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamMember data = null;
            //var response = instance.TeamMembersIdTeamBillingCardPut(id, data);
            //Assert.IsInstanceOf<Billing> (response, "response is Billing");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamBillingInvoicesFkPost
        /// </summary>
        [Test]
        public void TeamMembersIdTeamBillingInvoicesFkPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdTeamBillingInvoicesFkPost(id, fk);
            //Assert.IsInstanceOf<BillingInvoice> (response, "response is BillingInvoice");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamBillingInvoicesGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamBillingInvoicesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdTeamBillingInvoicesGet(id, filter);
            //Assert.IsInstanceOf<List<BillingInvoice>> (response, "response is List<BillingInvoice>");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamBillingInvoicesUpcomingGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamBillingInvoicesUpcomingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.TeamMembersIdTeamBillingInvoicesUpcomingGet(id);
            //Assert.IsInstanceOf<BillingInvoice> (response, "response is BillingInvoice");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamBillingPut
        /// </summary>
        [Test]
        public void TeamMembersIdTeamBillingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamMember data = null;
            //var response = instance.TeamMembersIdTeamBillingPut(id, data);
            //Assert.IsInstanceOf<Billing> (response, "response is Billing");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamBillingSubscriptionPlanPut
        /// </summary>
        [Test]
        public void TeamMembersIdTeamBillingSubscriptionPlanPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamMember data = null;
            //var response = instance.TeamMembersIdTeamBillingSubscriptionPlanPut(id, data);
            //Assert.IsInstanceOf<Billing> (response, "response is Billing");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamBillingTaxEvidenceGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamBillingTaxEvidenceGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.TeamMembersIdTeamBillingTaxEvidenceGet(id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamBillingUncachedGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamBillingUncachedGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.TeamMembersIdTeamBillingUncachedGet(id);
            //Assert.IsInstanceOf<Billing> (response, "response is Billing");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamBrandDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamBrandDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdTeamBrandDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamBrandGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamBrandGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? refresh = null;
            //var response = instance.TeamMembersIdTeamBrandGet(id, refresh);
            //Assert.IsInstanceOf<TeamBrand> (response, "response is TeamBrand");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamBrandPost
        /// </summary>
        [Test]
        public void TeamMembersIdTeamBrandPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamBrand data = null;
            //var response = instance.TeamMembersIdTeamBrandPost(id, data);
            //Assert.IsInstanceOf<TeamBrand> (response, "response is TeamBrand");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamBrandPut
        /// </summary>
        [Test]
        public void TeamMembersIdTeamBrandPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamBrand data = null;
            //var response = instance.TeamMembersIdTeamBrandPut(id, data);
            //Assert.IsInstanceOf<TeamBrand> (response, "response is TeamBrand");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamBuilderConfigsCountGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamBuilderConfigsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamMembersIdTeamBuilderConfigsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamBuilderConfigsDefaultGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamBuilderConfigsDefaultGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.TeamMembersIdTeamBuilderConfigsDefaultGet(id);
            //Assert.IsInstanceOf<TeamBuilderConfig> (response, "response is TeamBuilderConfig");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamBuilderConfigsDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamBuilderConfigsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdTeamBuilderConfigsDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamBuilderConfigsFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamBuilderConfigsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdTeamBuilderConfigsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamBuilderConfigsFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamBuilderConfigsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdTeamBuilderConfigsFkGet(id, fk);
            //Assert.IsInstanceOf<TeamBuilderConfig> (response, "response is TeamBuilderConfig");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamBuilderConfigsFkLogoPut
        /// </summary>
        [Test]
        public void TeamMembersIdTeamBuilderConfigsFkLogoPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //TeamMember data = null;
            //var response = instance.TeamMembersIdTeamBuilderConfigsFkLogoPut(id, fk, data);
            //Assert.IsInstanceOf<TeamBuilderConfig> (response, "response is TeamBuilderConfig");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamBuilderConfigsFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdTeamBuilderConfigsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //TeamBuilderConfig data = null;
            //var response = instance.TeamMembersIdTeamBuilderConfigsFkPut(id, fk, data);
            //Assert.IsInstanceOf<TeamBuilderConfig> (response, "response is TeamBuilderConfig");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamBuilderConfigsFkWatermarkPut
        /// </summary>
        [Test]
        public void TeamMembersIdTeamBuilderConfigsFkWatermarkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //TeamMember data = null;
            //var response = instance.TeamMembersIdTeamBuilderConfigsFkWatermarkPut(id, fk, data);
            //Assert.IsInstanceOf<TeamBuilderConfig> (response, "response is TeamBuilderConfig");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamBuilderConfigsGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamBuilderConfigsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdTeamBuilderConfigsGet(id, filter);
            //Assert.IsInstanceOf<List<TeamBuilderConfig>> (response, "response is List<TeamBuilderConfig>");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamBuilderConfigsPost
        /// </summary>
        [Test]
        public void TeamMembersIdTeamBuilderConfigsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamBuilderConfig data = null;
            //var response = instance.TeamMembersIdTeamBuilderConfigsPost(id, data);
            //Assert.IsInstanceOf<TeamBuilderConfig> (response, "response is TeamBuilderConfig");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamDataRecordGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamDataRecordGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.TeamMembersIdTeamDataRecordGet(id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamDataRecordPost
        /// </summary>
        [Test]
        public void TeamMembersIdTeamDataRecordPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamMember data = null;
            //var response = instance.TeamMembersIdTeamDataRecordPost(id, data);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamDataRecordPut
        /// </summary>
        [Test]
        public void TeamMembersIdTeamDataRecordPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamMember data = null;
            //var response = instance.TeamMembersIdTeamDataRecordPut(id, data);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamDataSourcesCountGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamDataSourcesCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamMembersIdTeamDataSourcesCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamDataSourcesDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamDataSourcesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdTeamDataSourcesDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamDataSourcesFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamDataSourcesFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdTeamDataSourcesFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamDataSourcesFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamDataSourcesFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdTeamDataSourcesFkGet(id, fk);
            //Assert.IsInstanceOf<DataSource> (response, "response is DataSource");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamDataSourcesFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdTeamDataSourcesFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //DataSource data = null;
            //var response = instance.TeamMembersIdTeamDataSourcesFkPut(id, fk, data);
            //Assert.IsInstanceOf<DataSource> (response, "response is DataSource");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamDataSourcesGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamDataSourcesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdTeamDataSourcesGet(id, filter);
            //Assert.IsInstanceOf<List<DataSource>> (response, "response is List<DataSource>");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamDataSourcesPost
        /// </summary>
        [Test]
        public void TeamMembersIdTeamDataSourcesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DataSource data = null;
            //var response = instance.TeamMembersIdTeamDataSourcesPost(id, data);
            //Assert.IsInstanceOf<DataSource> (response, "response is DataSource");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamDynamicDatasCountGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamDynamicDatasCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamMembersIdTeamDynamicDatasCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamDynamicDatasDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamDynamicDatasDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdTeamDynamicDatasDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamDynamicDatasFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamDynamicDatasFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdTeamDynamicDatasFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamDynamicDatasFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamDynamicDatasFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdTeamDynamicDatasFkGet(id, fk);
            //Assert.IsInstanceOf<DynamicData> (response, "response is DynamicData");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamDynamicDatasFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdTeamDynamicDatasFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //DynamicData data = null;
            //var response = instance.TeamMembersIdTeamDynamicDatasFkPut(id, fk, data);
            //Assert.IsInstanceOf<DynamicData> (response, "response is DynamicData");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamDynamicDatasGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamDynamicDatasGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdTeamDynamicDatasGet(id, filter);
            //Assert.IsInstanceOf<List<DynamicData>> (response, "response is List<DynamicData>");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamDynamicDatasPost
        /// </summary>
        [Test]
        public void TeamMembersIdTeamDynamicDatasPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DynamicData data = null;
            //var response = instance.TeamMembersIdTeamDynamicDatasPost(id, data);
            //Assert.IsInstanceOf<DynamicData> (response, "response is DynamicData");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? refresh = null;
            //var response = instance.TeamMembersIdTeamGet(id, refresh);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamImageFoldersCountGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamImageFoldersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamMembersIdTeamImageFoldersCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamImageFoldersDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamImageFoldersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdTeamImageFoldersDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamImageFoldersFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamImageFoldersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdTeamImageFoldersFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamImageFoldersFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamImageFoldersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdTeamImageFoldersFkGet(id, fk);
            //Assert.IsInstanceOf<ImageFolder> (response, "response is ImageFolder");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamImageFoldersFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdTeamImageFoldersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //ImageFolder data = null;
            //var response = instance.TeamMembersIdTeamImageFoldersFkPut(id, fk, data);
            //Assert.IsInstanceOf<ImageFolder> (response, "response is ImageFolder");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamImageFoldersGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamImageFoldersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdTeamImageFoldersGet(id, filter);
            //Assert.IsInstanceOf<List<ImageFolder>> (response, "response is List<ImageFolder>");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamImageFoldersPost
        /// </summary>
        [Test]
        public void TeamMembersIdTeamImageFoldersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ImageFolder data = null;
            //var response = instance.TeamMembersIdTeamImageFoldersPost(id, data);
            //Assert.IsInstanceOf<ImageFolder> (response, "response is ImageFolder");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamImagesCountGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamImagesCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamMembersIdTeamImagesCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamImagesDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamImagesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdTeamImagesDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamImagesFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamImagesFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdTeamImagesFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamImagesFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamImagesFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdTeamImagesFkGet(id, fk);
            //Assert.IsInstanceOf<Image> (response, "response is Image");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamImagesFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdTeamImagesFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //Image data = null;
            //var response = instance.TeamMembersIdTeamImagesFkPut(id, fk, data);
            //Assert.IsInstanceOf<Image> (response, "response is Image");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamImagesGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamImagesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdTeamImagesGet(id, filter);
            //Assert.IsInstanceOf<List<Image>> (response, "response is List<Image>");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamImagesPost
        /// </summary>
        [Test]
        public void TeamMembersIdTeamImagesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Image data = null;
            //var response = instance.TeamMembersIdTeamImagesPost(id, data);
            //Assert.IsInstanceOf<Image> (response, "response is Image");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamLogoPut
        /// </summary>
        [Test]
        public void TeamMembersIdTeamLogoPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //TeamMember data = null;
            //var response = instance.TeamMembersIdTeamLogoPut(id, id2, data);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamMembersCountGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamMembersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamMembersIdTeamMembersCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamMembersDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamMembersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdTeamMembersDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamMembersFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamMembersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdTeamMembersFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamMembersFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamMembersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdTeamMembersFkGet(id, fk);
            //Assert.IsInstanceOf<Customer> (response, "response is Customer");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamMembersFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdTeamMembersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //Customer data = null;
            //var response = instance.TeamMembersIdTeamMembersFkPut(id, fk, data);
            //Assert.IsInstanceOf<Customer> (response, "response is Customer");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamMembersGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamMembersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdTeamMembersGet(id, filter);
            //Assert.IsInstanceOf<List<Customer>> (response, "response is List<Customer>");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamMembersPost
        /// </summary>
        [Test]
        public void TeamMembersIdTeamMembersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Customer data = null;
            //var response = instance.TeamMembersIdTeamMembersPost(id, data);
            //Assert.IsInstanceOf<Customer> (response, "response is Customer");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamMembersRelFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamMembersRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdTeamMembersRelFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamMembersRelFkHead
        /// </summary>
        [Test]
        public void TeamMembersIdTeamMembersRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdTeamMembersRelFkHead(id, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamMembersRelFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdTeamMembersRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //TeamMember data = null;
            //var response = instance.TeamMembersIdTeamMembersRelFkPut(id, fk, data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamPermissionDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamPermissionDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdTeamPermissionDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamPermissionGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamPermissionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? refresh = null;
            //var response = instance.TeamMembersIdTeamPermissionGet(id, refresh);
            //Assert.IsInstanceOf<TeamPermissionSet> (response, "response is TeamPermissionSet");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamPermissionPost
        /// </summary>
        [Test]
        public void TeamMembersIdTeamPermissionPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamPermissionSet data = null;
            //var response = instance.TeamMembersIdTeamPermissionPost(id, data);
            //Assert.IsInstanceOf<TeamPermissionSet> (response, "response is TeamPermissionSet");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamPermissionPut
        /// </summary>
        [Test]
        public void TeamMembersIdTeamPermissionPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamPermissionSet data = null;
            //var response = instance.TeamMembersIdTeamPermissionPut(id, data);
            //Assert.IsInstanceOf<TeamPermissionSet> (response, "response is TeamPermissionSet");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamPortalsCountGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamPortalsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamMembersIdTeamPortalsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamPortalsDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamPortalsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdTeamPortalsDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamPortalsFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamPortalsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdTeamPortalsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamPortalsFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamPortalsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdTeamPortalsFkGet(id, fk);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamPortalsFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdTeamPortalsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //Portal data = null;
            //var response = instance.TeamMembersIdTeamPortalsFkPut(id, fk, data);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamPortalsGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamPortalsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdTeamPortalsGet(id, filter);
            //Assert.IsInstanceOf<List<Portal>> (response, "response is List<Portal>");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamPortalsPost
        /// </summary>
        [Test]
        public void TeamMembersIdTeamPortalsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Portal data = null;
            //var response = instance.TeamMembersIdTeamPortalsPost(id, data);
            //Assert.IsInstanceOf<Portal> (response, "response is Portal");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamProductMaterialsCountGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamProductMaterialsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamMembersIdTeamProductMaterialsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamProductMaterialsDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamProductMaterialsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdTeamProductMaterialsDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamProductMaterialsFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamProductMaterialsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdTeamProductMaterialsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamProductMaterialsFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamProductMaterialsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdTeamProductMaterialsFkGet(id, fk);
            //Assert.IsInstanceOf<ProductMaterial> (response, "response is ProductMaterial");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamProductMaterialsFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdTeamProductMaterialsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //ProductMaterial data = null;
            //var response = instance.TeamMembersIdTeamProductMaterialsFkPut(id, fk, data);
            //Assert.IsInstanceOf<ProductMaterial> (response, "response is ProductMaterial");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamProductMaterialsGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamProductMaterialsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdTeamProductMaterialsGet(id, filter);
            //Assert.IsInstanceOf<List<ProductMaterial>> (response, "response is List<ProductMaterial>");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamProductMaterialsPost
        /// </summary>
        [Test]
        public void TeamMembersIdTeamProductMaterialsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ProductMaterial data = null;
            //var response = instance.TeamMembersIdTeamProductMaterialsPost(id, data);
            //Assert.IsInstanceOf<ProductMaterial> (response, "response is ProductMaterial");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamProductPdfColorProfilesAvailableGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamProductPdfColorProfilesAvailableGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdTeamProductPdfColorProfilesAvailableGet(id, filter);
            //Assert.IsInstanceOf<List<ProductPdfColorProfile>> (response, "response is List<ProductPdfColorProfile>");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamProductPdfColorProfilesCountGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamProductPdfColorProfilesCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamMembersIdTeamProductPdfColorProfilesCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamProductPdfColorProfilesDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamProductPdfColorProfilesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdTeamProductPdfColorProfilesDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamProductPdfColorProfilesFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamProductPdfColorProfilesFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdTeamProductPdfColorProfilesFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamProductPdfColorProfilesFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamProductPdfColorProfilesFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdTeamProductPdfColorProfilesFkGet(id, fk);
            //Assert.IsInstanceOf<ProductPdfColorProfile> (response, "response is ProductPdfColorProfile");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamProductPdfColorProfilesFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdTeamProductPdfColorProfilesFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //ProductPdfColorProfile data = null;
            //var response = instance.TeamMembersIdTeamProductPdfColorProfilesFkPut(id, fk, data);
            //Assert.IsInstanceOf<ProductPdfColorProfile> (response, "response is ProductPdfColorProfile");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamProductPdfColorProfilesGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamProductPdfColorProfilesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdTeamProductPdfColorProfilesGet(id, filter);
            //Assert.IsInstanceOf<List<ProductPdfColorProfile>> (response, "response is List<ProductPdfColorProfile>");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamProductPdfColorProfilesUploadPost
        /// </summary>
        [Test]
        public void TeamMembersIdTeamProductPdfColorProfilesUploadPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.TeamMembersIdTeamProductPdfColorProfilesUploadPost(id);
            //Assert.IsInstanceOf<ProductPdfColorProfile> (response, "response is ProductPdfColorProfile");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamProductSizeMaterialsCountGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamProductSizeMaterialsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamMembersIdTeamProductSizeMaterialsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamProductSizeMaterialsDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamProductSizeMaterialsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdTeamProductSizeMaterialsDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamProductSizeMaterialsFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamProductSizeMaterialsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdTeamProductSizeMaterialsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamProductSizeMaterialsFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamProductSizeMaterialsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdTeamProductSizeMaterialsFkGet(id, fk);
            //Assert.IsInstanceOf<ProductSizeMaterial> (response, "response is ProductSizeMaterial");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamProductSizeMaterialsFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdTeamProductSizeMaterialsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //ProductSizeMaterial data = null;
            //var response = instance.TeamMembersIdTeamProductSizeMaterialsFkPut(id, fk, data);
            //Assert.IsInstanceOf<ProductSizeMaterial> (response, "response is ProductSizeMaterial");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamProductSizeMaterialsGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamProductSizeMaterialsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdTeamProductSizeMaterialsGet(id, filter);
            //Assert.IsInstanceOf<List<ProductSizeMaterial>> (response, "response is List<ProductSizeMaterial>");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamProductSizeMaterialsPost
        /// </summary>
        [Test]
        public void TeamMembersIdTeamProductSizeMaterialsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ProductSizeMaterial data = null;
            //var response = instance.TeamMembersIdTeamProductSizeMaterialsPost(id, data);
            //Assert.IsInstanceOf<ProductSizeMaterial> (response, "response is ProductSizeMaterial");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamTeamDataGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamTeamDataGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? refresh = null;
            //var response = instance.TeamMembersIdTeamTeamDataGet(id, refresh);
            //Assert.IsInstanceOf<DynamicData> (response, "response is DynamicData");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamTeamMembersCountGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamTeamMembersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamMembersIdTeamTeamMembersCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamTeamMembersDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamTeamMembersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdTeamTeamMembersDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamTeamMembersFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamTeamMembersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdTeamTeamMembersFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamTeamMembersFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamTeamMembersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdTeamTeamMembersFkGet(id, fk);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamTeamMembersFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdTeamTeamMembersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //TeamMember data = null;
            //var response = instance.TeamMembersIdTeamTeamMembersFkPut(id, fk, data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamTeamMembersGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamTeamMembersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdTeamTeamMembersGet(id, filter);
            //Assert.IsInstanceOf<List<TeamMember>> (response, "response is List<TeamMember>");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamTeamMembersPost
        /// </summary>
        [Test]
        public void TeamMembersIdTeamTeamMembersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamMember data = null;
            //var response = instance.TeamMembersIdTeamTeamMembersPost(id, data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamTemplateFoldersCountGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamTemplateFoldersCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamMembersIdTeamTemplateFoldersCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamTemplateFoldersDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamTemplateFoldersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdTeamTemplateFoldersDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamTemplateFoldersFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamTemplateFoldersFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdTeamTemplateFoldersFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamTemplateFoldersFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamTemplateFoldersFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdTeamTemplateFoldersFkGet(id, fk);
            //Assert.IsInstanceOf<TeamTemplateFolder> (response, "response is TeamTemplateFolder");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamTemplateFoldersFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdTeamTemplateFoldersFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //TeamTemplateFolder data = null;
            //var response = instance.TeamMembersIdTeamTemplateFoldersFkPut(id, fk, data);
            //Assert.IsInstanceOf<TeamTemplateFolder> (response, "response is TeamTemplateFolder");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamTemplateFoldersGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamTemplateFoldersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdTeamTemplateFoldersGet(id, filter);
            //Assert.IsInstanceOf<List<TeamTemplateFolder>> (response, "response is List<TeamTemplateFolder>");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamTemplateFoldersPost
        /// </summary>
        [Test]
        public void TeamMembersIdTeamTemplateFoldersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TeamTemplateFolder data = null;
            //var response = instance.TeamMembersIdTeamTemplateFoldersPost(id, data);
            //Assert.IsInstanceOf<TeamTemplateFolder> (response, "response is TeamTemplateFolder");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamTemplatesCountGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamTemplatesCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamMembersIdTeamTemplatesCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamTemplatesDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamTemplatesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdTeamTemplatesDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamTemplatesFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamTemplatesFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdTeamTemplatesFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamTemplatesFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamTemplatesFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdTeamTemplatesFkGet(id, fk);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamTemplatesFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdTeamTemplatesFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //Template data = null;
            //var response = instance.TeamMembersIdTeamTemplatesFkPut(id, fk, data);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamTemplatesFkUrlReviewGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamTemplatesFkUrlReviewGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdTeamTemplatesFkUrlReviewGet(id, fk);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamTemplatesGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamTemplatesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdTeamTemplatesGet(id, filter);
            //Assert.IsInstanceOf<List<Template>> (response, "response is List<Template>");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamTemplatesPost
        /// </summary>
        [Test]
        public void TeamMembersIdTeamTemplatesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Template data = null;
            //var response = instance.TeamMembersIdTeamTemplatesPost(id, data);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamTemplatesWithDesignsGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamTemplatesWithDesignsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string filter = null;
            //var response = instance.TeamMembersIdTeamTemplatesWithDesignsGet(id, id2, filter);
            //Assert.IsInstanceOf<List<Template>> (response, "response is List<Template>");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamWorkflowsCountGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamWorkflowsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamMembersIdTeamWorkflowsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamWorkflowsDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamWorkflowsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdTeamWorkflowsDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamWorkflowsFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTeamWorkflowsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdTeamWorkflowsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamWorkflowsFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamWorkflowsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdTeamWorkflowsFkGet(id, fk);
            //Assert.IsInstanceOf<Workflow> (response, "response is Workflow");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamWorkflowsFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdTeamWorkflowsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //Workflow data = null;
            //var response = instance.TeamMembersIdTeamWorkflowsFkPut(id, fk, data);
            //Assert.IsInstanceOf<Workflow> (response, "response is Workflow");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamWorkflowsGet
        /// </summary>
        [Test]
        public void TeamMembersIdTeamWorkflowsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdTeamWorkflowsGet(id, filter);
            //Assert.IsInstanceOf<List<Workflow>> (response, "response is List<Workflow>");
        }
        
        /// <summary>
        /// Test TeamMembersIdTeamWorkflowsPost
        /// </summary>
        [Test]
        public void TeamMembersIdTeamWorkflowsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Workflow data = null;
            //var response = instance.TeamMembersIdTeamWorkflowsPost(id, data);
            //Assert.IsInstanceOf<Workflow> (response, "response is Workflow");
        }
        
        /// <summary>
        /// Test TeamMembersIdTemplatesCountGet
        /// </summary>
        [Test]
        public void TeamMembersIdTemplatesCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamMembersIdTemplatesCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersIdTemplatesDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTemplatesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdTemplatesDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTemplatesFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTemplatesFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdTemplatesFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTemplatesFkFlashvarsGet
        /// </summary>
        [Test]
        public void TeamMembersIdTemplatesFkFlashvarsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string fk = null;
            //var response = instance.TeamMembersIdTemplatesFkFlashvarsGet(id, id2, fk);
            //Assert.IsInstanceOf<FlashVar> (response, "response is FlashVar");
        }
        
        /// <summary>
        /// Test TeamMembersIdTemplatesFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdTemplatesFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdTemplatesFkGet(id, fk);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test TeamMembersIdTemplatesFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdTemplatesFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //Template data = null;
            //var response = instance.TeamMembersIdTemplatesFkPut(id, fk, data);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test TeamMembersIdTemplatesGet
        /// </summary>
        [Test]
        public void TeamMembersIdTemplatesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdTemplatesGet(id, filter);
            //Assert.IsInstanceOf<List<Template>> (response, "response is List<Template>");
        }
        
        /// <summary>
        /// Test TeamMembersIdTemplatesPost
        /// </summary>
        [Test]
        public void TeamMembersIdTemplatesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Template data = null;
            //var response = instance.TeamMembersIdTemplatesPost(id, data);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test TeamMembersIdTemplatesRelFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdTemplatesRelFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdTemplatesRelFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdTemplatesRelFkHead
        /// </summary>
        [Test]
        public void TeamMembersIdTemplatesRelFkHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdTemplatesRelFkHead(id, fk);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test TeamMembersIdTemplatesRelFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdTemplatesRelFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //TemplateMember data = null;
            //var response = instance.TeamMembersIdTemplatesRelFkPut(id, fk, data);
            //Assert.IsInstanceOf<TemplateMember> (response, "response is TemplateMember");
        }
        
        /// <summary>
        /// Test TeamMembersIdTweakTemplateFoldersGet
        /// </summary>
        [Test]
        public void TeamMembersIdTweakTemplateFoldersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string filter = null;
            //var response = instance.TeamMembersIdTweakTemplateFoldersGet(id, id2, filter);
            //Assert.IsInstanceOf<List<TeamTemplateFolder>> (response, "response is List<TeamTemplateFolder>");
        }
        
        /// <summary>
        /// Test TeamMembersIdTweakTemplateFoldersNkGet
        /// </summary>
        [Test]
        public void TeamMembersIdTweakTemplateFoldersNkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamMembersIdTweakTemplateFoldersNkGet(id, id2, nk, filter);
            //Assert.IsInstanceOf<TeamTemplateFolder> (response, "response is TeamTemplateFolder");
        }
        
        /// <summary>
        /// Test TeamMembersIdTweakTemplateFoldersNkTemplatesFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdTweakTemplateFoldersNkTemplatesFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string nk = null;
            //string fk = null;
            //string filter = null;
            //var response = instance.TeamMembersIdTweakTemplateFoldersNkTemplatesFkGet(id, id2, nk, fk, filter);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test TeamMembersIdTweakTemplateFoldersNkTemplatesGet
        /// </summary>
        [Test]
        public void TeamMembersIdTweakTemplateFoldersNkTemplatesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string nk = null;
            //string filter = null;
            //var response = instance.TeamMembersIdTweakTemplateFoldersNkTemplatesGet(id, id2, nk, filter);
            //Assert.IsInstanceOf<List<Template>> (response, "response is List<Template>");
        }
        
        /// <summary>
        /// Test TeamMembersIdTweakTemplatesFkFlashvarsGet
        /// </summary>
        [Test]
        public void TeamMembersIdTweakTemplatesFkFlashvarsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string fk = null;
            //var response = instance.TeamMembersIdTweakTemplatesFkFlashvarsGet(id, id2, fk);
            //Assert.IsInstanceOf<FlashVar> (response, "response is FlashVar");
        }
        
        /// <summary>
        /// Test TeamMembersIdTweakTemplatesFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdTweakTemplatesFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string fk = null;
            //string filter = null;
            //var response = instance.TeamMembersIdTweakTemplatesFkGet(id, id2, fk, filter);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test TeamMembersIdTweakTemplatesGet
        /// </summary>
        [Test]
        public void TeamMembersIdTweakTemplatesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string id2 = null;
            //string filter = null;
            //var response = instance.TeamMembersIdTweakTemplatesGet(id, id2, filter);
            //Assert.IsInstanceOf<List<Template>> (response, "response is List<Template>");
        }
        
        /// <summary>
        /// Test TeamMembersIdUploadedTemplatesCountGet
        /// </summary>
        [Test]
        public void TeamMembersIdUploadedTemplatesCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamMembersIdUploadedTemplatesCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersIdUploadedTemplatesDelete
        /// </summary>
        [Test]
        public void TeamMembersIdUploadedTemplatesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdUploadedTemplatesDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdUploadedTemplatesFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdUploadedTemplatesFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdUploadedTemplatesFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdUploadedTemplatesFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdUploadedTemplatesFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdUploadedTemplatesFkGet(id, fk);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test TeamMembersIdUploadedTemplatesFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdUploadedTemplatesFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //Template data = null;
            //var response = instance.TeamMembersIdUploadedTemplatesFkPut(id, fk, data);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test TeamMembersIdUploadedTemplatesGet
        /// </summary>
        [Test]
        public void TeamMembersIdUploadedTemplatesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdUploadedTemplatesGet(id, filter);
            //Assert.IsInstanceOf<List<Template>> (response, "response is List<Template>");
        }
        
        /// <summary>
        /// Test TeamMembersIdUploadedTemplatesPost
        /// </summary>
        [Test]
        public void TeamMembersIdUploadedTemplatesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Template data = null;
            //var response = instance.TeamMembersIdUploadedTemplatesPost(id, data);
            //Assert.IsInstanceOf<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test TeamMembersIdWorkflowsCountGet
        /// </summary>
        [Test]
        public void TeamMembersIdWorkflowsCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.TeamMembersIdWorkflowsCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TeamMembersIdWorkflowsDelete
        /// </summary>
        [Test]
        public void TeamMembersIdWorkflowsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.TeamMembersIdWorkflowsDelete(id);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdWorkflowsFkDelete
        /// </summary>
        [Test]
        public void TeamMembersIdWorkflowsFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.TeamMembersIdWorkflowsFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test TeamMembersIdWorkflowsFkGet
        /// </summary>
        [Test]
        public void TeamMembersIdWorkflowsFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.TeamMembersIdWorkflowsFkGet(id, fk);
            //Assert.IsInstanceOf<Workflow> (response, "response is Workflow");
        }
        
        /// <summary>
        /// Test TeamMembersIdWorkflowsFkPut
        /// </summary>
        [Test]
        public void TeamMembersIdWorkflowsFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //Workflow data = null;
            //var response = instance.TeamMembersIdWorkflowsFkPut(id, fk, data);
            //Assert.IsInstanceOf<Workflow> (response, "response is Workflow");
        }
        
        /// <summary>
        /// Test TeamMembersIdWorkflowsGet
        /// </summary>
        [Test]
        public void TeamMembersIdWorkflowsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.TeamMembersIdWorkflowsGet(id, filter);
            //Assert.IsInstanceOf<List<Workflow>> (response, "response is List<Workflow>");
        }
        
        /// <summary>
        /// Test TeamMembersIdWorkflowsPost
        /// </summary>
        [Test]
        public void TeamMembersIdWorkflowsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Workflow data = null;
            //var response = instance.TeamMembersIdWorkflowsPost(id, data);
            //Assert.IsInstanceOf<Workflow> (response, "response is Workflow");
        }
        
        /// <summary>
        /// Test TeamMembersPatch
        /// </summary>
        [Test]
        public void TeamMembersPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TeamMember data = null;
            //var response = instance.TeamMembersPatch(data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TeamMembersPost
        /// </summary>
        [Test]
        public void TeamMembersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TeamMember data = null;
            //var response = instance.TeamMembersPost(data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TeamMembersPut
        /// </summary>
        [Test]
        public void TeamMembersPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TeamMember data = null;
            //var response = instance.TeamMembersPut(data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TeamMembersReplaceOrCreatePost
        /// </summary>
        [Test]
        public void TeamMembersReplaceOrCreatePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TeamMember data = null;
            //var response = instance.TeamMembersReplaceOrCreatePost(data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
        /// <summary>
        /// Test TeamMembersUpdatePost
        /// </summary>
        [Test]
        public void TeamMembersUpdatePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //TeamMember data = null;
            //var response = instance.TeamMembersUpdatePost(where, data);
            //Assert.IsInstanceOf<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        
        /// <summary>
        /// Test TeamMembersUpsertWithWherePost
        /// </summary>
        [Test]
        public void TeamMembersUpsertWithWherePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //TeamMember data = null;
            //var response = instance.TeamMembersUpsertWithWherePost(where, data);
            //Assert.IsInstanceOf<TeamMember> (response, "response is TeamMember");
        }
        
    }

}
