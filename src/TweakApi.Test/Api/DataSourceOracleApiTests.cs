/* 
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.8-alpha.13
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TweakApi.Client;
using TweakApi.Api;
using TweakApi.Model;

namespace TweakApi.Test
{
    /// <summary>
    ///  Class for testing DataSourceOracleApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DataSourceOracleApiTests
    {
        private DataSourceOracleApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DataSourceOracleApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DataSourceOracleApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DataSourceOracleApi
            //Assert.IsInstanceOfType(typeof(DataSourceOracleApi), instance, "instance is a DataSourceOracleApi");
        }

        
        /// <summary>
        /// Test DataSourceOraclesChangeStreamGet
        /// </summary>
        [Test]
        public void DataSourceOraclesChangeStreamGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string options = null;
            //var response = instance.DataSourceOraclesChangeStreamGet(options);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test DataSourceOraclesChangeStreamPost
        /// </summary>
        [Test]
        public void DataSourceOraclesChangeStreamPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string options = null;
            //var response = instance.DataSourceOraclesChangeStreamPost(options);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test DataSourceOraclesCountGet
        /// </summary>
        [Test]
        public void DataSourceOraclesCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string where = null;
            //var response = instance.DataSourceOraclesCountGet(where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test DataSourceOraclesFindOneGet
        /// </summary>
        [Test]
        public void DataSourceOraclesFindOneGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //var response = instance.DataSourceOraclesFindOneGet(filter);
            //Assert.IsInstanceOf<DataSourceOracle> (response, "response is DataSourceOracle");
        }
        
        /// <summary>
        /// Test DataSourceOraclesGet
        /// </summary>
        [Test]
        public void DataSourceOraclesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //var response = instance.DataSourceOraclesGet(filter);
            //Assert.IsInstanceOf<List<DataSourceOracle>> (response, "response is List<DataSourceOracle>");
        }
        
        /// <summary>
        /// Test DataSourceOraclesIdDelete
        /// </summary>
        [Test]
        public void DataSourceOraclesIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DataSourceOraclesIdDelete(id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test DataSourceOraclesIdDynamicDatasCountGet
        /// </summary>
        [Test]
        public void DataSourceOraclesIdDynamicDatasCountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string where = null;
            //var response = instance.DataSourceOraclesIdDynamicDatasCountGet(id, where);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test DataSourceOraclesIdDynamicDatasDelete
        /// </summary>
        [Test]
        public void DataSourceOraclesIdDynamicDatasDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DataSourceOraclesIdDynamicDatasDelete(id);
            
        }
        
        /// <summary>
        /// Test DataSourceOraclesIdDynamicDatasFkDelete
        /// </summary>
        [Test]
        public void DataSourceOraclesIdDynamicDatasFkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //instance.DataSourceOraclesIdDynamicDatasFkDelete(id, fk);
            
        }
        
        /// <summary>
        /// Test DataSourceOraclesIdDynamicDatasFkGet
        /// </summary>
        [Test]
        public void DataSourceOraclesIdDynamicDatasFkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //var response = instance.DataSourceOraclesIdDynamicDatasFkGet(id, fk);
            //Assert.IsInstanceOf<DynamicData> (response, "response is DynamicData");
        }
        
        /// <summary>
        /// Test DataSourceOraclesIdDynamicDatasFkPut
        /// </summary>
        [Test]
        public void DataSourceOraclesIdDynamicDatasFkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string fk = null;
            //DynamicData data = null;
            //var response = instance.DataSourceOraclesIdDynamicDatasFkPut(id, fk, data);
            //Assert.IsInstanceOf<DynamicData> (response, "response is DynamicData");
        }
        
        /// <summary>
        /// Test DataSourceOraclesIdDynamicDatasGet
        /// </summary>
        [Test]
        public void DataSourceOraclesIdDynamicDatasGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.DataSourceOraclesIdDynamicDatasGet(id, filter);
            //Assert.IsInstanceOf<List<DynamicData>> (response, "response is List<DynamicData>");
        }
        
        /// <summary>
        /// Test DataSourceOraclesIdDynamicDatasPost
        /// </summary>
        [Test]
        public void DataSourceOraclesIdDynamicDatasPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DynamicData data = null;
            //var response = instance.DataSourceOraclesIdDynamicDatasPost(id, data);
            //Assert.IsInstanceOf<DynamicData> (response, "response is DynamicData");
        }
        
        /// <summary>
        /// Test DataSourceOraclesIdExistsGet
        /// </summary>
        [Test]
        public void DataSourceOraclesIdExistsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DataSourceOraclesIdExistsGet(id);
            //Assert.IsInstanceOf<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        
        /// <summary>
        /// Test DataSourceOraclesIdGet
        /// </summary>
        [Test]
        public void DataSourceOraclesIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string filter = null;
            //var response = instance.DataSourceOraclesIdGet(id, filter);
            //Assert.IsInstanceOf<DataSourceOracle> (response, "response is DataSourceOracle");
        }
        
        /// <summary>
        /// Test DataSourceOraclesIdHead
        /// </summary>
        [Test]
        public void DataSourceOraclesIdHeadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DataSourceOraclesIdHead(id);
            //Assert.IsInstanceOf<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        
        /// <summary>
        /// Test DataSourceOraclesIdPatch
        /// </summary>
        [Test]
        public void DataSourceOraclesIdPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DataSourceOracle data = null;
            //var response = instance.DataSourceOraclesIdPatch(id, data);
            //Assert.IsInstanceOf<DataSourceOracle> (response, "response is DataSourceOracle");
        }
        
        /// <summary>
        /// Test DataSourceOraclesIdPut
        /// </summary>
        [Test]
        public void DataSourceOraclesIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DataSourceOracle data = null;
            //var response = instance.DataSourceOraclesIdPut(id, data);
            //Assert.IsInstanceOf<DataSourceOracle> (response, "response is DataSourceOracle");
        }
        
        /// <summary>
        /// Test DataSourceOraclesIdReplacePost
        /// </summary>
        [Test]
        public void DataSourceOraclesIdReplacePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DataSourceOracle data = null;
            //var response = instance.DataSourceOraclesIdReplacePost(id, data);
            //Assert.IsInstanceOf<DataSourceOracle> (response, "response is DataSourceOracle");
        }
        
        /// <summary>
        /// Test DataSourceOraclesIdTeamGet
        /// </summary>
        [Test]
        public void DataSourceOraclesIdTeamGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? refresh = null;
            //var response = instance.DataSourceOraclesIdTeamGet(id, refresh);
            //Assert.IsInstanceOf<Team> (response, "response is Team");
        }
        
        /// <summary>
        /// Test DataSourceOraclesPost
        /// </summary>
        [Test]
        public void DataSourceOraclesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DataSourceOracle data = null;
            //var response = instance.DataSourceOraclesPost(data);
            //Assert.IsInstanceOf<DataSourceOracle> (response, "response is DataSourceOracle");
        }
        
    }

}
