/* 
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.2-alpha.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TweakApi.Client;
using TweakApi.Model;

namespace TweakApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPortalApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream PortalsChangeStreamGet (string options = null);

        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> PortalsChangeStreamGetWithHttpInfo (string options = null);
        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream PortalsChangeStreamPost (string options = null);

        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> PortalsChangeStreamPostWithHttpInfo (string options = null);
        /// <summary>
        /// Count instances of the model matched by where from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 PortalsCountGet (string where = null);

        /// <summary>
        /// Count instances of the model matched by where from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> PortalsCountGetWithHttpInfo (string where = null);
        /// <summary>
        /// Find first instance of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Portal</returns>
        Portal PortalsFindOneGet (string filter = null);

        /// <summary>
        /// Find first instance of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        ApiResponse<Portal> PortalsFindOneGetWithHttpInfo (string filter = null);
        /// <summary>
        /// Find all instances of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>List&lt;Portal&gt;</returns>
        List<Portal> PortalsGet (string filter = null);

        /// <summary>
        /// Find all instances of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of List&lt;Portal&gt;</returns>
        ApiResponse<List<Portal>> PortalsGetWithHttpInfo (string filter = null);
        /// <summary>
        /// Delete a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Object</returns>
        Object PortalsIdDelete (string id);

        /// <summary>
        /// Delete a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PortalsIdDeleteWithHttpInfo (string id);
        /// <summary>
        /// Counts designFolders of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 PortalsIdDesignFoldersCountGet (string id, string where = null);

        /// <summary>
        /// Counts designFolders of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> PortalsIdDesignFoldersCountGetWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all designFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns></returns>
        void PortalsIdDesignFoldersDelete (string id);

        /// <summary>
        /// Deletes all designFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdDesignFoldersDeleteWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for designFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designFolders</param>
        /// <returns></returns>
        void PortalsIdDesignFoldersFkDelete (string id, string fk);

        /// <summary>
        /// Delete a related item by id for designFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designFolders</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdDesignFoldersFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for designFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designFolders</param>
        /// <returns>DesignFolder</returns>
        DesignFolder PortalsIdDesignFoldersFkGet (string id, string fk);

        /// <summary>
        /// Find a related item by id for designFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designFolders</param>
        /// <returns>ApiResponse of DesignFolder</returns>
        ApiResponse<DesignFolder> PortalsIdDesignFoldersFkGetWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for designFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>DesignFolder</returns>
        DesignFolder PortalsIdDesignFoldersFkPut (string id, string fk, DesignFolder data = null);

        /// <summary>
        /// Update a related item by id for designFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of DesignFolder</returns>
        ApiResponse<DesignFolder> PortalsIdDesignFoldersFkPutWithHttpInfo (string id, string fk, DesignFolder data = null);
        /// <summary>
        /// Queries designFolders of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;DesignFolder&gt;</returns>
        List<DesignFolder> PortalsIdDesignFoldersGet (string id, string filter = null);

        /// <summary>
        /// Queries designFolders of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DesignFolder&gt;</returns>
        ApiResponse<List<DesignFolder>> PortalsIdDesignFoldersGetWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in designFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>DesignFolder</returns>
        DesignFolder PortalsIdDesignFoldersPost (string id, DesignFolder data = null);

        /// <summary>
        /// Creates a new instance in designFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of DesignFolder</returns>
        ApiResponse<DesignFolder> PortalsIdDesignFoldersPostWithHttpInfo (string id, DesignFolder data = null);
        /// <summary>
        /// Counts designs of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 PortalsIdDesignsCountGet (string id, string where = null);

        /// <summary>
        /// Counts designs of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> PortalsIdDesignsCountGetWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all designs of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns></returns>
        void PortalsIdDesignsDelete (string id);

        /// <summary>
        /// Deletes all designs of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdDesignsDeleteWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for designs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns></returns>
        void PortalsIdDesignsFkDelete (string id, string fk);

        /// <summary>
        /// Delete a related item by id for designs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdDesignsFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for designs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns>Design</returns>
        Design PortalsIdDesignsFkGet (string id, string fk);

        /// <summary>
        /// Find a related item by id for designs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns>ApiResponse of Design</returns>
        ApiResponse<Design> PortalsIdDesignsFkGetWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for designs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Design</returns>
        Design PortalsIdDesignsFkPut (string id, string fk, Design data = null);

        /// <summary>
        /// Update a related item by id for designs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Design</returns>
        ApiResponse<Design> PortalsIdDesignsFkPutWithHttpInfo (string id, string fk, Design data = null);
        /// <summary>
        /// Queries designs of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;Design&gt;</returns>
        List<Design> PortalsIdDesignsGet (string id, string filter = null);

        /// <summary>
        /// Queries designs of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Design&gt;</returns>
        ApiResponse<List<Design>> PortalsIdDesignsGetWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Fetches belongsTo relation assignee.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>TeamMember</returns>
        TeamMember PortalsIdDesignsNkAssigneeGet (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation assignee.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        ApiResponse<TeamMember> PortalsIdDesignsNkAssigneeGetWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Counts commenters of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 PortalsIdDesignsNkCommentersCountGet (string id, string nk, string where = null);

        /// <summary>
        /// Counts commenters of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> PortalsIdDesignsNkCommentersCountGetWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all commenters of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns></returns>
        void PortalsIdDesignsNkCommentersDelete (string id, string nk);

        /// <summary>
        /// Deletes all commenters of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdDesignsNkCommentersDeleteWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for commenters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns></returns>
        void PortalsIdDesignsNkCommentersFkDelete (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for commenters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdDesignsNkCommentersFkDeleteWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for commenters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns>TeamMember</returns>
        TeamMember PortalsIdDesignsNkCommentersFkGet (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for commenters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns>ApiResponse of TeamMember</returns>
        ApiResponse<TeamMember> PortalsIdDesignsNkCommentersFkGetWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for commenters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamMember</returns>
        TeamMember PortalsIdDesignsNkCommentersFkPut (string id, string nk, string fk, TeamMember data = null);

        /// <summary>
        /// Update a related item by id for commenters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        ApiResponse<TeamMember> PortalsIdDesignsNkCommentersFkPutWithHttpInfo (string id, string nk, string fk, TeamMember data = null);
        /// <summary>
        /// Queries commenters of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;TeamMember&gt;</returns>
        List<TeamMember> PortalsIdDesignsNkCommentersGet (string id, string nk, string filter = null);

        /// <summary>
        /// Queries commenters of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamMember&gt;</returns>
        ApiResponse<List<TeamMember>> PortalsIdDesignsNkCommentersGetWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in commenters of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamMember</returns>
        TeamMember PortalsIdDesignsNkCommentersPost (string id, string nk, TeamMember data = null);

        /// <summary>
        /// Creates a new instance in commenters of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        ApiResponse<TeamMember> PortalsIdDesignsNkCommentersPostWithHttpInfo (string id, string nk, TeamMember data = null);
        /// <summary>
        /// Remove the commenters relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns></returns>
        void PortalsIdDesignsNkCommentersRelFkDelete (string id, string nk, string fk);

        /// <summary>
        /// Remove the commenters relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdDesignsNkCommentersRelFkDeleteWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Check the existence of commenters relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns>bool?</returns>
        bool? PortalsIdDesignsNkCommentersRelFkHead (string id, string nk, string fk);

        /// <summary>
        /// Check the existence of commenters relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> PortalsIdDesignsNkCommentersRelFkHeadWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Add a related item by id for commenters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <param name="data"> (optional)</param>
        /// <returns>DesignComment</returns>
        DesignComment PortalsIdDesignsNkCommentersRelFkPut (string id, string nk, string fk, DesignComment data = null);

        /// <summary>
        /// Add a related item by id for commenters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of DesignComment</returns>
        ApiResponse<DesignComment> PortalsIdDesignsNkCommentersRelFkPutWithHttpInfo (string id, string nk, string fk, DesignComment data = null);
        /// <summary>
        /// Counts comments of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 PortalsIdDesignsNkCommentsCountGet (string id, string nk, string where = null);

        /// <summary>
        /// Counts comments of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> PortalsIdDesignsNkCommentsCountGetWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all comments of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns></returns>
        void PortalsIdDesignsNkCommentsDelete (string id, string nk);

        /// <summary>
        /// Deletes all comments of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdDesignsNkCommentsDeleteWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for comments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for comments</param>
        /// <returns></returns>
        void PortalsIdDesignsNkCommentsFkDelete (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for comments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for comments</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdDesignsNkCommentsFkDeleteWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for comments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for comments</param>
        /// <returns>DesignComment</returns>
        DesignComment PortalsIdDesignsNkCommentsFkGet (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for comments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for comments</param>
        /// <returns>ApiResponse of DesignComment</returns>
        ApiResponse<DesignComment> PortalsIdDesignsNkCommentsFkGetWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for comments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for comments</param>
        /// <param name="data"> (optional)</param>
        /// <returns>DesignComment</returns>
        DesignComment PortalsIdDesignsNkCommentsFkPut (string id, string nk, string fk, DesignComment data = null);

        /// <summary>
        /// Update a related item by id for comments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for comments</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of DesignComment</returns>
        ApiResponse<DesignComment> PortalsIdDesignsNkCommentsFkPutWithHttpInfo (string id, string nk, string fk, DesignComment data = null);
        /// <summary>
        /// Queries comments of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;DesignComment&gt;</returns>
        List<DesignComment> PortalsIdDesignsNkCommentsGet (string id, string nk, string filter = null);

        /// <summary>
        /// Queries comments of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DesignComment&gt;</returns>
        ApiResponse<List<DesignComment>> PortalsIdDesignsNkCommentsGetWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in comments of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>DesignComment</returns>
        DesignComment PortalsIdDesignsNkCommentsPost (string id, string nk, DesignComment data = null);

        /// <summary>
        /// Creates a new instance in comments of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of DesignComment</returns>
        ApiResponse<DesignComment> PortalsIdDesignsNkCommentsPostWithHttpInfo (string id, string nk, DesignComment data = null);
        /// <summary>
        /// Fetches belongsTo relation customer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Customer</returns>
        Customer PortalsIdDesignsNkCustomerGet (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation customer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> PortalsIdDesignsNkCustomerGetWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Counts exports of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 PortalsIdDesignsNkExportsCountGet (string id, string nk, string where = null);

        /// <summary>
        /// Counts exports of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> PortalsIdDesignsNkExportsCountGetWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all exports of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns></returns>
        void PortalsIdDesignsNkExportsDelete (string id, string nk);

        /// <summary>
        /// Deletes all exports of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdDesignsNkExportsDeleteWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for exports.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for exports</param>
        /// <returns></returns>
        void PortalsIdDesignsNkExportsFkDelete (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for exports.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for exports</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdDesignsNkExportsFkDeleteWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for exports.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for exports</param>
        /// <returns>DesignExport</returns>
        DesignExport PortalsIdDesignsNkExportsFkGet (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for exports.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for exports</param>
        /// <returns>ApiResponse of DesignExport</returns>
        ApiResponse<DesignExport> PortalsIdDesignsNkExportsFkGetWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for exports.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for exports</param>
        /// <param name="data"> (optional)</param>
        /// <returns>DesignExport</returns>
        DesignExport PortalsIdDesignsNkExportsFkPut (string id, string nk, string fk, DesignExport data = null);

        /// <summary>
        /// Update a related item by id for exports.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for exports</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of DesignExport</returns>
        ApiResponse<DesignExport> PortalsIdDesignsNkExportsFkPutWithHttpInfo (string id, string nk, string fk, DesignExport data = null);
        /// <summary>
        /// Queries exports of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;DesignExport&gt;</returns>
        List<DesignExport> PortalsIdDesignsNkExportsGet (string id, string nk, string filter = null);

        /// <summary>
        /// Queries exports of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DesignExport&gt;</returns>
        ApiResponse<List<DesignExport>> PortalsIdDesignsNkExportsGetWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in exports of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>DesignExport</returns>
        DesignExport PortalsIdDesignsNkExportsPost (string id, string nk, DesignExport data = null);

        /// <summary>
        /// Creates a new instance in exports of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of DesignExport</returns>
        ApiResponse<DesignExport> PortalsIdDesignsNkExportsPostWithHttpInfo (string id, string nk, DesignExport data = null);
        /// <summary>
        /// Fetches belongsTo relation folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>DesignFolder</returns>
        DesignFolder PortalsIdDesignsNkFolderGet (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of DesignFolder</returns>
        ApiResponse<DesignFolder> PortalsIdDesignsNkFolderGetWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Deletes permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns></returns>
        void PortalsIdDesignsNkPermissionDelete (string id, string nk);

        /// <summary>
        /// Deletes permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdDesignsNkPermissionDeleteWithHttpInfo (string id, string nk);
        /// <summary>
        /// Fetches hasOne relation permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>DesignPermissionSet</returns>
        DesignPermissionSet PortalsIdDesignsNkPermissionGet (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches hasOne relation permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of DesignPermissionSet</returns>
        ApiResponse<DesignPermissionSet> PortalsIdDesignsNkPermissionGetWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Creates a new instance in permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>DesignPermissionSet</returns>
        DesignPermissionSet PortalsIdDesignsNkPermissionPost (string id, string nk, DesignPermissionSet data = null);

        /// <summary>
        /// Creates a new instance in permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of DesignPermissionSet</returns>
        ApiResponse<DesignPermissionSet> PortalsIdDesignsNkPermissionPostWithHttpInfo (string id, string nk, DesignPermissionSet data = null);
        /// <summary>
        /// Update permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>DesignPermissionSet</returns>
        DesignPermissionSet PortalsIdDesignsNkPermissionPut (string id, string nk, DesignPermissionSet data = null);

        /// <summary>
        /// Update permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of DesignPermissionSet</returns>
        ApiResponse<DesignPermissionSet> PortalsIdDesignsNkPermissionPutWithHttpInfo (string id, string nk, DesignPermissionSet data = null);
        /// <summary>
        /// Fetches belongsTo relation portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Portal</returns>
        Portal PortalsIdDesignsNkPortalGet (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        ApiResponse<Portal> PortalsIdDesignsNkPortalGetWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Fetches belongsTo relation rejectionComment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>DesignComment</returns>
        DesignComment PortalsIdDesignsNkRejectionCommentGet (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation rejectionComment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of DesignComment</returns>
        ApiResponse<DesignComment> PortalsIdDesignsNkRejectionCommentGetWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Fetches belongsTo relation requester.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>TeamMember</returns>
        TeamMember PortalsIdDesignsNkRequesterGet (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation requester.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        ApiResponse<TeamMember> PortalsIdDesignsNkRequesterGetWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Fetches belongsTo relation reviewer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>TeamMember</returns>
        TeamMember PortalsIdDesignsNkReviewerGet (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation reviewer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        ApiResponse<TeamMember> PortalsIdDesignsNkReviewerGetWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Counts tags of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 PortalsIdDesignsNkTagsCountGet (string id, string nk, string where = null);

        /// <summary>
        /// Counts tags of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> PortalsIdDesignsNkTagsCountGetWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all tags of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns></returns>
        void PortalsIdDesignsNkTagsDelete (string id, string nk);

        /// <summary>
        /// Deletes all tags of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdDesignsNkTagsDeleteWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns></returns>
        void PortalsIdDesignsNkTagsFkDelete (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdDesignsNkTagsFkDeleteWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Tag</returns>
        Tag PortalsIdDesignsNkTagsFkGet (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> PortalsIdDesignsNkTagsFkGetWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Tag</returns>
        Tag PortalsIdDesignsNkTagsFkPut (string id, string nk, string fk, Tag data = null);

        /// <summary>
        /// Update a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> PortalsIdDesignsNkTagsFkPutWithHttpInfo (string id, string nk, string fk, Tag data = null);
        /// <summary>
        /// Queries tags of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;Tag&gt;</returns>
        List<Tag> PortalsIdDesignsNkTagsGet (string id, string nk, string filter = null);

        /// <summary>
        /// Queries tags of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Tag&gt;</returns>
        ApiResponse<List<Tag>> PortalsIdDesignsNkTagsGetWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in tags of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Tag</returns>
        Tag PortalsIdDesignsNkTagsPost (string id, string nk, Tag data = null);

        /// <summary>
        /// Creates a new instance in tags of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> PortalsIdDesignsNkTagsPostWithHttpInfo (string id, string nk, Tag data = null);
        /// <summary>
        /// Remove the tags relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns></returns>
        void PortalsIdDesignsNkTagsRelFkDelete (string id, string nk, string fk);

        /// <summary>
        /// Remove the tags relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdDesignsNkTagsRelFkDeleteWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Check the existence of tags relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>bool?</returns>
        bool? PortalsIdDesignsNkTagsRelFkHead (string id, string nk, string fk);

        /// <summary>
        /// Check the existence of tags relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> PortalsIdDesignsNkTagsRelFkHeadWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Add a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>DesignTag</returns>
        DesignTag PortalsIdDesignsNkTagsRelFkPut (string id, string nk, string fk, DesignTag data = null);

        /// <summary>
        /// Add a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of DesignTag</returns>
        ApiResponse<DesignTag> PortalsIdDesignsNkTagsRelFkPutWithHttpInfo (string id, string nk, string fk, DesignTag data = null);
        /// <summary>
        /// Fetches belongsTo relation template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Template</returns>
        Template PortalsIdDesignsNkTemplateGet (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> PortalsIdDesignsNkTemplateGetWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Creates a new instance in designs of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Design</returns>
        Design PortalsIdDesignsPost (string id, Design data = null);

        /// <summary>
        /// Creates a new instance in designs of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Design</returns>
        ApiResponse<Design> PortalsIdDesignsPostWithHttpInfo (string id, Design data = null);
        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 PortalsIdExistsGet (string id);

        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> PortalsIdExistsGetWithHttpInfo (string id);
        /// <summary>
        /// Find a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Portal</returns>
        Portal PortalsIdGet (string id, string filter = null);

        /// <summary>
        /// Find a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        ApiResponse<Portal> PortalsIdGetWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 PortalsIdHead (string id);

        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> PortalsIdHeadWithHttpInfo (string id);
        /// <summary>
        /// Counts imageFolders of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 PortalsIdImageFoldersCountGet (string id, string where = null);

        /// <summary>
        /// Counts imageFolders of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> PortalsIdImageFoldersCountGetWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all imageFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns></returns>
        void PortalsIdImageFoldersDelete (string id);

        /// <summary>
        /// Deletes all imageFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdImageFoldersDeleteWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for imageFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns></returns>
        void PortalsIdImageFoldersFkDelete (string id, string fk);

        /// <summary>
        /// Delete a related item by id for imageFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdImageFoldersFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for imageFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>ImageFolder</returns>
        ImageFolder PortalsIdImageFoldersFkGet (string id, string fk);

        /// <summary>
        /// Find a related item by id for imageFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>ApiResponse of ImageFolder</returns>
        ApiResponse<ImageFolder> PortalsIdImageFoldersFkGetWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for imageFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ImageFolder</returns>
        ImageFolder PortalsIdImageFoldersFkPut (string id, string fk, ImageFolder data = null);

        /// <summary>
        /// Update a related item by id for imageFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ImageFolder</returns>
        ApiResponse<ImageFolder> PortalsIdImageFoldersFkPutWithHttpInfo (string id, string fk, ImageFolder data = null);
        /// <summary>
        /// Queries imageFolders of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;ImageFolder&gt;</returns>
        List<ImageFolder> PortalsIdImageFoldersGet (string id, string filter = null);

        /// <summary>
        /// Queries imageFolders of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ImageFolder&gt;</returns>
        ApiResponse<List<ImageFolder>> PortalsIdImageFoldersGetWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in imageFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ImageFolder</returns>
        ImageFolder PortalsIdImageFoldersPost (string id, ImageFolder data = null);

        /// <summary>
        /// Creates a new instance in imageFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ImageFolder</returns>
        ApiResponse<ImageFolder> PortalsIdImageFoldersPostWithHttpInfo (string id, ImageFolder data = null);
        /// <summary>
        /// Remove the imageFolders relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns></returns>
        void PortalsIdImageFoldersRelFkDelete (string id, string fk);

        /// <summary>
        /// Remove the imageFolders relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdImageFoldersRelFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Check the existence of imageFolders relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>bool?</returns>
        bool? PortalsIdImageFoldersRelFkHead (string id, string fk);

        /// <summary>
        /// Check the existence of imageFolders relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> PortalsIdImageFoldersRelFkHeadWithHttpInfo (string id, string fk);
        /// <summary>
        /// Add a related item by id for imageFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalImageFolder</returns>
        PortalImageFolder PortalsIdImageFoldersRelFkPut (string id, string fk, PortalImageFolder data = null);

        /// <summary>
        /// Add a related item by id for imageFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalImageFolder</returns>
        ApiResponse<PortalImageFolder> PortalsIdImageFoldersRelFkPutWithHttpInfo (string id, string fk, PortalImageFolder data = null);
        /// <summary>
        /// Delete InvitationTickets for this Portal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <returns>Object</returns>
        Object PortalsIdInvitationTicketsFkDelete (string id, string id2, string fk);

        /// <summary>
        /// Delete InvitationTickets for this Portal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PortalsIdInvitationTicketsFkDeleteWithHttpInfo (string id, string id2, string fk);
        /// <summary>
        /// Get InvitationTicket by Id for this Portal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <param name="filter">Only include changes that match this filter (optional)</param>
        /// <returns>InvitationTicket</returns>
        InvitationTicket PortalsIdInvitationTicketsFkGet (string id, string id2, string fk, string filter = null);

        /// <summary>
        /// Get InvitationTicket by Id for this Portal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <param name="filter">Only include changes that match this filter (optional)</param>
        /// <returns>ApiResponse of InvitationTicket</returns>
        ApiResponse<InvitationTicket> PortalsIdInvitationTicketsFkGetWithHttpInfo (string id, string id2, string fk, string filter = null);
        /// <summary>
        /// List InvitationTickets for this Portal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>List&lt;InvitationTicket&gt;</returns>
        List<InvitationTicket> PortalsIdInvitationTicketsGet (string id, string id2, string filter = null);

        /// <summary>
        /// List InvitationTickets for this Portal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of List&lt;InvitationTicket&gt;</returns>
        ApiResponse<List<InvitationTicket>> PortalsIdInvitationTicketsGetWithHttpInfo (string id, string id2, string filter = null);
        /// <summary>
        /// Change logo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="data">Logo</param>
        /// <returns>Portal</returns>
        Portal PortalsIdLogoPut (string id, string id2, Portal data);

        /// <summary>
        /// Change logo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="data">Logo</param>
        /// <returns>ApiResponse of Portal</returns>
        ApiResponse<Portal> PortalsIdLogoPutWithHttpInfo (string id, string id2, Portal data);
        /// <summary>
        /// Counts members of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 PortalsIdMembersCountGet (string id, string where = null);

        /// <summary>
        /// Counts members of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> PortalsIdMembersCountGetWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all members of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns></returns>
        void PortalsIdMembersDelete (string id);

        /// <summary>
        /// Deletes all members of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdMembersDeleteWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns></returns>
        void PortalsIdMembersFkDelete (string id, string fk);

        /// <summary>
        /// Delete a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdMembersFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>TeamMember</returns>
        TeamMember PortalsIdMembersFkGet (string id, string fk);

        /// <summary>
        /// Find a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>ApiResponse of TeamMember</returns>
        ApiResponse<TeamMember> PortalsIdMembersFkGetWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamMember</returns>
        TeamMember PortalsIdMembersFkPut (string id, string fk, TeamMember data = null);

        /// <summary>
        /// Update a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        ApiResponse<TeamMember> PortalsIdMembersFkPutWithHttpInfo (string id, string fk, TeamMember data = null);
        /// <summary>
        /// Queries members of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;TeamMember&gt;</returns>
        List<TeamMember> PortalsIdMembersGet (string id, string filter = null);

        /// <summary>
        /// Queries members of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamMember&gt;</returns>
        ApiResponse<List<TeamMember>> PortalsIdMembersGetWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in members of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamMember</returns>
        TeamMember PortalsIdMembersPost (string id, TeamMember data = null);

        /// <summary>
        /// Creates a new instance in members of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        ApiResponse<TeamMember> PortalsIdMembersPostWithHttpInfo (string id, TeamMember data = null);
        /// <summary>
        /// Remove the members relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns></returns>
        void PortalsIdMembersRelFkDelete (string id, string fk);

        /// <summary>
        /// Remove the members relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdMembersRelFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Check the existence of members relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>bool?</returns>
        bool? PortalsIdMembersRelFkHead (string id, string fk);

        /// <summary>
        /// Check the existence of members relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> PortalsIdMembersRelFkHeadWithHttpInfo (string id, string fk);
        /// <summary>
        /// Add a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalMember</returns>
        PortalMember PortalsIdMembersRelFkPut (string id, string fk, PortalMember data = null);

        /// <summary>
        /// Add a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalMember</returns>
        ApiResponse<PortalMember> PortalsIdMembersRelFkPutWithHttpInfo (string id, string fk, PortalMember data = null);
        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Portal</returns>
        Portal PortalsIdPatch (string id, Portal data = null);

        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        ApiResponse<Portal> PortalsIdPatchWithHttpInfo (string id, Portal data = null);
        /// <summary>
        /// Deletes permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns></returns>
        void PortalsIdPermissionDelete (string id);

        /// <summary>
        /// Deletes permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdPermissionDeleteWithHttpInfo (string id);
        /// <summary>
        /// Fetches hasOne relation permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>PortalPermissionSet</returns>
        PortalPermissionSet PortalsIdPermissionGet (string id, bool? refresh = null);

        /// <summary>
        /// Fetches hasOne relation permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of PortalPermissionSet</returns>
        ApiResponse<PortalPermissionSet> PortalsIdPermissionGetWithHttpInfo (string id, bool? refresh = null);
        /// <summary>
        /// Creates a new instance in permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalPermissionSet</returns>
        PortalPermissionSet PortalsIdPermissionPost (string id, PortalPermissionSet data = null);

        /// <summary>
        /// Creates a new instance in permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalPermissionSet</returns>
        ApiResponse<PortalPermissionSet> PortalsIdPermissionPostWithHttpInfo (string id, PortalPermissionSet data = null);
        /// <summary>
        /// Update permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalPermissionSet</returns>
        PortalPermissionSet PortalsIdPermissionPut (string id, PortalPermissionSet data = null);

        /// <summary>
        /// Update permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalPermissionSet</returns>
        ApiResponse<PortalPermissionSet> PortalsIdPermissionPutWithHttpInfo (string id, PortalPermissionSet data = null);
        /// <summary>
        /// Counts portalMembers of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 PortalsIdPortalMembersCountGet (string id, string where = null);

        /// <summary>
        /// Counts portalMembers of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> PortalsIdPortalMembersCountGetWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all portalMembers of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns></returns>
        void PortalsIdPortalMembersDelete (string id);

        /// <summary>
        /// Deletes all portalMembers of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdPortalMembersDeleteWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for portalMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for portalMembers</param>
        /// <returns></returns>
        void PortalsIdPortalMembersFkDelete (string id, string fk);

        /// <summary>
        /// Delete a related item by id for portalMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for portalMembers</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdPortalMembersFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for portalMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for portalMembers</param>
        /// <returns>PortalMember</returns>
        PortalMember PortalsIdPortalMembersFkGet (string id, string fk);

        /// <summary>
        /// Find a related item by id for portalMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for portalMembers</param>
        /// <returns>ApiResponse of PortalMember</returns>
        ApiResponse<PortalMember> PortalsIdPortalMembersFkGetWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for portalMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for portalMembers</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalMember</returns>
        PortalMember PortalsIdPortalMembersFkPut (string id, string fk, PortalMember data = null);

        /// <summary>
        /// Update a related item by id for portalMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for portalMembers</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalMember</returns>
        ApiResponse<PortalMember> PortalsIdPortalMembersFkPutWithHttpInfo (string id, string fk, PortalMember data = null);
        /// <summary>
        /// Queries portalMembers of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;PortalMember&gt;</returns>
        List<PortalMember> PortalsIdPortalMembersGet (string id, string filter = null);

        /// <summary>
        /// Queries portalMembers of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;PortalMember&gt;</returns>
        ApiResponse<List<PortalMember>> PortalsIdPortalMembersGetWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in portalMembers of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalMember</returns>
        PortalMember PortalsIdPortalMembersPost (string id, PortalMember data = null);

        /// <summary>
        /// Creates a new instance in portalMembers of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalMember</returns>
        ApiResponse<PortalMember> PortalsIdPortalMembersPostWithHttpInfo (string id, PortalMember data = null);
        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Portal</returns>
        Portal PortalsIdPut (string id, Portal data = null);

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        ApiResponse<Portal> PortalsIdPutWithHttpInfo (string id, Portal data = null);
        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Portal</returns>
        Portal PortalsIdReplacePost (string id, Portal data = null);

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        ApiResponse<Portal> PortalsIdReplacePostWithHttpInfo (string id, Portal data = null);
        /// <summary>
        /// Fetches belongsTo relation team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Team</returns>
        Team PortalsIdTeamGet (string id, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> PortalsIdTeamGetWithHttpInfo (string id, bool? refresh = null);
        /// <summary>
        /// Counts templateFolders of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 PortalsIdTemplateFoldersCountGet (string id, string where = null);

        /// <summary>
        /// Counts templateFolders of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> PortalsIdTemplateFoldersCountGetWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all templateFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns></returns>
        void PortalsIdTemplateFoldersDelete (string id);

        /// <summary>
        /// Deletes all templateFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdTemplateFoldersDeleteWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for templateFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns></returns>
        void PortalsIdTemplateFoldersFkDelete (string id, string fk);

        /// <summary>
        /// Delete a related item by id for templateFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdTemplateFoldersFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for templateFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns>PortalTemplateFolder</returns>
        PortalTemplateFolder PortalsIdTemplateFoldersFkGet (string id, string fk);

        /// <summary>
        /// Find a related item by id for templateFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        ApiResponse<PortalTemplateFolder> PortalsIdTemplateFoldersFkGetWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for templateFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        PortalTemplateFolder PortalsIdTemplateFoldersFkPut (string id, string fk, PortalTemplateFolder data = null);

        /// <summary>
        /// Update a related item by id for templateFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        ApiResponse<PortalTemplateFolder> PortalsIdTemplateFoldersFkPutWithHttpInfo (string id, string fk, PortalTemplateFolder data = null);
        /// <summary>
        /// Queries templateFolders of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;PortalTemplateFolder&gt;</returns>
        List<PortalTemplateFolder> PortalsIdTemplateFoldersGet (string id, string filter = null);

        /// <summary>
        /// Queries templateFolders of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;PortalTemplateFolder&gt;</returns>
        ApiResponse<List<PortalTemplateFolder>> PortalsIdTemplateFoldersGetWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Unlink folder with Template and Portal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="nk">PortalTemplateFolder id</param>
        /// <param name="fk">Template id</param>
        /// <returns>PortalTemplate</returns>
        PortalTemplate PortalsIdTemplateFoldersNkTemplatesFkRelDelete (string id, string id2, string nk, string fk);

        /// <summary>
        /// Unlink folder with Template and Portal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="nk">PortalTemplateFolder id</param>
        /// <param name="fk">Template id</param>
        /// <returns>ApiResponse of PortalTemplate</returns>
        ApiResponse<PortalTemplate> PortalsIdTemplateFoldersNkTemplatesFkRelDeleteWithHttpInfo (string id, string id2, string nk, string fk);
        /// <summary>
        /// Link folder with Template and Portal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="nk">PortalTemplateFolder id</param>
        /// <param name="fk">Template id</param>
        /// <returns>PortalTemplate</returns>
        PortalTemplate PortalsIdTemplateFoldersNkTemplatesFkRelPut (string id, string id2, string nk, string fk);

        /// <summary>
        /// Link folder with Template and Portal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="nk">PortalTemplateFolder id</param>
        /// <param name="fk">Template id</param>
        /// <returns>ApiResponse of PortalTemplate</returns>
        ApiResponse<PortalTemplate> PortalsIdTemplateFoldersNkTemplatesFkRelPutWithHttpInfo (string id, string id2, string nk, string fk);
        /// <summary>
        /// Creates a new instance in templateFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        PortalTemplateFolder PortalsIdTemplateFoldersPost (string id, PortalTemplateFolder data = null);

        /// <summary>
        /// Creates a new instance in templateFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        ApiResponse<PortalTemplateFolder> PortalsIdTemplateFoldersPostWithHttpInfo (string id, PortalTemplateFolder data = null);
        /// <summary>
        /// List templates on root folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="filter">Only include changes that match this filter (optional)</param>
        /// <returns>List&lt;PortalTemplate&gt;</returns>
        List<PortalTemplate> PortalsIdTemplateFoldersRootTemplatesGet (string id, string id2, string filter = null);

        /// <summary>
        /// List templates on root folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="filter">Only include changes that match this filter (optional)</param>
        /// <returns>ApiResponse of List&lt;PortalTemplate&gt;</returns>
        ApiResponse<List<PortalTemplate>> PortalsIdTemplateFoldersRootTemplatesGetWithHttpInfo (string id, string id2, string filter = null);
        /// <summary>
        /// Counts templateRels of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 PortalsIdTemplateRelsCountGet (string id, string where = null);

        /// <summary>
        /// Counts templateRels of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> PortalsIdTemplateRelsCountGetWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all templateRels of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns></returns>
        void PortalsIdTemplateRelsDelete (string id);

        /// <summary>
        /// Deletes all templateRels of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdTemplateRelsDeleteWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for templateRels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateRels</param>
        /// <returns></returns>
        void PortalsIdTemplateRelsFkDelete (string id, string fk);

        /// <summary>
        /// Delete a related item by id for templateRels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateRels</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdTemplateRelsFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for templateRels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateRels</param>
        /// <returns>PortalTemplate</returns>
        PortalTemplate PortalsIdTemplateRelsFkGet (string id, string fk);

        /// <summary>
        /// Find a related item by id for templateRels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateRels</param>
        /// <returns>ApiResponse of PortalTemplate</returns>
        ApiResponse<PortalTemplate> PortalsIdTemplateRelsFkGetWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for templateRels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateRels</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalTemplate</returns>
        PortalTemplate PortalsIdTemplateRelsFkPut (string id, string fk, PortalTemplate data = null);

        /// <summary>
        /// Update a related item by id for templateRels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateRels</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalTemplate</returns>
        ApiResponse<PortalTemplate> PortalsIdTemplateRelsFkPutWithHttpInfo (string id, string fk, PortalTemplate data = null);
        /// <summary>
        /// Queries templateRels of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;PortalTemplate&gt;</returns>
        List<PortalTemplate> PortalsIdTemplateRelsGet (string id, string filter = null);

        /// <summary>
        /// Queries templateRels of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;PortalTemplate&gt;</returns>
        ApiResponse<List<PortalTemplate>> PortalsIdTemplateRelsGetWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in templateRels of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalTemplate</returns>
        PortalTemplate PortalsIdTemplateRelsPost (string id, PortalTemplate data = null);

        /// <summary>
        /// Creates a new instance in templateRels of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalTemplate</returns>
        ApiResponse<PortalTemplate> PortalsIdTemplateRelsPostWithHttpInfo (string id, PortalTemplate data = null);
        /// <summary>
        /// Counts templates of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 PortalsIdTemplatesCountGet (string id, string where = null);

        /// <summary>
        /// Counts templates of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> PortalsIdTemplatesCountGetWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all templates of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns></returns>
        void PortalsIdTemplatesDelete (string id);

        /// <summary>
        /// Deletes all templates of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdTemplatesDeleteWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns></returns>
        void PortalsIdTemplatesFkDelete (string id, string fk);

        /// <summary>
        /// Delete a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdTemplatesFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Generate Design from Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2"></param>
        /// <param name="fk"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>List&lt;Design&gt;</returns>
        List<Design> PortalsIdTemplatesFkDesignsGenerateBulkPost (string id, string id2, string fk, List<Object> data = null);

        /// <summary>
        /// Generate Design from Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2"></param>
        /// <param name="fk"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Design&gt;</returns>
        ApiResponse<List<Design>> PortalsIdTemplatesFkDesignsGenerateBulkPostWithHttpInfo (string id, string id2, string fk, List<Object> data = null);
        /// <summary>
        /// Generate Design from Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2"></param>
        /// <param name="fk"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>Design</returns>
        Design PortalsIdTemplatesFkDesignsGeneratePost (string id, string id2, string fk, Portal data = null);

        /// <summary>
        /// Generate Design from Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2"></param>
        /// <param name="fk"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Design</returns>
        ApiResponse<Design> PortalsIdTemplatesFkDesignsGeneratePostWithHttpInfo (string id, string id2, string fk, Portal data = null);
        /// <summary>
        /// Find a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Template</returns>
        Template PortalsIdTemplatesFkGet (string id, string fk);

        /// <summary>
        /// Find a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> PortalsIdTemplatesFkGetWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Template</returns>
        Template PortalsIdTemplatesFkPut (string id, string fk, Template data = null);

        /// <summary>
        /// Update a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> PortalsIdTemplatesFkPutWithHttpInfo (string id, string fk, Template data = null);
        /// <summary>
        /// Queries templates of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;Template&gt;</returns>
        List<Template> PortalsIdTemplatesGet (string id, string filter = null);

        /// <summary>
        /// Queries templates of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Template&gt;</returns>
        ApiResponse<List<Template>> PortalsIdTemplatesGetWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in templates of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Template</returns>
        Template PortalsIdTemplatesPost (string id, Template data = null);

        /// <summary>
        /// Creates a new instance in templates of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> PortalsIdTemplatesPostWithHttpInfo (string id, Template data = null);
        /// <summary>
        /// Remove the templates relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns></returns>
        void PortalsIdTemplatesRelFkDelete (string id, string fk);

        /// <summary>
        /// Remove the templates relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalsIdTemplatesRelFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Check the existence of templates relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>bool?</returns>
        bool? PortalsIdTemplatesRelFkHead (string id, string fk);

        /// <summary>
        /// Check the existence of templates relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> PortalsIdTemplatesRelFkHeadWithHttpInfo (string id, string fk);
        /// <summary>
        /// Add a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalTemplate</returns>
        PortalTemplate PortalsIdTemplatesRelFkPut (string id, string fk, PortalTemplate data = null);

        /// <summary>
        /// Add a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalTemplate</returns>
        ApiResponse<PortalTemplate> PortalsIdTemplatesRelFkPutWithHttpInfo (string id, string fk, PortalTemplate data = null);
        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Portal</returns>
        Portal PortalsPatch (Portal data = null);

        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        ApiResponse<Portal> PortalsPatchWithHttpInfo (Portal data = null);
        /// <summary>
        /// Create a new instance of the model and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Portal</returns>
        Portal PortalsPost (Portal data = null);

        /// <summary>
        /// Create a new instance of the model and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        ApiResponse<Portal> PortalsPostWithHttpInfo (Portal data = null);
        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Portal</returns>
        Portal PortalsPut (Portal data = null);

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        ApiResponse<Portal> PortalsPutWithHttpInfo (Portal data = null);
        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Portal</returns>
        Portal PortalsReplaceOrCreatePost (Portal data = null);

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        ApiResponse<Portal> PortalsReplaceOrCreatePostWithHttpInfo (Portal data = null);
        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 PortalsUpdatePost (string where = null, Portal data = null);

        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> PortalsUpdatePostWithHttpInfo (string where = null, Portal data = null);
        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Portal</returns>
        Portal PortalsUpsertWithWherePost (string where = null, Portal data = null);

        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        ApiResponse<Portal> PortalsUpsertWithWherePostWithHttpInfo (string where = null, Portal data = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> PortalsChangeStreamGetAsync (string options = null);

        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PortalsChangeStreamGetAsyncWithHttpInfo (string options = null);
        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> PortalsChangeStreamPostAsync (string options = null);

        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PortalsChangeStreamPostAsyncWithHttpInfo (string options = null);
        /// <summary>
        /// Count instances of the model matched by where from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> PortalsCountGetAsync (string where = null);

        /// <summary>
        /// Count instances of the model matched by where from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PortalsCountGetAsyncWithHttpInfo (string where = null);
        /// <summary>
        /// Find first instance of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of Portal</returns>
        System.Threading.Tasks.Task<Portal> PortalsFindOneGetAsync (string filter = null);

        /// <summary>
        /// Find first instance of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        System.Threading.Tasks.Task<ApiResponse<Portal>> PortalsFindOneGetAsyncWithHttpInfo (string filter = null);
        /// <summary>
        /// Find all instances of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of List&lt;Portal&gt;</returns>
        System.Threading.Tasks.Task<List<Portal>> PortalsGetAsync (string filter = null);

        /// <summary>
        /// Find all instances of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Portal&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Portal>>> PortalsGetAsyncWithHttpInfo (string filter = null);
        /// <summary>
        /// Delete a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PortalsIdDeleteAsync (string id);

        /// <summary>
        /// Delete a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Counts designFolders of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> PortalsIdDesignFoldersCountGetAsync (string id, string where = null);

        /// <summary>
        /// Counts designFolders of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PortalsIdDesignFoldersCountGetAsyncWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all designFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdDesignFoldersDeleteAsync (string id);

        /// <summary>
        /// Deletes all designFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDesignFoldersDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for designFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designFolders</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdDesignFoldersFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Delete a related item by id for designFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designFolders</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDesignFoldersFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for designFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designFolders</param>
        /// <returns>Task of DesignFolder</returns>
        System.Threading.Tasks.Task<DesignFolder> PortalsIdDesignFoldersFkGetAsync (string id, string fk);

        /// <summary>
        /// Find a related item by id for designFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designFolders</param>
        /// <returns>Task of ApiResponse (DesignFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<DesignFolder>> PortalsIdDesignFoldersFkGetAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for designFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of DesignFolder</returns>
        System.Threading.Tasks.Task<DesignFolder> PortalsIdDesignFoldersFkPutAsync (string id, string fk, DesignFolder data = null);

        /// <summary>
        /// Update a related item by id for designFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (DesignFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<DesignFolder>> PortalsIdDesignFoldersFkPutAsyncWithHttpInfo (string id, string fk, DesignFolder data = null);
        /// <summary>
        /// Queries designFolders of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;DesignFolder&gt;</returns>
        System.Threading.Tasks.Task<List<DesignFolder>> PortalsIdDesignFoldersGetAsync (string id, string filter = null);

        /// <summary>
        /// Queries designFolders of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DesignFolder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DesignFolder>>> PortalsIdDesignFoldersGetAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in designFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of DesignFolder</returns>
        System.Threading.Tasks.Task<DesignFolder> PortalsIdDesignFoldersPostAsync (string id, DesignFolder data = null);

        /// <summary>
        /// Creates a new instance in designFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (DesignFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<DesignFolder>> PortalsIdDesignFoldersPostAsyncWithHttpInfo (string id, DesignFolder data = null);
        /// <summary>
        /// Counts designs of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> PortalsIdDesignsCountGetAsync (string id, string where = null);

        /// <summary>
        /// Counts designs of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PortalsIdDesignsCountGetAsyncWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all designs of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdDesignsDeleteAsync (string id);

        /// <summary>
        /// Deletes all designs of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDesignsDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for designs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdDesignsFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Delete a related item by id for designs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDesignsFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for designs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns>Task of Design</returns>
        System.Threading.Tasks.Task<Design> PortalsIdDesignsFkGetAsync (string id, string fk);

        /// <summary>
        /// Find a related item by id for designs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns>Task of ApiResponse (Design)</returns>
        System.Threading.Tasks.Task<ApiResponse<Design>> PortalsIdDesignsFkGetAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for designs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Design</returns>
        System.Threading.Tasks.Task<Design> PortalsIdDesignsFkPutAsync (string id, string fk, Design data = null);

        /// <summary>
        /// Update a related item by id for designs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Design)</returns>
        System.Threading.Tasks.Task<ApiResponse<Design>> PortalsIdDesignsFkPutAsyncWithHttpInfo (string id, string fk, Design data = null);
        /// <summary>
        /// Queries designs of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;Design&gt;</returns>
        System.Threading.Tasks.Task<List<Design>> PortalsIdDesignsGetAsync (string id, string filter = null);

        /// <summary>
        /// Queries designs of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Design&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Design>>> PortalsIdDesignsGetAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Fetches belongsTo relation assignee.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of TeamMember</returns>
        System.Threading.Tasks.Task<TeamMember> PortalsIdDesignsNkAssigneeGetAsync (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation assignee.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMember>> PortalsIdDesignsNkAssigneeGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Counts commenters of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> PortalsIdDesignsNkCommentersCountGetAsync (string id, string nk, string where = null);

        /// <summary>
        /// Counts commenters of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PortalsIdDesignsNkCommentersCountGetAsyncWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all commenters of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdDesignsNkCommentersDeleteAsync (string id, string nk);

        /// <summary>
        /// Deletes all commenters of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDesignsNkCommentersDeleteAsyncWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for commenters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdDesignsNkCommentersFkDeleteAsync (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for commenters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDesignsNkCommentersFkDeleteAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for commenters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns>Task of TeamMember</returns>
        System.Threading.Tasks.Task<TeamMember> PortalsIdDesignsNkCommentersFkGetAsync (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for commenters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMember>> PortalsIdDesignsNkCommentersFkGetAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for commenters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamMember</returns>
        System.Threading.Tasks.Task<TeamMember> PortalsIdDesignsNkCommentersFkPutAsync (string id, string nk, string fk, TeamMember data = null);

        /// <summary>
        /// Update a related item by id for commenters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMember>> PortalsIdDesignsNkCommentersFkPutAsyncWithHttpInfo (string id, string nk, string fk, TeamMember data = null);
        /// <summary>
        /// Queries commenters of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;TeamMember&gt;</returns>
        System.Threading.Tasks.Task<List<TeamMember>> PortalsIdDesignsNkCommentersGetAsync (string id, string nk, string filter = null);

        /// <summary>
        /// Queries commenters of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamMember&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamMember>>> PortalsIdDesignsNkCommentersGetAsyncWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in commenters of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamMember</returns>
        System.Threading.Tasks.Task<TeamMember> PortalsIdDesignsNkCommentersPostAsync (string id, string nk, TeamMember data = null);

        /// <summary>
        /// Creates a new instance in commenters of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMember>> PortalsIdDesignsNkCommentersPostAsyncWithHttpInfo (string id, string nk, TeamMember data = null);
        /// <summary>
        /// Remove the commenters relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdDesignsNkCommentersRelFkDeleteAsync (string id, string nk, string fk);

        /// <summary>
        /// Remove the commenters relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDesignsNkCommentersRelFkDeleteAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Check the existence of commenters relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> PortalsIdDesignsNkCommentersRelFkHeadAsync (string id, string nk, string fk);

        /// <summary>
        /// Check the existence of commenters relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> PortalsIdDesignsNkCommentersRelFkHeadAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Add a related item by id for commenters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of DesignComment</returns>
        System.Threading.Tasks.Task<DesignComment> PortalsIdDesignsNkCommentersRelFkPutAsync (string id, string nk, string fk, DesignComment data = null);

        /// <summary>
        /// Add a related item by id for commenters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (DesignComment)</returns>
        System.Threading.Tasks.Task<ApiResponse<DesignComment>> PortalsIdDesignsNkCommentersRelFkPutAsyncWithHttpInfo (string id, string nk, string fk, DesignComment data = null);
        /// <summary>
        /// Counts comments of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> PortalsIdDesignsNkCommentsCountGetAsync (string id, string nk, string where = null);

        /// <summary>
        /// Counts comments of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PortalsIdDesignsNkCommentsCountGetAsyncWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all comments of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdDesignsNkCommentsDeleteAsync (string id, string nk);

        /// <summary>
        /// Deletes all comments of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDesignsNkCommentsDeleteAsyncWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for comments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for comments</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdDesignsNkCommentsFkDeleteAsync (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for comments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for comments</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDesignsNkCommentsFkDeleteAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for comments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for comments</param>
        /// <returns>Task of DesignComment</returns>
        System.Threading.Tasks.Task<DesignComment> PortalsIdDesignsNkCommentsFkGetAsync (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for comments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for comments</param>
        /// <returns>Task of ApiResponse (DesignComment)</returns>
        System.Threading.Tasks.Task<ApiResponse<DesignComment>> PortalsIdDesignsNkCommentsFkGetAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for comments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for comments</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of DesignComment</returns>
        System.Threading.Tasks.Task<DesignComment> PortalsIdDesignsNkCommentsFkPutAsync (string id, string nk, string fk, DesignComment data = null);

        /// <summary>
        /// Update a related item by id for comments.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for comments</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (DesignComment)</returns>
        System.Threading.Tasks.Task<ApiResponse<DesignComment>> PortalsIdDesignsNkCommentsFkPutAsyncWithHttpInfo (string id, string nk, string fk, DesignComment data = null);
        /// <summary>
        /// Queries comments of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;DesignComment&gt;</returns>
        System.Threading.Tasks.Task<List<DesignComment>> PortalsIdDesignsNkCommentsGetAsync (string id, string nk, string filter = null);

        /// <summary>
        /// Queries comments of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DesignComment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DesignComment>>> PortalsIdDesignsNkCommentsGetAsyncWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in comments of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of DesignComment</returns>
        System.Threading.Tasks.Task<DesignComment> PortalsIdDesignsNkCommentsPostAsync (string id, string nk, DesignComment data = null);

        /// <summary>
        /// Creates a new instance in comments of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (DesignComment)</returns>
        System.Threading.Tasks.Task<ApiResponse<DesignComment>> PortalsIdDesignsNkCommentsPostAsyncWithHttpInfo (string id, string nk, DesignComment data = null);
        /// <summary>
        /// Fetches belongsTo relation customer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> PortalsIdDesignsNkCustomerGetAsync (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation customer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> PortalsIdDesignsNkCustomerGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Counts exports of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> PortalsIdDesignsNkExportsCountGetAsync (string id, string nk, string where = null);

        /// <summary>
        /// Counts exports of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PortalsIdDesignsNkExportsCountGetAsyncWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all exports of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdDesignsNkExportsDeleteAsync (string id, string nk);

        /// <summary>
        /// Deletes all exports of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDesignsNkExportsDeleteAsyncWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for exports.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for exports</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdDesignsNkExportsFkDeleteAsync (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for exports.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for exports</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDesignsNkExportsFkDeleteAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for exports.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for exports</param>
        /// <returns>Task of DesignExport</returns>
        System.Threading.Tasks.Task<DesignExport> PortalsIdDesignsNkExportsFkGetAsync (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for exports.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for exports</param>
        /// <returns>Task of ApiResponse (DesignExport)</returns>
        System.Threading.Tasks.Task<ApiResponse<DesignExport>> PortalsIdDesignsNkExportsFkGetAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for exports.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for exports</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of DesignExport</returns>
        System.Threading.Tasks.Task<DesignExport> PortalsIdDesignsNkExportsFkPutAsync (string id, string nk, string fk, DesignExport data = null);

        /// <summary>
        /// Update a related item by id for exports.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for exports</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (DesignExport)</returns>
        System.Threading.Tasks.Task<ApiResponse<DesignExport>> PortalsIdDesignsNkExportsFkPutAsyncWithHttpInfo (string id, string nk, string fk, DesignExport data = null);
        /// <summary>
        /// Queries exports of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;DesignExport&gt;</returns>
        System.Threading.Tasks.Task<List<DesignExport>> PortalsIdDesignsNkExportsGetAsync (string id, string nk, string filter = null);

        /// <summary>
        /// Queries exports of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DesignExport&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DesignExport>>> PortalsIdDesignsNkExportsGetAsyncWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in exports of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of DesignExport</returns>
        System.Threading.Tasks.Task<DesignExport> PortalsIdDesignsNkExportsPostAsync (string id, string nk, DesignExport data = null);

        /// <summary>
        /// Creates a new instance in exports of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (DesignExport)</returns>
        System.Threading.Tasks.Task<ApiResponse<DesignExport>> PortalsIdDesignsNkExportsPostAsyncWithHttpInfo (string id, string nk, DesignExport data = null);
        /// <summary>
        /// Fetches belongsTo relation folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of DesignFolder</returns>
        System.Threading.Tasks.Task<DesignFolder> PortalsIdDesignsNkFolderGetAsync (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (DesignFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<DesignFolder>> PortalsIdDesignsNkFolderGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Deletes permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdDesignsNkPermissionDeleteAsync (string id, string nk);

        /// <summary>
        /// Deletes permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDesignsNkPermissionDeleteAsyncWithHttpInfo (string id, string nk);
        /// <summary>
        /// Fetches hasOne relation permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of DesignPermissionSet</returns>
        System.Threading.Tasks.Task<DesignPermissionSet> PortalsIdDesignsNkPermissionGetAsync (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches hasOne relation permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (DesignPermissionSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<DesignPermissionSet>> PortalsIdDesignsNkPermissionGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Creates a new instance in permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of DesignPermissionSet</returns>
        System.Threading.Tasks.Task<DesignPermissionSet> PortalsIdDesignsNkPermissionPostAsync (string id, string nk, DesignPermissionSet data = null);

        /// <summary>
        /// Creates a new instance in permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (DesignPermissionSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<DesignPermissionSet>> PortalsIdDesignsNkPermissionPostAsyncWithHttpInfo (string id, string nk, DesignPermissionSet data = null);
        /// <summary>
        /// Update permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of DesignPermissionSet</returns>
        System.Threading.Tasks.Task<DesignPermissionSet> PortalsIdDesignsNkPermissionPutAsync (string id, string nk, DesignPermissionSet data = null);

        /// <summary>
        /// Update permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (DesignPermissionSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<DesignPermissionSet>> PortalsIdDesignsNkPermissionPutAsyncWithHttpInfo (string id, string nk, DesignPermissionSet data = null);
        /// <summary>
        /// Fetches belongsTo relation portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of Portal</returns>
        System.Threading.Tasks.Task<Portal> PortalsIdDesignsNkPortalGetAsync (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        System.Threading.Tasks.Task<ApiResponse<Portal>> PortalsIdDesignsNkPortalGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Fetches belongsTo relation rejectionComment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of DesignComment</returns>
        System.Threading.Tasks.Task<DesignComment> PortalsIdDesignsNkRejectionCommentGetAsync (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation rejectionComment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (DesignComment)</returns>
        System.Threading.Tasks.Task<ApiResponse<DesignComment>> PortalsIdDesignsNkRejectionCommentGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Fetches belongsTo relation requester.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of TeamMember</returns>
        System.Threading.Tasks.Task<TeamMember> PortalsIdDesignsNkRequesterGetAsync (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation requester.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMember>> PortalsIdDesignsNkRequesterGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Fetches belongsTo relation reviewer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of TeamMember</returns>
        System.Threading.Tasks.Task<TeamMember> PortalsIdDesignsNkReviewerGetAsync (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation reviewer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMember>> PortalsIdDesignsNkReviewerGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Counts tags of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> PortalsIdDesignsNkTagsCountGetAsync (string id, string nk, string where = null);

        /// <summary>
        /// Counts tags of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PortalsIdDesignsNkTagsCountGetAsyncWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all tags of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdDesignsNkTagsDeleteAsync (string id, string nk);

        /// <summary>
        /// Deletes all tags of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDesignsNkTagsDeleteAsyncWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdDesignsNkTagsFkDeleteAsync (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDesignsNkTagsFkDeleteAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> PortalsIdDesignsNkTagsFkGetAsync (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> PortalsIdDesignsNkTagsFkGetAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> PortalsIdDesignsNkTagsFkPutAsync (string id, string nk, string fk, Tag data = null);

        /// <summary>
        /// Update a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> PortalsIdDesignsNkTagsFkPutAsyncWithHttpInfo (string id, string nk, string fk, Tag data = null);
        /// <summary>
        /// Queries tags of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;Tag&gt;</returns>
        System.Threading.Tasks.Task<List<Tag>> PortalsIdDesignsNkTagsGetAsync (string id, string nk, string filter = null);

        /// <summary>
        /// Queries tags of Design.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Tag&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Tag>>> PortalsIdDesignsNkTagsGetAsyncWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in tags of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> PortalsIdDesignsNkTagsPostAsync (string id, string nk, Tag data = null);

        /// <summary>
        /// Creates a new instance in tags of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> PortalsIdDesignsNkTagsPostAsyncWithHttpInfo (string id, string nk, Tag data = null);
        /// <summary>
        /// Remove the tags relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdDesignsNkTagsRelFkDeleteAsync (string id, string nk, string fk);

        /// <summary>
        /// Remove the tags relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDesignsNkTagsRelFkDeleteAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Check the existence of tags relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> PortalsIdDesignsNkTagsRelFkHeadAsync (string id, string nk, string fk);

        /// <summary>
        /// Check the existence of tags relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> PortalsIdDesignsNkTagsRelFkHeadAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Add a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of DesignTag</returns>
        System.Threading.Tasks.Task<DesignTag> PortalsIdDesignsNkTagsRelFkPutAsync (string id, string nk, string fk, DesignTag data = null);

        /// <summary>
        /// Add a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (DesignTag)</returns>
        System.Threading.Tasks.Task<ApiResponse<DesignTag>> PortalsIdDesignsNkTagsRelFkPutAsyncWithHttpInfo (string id, string nk, string fk, DesignTag data = null);
        /// <summary>
        /// Fetches belongsTo relation template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> PortalsIdDesignsNkTemplateGetAsync (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> PortalsIdDesignsNkTemplateGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Creates a new instance in designs of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Design</returns>
        System.Threading.Tasks.Task<Design> PortalsIdDesignsPostAsync (string id, Design data = null);

        /// <summary>
        /// Creates a new instance in designs of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Design)</returns>
        System.Threading.Tasks.Task<ApiResponse<Design>> PortalsIdDesignsPostAsyncWithHttpInfo (string id, Design data = null);
        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> PortalsIdExistsGetAsync (string id);

        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> PortalsIdExistsGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Find a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of Portal</returns>
        System.Threading.Tasks.Task<Portal> PortalsIdGetAsync (string id, string filter = null);

        /// <summary>
        /// Find a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        System.Threading.Tasks.Task<ApiResponse<Portal>> PortalsIdGetAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> PortalsIdHeadAsync (string id);

        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> PortalsIdHeadAsyncWithHttpInfo (string id);
        /// <summary>
        /// Counts imageFolders of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> PortalsIdImageFoldersCountGetAsync (string id, string where = null);

        /// <summary>
        /// Counts imageFolders of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PortalsIdImageFoldersCountGetAsyncWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all imageFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdImageFoldersDeleteAsync (string id);

        /// <summary>
        /// Deletes all imageFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdImageFoldersDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for imageFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdImageFoldersFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Delete a related item by id for imageFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdImageFoldersFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for imageFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>Task of ImageFolder</returns>
        System.Threading.Tasks.Task<ImageFolder> PortalsIdImageFoldersFkGetAsync (string id, string fk);

        /// <summary>
        /// Find a related item by id for imageFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>Task of ApiResponse (ImageFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageFolder>> PortalsIdImageFoldersFkGetAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for imageFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ImageFolder</returns>
        System.Threading.Tasks.Task<ImageFolder> PortalsIdImageFoldersFkPutAsync (string id, string fk, ImageFolder data = null);

        /// <summary>
        /// Update a related item by id for imageFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ImageFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageFolder>> PortalsIdImageFoldersFkPutAsyncWithHttpInfo (string id, string fk, ImageFolder data = null);
        /// <summary>
        /// Queries imageFolders of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;ImageFolder&gt;</returns>
        System.Threading.Tasks.Task<List<ImageFolder>> PortalsIdImageFoldersGetAsync (string id, string filter = null);

        /// <summary>
        /// Queries imageFolders of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ImageFolder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ImageFolder>>> PortalsIdImageFoldersGetAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in imageFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ImageFolder</returns>
        System.Threading.Tasks.Task<ImageFolder> PortalsIdImageFoldersPostAsync (string id, ImageFolder data = null);

        /// <summary>
        /// Creates a new instance in imageFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ImageFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageFolder>> PortalsIdImageFoldersPostAsyncWithHttpInfo (string id, ImageFolder data = null);
        /// <summary>
        /// Remove the imageFolders relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdImageFoldersRelFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Remove the imageFolders relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdImageFoldersRelFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Check the existence of imageFolders relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> PortalsIdImageFoldersRelFkHeadAsync (string id, string fk);

        /// <summary>
        /// Check the existence of imageFolders relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> PortalsIdImageFoldersRelFkHeadAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Add a related item by id for imageFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalImageFolder</returns>
        System.Threading.Tasks.Task<PortalImageFolder> PortalsIdImageFoldersRelFkPutAsync (string id, string fk, PortalImageFolder data = null);

        /// <summary>
        /// Add a related item by id for imageFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalImageFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalImageFolder>> PortalsIdImageFoldersRelFkPutAsyncWithHttpInfo (string id, string fk, PortalImageFolder data = null);
        /// <summary>
        /// Delete InvitationTickets for this Portal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PortalsIdInvitationTicketsFkDeleteAsync (string id, string id2, string fk);

        /// <summary>
        /// Delete InvitationTickets for this Portal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdInvitationTicketsFkDeleteAsyncWithHttpInfo (string id, string id2, string fk);
        /// <summary>
        /// Get InvitationTicket by Id for this Portal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <param name="filter">Only include changes that match this filter (optional)</param>
        /// <returns>Task of InvitationTicket</returns>
        System.Threading.Tasks.Task<InvitationTicket> PortalsIdInvitationTicketsFkGetAsync (string id, string id2, string fk, string filter = null);

        /// <summary>
        /// Get InvitationTicket by Id for this Portal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <param name="filter">Only include changes that match this filter (optional)</param>
        /// <returns>Task of ApiResponse (InvitationTicket)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvitationTicket>> PortalsIdInvitationTicketsFkGetAsyncWithHttpInfo (string id, string id2, string fk, string filter = null);
        /// <summary>
        /// List InvitationTickets for this Portal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of List&lt;InvitationTicket&gt;</returns>
        System.Threading.Tasks.Task<List<InvitationTicket>> PortalsIdInvitationTicketsGetAsync (string id, string id2, string filter = null);

        /// <summary>
        /// List InvitationTickets for this Portal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InvitationTicket&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InvitationTicket>>> PortalsIdInvitationTicketsGetAsyncWithHttpInfo (string id, string id2, string filter = null);
        /// <summary>
        /// Change logo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="data">Logo</param>
        /// <returns>Task of Portal</returns>
        System.Threading.Tasks.Task<Portal> PortalsIdLogoPutAsync (string id, string id2, Portal data);

        /// <summary>
        /// Change logo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="data">Logo</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        System.Threading.Tasks.Task<ApiResponse<Portal>> PortalsIdLogoPutAsyncWithHttpInfo (string id, string id2, Portal data);
        /// <summary>
        /// Counts members of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> PortalsIdMembersCountGetAsync (string id, string where = null);

        /// <summary>
        /// Counts members of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PortalsIdMembersCountGetAsyncWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all members of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdMembersDeleteAsync (string id);

        /// <summary>
        /// Deletes all members of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdMembersDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdMembersFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Delete a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdMembersFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of TeamMember</returns>
        System.Threading.Tasks.Task<TeamMember> PortalsIdMembersFkGetAsync (string id, string fk);

        /// <summary>
        /// Find a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMember>> PortalsIdMembersFkGetAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamMember</returns>
        System.Threading.Tasks.Task<TeamMember> PortalsIdMembersFkPutAsync (string id, string fk, TeamMember data = null);

        /// <summary>
        /// Update a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMember>> PortalsIdMembersFkPutAsyncWithHttpInfo (string id, string fk, TeamMember data = null);
        /// <summary>
        /// Queries members of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;TeamMember&gt;</returns>
        System.Threading.Tasks.Task<List<TeamMember>> PortalsIdMembersGetAsync (string id, string filter = null);

        /// <summary>
        /// Queries members of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamMember&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamMember>>> PortalsIdMembersGetAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in members of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamMember</returns>
        System.Threading.Tasks.Task<TeamMember> PortalsIdMembersPostAsync (string id, TeamMember data = null);

        /// <summary>
        /// Creates a new instance in members of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMember>> PortalsIdMembersPostAsyncWithHttpInfo (string id, TeamMember data = null);
        /// <summary>
        /// Remove the members relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdMembersRelFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Remove the members relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdMembersRelFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Check the existence of members relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> PortalsIdMembersRelFkHeadAsync (string id, string fk);

        /// <summary>
        /// Check the existence of members relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> PortalsIdMembersRelFkHeadAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Add a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalMember</returns>
        System.Threading.Tasks.Task<PortalMember> PortalsIdMembersRelFkPutAsync (string id, string fk, PortalMember data = null);

        /// <summary>
        /// Add a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalMember>> PortalsIdMembersRelFkPutAsyncWithHttpInfo (string id, string fk, PortalMember data = null);
        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of Portal</returns>
        System.Threading.Tasks.Task<Portal> PortalsIdPatchAsync (string id, Portal data = null);

        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        System.Threading.Tasks.Task<ApiResponse<Portal>> PortalsIdPatchAsyncWithHttpInfo (string id, Portal data = null);
        /// <summary>
        /// Deletes permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdPermissionDeleteAsync (string id);

        /// <summary>
        /// Deletes permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdPermissionDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Fetches hasOne relation permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of PortalPermissionSet</returns>
        System.Threading.Tasks.Task<PortalPermissionSet> PortalsIdPermissionGetAsync (string id, bool? refresh = null);

        /// <summary>
        /// Fetches hasOne relation permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalPermissionSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalPermissionSet>> PortalsIdPermissionGetAsyncWithHttpInfo (string id, bool? refresh = null);
        /// <summary>
        /// Creates a new instance in permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalPermissionSet</returns>
        System.Threading.Tasks.Task<PortalPermissionSet> PortalsIdPermissionPostAsync (string id, PortalPermissionSet data = null);

        /// <summary>
        /// Creates a new instance in permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalPermissionSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalPermissionSet>> PortalsIdPermissionPostAsyncWithHttpInfo (string id, PortalPermissionSet data = null);
        /// <summary>
        /// Update permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalPermissionSet</returns>
        System.Threading.Tasks.Task<PortalPermissionSet> PortalsIdPermissionPutAsync (string id, PortalPermissionSet data = null);

        /// <summary>
        /// Update permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalPermissionSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalPermissionSet>> PortalsIdPermissionPutAsyncWithHttpInfo (string id, PortalPermissionSet data = null);
        /// <summary>
        /// Counts portalMembers of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> PortalsIdPortalMembersCountGetAsync (string id, string where = null);

        /// <summary>
        /// Counts portalMembers of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PortalsIdPortalMembersCountGetAsyncWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all portalMembers of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdPortalMembersDeleteAsync (string id);

        /// <summary>
        /// Deletes all portalMembers of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdPortalMembersDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for portalMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for portalMembers</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdPortalMembersFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Delete a related item by id for portalMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for portalMembers</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdPortalMembersFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for portalMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for portalMembers</param>
        /// <returns>Task of PortalMember</returns>
        System.Threading.Tasks.Task<PortalMember> PortalsIdPortalMembersFkGetAsync (string id, string fk);

        /// <summary>
        /// Find a related item by id for portalMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for portalMembers</param>
        /// <returns>Task of ApiResponse (PortalMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalMember>> PortalsIdPortalMembersFkGetAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for portalMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for portalMembers</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalMember</returns>
        System.Threading.Tasks.Task<PortalMember> PortalsIdPortalMembersFkPutAsync (string id, string fk, PortalMember data = null);

        /// <summary>
        /// Update a related item by id for portalMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for portalMembers</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalMember>> PortalsIdPortalMembersFkPutAsyncWithHttpInfo (string id, string fk, PortalMember data = null);
        /// <summary>
        /// Queries portalMembers of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;PortalMember&gt;</returns>
        System.Threading.Tasks.Task<List<PortalMember>> PortalsIdPortalMembersGetAsync (string id, string filter = null);

        /// <summary>
        /// Queries portalMembers of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PortalMember&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PortalMember>>> PortalsIdPortalMembersGetAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in portalMembers of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalMember</returns>
        System.Threading.Tasks.Task<PortalMember> PortalsIdPortalMembersPostAsync (string id, PortalMember data = null);

        /// <summary>
        /// Creates a new instance in portalMembers of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalMember>> PortalsIdPortalMembersPostAsyncWithHttpInfo (string id, PortalMember data = null);
        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of Portal</returns>
        System.Threading.Tasks.Task<Portal> PortalsIdPutAsync (string id, Portal data = null);

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        System.Threading.Tasks.Task<ApiResponse<Portal>> PortalsIdPutAsyncWithHttpInfo (string id, Portal data = null);
        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of Portal</returns>
        System.Threading.Tasks.Task<Portal> PortalsIdReplacePostAsync (string id, Portal data = null);

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        System.Threading.Tasks.Task<ApiResponse<Portal>> PortalsIdReplacePostAsyncWithHttpInfo (string id, Portal data = null);
        /// <summary>
        /// Fetches belongsTo relation team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> PortalsIdTeamGetAsync (string id, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> PortalsIdTeamGetAsyncWithHttpInfo (string id, bool? refresh = null);
        /// <summary>
        /// Counts templateFolders of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> PortalsIdTemplateFoldersCountGetAsync (string id, string where = null);

        /// <summary>
        /// Counts templateFolders of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PortalsIdTemplateFoldersCountGetAsyncWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all templateFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdTemplateFoldersDeleteAsync (string id);

        /// <summary>
        /// Deletes all templateFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdTemplateFoldersDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for templateFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdTemplateFoldersFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Delete a related item by id for templateFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdTemplateFoldersFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for templateFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        System.Threading.Tasks.Task<PortalTemplateFolder> PortalsIdTemplateFoldersFkGetAsync (string id, string fk);

        /// <summary>
        /// Find a related item by id for templateFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalsIdTemplateFoldersFkGetAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for templateFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        System.Threading.Tasks.Task<PortalTemplateFolder> PortalsIdTemplateFoldersFkPutAsync (string id, string fk, PortalTemplateFolder data = null);

        /// <summary>
        /// Update a related item by id for templateFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalsIdTemplateFoldersFkPutAsyncWithHttpInfo (string id, string fk, PortalTemplateFolder data = null);
        /// <summary>
        /// Queries templateFolders of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;PortalTemplateFolder&gt;</returns>
        System.Threading.Tasks.Task<List<PortalTemplateFolder>> PortalsIdTemplateFoldersGetAsync (string id, string filter = null);

        /// <summary>
        /// Queries templateFolders of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PortalTemplateFolder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PortalTemplateFolder>>> PortalsIdTemplateFoldersGetAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Unlink folder with Template and Portal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="nk">PortalTemplateFolder id</param>
        /// <param name="fk">Template id</param>
        /// <returns>Task of PortalTemplate</returns>
        System.Threading.Tasks.Task<PortalTemplate> PortalsIdTemplateFoldersNkTemplatesFkRelDeleteAsync (string id, string id2, string nk, string fk);

        /// <summary>
        /// Unlink folder with Template and Portal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="nk">PortalTemplateFolder id</param>
        /// <param name="fk">Template id</param>
        /// <returns>Task of ApiResponse (PortalTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalTemplate>> PortalsIdTemplateFoldersNkTemplatesFkRelDeleteAsyncWithHttpInfo (string id, string id2, string nk, string fk);
        /// <summary>
        /// Link folder with Template and Portal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="nk">PortalTemplateFolder id</param>
        /// <param name="fk">Template id</param>
        /// <returns>Task of PortalTemplate</returns>
        System.Threading.Tasks.Task<PortalTemplate> PortalsIdTemplateFoldersNkTemplatesFkRelPutAsync (string id, string id2, string nk, string fk);

        /// <summary>
        /// Link folder with Template and Portal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="nk">PortalTemplateFolder id</param>
        /// <param name="fk">Template id</param>
        /// <returns>Task of ApiResponse (PortalTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalTemplate>> PortalsIdTemplateFoldersNkTemplatesFkRelPutAsyncWithHttpInfo (string id, string id2, string nk, string fk);
        /// <summary>
        /// Creates a new instance in templateFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        System.Threading.Tasks.Task<PortalTemplateFolder> PortalsIdTemplateFoldersPostAsync (string id, PortalTemplateFolder data = null);

        /// <summary>
        /// Creates a new instance in templateFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalsIdTemplateFoldersPostAsyncWithHttpInfo (string id, PortalTemplateFolder data = null);
        /// <summary>
        /// List templates on root folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="filter">Only include changes that match this filter (optional)</param>
        /// <returns>Task of List&lt;PortalTemplate&gt;</returns>
        System.Threading.Tasks.Task<List<PortalTemplate>> PortalsIdTemplateFoldersRootTemplatesGetAsync (string id, string id2, string filter = null);

        /// <summary>
        /// List templates on root folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="filter">Only include changes that match this filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PortalTemplate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PortalTemplate>>> PortalsIdTemplateFoldersRootTemplatesGetAsyncWithHttpInfo (string id, string id2, string filter = null);
        /// <summary>
        /// Counts templateRels of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> PortalsIdTemplateRelsCountGetAsync (string id, string where = null);

        /// <summary>
        /// Counts templateRels of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PortalsIdTemplateRelsCountGetAsyncWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all templateRels of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdTemplateRelsDeleteAsync (string id);

        /// <summary>
        /// Deletes all templateRels of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdTemplateRelsDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for templateRels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateRels</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdTemplateRelsFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Delete a related item by id for templateRels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateRels</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdTemplateRelsFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for templateRels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateRels</param>
        /// <returns>Task of PortalTemplate</returns>
        System.Threading.Tasks.Task<PortalTemplate> PortalsIdTemplateRelsFkGetAsync (string id, string fk);

        /// <summary>
        /// Find a related item by id for templateRels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateRels</param>
        /// <returns>Task of ApiResponse (PortalTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalTemplate>> PortalsIdTemplateRelsFkGetAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for templateRels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateRels</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalTemplate</returns>
        System.Threading.Tasks.Task<PortalTemplate> PortalsIdTemplateRelsFkPutAsync (string id, string fk, PortalTemplate data = null);

        /// <summary>
        /// Update a related item by id for templateRels.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateRels</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalTemplate>> PortalsIdTemplateRelsFkPutAsyncWithHttpInfo (string id, string fk, PortalTemplate data = null);
        /// <summary>
        /// Queries templateRels of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;PortalTemplate&gt;</returns>
        System.Threading.Tasks.Task<List<PortalTemplate>> PortalsIdTemplateRelsGetAsync (string id, string filter = null);

        /// <summary>
        /// Queries templateRels of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PortalTemplate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PortalTemplate>>> PortalsIdTemplateRelsGetAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in templateRels of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalTemplate</returns>
        System.Threading.Tasks.Task<PortalTemplate> PortalsIdTemplateRelsPostAsync (string id, PortalTemplate data = null);

        /// <summary>
        /// Creates a new instance in templateRels of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalTemplate>> PortalsIdTemplateRelsPostAsyncWithHttpInfo (string id, PortalTemplate data = null);
        /// <summary>
        /// Counts templates of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> PortalsIdTemplatesCountGetAsync (string id, string where = null);

        /// <summary>
        /// Counts templates of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PortalsIdTemplatesCountGetAsyncWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all templates of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdTemplatesDeleteAsync (string id);

        /// <summary>
        /// Deletes all templates of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdTemplatesDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdTemplatesFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Delete a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdTemplatesFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Generate Design from Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2"></param>
        /// <param name="fk"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of List&lt;Design&gt;</returns>
        System.Threading.Tasks.Task<List<Design>> PortalsIdTemplatesFkDesignsGenerateBulkPostAsync (string id, string id2, string fk, List<Object> data = null);

        /// <summary>
        /// Generate Design from Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2"></param>
        /// <param name="fk"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Design&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Design>>> PortalsIdTemplatesFkDesignsGenerateBulkPostAsyncWithHttpInfo (string id, string id2, string fk, List<Object> data = null);
        /// <summary>
        /// Generate Design from Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2"></param>
        /// <param name="fk"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Design</returns>
        System.Threading.Tasks.Task<Design> PortalsIdTemplatesFkDesignsGeneratePostAsync (string id, string id2, string fk, Portal data = null);

        /// <summary>
        /// Generate Design from Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2"></param>
        /// <param name="fk"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Design)</returns>
        System.Threading.Tasks.Task<ApiResponse<Design>> PortalsIdTemplatesFkDesignsGeneratePostAsyncWithHttpInfo (string id, string id2, string fk, Portal data = null);
        /// <summary>
        /// Find a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> PortalsIdTemplatesFkGetAsync (string id, string fk);

        /// <summary>
        /// Find a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> PortalsIdTemplatesFkGetAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> PortalsIdTemplatesFkPutAsync (string id, string fk, Template data = null);

        /// <summary>
        /// Update a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> PortalsIdTemplatesFkPutAsyncWithHttpInfo (string id, string fk, Template data = null);
        /// <summary>
        /// Queries templates of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;Template&gt;</returns>
        System.Threading.Tasks.Task<List<Template>> PortalsIdTemplatesGetAsync (string id, string filter = null);

        /// <summary>
        /// Queries templates of Portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Template&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Template>>> PortalsIdTemplatesGetAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in templates of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> PortalsIdTemplatesPostAsync (string id, Template data = null);

        /// <summary>
        /// Creates a new instance in templates of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> PortalsIdTemplatesPostAsyncWithHttpInfo (string id, Template data = null);
        /// <summary>
        /// Remove the templates relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalsIdTemplatesRelFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Remove the templates relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdTemplatesRelFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Check the existence of templates relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> PortalsIdTemplatesRelFkHeadAsync (string id, string fk);

        /// <summary>
        /// Check the existence of templates relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> PortalsIdTemplatesRelFkHeadAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Add a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalTemplate</returns>
        System.Threading.Tasks.Task<PortalTemplate> PortalsIdTemplatesRelFkPutAsync (string id, string fk, PortalTemplate data = null);

        /// <summary>
        /// Add a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalTemplate>> PortalsIdTemplatesRelFkPutAsyncWithHttpInfo (string id, string fk, PortalTemplate data = null);
        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of Portal</returns>
        System.Threading.Tasks.Task<Portal> PortalsPatchAsync (Portal data = null);

        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        System.Threading.Tasks.Task<ApiResponse<Portal>> PortalsPatchAsyncWithHttpInfo (Portal data = null);
        /// <summary>
        /// Create a new instance of the model and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of Portal</returns>
        System.Threading.Tasks.Task<Portal> PortalsPostAsync (Portal data = null);

        /// <summary>
        /// Create a new instance of the model and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        System.Threading.Tasks.Task<ApiResponse<Portal>> PortalsPostAsyncWithHttpInfo (Portal data = null);
        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of Portal</returns>
        System.Threading.Tasks.Task<Portal> PortalsPutAsync (Portal data = null);

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        System.Threading.Tasks.Task<ApiResponse<Portal>> PortalsPutAsyncWithHttpInfo (Portal data = null);
        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of Portal</returns>
        System.Threading.Tasks.Task<Portal> PortalsReplaceOrCreatePostAsync (Portal data = null);

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        System.Threading.Tasks.Task<ApiResponse<Portal>> PortalsReplaceOrCreatePostAsyncWithHttpInfo (Portal data = null);
        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> PortalsUpdatePostAsync (string where = null, Portal data = null);

        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> PortalsUpdatePostAsyncWithHttpInfo (string where = null, Portal data = null);
        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of Portal</returns>
        System.Threading.Tasks.Task<Portal> PortalsUpsertWithWherePostAsync (string where = null, Portal data = null);

        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        System.Threading.Tasks.Task<ApiResponse<Portal>> PortalsUpsertWithWherePostAsyncWithHttpInfo (string where = null, Portal data = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PortalApi : IPortalApi
    {
        private TweakApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PortalApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PortalApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = TweakApi.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PortalApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PortalApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TweakApi.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TweakApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream PortalsChangeStreamGet (string options = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = PortalsChangeStreamGetWithHttpInfo(options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > PortalsChangeStreamGetWithHttpInfo (string options = null)
        {

            var localVarPath = "/Portals/change-stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsChangeStreamGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> PortalsChangeStreamGetAsync (string options = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await PortalsChangeStreamGetAsyncWithHttpInfo(options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PortalsChangeStreamGetAsyncWithHttpInfo (string options = null)
        {

            var localVarPath = "/Portals/change-stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsChangeStreamGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream PortalsChangeStreamPost (string options = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = PortalsChangeStreamPostWithHttpInfo(options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > PortalsChangeStreamPostWithHttpInfo (string options = null)
        {

            var localVarPath = "/Portals/change-stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarFormParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // form parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsChangeStreamPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> PortalsChangeStreamPostAsync (string options = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await PortalsChangeStreamPostAsyncWithHttpInfo(options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PortalsChangeStreamPostAsyncWithHttpInfo (string options = null)
        {

            var localVarPath = "/Portals/change-stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarFormParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // form parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsChangeStreamPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Count instances of the model matched by where from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 PortalsCountGet (string where = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = PortalsCountGetWithHttpInfo(where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Count instances of the model matched by where from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > PortalsCountGetWithHttpInfo (string where = null)
        {

            var localVarPath = "/Portals/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Count instances of the model matched by where from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> PortalsCountGetAsync (string where = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await PortalsCountGetAsyncWithHttpInfo(where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Count instances of the model matched by where from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PortalsCountGetAsyncWithHttpInfo (string where = null)
        {

            var localVarPath = "/Portals/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Find first instance of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Portal</returns>
        public Portal PortalsFindOneGet (string filter = null)
        {
             ApiResponse<Portal> localVarResponse = PortalsFindOneGetWithHttpInfo(filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find first instance of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        public ApiResponse< Portal > PortalsFindOneGetWithHttpInfo (string filter = null)
        {

            var localVarPath = "/Portals/findOne";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsFindOneGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Find first instance of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of Portal</returns>
        public async System.Threading.Tasks.Task<Portal> PortalsFindOneGetAsync (string filter = null)
        {
             ApiResponse<Portal> localVarResponse = await PortalsFindOneGetAsyncWithHttpInfo(filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find first instance of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Portal>> PortalsFindOneGetAsyncWithHttpInfo (string filter = null)
        {

            var localVarPath = "/Portals/findOne";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsFindOneGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Find all instances of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>List&lt;Portal&gt;</returns>
        public List<Portal> PortalsGet (string filter = null)
        {
             ApiResponse<List<Portal>> localVarResponse = PortalsGetWithHttpInfo(filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find all instances of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of List&lt;Portal&gt;</returns>
        public ApiResponse< List<Portal> > PortalsGetWithHttpInfo (string filter = null)
        {

            var localVarPath = "/Portals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Portal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Portal>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Portal>)));
            
        }

        /// <summary>
        /// Find all instances of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of List&lt;Portal&gt;</returns>
        public async System.Threading.Tasks.Task<List<Portal>> PortalsGetAsync (string filter = null)
        {
             ApiResponse<List<Portal>> localVarResponse = await PortalsGetAsyncWithHttpInfo(filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find all instances of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Portal&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Portal>>> PortalsGetAsyncWithHttpInfo (string filter = null)
        {

            var localVarPath = "/Portals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Portal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Portal>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Portal>)));
            
        }

        /// <summary>
        /// Delete a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Object</returns>
        public Object PortalsIdDelete (string id)
        {
             ApiResponse<Object> localVarResponse = PortalsIdDeleteWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > PortalsIdDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDelete");

            var localVarPath = "/Portals/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Delete a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PortalsIdDeleteAsync (string id)
        {
             ApiResponse<Object> localVarResponse = await PortalsIdDeleteAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDelete");

            var localVarPath = "/Portals/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Counts designFolders of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 PortalsIdDesignFoldersCountGet (string id, string where = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = PortalsIdDesignFoldersCountGetWithHttpInfo(id, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts designFolders of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > PortalsIdDesignFoldersCountGetWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignFoldersCountGet");

            var localVarPath = "/Portals/{id}/designFolders/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignFoldersCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Counts designFolders of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> PortalsIdDesignFoldersCountGetAsync (string id, string where = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await PortalsIdDesignFoldersCountGetAsyncWithHttpInfo(id, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts designFolders of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PortalsIdDesignFoldersCountGetAsyncWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignFoldersCountGet");

            var localVarPath = "/Portals/{id}/designFolders/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignFoldersCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Deletes all designFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns></returns>
        public void PortalsIdDesignFoldersDelete (string id)
        {
             PortalsIdDesignFoldersDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes all designFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdDesignFoldersDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignFoldersDelete");

            var localVarPath = "/Portals/{id}/designFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignFoldersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all designFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdDesignFoldersDeleteAsync (string id)
        {
             await PortalsIdDesignFoldersDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes all designFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDesignFoldersDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignFoldersDelete");

            var localVarPath = "/Portals/{id}/designFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignFoldersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for designFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designFolders</param>
        /// <returns></returns>
        public void PortalsIdDesignFoldersFkDelete (string id, string fk)
        {
             PortalsIdDesignFoldersFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Delete a related item by id for designFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designFolders</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdDesignFoldersFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignFoldersFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignFoldersFkDelete");

            var localVarPath = "/Portals/{id}/designFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignFoldersFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for designFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designFolders</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdDesignFoldersFkDeleteAsync (string id, string fk)
        {
             await PortalsIdDesignFoldersFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Delete a related item by id for designFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designFolders</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDesignFoldersFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignFoldersFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignFoldersFkDelete");

            var localVarPath = "/Portals/{id}/designFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignFoldersFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for designFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designFolders</param>
        /// <returns>DesignFolder</returns>
        public DesignFolder PortalsIdDesignFoldersFkGet (string id, string fk)
        {
             ApiResponse<DesignFolder> localVarResponse = PortalsIdDesignFoldersFkGetWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for designFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designFolders</param>
        /// <returns>ApiResponse of DesignFolder</returns>
        public ApiResponse< DesignFolder > PortalsIdDesignFoldersFkGetWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignFoldersFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignFoldersFkGet");

            var localVarPath = "/Portals/{id}/designFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignFoldersFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignFolder)));
            
        }

        /// <summary>
        /// Find a related item by id for designFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designFolders</param>
        /// <returns>Task of DesignFolder</returns>
        public async System.Threading.Tasks.Task<DesignFolder> PortalsIdDesignFoldersFkGetAsync (string id, string fk)
        {
             ApiResponse<DesignFolder> localVarResponse = await PortalsIdDesignFoldersFkGetAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for designFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designFolders</param>
        /// <returns>Task of ApiResponse (DesignFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DesignFolder>> PortalsIdDesignFoldersFkGetAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignFoldersFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignFoldersFkGet");

            var localVarPath = "/Portals/{id}/designFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignFoldersFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignFolder)));
            
        }

        /// <summary>
        /// Update a related item by id for designFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>DesignFolder</returns>
        public DesignFolder PortalsIdDesignFoldersFkPut (string id, string fk, DesignFolder data = null)
        {
             ApiResponse<DesignFolder> localVarResponse = PortalsIdDesignFoldersFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for designFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of DesignFolder</returns>
        public ApiResponse< DesignFolder > PortalsIdDesignFoldersFkPutWithHttpInfo (string id, string fk, DesignFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignFoldersFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignFoldersFkPut");

            var localVarPath = "/Portals/{id}/designFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignFoldersFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignFolder)));
            
        }

        /// <summary>
        /// Update a related item by id for designFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of DesignFolder</returns>
        public async System.Threading.Tasks.Task<DesignFolder> PortalsIdDesignFoldersFkPutAsync (string id, string fk, DesignFolder data = null)
        {
             ApiResponse<DesignFolder> localVarResponse = await PortalsIdDesignFoldersFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for designFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (DesignFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DesignFolder>> PortalsIdDesignFoldersFkPutAsyncWithHttpInfo (string id, string fk, DesignFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignFoldersFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignFoldersFkPut");

            var localVarPath = "/Portals/{id}/designFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignFoldersFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignFolder)));
            
        }

        /// <summary>
        /// Queries designFolders of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;DesignFolder&gt;</returns>
        public List<DesignFolder> PortalsIdDesignFoldersGet (string id, string filter = null)
        {
             ApiResponse<List<DesignFolder>> localVarResponse = PortalsIdDesignFoldersGetWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries designFolders of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DesignFolder&gt;</returns>
        public ApiResponse< List<DesignFolder> > PortalsIdDesignFoldersGetWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignFoldersGet");

            var localVarPath = "/Portals/{id}/designFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignFoldersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DesignFolder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DesignFolder>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DesignFolder>)));
            
        }

        /// <summary>
        /// Queries designFolders of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;DesignFolder&gt;</returns>
        public async System.Threading.Tasks.Task<List<DesignFolder>> PortalsIdDesignFoldersGetAsync (string id, string filter = null)
        {
             ApiResponse<List<DesignFolder>> localVarResponse = await PortalsIdDesignFoldersGetAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries designFolders of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DesignFolder&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DesignFolder>>> PortalsIdDesignFoldersGetAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignFoldersGet");

            var localVarPath = "/Portals/{id}/designFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignFoldersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DesignFolder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DesignFolder>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DesignFolder>)));
            
        }

        /// <summary>
        /// Creates a new instance in designFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>DesignFolder</returns>
        public DesignFolder PortalsIdDesignFoldersPost (string id, DesignFolder data = null)
        {
             ApiResponse<DesignFolder> localVarResponse = PortalsIdDesignFoldersPostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in designFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of DesignFolder</returns>
        public ApiResponse< DesignFolder > PortalsIdDesignFoldersPostWithHttpInfo (string id, DesignFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignFoldersPost");

            var localVarPath = "/Portals/{id}/designFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignFoldersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignFolder)));
            
        }

        /// <summary>
        /// Creates a new instance in designFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of DesignFolder</returns>
        public async System.Threading.Tasks.Task<DesignFolder> PortalsIdDesignFoldersPostAsync (string id, DesignFolder data = null)
        {
             ApiResponse<DesignFolder> localVarResponse = await PortalsIdDesignFoldersPostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in designFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (DesignFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DesignFolder>> PortalsIdDesignFoldersPostAsyncWithHttpInfo (string id, DesignFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignFoldersPost");

            var localVarPath = "/Portals/{id}/designFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignFoldersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignFolder)));
            
        }

        /// <summary>
        /// Counts designs of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 PortalsIdDesignsCountGet (string id, string where = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = PortalsIdDesignsCountGetWithHttpInfo(id, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts designs of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > PortalsIdDesignsCountGetWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsCountGet");

            var localVarPath = "/Portals/{id}/designs/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Counts designs of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> PortalsIdDesignsCountGetAsync (string id, string where = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await PortalsIdDesignsCountGetAsyncWithHttpInfo(id, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts designs of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PortalsIdDesignsCountGetAsyncWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsCountGet");

            var localVarPath = "/Portals/{id}/designs/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Deletes all designs of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns></returns>
        public void PortalsIdDesignsDelete (string id)
        {
             PortalsIdDesignsDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes all designs of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdDesignsDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsDelete");

            var localVarPath = "/Portals/{id}/designs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all designs of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdDesignsDeleteAsync (string id)
        {
             await PortalsIdDesignsDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes all designs of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDesignsDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsDelete");

            var localVarPath = "/Portals/{id}/designs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for designs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns></returns>
        public void PortalsIdDesignsFkDelete (string id, string fk)
        {
             PortalsIdDesignsFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Delete a related item by id for designs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdDesignsFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsFkDelete");

            var localVarPath = "/Portals/{id}/designs/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for designs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdDesignsFkDeleteAsync (string id, string fk)
        {
             await PortalsIdDesignsFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Delete a related item by id for designs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDesignsFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsFkDelete");

            var localVarPath = "/Portals/{id}/designs/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for designs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns>Design</returns>
        public Design PortalsIdDesignsFkGet (string id, string fk)
        {
             ApiResponse<Design> localVarResponse = PortalsIdDesignsFkGetWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for designs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns>ApiResponse of Design</returns>
        public ApiResponse< Design > PortalsIdDesignsFkGetWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsFkGet");

            var localVarPath = "/Portals/{id}/designs/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Design>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Design) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Design)));
            
        }

        /// <summary>
        /// Find a related item by id for designs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns>Task of Design</returns>
        public async System.Threading.Tasks.Task<Design> PortalsIdDesignsFkGetAsync (string id, string fk)
        {
             ApiResponse<Design> localVarResponse = await PortalsIdDesignsFkGetAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for designs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns>Task of ApiResponse (Design)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Design>> PortalsIdDesignsFkGetAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsFkGet");

            var localVarPath = "/Portals/{id}/designs/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Design>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Design) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Design)));
            
        }

        /// <summary>
        /// Update a related item by id for designs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Design</returns>
        public Design PortalsIdDesignsFkPut (string id, string fk, Design data = null)
        {
             ApiResponse<Design> localVarResponse = PortalsIdDesignsFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for designs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Design</returns>
        public ApiResponse< Design > PortalsIdDesignsFkPutWithHttpInfo (string id, string fk, Design data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsFkPut");

            var localVarPath = "/Portals/{id}/designs/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Design>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Design) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Design)));
            
        }

        /// <summary>
        /// Update a related item by id for designs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Design</returns>
        public async System.Threading.Tasks.Task<Design> PortalsIdDesignsFkPutAsync (string id, string fk, Design data = null)
        {
             ApiResponse<Design> localVarResponse = await PortalsIdDesignsFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for designs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Design)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Design>> PortalsIdDesignsFkPutAsyncWithHttpInfo (string id, string fk, Design data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsFkPut");

            var localVarPath = "/Portals/{id}/designs/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Design>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Design) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Design)));
            
        }

        /// <summary>
        /// Queries designs of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;Design&gt;</returns>
        public List<Design> PortalsIdDesignsGet (string id, string filter = null)
        {
             ApiResponse<List<Design>> localVarResponse = PortalsIdDesignsGetWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries designs of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Design&gt;</returns>
        public ApiResponse< List<Design> > PortalsIdDesignsGetWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsGet");

            var localVarPath = "/Portals/{id}/designs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Design>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Design>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Design>)));
            
        }

        /// <summary>
        /// Queries designs of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;Design&gt;</returns>
        public async System.Threading.Tasks.Task<List<Design>> PortalsIdDesignsGetAsync (string id, string filter = null)
        {
             ApiResponse<List<Design>> localVarResponse = await PortalsIdDesignsGetAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries designs of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Design&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Design>>> PortalsIdDesignsGetAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsGet");

            var localVarPath = "/Portals/{id}/designs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Design>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Design>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Design>)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation assignee. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>TeamMember</returns>
        public TeamMember PortalsIdDesignsNkAssigneeGet (string id, string nk, bool? refresh = null)
        {
             ApiResponse<TeamMember> localVarResponse = PortalsIdDesignsNkAssigneeGetWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches belongsTo relation assignee. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        public ApiResponse< TeamMember > PortalsIdDesignsNkAssigneeGetWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkAssigneeGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkAssigneeGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/assignee";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkAssigneeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation assignee. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of TeamMember</returns>
        public async System.Threading.Tasks.Task<TeamMember> PortalsIdDesignsNkAssigneeGetAsync (string id, string nk, bool? refresh = null)
        {
             ApiResponse<TeamMember> localVarResponse = await PortalsIdDesignsNkAssigneeGetAsyncWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches belongsTo relation assignee. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMember>> PortalsIdDesignsNkAssigneeGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkAssigneeGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkAssigneeGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/assignee";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkAssigneeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Counts commenters of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 PortalsIdDesignsNkCommentersCountGet (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = PortalsIdDesignsNkCommentersCountGetWithHttpInfo(id, nk, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts commenters of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > PortalsIdDesignsNkCommentersCountGetWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentersCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentersCountGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/commenters/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentersCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Counts commenters of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> PortalsIdDesignsNkCommentersCountGetAsync (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await PortalsIdDesignsNkCommentersCountGetAsyncWithHttpInfo(id, nk, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts commenters of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PortalsIdDesignsNkCommentersCountGetAsyncWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentersCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentersCountGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/commenters/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentersCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Deletes all commenters of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns></returns>
        public void PortalsIdDesignsNkCommentersDelete (string id, string nk)
        {
             PortalsIdDesignsNkCommentersDeleteWithHttpInfo(id, nk);
        }

        /// <summary>
        /// Deletes all commenters of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdDesignsNkCommentersDeleteWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentersDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentersDelete");

            var localVarPath = "/Portals/{id}/designs/{nk}/commenters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all commenters of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdDesignsNkCommentersDeleteAsync (string id, string nk)
        {
             await PortalsIdDesignsNkCommentersDeleteAsyncWithHttpInfo(id, nk);

        }

        /// <summary>
        /// Deletes all commenters of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDesignsNkCommentersDeleteAsyncWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentersDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentersDelete");

            var localVarPath = "/Portals/{id}/designs/{nk}/commenters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for commenters. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns></returns>
        public void PortalsIdDesignsNkCommentersFkDelete (string id, string nk, string fk)
        {
             PortalsIdDesignsNkCommentersFkDeleteWithHttpInfo(id, nk, fk);
        }

        /// <summary>
        /// Delete a related item by id for commenters. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdDesignsNkCommentersFkDeleteWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentersFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentersFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkCommentersFkDelete");

            var localVarPath = "/Portals/{id}/designs/{nk}/commenters/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentersFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for commenters. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdDesignsNkCommentersFkDeleteAsync (string id, string nk, string fk)
        {
             await PortalsIdDesignsNkCommentersFkDeleteAsyncWithHttpInfo(id, nk, fk);

        }

        /// <summary>
        /// Delete a related item by id for commenters. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDesignsNkCommentersFkDeleteAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentersFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentersFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkCommentersFkDelete");

            var localVarPath = "/Portals/{id}/designs/{nk}/commenters/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentersFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for commenters. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns>TeamMember</returns>
        public TeamMember PortalsIdDesignsNkCommentersFkGet (string id, string nk, string fk)
        {
             ApiResponse<TeamMember> localVarResponse = PortalsIdDesignsNkCommentersFkGetWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for commenters. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns>ApiResponse of TeamMember</returns>
        public ApiResponse< TeamMember > PortalsIdDesignsNkCommentersFkGetWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentersFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentersFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkCommentersFkGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/commenters/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentersFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Find a related item by id for commenters. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns>Task of TeamMember</returns>
        public async System.Threading.Tasks.Task<TeamMember> PortalsIdDesignsNkCommentersFkGetAsync (string id, string nk, string fk)
        {
             ApiResponse<TeamMember> localVarResponse = await PortalsIdDesignsNkCommentersFkGetAsyncWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for commenters. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMember>> PortalsIdDesignsNkCommentersFkGetAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentersFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentersFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkCommentersFkGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/commenters/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentersFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Update a related item by id for commenters. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamMember</returns>
        public TeamMember PortalsIdDesignsNkCommentersFkPut (string id, string nk, string fk, TeamMember data = null)
        {
             ApiResponse<TeamMember> localVarResponse = PortalsIdDesignsNkCommentersFkPutWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for commenters. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        public ApiResponse< TeamMember > PortalsIdDesignsNkCommentersFkPutWithHttpInfo (string id, string nk, string fk, TeamMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentersFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentersFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkCommentersFkPut");

            var localVarPath = "/Portals/{id}/designs/{nk}/commenters/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentersFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Update a related item by id for commenters. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamMember</returns>
        public async System.Threading.Tasks.Task<TeamMember> PortalsIdDesignsNkCommentersFkPutAsync (string id, string nk, string fk, TeamMember data = null)
        {
             ApiResponse<TeamMember> localVarResponse = await PortalsIdDesignsNkCommentersFkPutAsyncWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for commenters. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMember>> PortalsIdDesignsNkCommentersFkPutAsyncWithHttpInfo (string id, string nk, string fk, TeamMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentersFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentersFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkCommentersFkPut");

            var localVarPath = "/Portals/{id}/designs/{nk}/commenters/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentersFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Queries commenters of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;TeamMember&gt;</returns>
        public List<TeamMember> PortalsIdDesignsNkCommentersGet (string id, string nk, string filter = null)
        {
             ApiResponse<List<TeamMember>> localVarResponse = PortalsIdDesignsNkCommentersGetWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries commenters of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamMember&gt;</returns>
        public ApiResponse< List<TeamMember> > PortalsIdDesignsNkCommentersGetWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentersGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentersGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/commenters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TeamMember>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TeamMember>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamMember>)));
            
        }

        /// <summary>
        /// Queries commenters of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;TeamMember&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamMember>> PortalsIdDesignsNkCommentersGetAsync (string id, string nk, string filter = null)
        {
             ApiResponse<List<TeamMember>> localVarResponse = await PortalsIdDesignsNkCommentersGetAsyncWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries commenters of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamMember&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TeamMember>>> PortalsIdDesignsNkCommentersGetAsyncWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentersGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentersGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/commenters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TeamMember>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TeamMember>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamMember>)));
            
        }

        /// <summary>
        /// Creates a new instance in commenters of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamMember</returns>
        public TeamMember PortalsIdDesignsNkCommentersPost (string id, string nk, TeamMember data = null)
        {
             ApiResponse<TeamMember> localVarResponse = PortalsIdDesignsNkCommentersPostWithHttpInfo(id, nk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in commenters of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        public ApiResponse< TeamMember > PortalsIdDesignsNkCommentersPostWithHttpInfo (string id, string nk, TeamMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentersPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentersPost");

            var localVarPath = "/Portals/{id}/designs/{nk}/commenters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Creates a new instance in commenters of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamMember</returns>
        public async System.Threading.Tasks.Task<TeamMember> PortalsIdDesignsNkCommentersPostAsync (string id, string nk, TeamMember data = null)
        {
             ApiResponse<TeamMember> localVarResponse = await PortalsIdDesignsNkCommentersPostAsyncWithHttpInfo(id, nk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in commenters of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMember>> PortalsIdDesignsNkCommentersPostAsyncWithHttpInfo (string id, string nk, TeamMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentersPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentersPost");

            var localVarPath = "/Portals/{id}/designs/{nk}/commenters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Remove the commenters relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns></returns>
        public void PortalsIdDesignsNkCommentersRelFkDelete (string id, string nk, string fk)
        {
             PortalsIdDesignsNkCommentersRelFkDeleteWithHttpInfo(id, nk, fk);
        }

        /// <summary>
        /// Remove the commenters relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdDesignsNkCommentersRelFkDeleteWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentersRelFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentersRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkCommentersRelFkDelete");

            var localVarPath = "/Portals/{id}/designs/{nk}/commenters/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentersRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove the commenters relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdDesignsNkCommentersRelFkDeleteAsync (string id, string nk, string fk)
        {
             await PortalsIdDesignsNkCommentersRelFkDeleteAsyncWithHttpInfo(id, nk, fk);

        }

        /// <summary>
        /// Remove the commenters relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDesignsNkCommentersRelFkDeleteAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentersRelFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentersRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkCommentersRelFkDelete");

            var localVarPath = "/Portals/{id}/designs/{nk}/commenters/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentersRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Check the existence of commenters relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns>bool?</returns>
        public bool? PortalsIdDesignsNkCommentersRelFkHead (string id, string nk, string fk)
        {
             ApiResponse<bool?> localVarResponse = PortalsIdDesignsNkCommentersRelFkHeadWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check the existence of commenters relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > PortalsIdDesignsNkCommentersRelFkHeadWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentersRelFkHead");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentersRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkCommentersRelFkHead");

            var localVarPath = "/Portals/{id}/designs/{nk}/commenters/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentersRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Check the existence of commenters relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> PortalsIdDesignsNkCommentersRelFkHeadAsync (string id, string nk, string fk)
        {
             ApiResponse<bool?> localVarResponse = await PortalsIdDesignsNkCommentersRelFkHeadAsyncWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check the existence of commenters relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> PortalsIdDesignsNkCommentersRelFkHeadAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentersRelFkHead");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentersRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkCommentersRelFkHead");

            var localVarPath = "/Portals/{id}/designs/{nk}/commenters/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentersRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Add a related item by id for commenters. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <param name="data"> (optional)</param>
        /// <returns>DesignComment</returns>
        public DesignComment PortalsIdDesignsNkCommentersRelFkPut (string id, string nk, string fk, DesignComment data = null)
        {
             ApiResponse<DesignComment> localVarResponse = PortalsIdDesignsNkCommentersRelFkPutWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a related item by id for commenters. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of DesignComment</returns>
        public ApiResponse< DesignComment > PortalsIdDesignsNkCommentersRelFkPutWithHttpInfo (string id, string nk, string fk, DesignComment data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentersRelFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentersRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkCommentersRelFkPut");

            var localVarPath = "/Portals/{id}/designs/{nk}/commenters/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentersRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignComment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignComment)));
            
        }

        /// <summary>
        /// Add a related item by id for commenters. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of DesignComment</returns>
        public async System.Threading.Tasks.Task<DesignComment> PortalsIdDesignsNkCommentersRelFkPutAsync (string id, string nk, string fk, DesignComment data = null)
        {
             ApiResponse<DesignComment> localVarResponse = await PortalsIdDesignsNkCommentersRelFkPutAsyncWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a related item by id for commenters. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for commenters</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (DesignComment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DesignComment>> PortalsIdDesignsNkCommentersRelFkPutAsyncWithHttpInfo (string id, string nk, string fk, DesignComment data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentersRelFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentersRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkCommentersRelFkPut");

            var localVarPath = "/Portals/{id}/designs/{nk}/commenters/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentersRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignComment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignComment)));
            
        }

        /// <summary>
        /// Counts comments of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 PortalsIdDesignsNkCommentsCountGet (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = PortalsIdDesignsNkCommentsCountGetWithHttpInfo(id, nk, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts comments of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > PortalsIdDesignsNkCommentsCountGetWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentsCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentsCountGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/comments/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Counts comments of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> PortalsIdDesignsNkCommentsCountGetAsync (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await PortalsIdDesignsNkCommentsCountGetAsyncWithHttpInfo(id, nk, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts comments of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PortalsIdDesignsNkCommentsCountGetAsyncWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentsCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentsCountGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/comments/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Deletes all comments of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns></returns>
        public void PortalsIdDesignsNkCommentsDelete (string id, string nk)
        {
             PortalsIdDesignsNkCommentsDeleteWithHttpInfo(id, nk);
        }

        /// <summary>
        /// Deletes all comments of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdDesignsNkCommentsDeleteWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentsDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentsDelete");

            var localVarPath = "/Portals/{id}/designs/{nk}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all comments of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdDesignsNkCommentsDeleteAsync (string id, string nk)
        {
             await PortalsIdDesignsNkCommentsDeleteAsyncWithHttpInfo(id, nk);

        }

        /// <summary>
        /// Deletes all comments of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDesignsNkCommentsDeleteAsyncWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentsDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentsDelete");

            var localVarPath = "/Portals/{id}/designs/{nk}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for comments. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for comments</param>
        /// <returns></returns>
        public void PortalsIdDesignsNkCommentsFkDelete (string id, string nk, string fk)
        {
             PortalsIdDesignsNkCommentsFkDeleteWithHttpInfo(id, nk, fk);
        }

        /// <summary>
        /// Delete a related item by id for comments. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for comments</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdDesignsNkCommentsFkDeleteWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentsFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkCommentsFkDelete");

            var localVarPath = "/Portals/{id}/designs/{nk}/comments/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for comments. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for comments</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdDesignsNkCommentsFkDeleteAsync (string id, string nk, string fk)
        {
             await PortalsIdDesignsNkCommentsFkDeleteAsyncWithHttpInfo(id, nk, fk);

        }

        /// <summary>
        /// Delete a related item by id for comments. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for comments</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDesignsNkCommentsFkDeleteAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentsFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkCommentsFkDelete");

            var localVarPath = "/Portals/{id}/designs/{nk}/comments/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for comments. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for comments</param>
        /// <returns>DesignComment</returns>
        public DesignComment PortalsIdDesignsNkCommentsFkGet (string id, string nk, string fk)
        {
             ApiResponse<DesignComment> localVarResponse = PortalsIdDesignsNkCommentsFkGetWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for comments. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for comments</param>
        /// <returns>ApiResponse of DesignComment</returns>
        public ApiResponse< DesignComment > PortalsIdDesignsNkCommentsFkGetWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentsFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkCommentsFkGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/comments/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignComment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignComment)));
            
        }

        /// <summary>
        /// Find a related item by id for comments. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for comments</param>
        /// <returns>Task of DesignComment</returns>
        public async System.Threading.Tasks.Task<DesignComment> PortalsIdDesignsNkCommentsFkGetAsync (string id, string nk, string fk)
        {
             ApiResponse<DesignComment> localVarResponse = await PortalsIdDesignsNkCommentsFkGetAsyncWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for comments. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for comments</param>
        /// <returns>Task of ApiResponse (DesignComment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DesignComment>> PortalsIdDesignsNkCommentsFkGetAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentsFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkCommentsFkGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/comments/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignComment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignComment)));
            
        }

        /// <summary>
        /// Update a related item by id for comments. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for comments</param>
        /// <param name="data"> (optional)</param>
        /// <returns>DesignComment</returns>
        public DesignComment PortalsIdDesignsNkCommentsFkPut (string id, string nk, string fk, DesignComment data = null)
        {
             ApiResponse<DesignComment> localVarResponse = PortalsIdDesignsNkCommentsFkPutWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for comments. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for comments</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of DesignComment</returns>
        public ApiResponse< DesignComment > PortalsIdDesignsNkCommentsFkPutWithHttpInfo (string id, string nk, string fk, DesignComment data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentsFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkCommentsFkPut");

            var localVarPath = "/Portals/{id}/designs/{nk}/comments/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignComment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignComment)));
            
        }

        /// <summary>
        /// Update a related item by id for comments. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for comments</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of DesignComment</returns>
        public async System.Threading.Tasks.Task<DesignComment> PortalsIdDesignsNkCommentsFkPutAsync (string id, string nk, string fk, DesignComment data = null)
        {
             ApiResponse<DesignComment> localVarResponse = await PortalsIdDesignsNkCommentsFkPutAsyncWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for comments. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for comments</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (DesignComment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DesignComment>> PortalsIdDesignsNkCommentsFkPutAsyncWithHttpInfo (string id, string nk, string fk, DesignComment data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentsFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkCommentsFkPut");

            var localVarPath = "/Portals/{id}/designs/{nk}/comments/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignComment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignComment)));
            
        }

        /// <summary>
        /// Queries comments of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;DesignComment&gt;</returns>
        public List<DesignComment> PortalsIdDesignsNkCommentsGet (string id, string nk, string filter = null)
        {
             ApiResponse<List<DesignComment>> localVarResponse = PortalsIdDesignsNkCommentsGetWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries comments of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DesignComment&gt;</returns>
        public ApiResponse< List<DesignComment> > PortalsIdDesignsNkCommentsGetWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentsGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentsGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DesignComment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DesignComment>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DesignComment>)));
            
        }

        /// <summary>
        /// Queries comments of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;DesignComment&gt;</returns>
        public async System.Threading.Tasks.Task<List<DesignComment>> PortalsIdDesignsNkCommentsGetAsync (string id, string nk, string filter = null)
        {
             ApiResponse<List<DesignComment>> localVarResponse = await PortalsIdDesignsNkCommentsGetAsyncWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries comments of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DesignComment&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DesignComment>>> PortalsIdDesignsNkCommentsGetAsyncWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentsGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentsGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DesignComment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DesignComment>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DesignComment>)));
            
        }

        /// <summary>
        /// Creates a new instance in comments of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>DesignComment</returns>
        public DesignComment PortalsIdDesignsNkCommentsPost (string id, string nk, DesignComment data = null)
        {
             ApiResponse<DesignComment> localVarResponse = PortalsIdDesignsNkCommentsPostWithHttpInfo(id, nk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in comments of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of DesignComment</returns>
        public ApiResponse< DesignComment > PortalsIdDesignsNkCommentsPostWithHttpInfo (string id, string nk, DesignComment data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentsPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentsPost");

            var localVarPath = "/Portals/{id}/designs/{nk}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignComment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignComment)));
            
        }

        /// <summary>
        /// Creates a new instance in comments of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of DesignComment</returns>
        public async System.Threading.Tasks.Task<DesignComment> PortalsIdDesignsNkCommentsPostAsync (string id, string nk, DesignComment data = null)
        {
             ApiResponse<DesignComment> localVarResponse = await PortalsIdDesignsNkCommentsPostAsyncWithHttpInfo(id, nk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in comments of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (DesignComment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DesignComment>> PortalsIdDesignsNkCommentsPostAsyncWithHttpInfo (string id, string nk, DesignComment data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCommentsPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCommentsPost");

            var localVarPath = "/Portals/{id}/designs/{nk}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCommentsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignComment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignComment)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation customer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Customer</returns>
        public Customer PortalsIdDesignsNkCustomerGet (string id, string nk, bool? refresh = null)
        {
             ApiResponse<Customer> localVarResponse = PortalsIdDesignsNkCustomerGetWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches belongsTo relation customer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        public ApiResponse< Customer > PortalsIdDesignsNkCustomerGetWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCustomerGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCustomerGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/customer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCustomerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation customer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> PortalsIdDesignsNkCustomerGetAsync (string id, string nk, bool? refresh = null)
        {
             ApiResponse<Customer> localVarResponse = await PortalsIdDesignsNkCustomerGetAsyncWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches belongsTo relation customer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Customer>> PortalsIdDesignsNkCustomerGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkCustomerGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkCustomerGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/customer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkCustomerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Counts exports of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 PortalsIdDesignsNkExportsCountGet (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = PortalsIdDesignsNkExportsCountGetWithHttpInfo(id, nk, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts exports of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > PortalsIdDesignsNkExportsCountGetWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkExportsCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkExportsCountGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/exports/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkExportsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Counts exports of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> PortalsIdDesignsNkExportsCountGetAsync (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await PortalsIdDesignsNkExportsCountGetAsyncWithHttpInfo(id, nk, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts exports of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PortalsIdDesignsNkExportsCountGetAsyncWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkExportsCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkExportsCountGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/exports/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkExportsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Deletes all exports of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns></returns>
        public void PortalsIdDesignsNkExportsDelete (string id, string nk)
        {
             PortalsIdDesignsNkExportsDeleteWithHttpInfo(id, nk);
        }

        /// <summary>
        /// Deletes all exports of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdDesignsNkExportsDeleteWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkExportsDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkExportsDelete");

            var localVarPath = "/Portals/{id}/designs/{nk}/exports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkExportsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all exports of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdDesignsNkExportsDeleteAsync (string id, string nk)
        {
             await PortalsIdDesignsNkExportsDeleteAsyncWithHttpInfo(id, nk);

        }

        /// <summary>
        /// Deletes all exports of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDesignsNkExportsDeleteAsyncWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkExportsDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkExportsDelete");

            var localVarPath = "/Portals/{id}/designs/{nk}/exports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkExportsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for exports. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for exports</param>
        /// <returns></returns>
        public void PortalsIdDesignsNkExportsFkDelete (string id, string nk, string fk)
        {
             PortalsIdDesignsNkExportsFkDeleteWithHttpInfo(id, nk, fk);
        }

        /// <summary>
        /// Delete a related item by id for exports. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for exports</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdDesignsNkExportsFkDeleteWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkExportsFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkExportsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkExportsFkDelete");

            var localVarPath = "/Portals/{id}/designs/{nk}/exports/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkExportsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for exports. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for exports</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdDesignsNkExportsFkDeleteAsync (string id, string nk, string fk)
        {
             await PortalsIdDesignsNkExportsFkDeleteAsyncWithHttpInfo(id, nk, fk);

        }

        /// <summary>
        /// Delete a related item by id for exports. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for exports</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDesignsNkExportsFkDeleteAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkExportsFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkExportsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkExportsFkDelete");

            var localVarPath = "/Portals/{id}/designs/{nk}/exports/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkExportsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for exports. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for exports</param>
        /// <returns>DesignExport</returns>
        public DesignExport PortalsIdDesignsNkExportsFkGet (string id, string nk, string fk)
        {
             ApiResponse<DesignExport> localVarResponse = PortalsIdDesignsNkExportsFkGetWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for exports. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for exports</param>
        /// <returns>ApiResponse of DesignExport</returns>
        public ApiResponse< DesignExport > PortalsIdDesignsNkExportsFkGetWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkExportsFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkExportsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkExportsFkGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/exports/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkExportsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignExport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignExport) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignExport)));
            
        }

        /// <summary>
        /// Find a related item by id for exports. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for exports</param>
        /// <returns>Task of DesignExport</returns>
        public async System.Threading.Tasks.Task<DesignExport> PortalsIdDesignsNkExportsFkGetAsync (string id, string nk, string fk)
        {
             ApiResponse<DesignExport> localVarResponse = await PortalsIdDesignsNkExportsFkGetAsyncWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for exports. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for exports</param>
        /// <returns>Task of ApiResponse (DesignExport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DesignExport>> PortalsIdDesignsNkExportsFkGetAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkExportsFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkExportsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkExportsFkGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/exports/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkExportsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignExport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignExport) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignExport)));
            
        }

        /// <summary>
        /// Update a related item by id for exports. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for exports</param>
        /// <param name="data"> (optional)</param>
        /// <returns>DesignExport</returns>
        public DesignExport PortalsIdDesignsNkExportsFkPut (string id, string nk, string fk, DesignExport data = null)
        {
             ApiResponse<DesignExport> localVarResponse = PortalsIdDesignsNkExportsFkPutWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for exports. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for exports</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of DesignExport</returns>
        public ApiResponse< DesignExport > PortalsIdDesignsNkExportsFkPutWithHttpInfo (string id, string nk, string fk, DesignExport data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkExportsFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkExportsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkExportsFkPut");

            var localVarPath = "/Portals/{id}/designs/{nk}/exports/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkExportsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignExport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignExport) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignExport)));
            
        }

        /// <summary>
        /// Update a related item by id for exports. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for exports</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of DesignExport</returns>
        public async System.Threading.Tasks.Task<DesignExport> PortalsIdDesignsNkExportsFkPutAsync (string id, string nk, string fk, DesignExport data = null)
        {
             ApiResponse<DesignExport> localVarResponse = await PortalsIdDesignsNkExportsFkPutAsyncWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for exports. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for exports</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (DesignExport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DesignExport>> PortalsIdDesignsNkExportsFkPutAsyncWithHttpInfo (string id, string nk, string fk, DesignExport data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkExportsFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkExportsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkExportsFkPut");

            var localVarPath = "/Portals/{id}/designs/{nk}/exports/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkExportsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignExport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignExport) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignExport)));
            
        }

        /// <summary>
        /// Queries exports of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;DesignExport&gt;</returns>
        public List<DesignExport> PortalsIdDesignsNkExportsGet (string id, string nk, string filter = null)
        {
             ApiResponse<List<DesignExport>> localVarResponse = PortalsIdDesignsNkExportsGetWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries exports of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DesignExport&gt;</returns>
        public ApiResponse< List<DesignExport> > PortalsIdDesignsNkExportsGetWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkExportsGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkExportsGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/exports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkExportsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DesignExport>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DesignExport>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DesignExport>)));
            
        }

        /// <summary>
        /// Queries exports of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;DesignExport&gt;</returns>
        public async System.Threading.Tasks.Task<List<DesignExport>> PortalsIdDesignsNkExportsGetAsync (string id, string nk, string filter = null)
        {
             ApiResponse<List<DesignExport>> localVarResponse = await PortalsIdDesignsNkExportsGetAsyncWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries exports of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DesignExport&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DesignExport>>> PortalsIdDesignsNkExportsGetAsyncWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkExportsGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkExportsGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/exports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkExportsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DesignExport>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DesignExport>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DesignExport>)));
            
        }

        /// <summary>
        /// Creates a new instance in exports of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>DesignExport</returns>
        public DesignExport PortalsIdDesignsNkExportsPost (string id, string nk, DesignExport data = null)
        {
             ApiResponse<DesignExport> localVarResponse = PortalsIdDesignsNkExportsPostWithHttpInfo(id, nk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in exports of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of DesignExport</returns>
        public ApiResponse< DesignExport > PortalsIdDesignsNkExportsPostWithHttpInfo (string id, string nk, DesignExport data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkExportsPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkExportsPost");

            var localVarPath = "/Portals/{id}/designs/{nk}/exports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkExportsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignExport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignExport) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignExport)));
            
        }

        /// <summary>
        /// Creates a new instance in exports of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of DesignExport</returns>
        public async System.Threading.Tasks.Task<DesignExport> PortalsIdDesignsNkExportsPostAsync (string id, string nk, DesignExport data = null)
        {
             ApiResponse<DesignExport> localVarResponse = await PortalsIdDesignsNkExportsPostAsyncWithHttpInfo(id, nk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in exports of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (DesignExport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DesignExport>> PortalsIdDesignsNkExportsPostAsyncWithHttpInfo (string id, string nk, DesignExport data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkExportsPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkExportsPost");

            var localVarPath = "/Portals/{id}/designs/{nk}/exports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkExportsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignExport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignExport) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignExport)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation folder. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>DesignFolder</returns>
        public DesignFolder PortalsIdDesignsNkFolderGet (string id, string nk, bool? refresh = null)
        {
             ApiResponse<DesignFolder> localVarResponse = PortalsIdDesignsNkFolderGetWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches belongsTo relation folder. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of DesignFolder</returns>
        public ApiResponse< DesignFolder > PortalsIdDesignsNkFolderGetWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkFolderGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkFolderGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/folder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkFolderGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignFolder)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation folder. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of DesignFolder</returns>
        public async System.Threading.Tasks.Task<DesignFolder> PortalsIdDesignsNkFolderGetAsync (string id, string nk, bool? refresh = null)
        {
             ApiResponse<DesignFolder> localVarResponse = await PortalsIdDesignsNkFolderGetAsyncWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches belongsTo relation folder. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (DesignFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DesignFolder>> PortalsIdDesignsNkFolderGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkFolderGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkFolderGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/folder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkFolderGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignFolder)));
            
        }

        /// <summary>
        /// Deletes permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns></returns>
        public void PortalsIdDesignsNkPermissionDelete (string id, string nk)
        {
             PortalsIdDesignsNkPermissionDeleteWithHttpInfo(id, nk);
        }

        /// <summary>
        /// Deletes permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdDesignsNkPermissionDeleteWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkPermissionDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkPermissionDelete");

            var localVarPath = "/Portals/{id}/designs/{nk}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkPermissionDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdDesignsNkPermissionDeleteAsync (string id, string nk)
        {
             await PortalsIdDesignsNkPermissionDeleteAsyncWithHttpInfo(id, nk);

        }

        /// <summary>
        /// Deletes permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDesignsNkPermissionDeleteAsyncWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkPermissionDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkPermissionDelete");

            var localVarPath = "/Portals/{id}/designs/{nk}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkPermissionDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Fetches hasOne relation permission. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>DesignPermissionSet</returns>
        public DesignPermissionSet PortalsIdDesignsNkPermissionGet (string id, string nk, bool? refresh = null)
        {
             ApiResponse<DesignPermissionSet> localVarResponse = PortalsIdDesignsNkPermissionGetWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches hasOne relation permission. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of DesignPermissionSet</returns>
        public ApiResponse< DesignPermissionSet > PortalsIdDesignsNkPermissionGetWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkPermissionGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkPermissionGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkPermissionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignPermissionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignPermissionSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignPermissionSet)));
            
        }

        /// <summary>
        /// Fetches hasOne relation permission. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of DesignPermissionSet</returns>
        public async System.Threading.Tasks.Task<DesignPermissionSet> PortalsIdDesignsNkPermissionGetAsync (string id, string nk, bool? refresh = null)
        {
             ApiResponse<DesignPermissionSet> localVarResponse = await PortalsIdDesignsNkPermissionGetAsyncWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches hasOne relation permission. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (DesignPermissionSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DesignPermissionSet>> PortalsIdDesignsNkPermissionGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkPermissionGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkPermissionGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkPermissionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignPermissionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignPermissionSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignPermissionSet)));
            
        }

        /// <summary>
        /// Creates a new instance in permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>DesignPermissionSet</returns>
        public DesignPermissionSet PortalsIdDesignsNkPermissionPost (string id, string nk, DesignPermissionSet data = null)
        {
             ApiResponse<DesignPermissionSet> localVarResponse = PortalsIdDesignsNkPermissionPostWithHttpInfo(id, nk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of DesignPermissionSet</returns>
        public ApiResponse< DesignPermissionSet > PortalsIdDesignsNkPermissionPostWithHttpInfo (string id, string nk, DesignPermissionSet data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkPermissionPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkPermissionPost");

            var localVarPath = "/Portals/{id}/designs/{nk}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkPermissionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignPermissionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignPermissionSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignPermissionSet)));
            
        }

        /// <summary>
        /// Creates a new instance in permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of DesignPermissionSet</returns>
        public async System.Threading.Tasks.Task<DesignPermissionSet> PortalsIdDesignsNkPermissionPostAsync (string id, string nk, DesignPermissionSet data = null)
        {
             ApiResponse<DesignPermissionSet> localVarResponse = await PortalsIdDesignsNkPermissionPostAsyncWithHttpInfo(id, nk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (DesignPermissionSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DesignPermissionSet>> PortalsIdDesignsNkPermissionPostAsyncWithHttpInfo (string id, string nk, DesignPermissionSet data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkPermissionPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkPermissionPost");

            var localVarPath = "/Portals/{id}/designs/{nk}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkPermissionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignPermissionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignPermissionSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignPermissionSet)));
            
        }

        /// <summary>
        /// Update permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>DesignPermissionSet</returns>
        public DesignPermissionSet PortalsIdDesignsNkPermissionPut (string id, string nk, DesignPermissionSet data = null)
        {
             ApiResponse<DesignPermissionSet> localVarResponse = PortalsIdDesignsNkPermissionPutWithHttpInfo(id, nk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of DesignPermissionSet</returns>
        public ApiResponse< DesignPermissionSet > PortalsIdDesignsNkPermissionPutWithHttpInfo (string id, string nk, DesignPermissionSet data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkPermissionPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkPermissionPut");

            var localVarPath = "/Portals/{id}/designs/{nk}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkPermissionPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignPermissionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignPermissionSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignPermissionSet)));
            
        }

        /// <summary>
        /// Update permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of DesignPermissionSet</returns>
        public async System.Threading.Tasks.Task<DesignPermissionSet> PortalsIdDesignsNkPermissionPutAsync (string id, string nk, DesignPermissionSet data = null)
        {
             ApiResponse<DesignPermissionSet> localVarResponse = await PortalsIdDesignsNkPermissionPutAsyncWithHttpInfo(id, nk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (DesignPermissionSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DesignPermissionSet>> PortalsIdDesignsNkPermissionPutAsyncWithHttpInfo (string id, string nk, DesignPermissionSet data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkPermissionPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkPermissionPut");

            var localVarPath = "/Portals/{id}/designs/{nk}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkPermissionPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignPermissionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignPermissionSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignPermissionSet)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Portal</returns>
        public Portal PortalsIdDesignsNkPortalGet (string id, string nk, bool? refresh = null)
        {
             ApiResponse<Portal> localVarResponse = PortalsIdDesignsNkPortalGetWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches belongsTo relation portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        public ApiResponse< Portal > PortalsIdDesignsNkPortalGetWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkPortalGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkPortalGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/portal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkPortalGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of Portal</returns>
        public async System.Threading.Tasks.Task<Portal> PortalsIdDesignsNkPortalGetAsync (string id, string nk, bool? refresh = null)
        {
             ApiResponse<Portal> localVarResponse = await PortalsIdDesignsNkPortalGetAsyncWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches belongsTo relation portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Portal>> PortalsIdDesignsNkPortalGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkPortalGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkPortalGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/portal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkPortalGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation rejectionComment. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>DesignComment</returns>
        public DesignComment PortalsIdDesignsNkRejectionCommentGet (string id, string nk, bool? refresh = null)
        {
             ApiResponse<DesignComment> localVarResponse = PortalsIdDesignsNkRejectionCommentGetWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches belongsTo relation rejectionComment. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of DesignComment</returns>
        public ApiResponse< DesignComment > PortalsIdDesignsNkRejectionCommentGetWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkRejectionCommentGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkRejectionCommentGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/rejectionComment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkRejectionCommentGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignComment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignComment)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation rejectionComment. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of DesignComment</returns>
        public async System.Threading.Tasks.Task<DesignComment> PortalsIdDesignsNkRejectionCommentGetAsync (string id, string nk, bool? refresh = null)
        {
             ApiResponse<DesignComment> localVarResponse = await PortalsIdDesignsNkRejectionCommentGetAsyncWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches belongsTo relation rejectionComment. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (DesignComment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DesignComment>> PortalsIdDesignsNkRejectionCommentGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkRejectionCommentGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkRejectionCommentGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/rejectionComment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkRejectionCommentGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignComment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignComment)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation requester. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>TeamMember</returns>
        public TeamMember PortalsIdDesignsNkRequesterGet (string id, string nk, bool? refresh = null)
        {
             ApiResponse<TeamMember> localVarResponse = PortalsIdDesignsNkRequesterGetWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches belongsTo relation requester. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        public ApiResponse< TeamMember > PortalsIdDesignsNkRequesterGetWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkRequesterGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkRequesterGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/requester";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkRequesterGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation requester. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of TeamMember</returns>
        public async System.Threading.Tasks.Task<TeamMember> PortalsIdDesignsNkRequesterGetAsync (string id, string nk, bool? refresh = null)
        {
             ApiResponse<TeamMember> localVarResponse = await PortalsIdDesignsNkRequesterGetAsyncWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches belongsTo relation requester. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMember>> PortalsIdDesignsNkRequesterGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkRequesterGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkRequesterGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/requester";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkRequesterGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation reviewer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>TeamMember</returns>
        public TeamMember PortalsIdDesignsNkReviewerGet (string id, string nk, bool? refresh = null)
        {
             ApiResponse<TeamMember> localVarResponse = PortalsIdDesignsNkReviewerGetWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches belongsTo relation reviewer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        public ApiResponse< TeamMember > PortalsIdDesignsNkReviewerGetWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkReviewerGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkReviewerGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/reviewer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkReviewerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation reviewer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of TeamMember</returns>
        public async System.Threading.Tasks.Task<TeamMember> PortalsIdDesignsNkReviewerGetAsync (string id, string nk, bool? refresh = null)
        {
             ApiResponse<TeamMember> localVarResponse = await PortalsIdDesignsNkReviewerGetAsyncWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches belongsTo relation reviewer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMember>> PortalsIdDesignsNkReviewerGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkReviewerGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkReviewerGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/reviewer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkReviewerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Counts tags of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 PortalsIdDesignsNkTagsCountGet (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = PortalsIdDesignsNkTagsCountGetWithHttpInfo(id, nk, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts tags of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > PortalsIdDesignsNkTagsCountGetWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkTagsCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkTagsCountGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/tags/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkTagsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Counts tags of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> PortalsIdDesignsNkTagsCountGetAsync (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await PortalsIdDesignsNkTagsCountGetAsyncWithHttpInfo(id, nk, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts tags of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PortalsIdDesignsNkTagsCountGetAsyncWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkTagsCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkTagsCountGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/tags/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkTagsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Deletes all tags of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns></returns>
        public void PortalsIdDesignsNkTagsDelete (string id, string nk)
        {
             PortalsIdDesignsNkTagsDeleteWithHttpInfo(id, nk);
        }

        /// <summary>
        /// Deletes all tags of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdDesignsNkTagsDeleteWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkTagsDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkTagsDelete");

            var localVarPath = "/Portals/{id}/designs/{nk}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkTagsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all tags of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdDesignsNkTagsDeleteAsync (string id, string nk)
        {
             await PortalsIdDesignsNkTagsDeleteAsyncWithHttpInfo(id, nk);

        }

        /// <summary>
        /// Deletes all tags of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDesignsNkTagsDeleteAsyncWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkTagsDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkTagsDelete");

            var localVarPath = "/Portals/{id}/designs/{nk}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkTagsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns></returns>
        public void PortalsIdDesignsNkTagsFkDelete (string id, string nk, string fk)
        {
             PortalsIdDesignsNkTagsFkDeleteWithHttpInfo(id, nk, fk);
        }

        /// <summary>
        /// Delete a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdDesignsNkTagsFkDeleteWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkTagsFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkTagsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkTagsFkDelete");

            var localVarPath = "/Portals/{id}/designs/{nk}/tags/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkTagsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdDesignsNkTagsFkDeleteAsync (string id, string nk, string fk)
        {
             await PortalsIdDesignsNkTagsFkDeleteAsyncWithHttpInfo(id, nk, fk);

        }

        /// <summary>
        /// Delete a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDesignsNkTagsFkDeleteAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkTagsFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkTagsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkTagsFkDelete");

            var localVarPath = "/Portals/{id}/designs/{nk}/tags/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkTagsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Tag</returns>
        public Tag PortalsIdDesignsNkTagsFkGet (string id, string nk, string fk)
        {
             ApiResponse<Tag> localVarResponse = PortalsIdDesignsNkTagsFkGetWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>ApiResponse of Tag</returns>
        public ApiResponse< Tag > PortalsIdDesignsNkTagsFkGetWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkTagsFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkTagsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkTagsFkGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/tags/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkTagsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Tag) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag)));
            
        }

        /// <summary>
        /// Find a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> PortalsIdDesignsNkTagsFkGetAsync (string id, string nk, string fk)
        {
             ApiResponse<Tag> localVarResponse = await PortalsIdDesignsNkTagsFkGetAsyncWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tag>> PortalsIdDesignsNkTagsFkGetAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkTagsFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkTagsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkTagsFkGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/tags/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkTagsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Tag) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag)));
            
        }

        /// <summary>
        /// Update a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Tag</returns>
        public Tag PortalsIdDesignsNkTagsFkPut (string id, string nk, string fk, Tag data = null)
        {
             ApiResponse<Tag> localVarResponse = PortalsIdDesignsNkTagsFkPutWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Tag</returns>
        public ApiResponse< Tag > PortalsIdDesignsNkTagsFkPutWithHttpInfo (string id, string nk, string fk, Tag data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkTagsFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkTagsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkTagsFkPut");

            var localVarPath = "/Portals/{id}/designs/{nk}/tags/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkTagsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Tag) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag)));
            
        }

        /// <summary>
        /// Update a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> PortalsIdDesignsNkTagsFkPutAsync (string id, string nk, string fk, Tag data = null)
        {
             ApiResponse<Tag> localVarResponse = await PortalsIdDesignsNkTagsFkPutAsyncWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tag>> PortalsIdDesignsNkTagsFkPutAsyncWithHttpInfo (string id, string nk, string fk, Tag data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkTagsFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkTagsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkTagsFkPut");

            var localVarPath = "/Portals/{id}/designs/{nk}/tags/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkTagsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Tag) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag)));
            
        }

        /// <summary>
        /// Queries tags of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;Tag&gt;</returns>
        public List<Tag> PortalsIdDesignsNkTagsGet (string id, string nk, string filter = null)
        {
             ApiResponse<List<Tag>> localVarResponse = PortalsIdDesignsNkTagsGetWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries tags of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Tag&gt;</returns>
        public ApiResponse< List<Tag> > PortalsIdDesignsNkTagsGetWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkTagsGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkTagsGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkTagsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Tag>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Tag>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Tag>)));
            
        }

        /// <summary>
        /// Queries tags of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;Tag&gt;</returns>
        public async System.Threading.Tasks.Task<List<Tag>> PortalsIdDesignsNkTagsGetAsync (string id, string nk, string filter = null)
        {
             ApiResponse<List<Tag>> localVarResponse = await PortalsIdDesignsNkTagsGetAsyncWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries tags of Design. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Tag&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Tag>>> PortalsIdDesignsNkTagsGetAsyncWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkTagsGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkTagsGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkTagsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Tag>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Tag>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Tag>)));
            
        }

        /// <summary>
        /// Creates a new instance in tags of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Tag</returns>
        public Tag PortalsIdDesignsNkTagsPost (string id, string nk, Tag data = null)
        {
             ApiResponse<Tag> localVarResponse = PortalsIdDesignsNkTagsPostWithHttpInfo(id, nk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in tags of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Tag</returns>
        public ApiResponse< Tag > PortalsIdDesignsNkTagsPostWithHttpInfo (string id, string nk, Tag data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkTagsPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkTagsPost");

            var localVarPath = "/Portals/{id}/designs/{nk}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkTagsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Tag) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag)));
            
        }

        /// <summary>
        /// Creates a new instance in tags of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> PortalsIdDesignsNkTagsPostAsync (string id, string nk, Tag data = null)
        {
             ApiResponse<Tag> localVarResponse = await PortalsIdDesignsNkTagsPostAsyncWithHttpInfo(id, nk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in tags of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tag>> PortalsIdDesignsNkTagsPostAsyncWithHttpInfo (string id, string nk, Tag data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkTagsPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkTagsPost");

            var localVarPath = "/Portals/{id}/designs/{nk}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkTagsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Tag) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag)));
            
        }

        /// <summary>
        /// Remove the tags relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns></returns>
        public void PortalsIdDesignsNkTagsRelFkDelete (string id, string nk, string fk)
        {
             PortalsIdDesignsNkTagsRelFkDeleteWithHttpInfo(id, nk, fk);
        }

        /// <summary>
        /// Remove the tags relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdDesignsNkTagsRelFkDeleteWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkTagsRelFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkTagsRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkTagsRelFkDelete");

            var localVarPath = "/Portals/{id}/designs/{nk}/tags/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkTagsRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove the tags relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdDesignsNkTagsRelFkDeleteAsync (string id, string nk, string fk)
        {
             await PortalsIdDesignsNkTagsRelFkDeleteAsyncWithHttpInfo(id, nk, fk);

        }

        /// <summary>
        /// Remove the tags relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdDesignsNkTagsRelFkDeleteAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkTagsRelFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkTagsRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkTagsRelFkDelete");

            var localVarPath = "/Portals/{id}/designs/{nk}/tags/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkTagsRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Check the existence of tags relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>bool?</returns>
        public bool? PortalsIdDesignsNkTagsRelFkHead (string id, string nk, string fk)
        {
             ApiResponse<bool?> localVarResponse = PortalsIdDesignsNkTagsRelFkHeadWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check the existence of tags relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > PortalsIdDesignsNkTagsRelFkHeadWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkTagsRelFkHead");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkTagsRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkTagsRelFkHead");

            var localVarPath = "/Portals/{id}/designs/{nk}/tags/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkTagsRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Check the existence of tags relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> PortalsIdDesignsNkTagsRelFkHeadAsync (string id, string nk, string fk)
        {
             ApiResponse<bool?> localVarResponse = await PortalsIdDesignsNkTagsRelFkHeadAsyncWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check the existence of tags relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> PortalsIdDesignsNkTagsRelFkHeadAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkTagsRelFkHead");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkTagsRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkTagsRelFkHead");

            var localVarPath = "/Portals/{id}/designs/{nk}/tags/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkTagsRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Add a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>DesignTag</returns>
        public DesignTag PortalsIdDesignsNkTagsRelFkPut (string id, string nk, string fk, DesignTag data = null)
        {
             ApiResponse<DesignTag> localVarResponse = PortalsIdDesignsNkTagsRelFkPutWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of DesignTag</returns>
        public ApiResponse< DesignTag > PortalsIdDesignsNkTagsRelFkPutWithHttpInfo (string id, string nk, string fk, DesignTag data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkTagsRelFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkTagsRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkTagsRelFkPut");

            var localVarPath = "/Portals/{id}/designs/{nk}/tags/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkTagsRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignTag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignTag) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignTag)));
            
        }

        /// <summary>
        /// Add a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of DesignTag</returns>
        public async System.Threading.Tasks.Task<DesignTag> PortalsIdDesignsNkTagsRelFkPutAsync (string id, string nk, string fk, DesignTag data = null)
        {
             ApiResponse<DesignTag> localVarResponse = await PortalsIdDesignsNkTagsRelFkPutAsyncWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (DesignTag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DesignTag>> PortalsIdDesignsNkTagsRelFkPutAsyncWithHttpInfo (string id, string nk, string fk, DesignTag data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkTagsRelFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkTagsRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdDesignsNkTagsRelFkPut");

            var localVarPath = "/Portals/{id}/designs/{nk}/tags/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkTagsRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DesignTag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DesignTag) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DesignTag)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Template</returns>
        public Template PortalsIdDesignsNkTemplateGet (string id, string nk, bool? refresh = null)
        {
             ApiResponse<Template> localVarResponse = PortalsIdDesignsNkTemplateGetWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches belongsTo relation template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse< Template > PortalsIdDesignsNkTemplateGetWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkTemplateGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkTemplateGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkTemplateGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> PortalsIdDesignsNkTemplateGetAsync (string id, string nk, bool? refresh = null)
        {
             ApiResponse<Template> localVarResponse = await PortalsIdDesignsNkTemplateGetAsyncWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches belongsTo relation template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="nk">Foreign key for designs.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template>> PortalsIdDesignsNkTemplateGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsNkTemplateGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdDesignsNkTemplateGet");

            var localVarPath = "/Portals/{id}/designs/{nk}/template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsNkTemplateGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Creates a new instance in designs of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Design</returns>
        public Design PortalsIdDesignsPost (string id, Design data = null)
        {
             ApiResponse<Design> localVarResponse = PortalsIdDesignsPostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in designs of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Design</returns>
        public ApiResponse< Design > PortalsIdDesignsPostWithHttpInfo (string id, Design data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsPost");

            var localVarPath = "/Portals/{id}/designs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Design>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Design) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Design)));
            
        }

        /// <summary>
        /// Creates a new instance in designs of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Design</returns>
        public async System.Threading.Tasks.Task<Design> PortalsIdDesignsPostAsync (string id, Design data = null)
        {
             ApiResponse<Design> localVarResponse = await PortalsIdDesignsPostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in designs of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Design)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Design>> PortalsIdDesignsPostAsyncWithHttpInfo (string id, Design data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdDesignsPost");

            var localVarPath = "/Portals/{id}/designs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdDesignsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Design>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Design) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Design)));
            
        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 PortalsIdExistsGet (string id)
        {
             ApiResponse<InlineResponse2001> localVarResponse = PortalsIdExistsGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > PortalsIdExistsGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdExistsGet");

            var localVarPath = "/Portals/{id}/exists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdExistsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> PortalsIdExistsGetAsync (string id)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await PortalsIdExistsGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> PortalsIdExistsGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdExistsGet");

            var localVarPath = "/Portals/{id}/exists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdExistsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Find a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Portal</returns>
        public Portal PortalsIdGet (string id, string filter = null)
        {
             ApiResponse<Portal> localVarResponse = PortalsIdGetWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        public ApiResponse< Portal > PortalsIdGetWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdGet");

            var localVarPath = "/Portals/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Find a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of Portal</returns>
        public async System.Threading.Tasks.Task<Portal> PortalsIdGetAsync (string id, string filter = null)
        {
             ApiResponse<Portal> localVarResponse = await PortalsIdGetAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Portal>> PortalsIdGetAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdGet");

            var localVarPath = "/Portals/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 PortalsIdHead (string id)
        {
             ApiResponse<InlineResponse2001> localVarResponse = PortalsIdHeadWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > PortalsIdHeadWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdHead");

            var localVarPath = "/Portals/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> PortalsIdHeadAsync (string id)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await PortalsIdHeadAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> PortalsIdHeadAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdHead");

            var localVarPath = "/Portals/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts imageFolders of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 PortalsIdImageFoldersCountGet (string id, string where = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = PortalsIdImageFoldersCountGetWithHttpInfo(id, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts imageFolders of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > PortalsIdImageFoldersCountGetWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdImageFoldersCountGet");

            var localVarPath = "/Portals/{id}/imageFolders/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdImageFoldersCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Counts imageFolders of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> PortalsIdImageFoldersCountGetAsync (string id, string where = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await PortalsIdImageFoldersCountGetAsyncWithHttpInfo(id, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts imageFolders of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PortalsIdImageFoldersCountGetAsyncWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdImageFoldersCountGet");

            var localVarPath = "/Portals/{id}/imageFolders/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdImageFoldersCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Deletes all imageFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns></returns>
        public void PortalsIdImageFoldersDelete (string id)
        {
             PortalsIdImageFoldersDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes all imageFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdImageFoldersDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdImageFoldersDelete");

            var localVarPath = "/Portals/{id}/imageFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdImageFoldersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all imageFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdImageFoldersDeleteAsync (string id)
        {
             await PortalsIdImageFoldersDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes all imageFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdImageFoldersDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdImageFoldersDelete");

            var localVarPath = "/Portals/{id}/imageFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdImageFoldersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for imageFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns></returns>
        public void PortalsIdImageFoldersFkDelete (string id, string fk)
        {
             PortalsIdImageFoldersFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Delete a related item by id for imageFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdImageFoldersFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdImageFoldersFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdImageFoldersFkDelete");

            var localVarPath = "/Portals/{id}/imageFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdImageFoldersFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for imageFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdImageFoldersFkDeleteAsync (string id, string fk)
        {
             await PortalsIdImageFoldersFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Delete a related item by id for imageFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdImageFoldersFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdImageFoldersFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdImageFoldersFkDelete");

            var localVarPath = "/Portals/{id}/imageFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdImageFoldersFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for imageFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>ImageFolder</returns>
        public ImageFolder PortalsIdImageFoldersFkGet (string id, string fk)
        {
             ApiResponse<ImageFolder> localVarResponse = PortalsIdImageFoldersFkGetWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for imageFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>ApiResponse of ImageFolder</returns>
        public ApiResponse< ImageFolder > PortalsIdImageFoldersFkGetWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdImageFoldersFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdImageFoldersFkGet");

            var localVarPath = "/Portals/{id}/imageFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdImageFoldersFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImageFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageFolder)));
            
        }

        /// <summary>
        /// Find a related item by id for imageFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>Task of ImageFolder</returns>
        public async System.Threading.Tasks.Task<ImageFolder> PortalsIdImageFoldersFkGetAsync (string id, string fk)
        {
             ApiResponse<ImageFolder> localVarResponse = await PortalsIdImageFoldersFkGetAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for imageFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>Task of ApiResponse (ImageFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImageFolder>> PortalsIdImageFoldersFkGetAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdImageFoldersFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdImageFoldersFkGet");

            var localVarPath = "/Portals/{id}/imageFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdImageFoldersFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImageFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageFolder)));
            
        }

        /// <summary>
        /// Update a related item by id for imageFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ImageFolder</returns>
        public ImageFolder PortalsIdImageFoldersFkPut (string id, string fk, ImageFolder data = null)
        {
             ApiResponse<ImageFolder> localVarResponse = PortalsIdImageFoldersFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for imageFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ImageFolder</returns>
        public ApiResponse< ImageFolder > PortalsIdImageFoldersFkPutWithHttpInfo (string id, string fk, ImageFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdImageFoldersFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdImageFoldersFkPut");

            var localVarPath = "/Portals/{id}/imageFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdImageFoldersFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImageFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageFolder)));
            
        }

        /// <summary>
        /// Update a related item by id for imageFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ImageFolder</returns>
        public async System.Threading.Tasks.Task<ImageFolder> PortalsIdImageFoldersFkPutAsync (string id, string fk, ImageFolder data = null)
        {
             ApiResponse<ImageFolder> localVarResponse = await PortalsIdImageFoldersFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for imageFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ImageFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImageFolder>> PortalsIdImageFoldersFkPutAsyncWithHttpInfo (string id, string fk, ImageFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdImageFoldersFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdImageFoldersFkPut");

            var localVarPath = "/Portals/{id}/imageFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdImageFoldersFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImageFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageFolder)));
            
        }

        /// <summary>
        /// Queries imageFolders of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;ImageFolder&gt;</returns>
        public List<ImageFolder> PortalsIdImageFoldersGet (string id, string filter = null)
        {
             ApiResponse<List<ImageFolder>> localVarResponse = PortalsIdImageFoldersGetWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries imageFolders of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ImageFolder&gt;</returns>
        public ApiResponse< List<ImageFolder> > PortalsIdImageFoldersGetWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdImageFoldersGet");

            var localVarPath = "/Portals/{id}/imageFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdImageFoldersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ImageFolder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ImageFolder>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ImageFolder>)));
            
        }

        /// <summary>
        /// Queries imageFolders of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;ImageFolder&gt;</returns>
        public async System.Threading.Tasks.Task<List<ImageFolder>> PortalsIdImageFoldersGetAsync (string id, string filter = null)
        {
             ApiResponse<List<ImageFolder>> localVarResponse = await PortalsIdImageFoldersGetAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries imageFolders of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ImageFolder&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ImageFolder>>> PortalsIdImageFoldersGetAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdImageFoldersGet");

            var localVarPath = "/Portals/{id}/imageFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdImageFoldersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ImageFolder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ImageFolder>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ImageFolder>)));
            
        }

        /// <summary>
        /// Creates a new instance in imageFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ImageFolder</returns>
        public ImageFolder PortalsIdImageFoldersPost (string id, ImageFolder data = null)
        {
             ApiResponse<ImageFolder> localVarResponse = PortalsIdImageFoldersPostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in imageFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ImageFolder</returns>
        public ApiResponse< ImageFolder > PortalsIdImageFoldersPostWithHttpInfo (string id, ImageFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdImageFoldersPost");

            var localVarPath = "/Portals/{id}/imageFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdImageFoldersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImageFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageFolder)));
            
        }

        /// <summary>
        /// Creates a new instance in imageFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ImageFolder</returns>
        public async System.Threading.Tasks.Task<ImageFolder> PortalsIdImageFoldersPostAsync (string id, ImageFolder data = null)
        {
             ApiResponse<ImageFolder> localVarResponse = await PortalsIdImageFoldersPostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in imageFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ImageFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImageFolder>> PortalsIdImageFoldersPostAsyncWithHttpInfo (string id, ImageFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdImageFoldersPost");

            var localVarPath = "/Portals/{id}/imageFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdImageFoldersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImageFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageFolder)));
            
        }

        /// <summary>
        /// Remove the imageFolders relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns></returns>
        public void PortalsIdImageFoldersRelFkDelete (string id, string fk)
        {
             PortalsIdImageFoldersRelFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Remove the imageFolders relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdImageFoldersRelFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdImageFoldersRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdImageFoldersRelFkDelete");

            var localVarPath = "/Portals/{id}/imageFolders/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdImageFoldersRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove the imageFolders relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdImageFoldersRelFkDeleteAsync (string id, string fk)
        {
             await PortalsIdImageFoldersRelFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Remove the imageFolders relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdImageFoldersRelFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdImageFoldersRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdImageFoldersRelFkDelete");

            var localVarPath = "/Portals/{id}/imageFolders/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdImageFoldersRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Check the existence of imageFolders relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>bool?</returns>
        public bool? PortalsIdImageFoldersRelFkHead (string id, string fk)
        {
             ApiResponse<bool?> localVarResponse = PortalsIdImageFoldersRelFkHeadWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check the existence of imageFolders relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > PortalsIdImageFoldersRelFkHeadWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdImageFoldersRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdImageFoldersRelFkHead");

            var localVarPath = "/Portals/{id}/imageFolders/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdImageFoldersRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Check the existence of imageFolders relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> PortalsIdImageFoldersRelFkHeadAsync (string id, string fk)
        {
             ApiResponse<bool?> localVarResponse = await PortalsIdImageFoldersRelFkHeadAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check the existence of imageFolders relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> PortalsIdImageFoldersRelFkHeadAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdImageFoldersRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdImageFoldersRelFkHead");

            var localVarPath = "/Portals/{id}/imageFolders/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdImageFoldersRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Add a related item by id for imageFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalImageFolder</returns>
        public PortalImageFolder PortalsIdImageFoldersRelFkPut (string id, string fk, PortalImageFolder data = null)
        {
             ApiResponse<PortalImageFolder> localVarResponse = PortalsIdImageFoldersRelFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a related item by id for imageFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalImageFolder</returns>
        public ApiResponse< PortalImageFolder > PortalsIdImageFoldersRelFkPutWithHttpInfo (string id, string fk, PortalImageFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdImageFoldersRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdImageFoldersRelFkPut");

            var localVarPath = "/Portals/{id}/imageFolders/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdImageFoldersRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalImageFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalImageFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalImageFolder)));
            
        }

        /// <summary>
        /// Add a related item by id for imageFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalImageFolder</returns>
        public async System.Threading.Tasks.Task<PortalImageFolder> PortalsIdImageFoldersRelFkPutAsync (string id, string fk, PortalImageFolder data = null)
        {
             ApiResponse<PortalImageFolder> localVarResponse = await PortalsIdImageFoldersRelFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a related item by id for imageFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalImageFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalImageFolder>> PortalsIdImageFoldersRelFkPutAsyncWithHttpInfo (string id, string fk, PortalImageFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdImageFoldersRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdImageFoldersRelFkPut");

            var localVarPath = "/Portals/{id}/imageFolders/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdImageFoldersRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalImageFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalImageFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalImageFolder)));
            
        }

        /// <summary>
        /// Delete InvitationTickets for this Portal 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <returns>Object</returns>
        public Object PortalsIdInvitationTicketsFkDelete (string id, string id2, string fk)
        {
             ApiResponse<Object> localVarResponse = PortalsIdInvitationTicketsFkDeleteWithHttpInfo(id, id2, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete InvitationTickets for this Portal 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > PortalsIdInvitationTicketsFkDeleteWithHttpInfo (string id, string id2, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdInvitationTicketsFkDelete");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling PortalApi->PortalsIdInvitationTicketsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdInvitationTicketsFkDelete");

            var localVarPath = "/Portals/{id}/invitationTickets/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdInvitationTicketsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Delete InvitationTickets for this Portal 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PortalsIdInvitationTicketsFkDeleteAsync (string id, string id2, string fk)
        {
             ApiResponse<Object> localVarResponse = await PortalsIdInvitationTicketsFkDeleteAsyncWithHttpInfo(id, id2, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete InvitationTickets for this Portal 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdInvitationTicketsFkDeleteAsyncWithHttpInfo (string id, string id2, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdInvitationTicketsFkDelete");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling PortalApi->PortalsIdInvitationTicketsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdInvitationTicketsFkDelete");

            var localVarPath = "/Portals/{id}/invitationTickets/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdInvitationTicketsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Get InvitationTicket by Id for this Portal 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <param name="filter">Only include changes that match this filter (optional)</param>
        /// <returns>InvitationTicket</returns>
        public InvitationTicket PortalsIdInvitationTicketsFkGet (string id, string id2, string fk, string filter = null)
        {
             ApiResponse<InvitationTicket> localVarResponse = PortalsIdInvitationTicketsFkGetWithHttpInfo(id, id2, fk, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get InvitationTicket by Id for this Portal 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <param name="filter">Only include changes that match this filter (optional)</param>
        /// <returns>ApiResponse of InvitationTicket</returns>
        public ApiResponse< InvitationTicket > PortalsIdInvitationTicketsFkGetWithHttpInfo (string id, string id2, string fk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdInvitationTicketsFkGet");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling PortalApi->PortalsIdInvitationTicketsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdInvitationTicketsFkGet");

            var localVarPath = "/Portals/{id}/invitationTickets/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdInvitationTicketsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationTicket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationTicket) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationTicket)));
            
        }

        /// <summary>
        /// Get InvitationTicket by Id for this Portal 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <param name="filter">Only include changes that match this filter (optional)</param>
        /// <returns>Task of InvitationTicket</returns>
        public async System.Threading.Tasks.Task<InvitationTicket> PortalsIdInvitationTicketsFkGetAsync (string id, string id2, string fk, string filter = null)
        {
             ApiResponse<InvitationTicket> localVarResponse = await PortalsIdInvitationTicketsFkGetAsyncWithHttpInfo(id, id2, fk, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get InvitationTicket by Id for this Portal 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <param name="filter">Only include changes that match this filter (optional)</param>
        /// <returns>Task of ApiResponse (InvitationTicket)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvitationTicket>> PortalsIdInvitationTicketsFkGetAsyncWithHttpInfo (string id, string id2, string fk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdInvitationTicketsFkGet");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling PortalApi->PortalsIdInvitationTicketsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdInvitationTicketsFkGet");

            var localVarPath = "/Portals/{id}/invitationTickets/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdInvitationTicketsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationTicket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationTicket) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationTicket)));
            
        }

        /// <summary>
        /// List InvitationTickets for this Portal 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>List&lt;InvitationTicket&gt;</returns>
        public List<InvitationTicket> PortalsIdInvitationTicketsGet (string id, string id2, string filter = null)
        {
             ApiResponse<List<InvitationTicket>> localVarResponse = PortalsIdInvitationTicketsGetWithHttpInfo(id, id2, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List InvitationTickets for this Portal 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of List&lt;InvitationTicket&gt;</returns>
        public ApiResponse< List<InvitationTicket> > PortalsIdInvitationTicketsGetWithHttpInfo (string id, string id2, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdInvitationTicketsGet");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling PortalApi->PortalsIdInvitationTicketsGet");

            var localVarPath = "/Portals/{id}/invitationTickets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdInvitationTicketsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InvitationTicket>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InvitationTicket>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InvitationTicket>)));
            
        }

        /// <summary>
        /// List InvitationTickets for this Portal 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of List&lt;InvitationTicket&gt;</returns>
        public async System.Threading.Tasks.Task<List<InvitationTicket>> PortalsIdInvitationTicketsGetAsync (string id, string id2, string filter = null)
        {
             ApiResponse<List<InvitationTicket>> localVarResponse = await PortalsIdInvitationTicketsGetAsyncWithHttpInfo(id, id2, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List InvitationTickets for this Portal 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InvitationTicket&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InvitationTicket>>> PortalsIdInvitationTicketsGetAsyncWithHttpInfo (string id, string id2, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdInvitationTicketsGet");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling PortalApi->PortalsIdInvitationTicketsGet");

            var localVarPath = "/Portals/{id}/invitationTickets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdInvitationTicketsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InvitationTicket>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InvitationTicket>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InvitationTicket>)));
            
        }

        /// <summary>
        /// Change logo 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="data">Logo</param>
        /// <returns>Portal</returns>
        public Portal PortalsIdLogoPut (string id, string id2, Portal data)
        {
             ApiResponse<Portal> localVarResponse = PortalsIdLogoPutWithHttpInfo(id, id2, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change logo 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="data">Logo</param>
        /// <returns>ApiResponse of Portal</returns>
        public ApiResponse< Portal > PortalsIdLogoPutWithHttpInfo (string id, string id2, Portal data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdLogoPut");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling PortalApi->PortalsIdLogoPut");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling PortalApi->PortalsIdLogoPut");

            var localVarPath = "/Portals/{id}/logo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdLogoPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Change logo 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="data">Logo</param>
        /// <returns>Task of Portal</returns>
        public async System.Threading.Tasks.Task<Portal> PortalsIdLogoPutAsync (string id, string id2, Portal data)
        {
             ApiResponse<Portal> localVarResponse = await PortalsIdLogoPutAsyncWithHttpInfo(id, id2, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change logo 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="data">Logo</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Portal>> PortalsIdLogoPutAsyncWithHttpInfo (string id, string id2, Portal data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdLogoPut");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling PortalApi->PortalsIdLogoPut");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling PortalApi->PortalsIdLogoPut");

            var localVarPath = "/Portals/{id}/logo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdLogoPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Counts members of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 PortalsIdMembersCountGet (string id, string where = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = PortalsIdMembersCountGetWithHttpInfo(id, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts members of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > PortalsIdMembersCountGetWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdMembersCountGet");

            var localVarPath = "/Portals/{id}/members/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdMembersCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Counts members of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> PortalsIdMembersCountGetAsync (string id, string where = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await PortalsIdMembersCountGetAsyncWithHttpInfo(id, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts members of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PortalsIdMembersCountGetAsyncWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdMembersCountGet");

            var localVarPath = "/Portals/{id}/members/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdMembersCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Deletes all members of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns></returns>
        public void PortalsIdMembersDelete (string id)
        {
             PortalsIdMembersDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes all members of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdMembersDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdMembersDelete");

            var localVarPath = "/Portals/{id}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdMembersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all members of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdMembersDeleteAsync (string id)
        {
             await PortalsIdMembersDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes all members of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdMembersDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdMembersDelete");

            var localVarPath = "/Portals/{id}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdMembersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns></returns>
        public void PortalsIdMembersFkDelete (string id, string fk)
        {
             PortalsIdMembersFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Delete a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdMembersFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdMembersFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdMembersFkDelete");

            var localVarPath = "/Portals/{id}/members/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdMembersFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdMembersFkDeleteAsync (string id, string fk)
        {
             await PortalsIdMembersFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Delete a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdMembersFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdMembersFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdMembersFkDelete");

            var localVarPath = "/Portals/{id}/members/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdMembersFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>TeamMember</returns>
        public TeamMember PortalsIdMembersFkGet (string id, string fk)
        {
             ApiResponse<TeamMember> localVarResponse = PortalsIdMembersFkGetWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>ApiResponse of TeamMember</returns>
        public ApiResponse< TeamMember > PortalsIdMembersFkGetWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdMembersFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdMembersFkGet");

            var localVarPath = "/Portals/{id}/members/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdMembersFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Find a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of TeamMember</returns>
        public async System.Threading.Tasks.Task<TeamMember> PortalsIdMembersFkGetAsync (string id, string fk)
        {
             ApiResponse<TeamMember> localVarResponse = await PortalsIdMembersFkGetAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMember>> PortalsIdMembersFkGetAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdMembersFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdMembersFkGet");

            var localVarPath = "/Portals/{id}/members/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdMembersFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Update a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamMember</returns>
        public TeamMember PortalsIdMembersFkPut (string id, string fk, TeamMember data = null)
        {
             ApiResponse<TeamMember> localVarResponse = PortalsIdMembersFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        public ApiResponse< TeamMember > PortalsIdMembersFkPutWithHttpInfo (string id, string fk, TeamMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdMembersFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdMembersFkPut");

            var localVarPath = "/Portals/{id}/members/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdMembersFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Update a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamMember</returns>
        public async System.Threading.Tasks.Task<TeamMember> PortalsIdMembersFkPutAsync (string id, string fk, TeamMember data = null)
        {
             ApiResponse<TeamMember> localVarResponse = await PortalsIdMembersFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMember>> PortalsIdMembersFkPutAsyncWithHttpInfo (string id, string fk, TeamMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdMembersFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdMembersFkPut");

            var localVarPath = "/Portals/{id}/members/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdMembersFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Queries members of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;TeamMember&gt;</returns>
        public List<TeamMember> PortalsIdMembersGet (string id, string filter = null)
        {
             ApiResponse<List<TeamMember>> localVarResponse = PortalsIdMembersGetWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries members of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamMember&gt;</returns>
        public ApiResponse< List<TeamMember> > PortalsIdMembersGetWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdMembersGet");

            var localVarPath = "/Portals/{id}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TeamMember>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TeamMember>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamMember>)));
            
        }

        /// <summary>
        /// Queries members of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;TeamMember&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamMember>> PortalsIdMembersGetAsync (string id, string filter = null)
        {
             ApiResponse<List<TeamMember>> localVarResponse = await PortalsIdMembersGetAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries members of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamMember&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TeamMember>>> PortalsIdMembersGetAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdMembersGet");

            var localVarPath = "/Portals/{id}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TeamMember>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TeamMember>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamMember>)));
            
        }

        /// <summary>
        /// Creates a new instance in members of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamMember</returns>
        public TeamMember PortalsIdMembersPost (string id, TeamMember data = null)
        {
             ApiResponse<TeamMember> localVarResponse = PortalsIdMembersPostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in members of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        public ApiResponse< TeamMember > PortalsIdMembersPostWithHttpInfo (string id, TeamMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdMembersPost");

            var localVarPath = "/Portals/{id}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Creates a new instance in members of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamMember</returns>
        public async System.Threading.Tasks.Task<TeamMember> PortalsIdMembersPostAsync (string id, TeamMember data = null)
        {
             ApiResponse<TeamMember> localVarResponse = await PortalsIdMembersPostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in members of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMember>> PortalsIdMembersPostAsyncWithHttpInfo (string id, TeamMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdMembersPost");

            var localVarPath = "/Portals/{id}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Remove the members relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns></returns>
        public void PortalsIdMembersRelFkDelete (string id, string fk)
        {
             PortalsIdMembersRelFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Remove the members relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdMembersRelFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdMembersRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdMembersRelFkDelete");

            var localVarPath = "/Portals/{id}/members/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdMembersRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove the members relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdMembersRelFkDeleteAsync (string id, string fk)
        {
             await PortalsIdMembersRelFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Remove the members relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdMembersRelFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdMembersRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdMembersRelFkDelete");

            var localVarPath = "/Portals/{id}/members/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdMembersRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Check the existence of members relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>bool?</returns>
        public bool? PortalsIdMembersRelFkHead (string id, string fk)
        {
             ApiResponse<bool?> localVarResponse = PortalsIdMembersRelFkHeadWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check the existence of members relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > PortalsIdMembersRelFkHeadWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdMembersRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdMembersRelFkHead");

            var localVarPath = "/Portals/{id}/members/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdMembersRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Check the existence of members relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> PortalsIdMembersRelFkHeadAsync (string id, string fk)
        {
             ApiResponse<bool?> localVarResponse = await PortalsIdMembersRelFkHeadAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check the existence of members relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> PortalsIdMembersRelFkHeadAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdMembersRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdMembersRelFkHead");

            var localVarPath = "/Portals/{id}/members/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdMembersRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Add a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalMember</returns>
        public PortalMember PortalsIdMembersRelFkPut (string id, string fk, PortalMember data = null)
        {
             ApiResponse<PortalMember> localVarResponse = PortalsIdMembersRelFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalMember</returns>
        public ApiResponse< PortalMember > PortalsIdMembersRelFkPutWithHttpInfo (string id, string fk, PortalMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdMembersRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdMembersRelFkPut");

            var localVarPath = "/Portals/{id}/members/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdMembersRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalMember)));
            
        }

        /// <summary>
        /// Add a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalMember</returns>
        public async System.Threading.Tasks.Task<PortalMember> PortalsIdMembersRelFkPutAsync (string id, string fk, PortalMember data = null)
        {
             ApiResponse<PortalMember> localVarResponse = await PortalsIdMembersRelFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalMember>> PortalsIdMembersRelFkPutAsyncWithHttpInfo (string id, string fk, PortalMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdMembersRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdMembersRelFkPut");

            var localVarPath = "/Portals/{id}/members/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdMembersRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalMember)));
            
        }

        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Portal</returns>
        public Portal PortalsIdPatch (string id, Portal data = null)
        {
             ApiResponse<Portal> localVarResponse = PortalsIdPatchWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        public ApiResponse< Portal > PortalsIdPatchWithHttpInfo (string id, Portal data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdPatch");

            var localVarPath = "/Portals/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of Portal</returns>
        public async System.Threading.Tasks.Task<Portal> PortalsIdPatchAsync (string id, Portal data = null)
        {
             ApiResponse<Portal> localVarResponse = await PortalsIdPatchAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Portal>> PortalsIdPatchAsyncWithHttpInfo (string id, Portal data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdPatch");

            var localVarPath = "/Portals/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Deletes permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns></returns>
        public void PortalsIdPermissionDelete (string id)
        {
             PortalsIdPermissionDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdPermissionDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdPermissionDelete");

            var localVarPath = "/Portals/{id}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdPermissionDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdPermissionDeleteAsync (string id)
        {
             await PortalsIdPermissionDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdPermissionDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdPermissionDelete");

            var localVarPath = "/Portals/{id}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdPermissionDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Fetches hasOne relation permission. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>PortalPermissionSet</returns>
        public PortalPermissionSet PortalsIdPermissionGet (string id, bool? refresh = null)
        {
             ApiResponse<PortalPermissionSet> localVarResponse = PortalsIdPermissionGetWithHttpInfo(id, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches hasOne relation permission. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of PortalPermissionSet</returns>
        public ApiResponse< PortalPermissionSet > PortalsIdPermissionGetWithHttpInfo (string id, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdPermissionGet");

            var localVarPath = "/Portals/{id}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdPermissionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalPermissionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalPermissionSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalPermissionSet)));
            
        }

        /// <summary>
        /// Fetches hasOne relation permission. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of PortalPermissionSet</returns>
        public async System.Threading.Tasks.Task<PortalPermissionSet> PortalsIdPermissionGetAsync (string id, bool? refresh = null)
        {
             ApiResponse<PortalPermissionSet> localVarResponse = await PortalsIdPermissionGetAsyncWithHttpInfo(id, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches hasOne relation permission. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalPermissionSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalPermissionSet>> PortalsIdPermissionGetAsyncWithHttpInfo (string id, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdPermissionGet");

            var localVarPath = "/Portals/{id}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdPermissionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalPermissionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalPermissionSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalPermissionSet)));
            
        }

        /// <summary>
        /// Creates a new instance in permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalPermissionSet</returns>
        public PortalPermissionSet PortalsIdPermissionPost (string id, PortalPermissionSet data = null)
        {
             ApiResponse<PortalPermissionSet> localVarResponse = PortalsIdPermissionPostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalPermissionSet</returns>
        public ApiResponse< PortalPermissionSet > PortalsIdPermissionPostWithHttpInfo (string id, PortalPermissionSet data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdPermissionPost");

            var localVarPath = "/Portals/{id}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdPermissionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalPermissionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalPermissionSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalPermissionSet)));
            
        }

        /// <summary>
        /// Creates a new instance in permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalPermissionSet</returns>
        public async System.Threading.Tasks.Task<PortalPermissionSet> PortalsIdPermissionPostAsync (string id, PortalPermissionSet data = null)
        {
             ApiResponse<PortalPermissionSet> localVarResponse = await PortalsIdPermissionPostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalPermissionSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalPermissionSet>> PortalsIdPermissionPostAsyncWithHttpInfo (string id, PortalPermissionSet data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdPermissionPost");

            var localVarPath = "/Portals/{id}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdPermissionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalPermissionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalPermissionSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalPermissionSet)));
            
        }

        /// <summary>
        /// Update permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalPermissionSet</returns>
        public PortalPermissionSet PortalsIdPermissionPut (string id, PortalPermissionSet data = null)
        {
             ApiResponse<PortalPermissionSet> localVarResponse = PortalsIdPermissionPutWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalPermissionSet</returns>
        public ApiResponse< PortalPermissionSet > PortalsIdPermissionPutWithHttpInfo (string id, PortalPermissionSet data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdPermissionPut");

            var localVarPath = "/Portals/{id}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdPermissionPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalPermissionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalPermissionSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalPermissionSet)));
            
        }

        /// <summary>
        /// Update permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalPermissionSet</returns>
        public async System.Threading.Tasks.Task<PortalPermissionSet> PortalsIdPermissionPutAsync (string id, PortalPermissionSet data = null)
        {
             ApiResponse<PortalPermissionSet> localVarResponse = await PortalsIdPermissionPutAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalPermissionSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalPermissionSet>> PortalsIdPermissionPutAsyncWithHttpInfo (string id, PortalPermissionSet data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdPermissionPut");

            var localVarPath = "/Portals/{id}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdPermissionPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalPermissionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalPermissionSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalPermissionSet)));
            
        }

        /// <summary>
        /// Counts portalMembers of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 PortalsIdPortalMembersCountGet (string id, string where = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = PortalsIdPortalMembersCountGetWithHttpInfo(id, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts portalMembers of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > PortalsIdPortalMembersCountGetWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdPortalMembersCountGet");

            var localVarPath = "/Portals/{id}/portalMembers/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdPortalMembersCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Counts portalMembers of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> PortalsIdPortalMembersCountGetAsync (string id, string where = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await PortalsIdPortalMembersCountGetAsyncWithHttpInfo(id, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts portalMembers of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PortalsIdPortalMembersCountGetAsyncWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdPortalMembersCountGet");

            var localVarPath = "/Portals/{id}/portalMembers/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdPortalMembersCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Deletes all portalMembers of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns></returns>
        public void PortalsIdPortalMembersDelete (string id)
        {
             PortalsIdPortalMembersDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes all portalMembers of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdPortalMembersDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdPortalMembersDelete");

            var localVarPath = "/Portals/{id}/portalMembers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdPortalMembersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all portalMembers of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdPortalMembersDeleteAsync (string id)
        {
             await PortalsIdPortalMembersDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes all portalMembers of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdPortalMembersDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdPortalMembersDelete");

            var localVarPath = "/Portals/{id}/portalMembers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdPortalMembersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for portalMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for portalMembers</param>
        /// <returns></returns>
        public void PortalsIdPortalMembersFkDelete (string id, string fk)
        {
             PortalsIdPortalMembersFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Delete a related item by id for portalMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for portalMembers</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdPortalMembersFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdPortalMembersFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdPortalMembersFkDelete");

            var localVarPath = "/Portals/{id}/portalMembers/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdPortalMembersFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for portalMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for portalMembers</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdPortalMembersFkDeleteAsync (string id, string fk)
        {
             await PortalsIdPortalMembersFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Delete a related item by id for portalMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for portalMembers</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdPortalMembersFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdPortalMembersFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdPortalMembersFkDelete");

            var localVarPath = "/Portals/{id}/portalMembers/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdPortalMembersFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for portalMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for portalMembers</param>
        /// <returns>PortalMember</returns>
        public PortalMember PortalsIdPortalMembersFkGet (string id, string fk)
        {
             ApiResponse<PortalMember> localVarResponse = PortalsIdPortalMembersFkGetWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for portalMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for portalMembers</param>
        /// <returns>ApiResponse of PortalMember</returns>
        public ApiResponse< PortalMember > PortalsIdPortalMembersFkGetWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdPortalMembersFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdPortalMembersFkGet");

            var localVarPath = "/Portals/{id}/portalMembers/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdPortalMembersFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalMember)));
            
        }

        /// <summary>
        /// Find a related item by id for portalMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for portalMembers</param>
        /// <returns>Task of PortalMember</returns>
        public async System.Threading.Tasks.Task<PortalMember> PortalsIdPortalMembersFkGetAsync (string id, string fk)
        {
             ApiResponse<PortalMember> localVarResponse = await PortalsIdPortalMembersFkGetAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for portalMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for portalMembers</param>
        /// <returns>Task of ApiResponse (PortalMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalMember>> PortalsIdPortalMembersFkGetAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdPortalMembersFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdPortalMembersFkGet");

            var localVarPath = "/Portals/{id}/portalMembers/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdPortalMembersFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalMember)));
            
        }

        /// <summary>
        /// Update a related item by id for portalMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for portalMembers</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalMember</returns>
        public PortalMember PortalsIdPortalMembersFkPut (string id, string fk, PortalMember data = null)
        {
             ApiResponse<PortalMember> localVarResponse = PortalsIdPortalMembersFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for portalMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for portalMembers</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalMember</returns>
        public ApiResponse< PortalMember > PortalsIdPortalMembersFkPutWithHttpInfo (string id, string fk, PortalMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdPortalMembersFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdPortalMembersFkPut");

            var localVarPath = "/Portals/{id}/portalMembers/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdPortalMembersFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalMember)));
            
        }

        /// <summary>
        /// Update a related item by id for portalMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for portalMembers</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalMember</returns>
        public async System.Threading.Tasks.Task<PortalMember> PortalsIdPortalMembersFkPutAsync (string id, string fk, PortalMember data = null)
        {
             ApiResponse<PortalMember> localVarResponse = await PortalsIdPortalMembersFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for portalMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for portalMembers</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalMember>> PortalsIdPortalMembersFkPutAsyncWithHttpInfo (string id, string fk, PortalMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdPortalMembersFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdPortalMembersFkPut");

            var localVarPath = "/Portals/{id}/portalMembers/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdPortalMembersFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalMember)));
            
        }

        /// <summary>
        /// Queries portalMembers of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;PortalMember&gt;</returns>
        public List<PortalMember> PortalsIdPortalMembersGet (string id, string filter = null)
        {
             ApiResponse<List<PortalMember>> localVarResponse = PortalsIdPortalMembersGetWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries portalMembers of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;PortalMember&gt;</returns>
        public ApiResponse< List<PortalMember> > PortalsIdPortalMembersGetWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdPortalMembersGet");

            var localVarPath = "/Portals/{id}/portalMembers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdPortalMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PortalMember>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PortalMember>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PortalMember>)));
            
        }

        /// <summary>
        /// Queries portalMembers of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;PortalMember&gt;</returns>
        public async System.Threading.Tasks.Task<List<PortalMember>> PortalsIdPortalMembersGetAsync (string id, string filter = null)
        {
             ApiResponse<List<PortalMember>> localVarResponse = await PortalsIdPortalMembersGetAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries portalMembers of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PortalMember&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PortalMember>>> PortalsIdPortalMembersGetAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdPortalMembersGet");

            var localVarPath = "/Portals/{id}/portalMembers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdPortalMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PortalMember>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PortalMember>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PortalMember>)));
            
        }

        /// <summary>
        /// Creates a new instance in portalMembers of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalMember</returns>
        public PortalMember PortalsIdPortalMembersPost (string id, PortalMember data = null)
        {
             ApiResponse<PortalMember> localVarResponse = PortalsIdPortalMembersPostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in portalMembers of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalMember</returns>
        public ApiResponse< PortalMember > PortalsIdPortalMembersPostWithHttpInfo (string id, PortalMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdPortalMembersPost");

            var localVarPath = "/Portals/{id}/portalMembers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdPortalMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalMember)));
            
        }

        /// <summary>
        /// Creates a new instance in portalMembers of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalMember</returns>
        public async System.Threading.Tasks.Task<PortalMember> PortalsIdPortalMembersPostAsync (string id, PortalMember data = null)
        {
             ApiResponse<PortalMember> localVarResponse = await PortalsIdPortalMembersPostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in portalMembers of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalMember>> PortalsIdPortalMembersPostAsyncWithHttpInfo (string id, PortalMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdPortalMembersPost");

            var localVarPath = "/Portals/{id}/portalMembers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdPortalMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalMember)));
            
        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Portal</returns>
        public Portal PortalsIdPut (string id, Portal data = null)
        {
             ApiResponse<Portal> localVarResponse = PortalsIdPutWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        public ApiResponse< Portal > PortalsIdPutWithHttpInfo (string id, Portal data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdPut");

            var localVarPath = "/Portals/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of Portal</returns>
        public async System.Threading.Tasks.Task<Portal> PortalsIdPutAsync (string id, Portal data = null)
        {
             ApiResponse<Portal> localVarResponse = await PortalsIdPutAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Portal>> PortalsIdPutAsyncWithHttpInfo (string id, Portal data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdPut");

            var localVarPath = "/Portals/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Portal</returns>
        public Portal PortalsIdReplacePost (string id, Portal data = null)
        {
             ApiResponse<Portal> localVarResponse = PortalsIdReplacePostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        public ApiResponse< Portal > PortalsIdReplacePostWithHttpInfo (string id, Portal data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdReplacePost");

            var localVarPath = "/Portals/{id}/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdReplacePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of Portal</returns>
        public async System.Threading.Tasks.Task<Portal> PortalsIdReplacePostAsync (string id, Portal data = null)
        {
             ApiResponse<Portal> localVarResponse = await PortalsIdReplacePostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Portal>> PortalsIdReplacePostAsyncWithHttpInfo (string id, Portal data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdReplacePost");

            var localVarPath = "/Portals/{id}/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdReplacePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Team</returns>
        public Team PortalsIdTeamGet (string id, bool? refresh = null)
        {
             ApiResponse<Team> localVarResponse = PortalsIdTeamGetWithHttpInfo(id, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches belongsTo relation team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of Team</returns>
        public ApiResponse< Team > PortalsIdTeamGetWithHttpInfo (string id, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTeamGet");

            var localVarPath = "/Portals/{id}/team";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTeamGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Team) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> PortalsIdTeamGetAsync (string id, bool? refresh = null)
        {
             ApiResponse<Team> localVarResponse = await PortalsIdTeamGetAsyncWithHttpInfo(id, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches belongsTo relation team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Team>> PortalsIdTeamGetAsyncWithHttpInfo (string id, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTeamGet");

            var localVarPath = "/Portals/{id}/team";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTeamGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Team) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
            
        }

        /// <summary>
        /// Counts templateFolders of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 PortalsIdTemplateFoldersCountGet (string id, string where = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = PortalsIdTemplateFoldersCountGetWithHttpInfo(id, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts templateFolders of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > PortalsIdTemplateFoldersCountGetWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateFoldersCountGet");

            var localVarPath = "/Portals/{id}/templateFolders/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateFoldersCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Counts templateFolders of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> PortalsIdTemplateFoldersCountGetAsync (string id, string where = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await PortalsIdTemplateFoldersCountGetAsyncWithHttpInfo(id, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts templateFolders of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PortalsIdTemplateFoldersCountGetAsyncWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateFoldersCountGet");

            var localVarPath = "/Portals/{id}/templateFolders/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateFoldersCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Deletes all templateFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns></returns>
        public void PortalsIdTemplateFoldersDelete (string id)
        {
             PortalsIdTemplateFoldersDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes all templateFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdTemplateFoldersDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateFoldersDelete");

            var localVarPath = "/Portals/{id}/templateFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateFoldersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all templateFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdTemplateFoldersDeleteAsync (string id)
        {
             await PortalsIdTemplateFoldersDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes all templateFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdTemplateFoldersDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateFoldersDelete");

            var localVarPath = "/Portals/{id}/templateFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateFoldersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for templateFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns></returns>
        public void PortalsIdTemplateFoldersFkDelete (string id, string fk)
        {
             PortalsIdTemplateFoldersFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Delete a related item by id for templateFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdTemplateFoldersFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateFoldersFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplateFoldersFkDelete");

            var localVarPath = "/Portals/{id}/templateFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateFoldersFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for templateFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdTemplateFoldersFkDeleteAsync (string id, string fk)
        {
             await PortalsIdTemplateFoldersFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Delete a related item by id for templateFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdTemplateFoldersFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateFoldersFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplateFoldersFkDelete");

            var localVarPath = "/Portals/{id}/templateFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateFoldersFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for templateFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns>PortalTemplateFolder</returns>
        public PortalTemplateFolder PortalsIdTemplateFoldersFkGet (string id, string fk)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = PortalsIdTemplateFoldersFkGetWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for templateFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        public ApiResponse< PortalTemplateFolder > PortalsIdTemplateFoldersFkGetWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateFoldersFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplateFoldersFkGet");

            var localVarPath = "/Portals/{id}/templateFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateFoldersFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Find a related item by id for templateFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        public async System.Threading.Tasks.Task<PortalTemplateFolder> PortalsIdTemplateFoldersFkGetAsync (string id, string fk)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = await PortalsIdTemplateFoldersFkGetAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for templateFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalsIdTemplateFoldersFkGetAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateFoldersFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplateFoldersFkGet");

            var localVarPath = "/Portals/{id}/templateFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateFoldersFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Update a related item by id for templateFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        public PortalTemplateFolder PortalsIdTemplateFoldersFkPut (string id, string fk, PortalTemplateFolder data = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = PortalsIdTemplateFoldersFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for templateFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        public ApiResponse< PortalTemplateFolder > PortalsIdTemplateFoldersFkPutWithHttpInfo (string id, string fk, PortalTemplateFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateFoldersFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplateFoldersFkPut");

            var localVarPath = "/Portals/{id}/templateFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateFoldersFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Update a related item by id for templateFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        public async System.Threading.Tasks.Task<PortalTemplateFolder> PortalsIdTemplateFoldersFkPutAsync (string id, string fk, PortalTemplateFolder data = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = await PortalsIdTemplateFoldersFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for templateFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalsIdTemplateFoldersFkPutAsyncWithHttpInfo (string id, string fk, PortalTemplateFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateFoldersFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplateFoldersFkPut");

            var localVarPath = "/Portals/{id}/templateFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateFoldersFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Queries templateFolders of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;PortalTemplateFolder&gt;</returns>
        public List<PortalTemplateFolder> PortalsIdTemplateFoldersGet (string id, string filter = null)
        {
             ApiResponse<List<PortalTemplateFolder>> localVarResponse = PortalsIdTemplateFoldersGetWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries templateFolders of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;PortalTemplateFolder&gt;</returns>
        public ApiResponse< List<PortalTemplateFolder> > PortalsIdTemplateFoldersGetWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateFoldersGet");

            var localVarPath = "/Portals/{id}/templateFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateFoldersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PortalTemplateFolder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PortalTemplateFolder>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PortalTemplateFolder>)));
            
        }

        /// <summary>
        /// Queries templateFolders of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;PortalTemplateFolder&gt;</returns>
        public async System.Threading.Tasks.Task<List<PortalTemplateFolder>> PortalsIdTemplateFoldersGetAsync (string id, string filter = null)
        {
             ApiResponse<List<PortalTemplateFolder>> localVarResponse = await PortalsIdTemplateFoldersGetAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries templateFolders of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PortalTemplateFolder&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PortalTemplateFolder>>> PortalsIdTemplateFoldersGetAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateFoldersGet");

            var localVarPath = "/Portals/{id}/templateFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateFoldersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PortalTemplateFolder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PortalTemplateFolder>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PortalTemplateFolder>)));
            
        }

        /// <summary>
        /// Unlink folder with Template and Portal 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="nk">PortalTemplateFolder id</param>
        /// <param name="fk">Template id</param>
        /// <returns>PortalTemplate</returns>
        public PortalTemplate PortalsIdTemplateFoldersNkTemplatesFkRelDelete (string id, string id2, string nk, string fk)
        {
             ApiResponse<PortalTemplate> localVarResponse = PortalsIdTemplateFoldersNkTemplatesFkRelDeleteWithHttpInfo(id, id2, nk, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unlink folder with Template and Portal 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="nk">PortalTemplateFolder id</param>
        /// <param name="fk">Template id</param>
        /// <returns>ApiResponse of PortalTemplate</returns>
        public ApiResponse< PortalTemplate > PortalsIdTemplateFoldersNkTemplatesFkRelDeleteWithHttpInfo (string id, string id2, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateFoldersNkTemplatesFkRelDelete");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling PortalApi->PortalsIdTemplateFoldersNkTemplatesFkRelDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdTemplateFoldersNkTemplatesFkRelDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplateFoldersNkTemplatesFkRelDelete");

            var localVarPath = "/Portals/{id}/templateFolders/{nk}/templates/{fk}/rel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateFoldersNkTemplatesFkRelDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplate)));
            
        }

        /// <summary>
        /// Unlink folder with Template and Portal 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="nk">PortalTemplateFolder id</param>
        /// <param name="fk">Template id</param>
        /// <returns>Task of PortalTemplate</returns>
        public async System.Threading.Tasks.Task<PortalTemplate> PortalsIdTemplateFoldersNkTemplatesFkRelDeleteAsync (string id, string id2, string nk, string fk)
        {
             ApiResponse<PortalTemplate> localVarResponse = await PortalsIdTemplateFoldersNkTemplatesFkRelDeleteAsyncWithHttpInfo(id, id2, nk, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unlink folder with Template and Portal 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="nk">PortalTemplateFolder id</param>
        /// <param name="fk">Template id</param>
        /// <returns>Task of ApiResponse (PortalTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalTemplate>> PortalsIdTemplateFoldersNkTemplatesFkRelDeleteAsyncWithHttpInfo (string id, string id2, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateFoldersNkTemplatesFkRelDelete");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling PortalApi->PortalsIdTemplateFoldersNkTemplatesFkRelDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdTemplateFoldersNkTemplatesFkRelDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplateFoldersNkTemplatesFkRelDelete");

            var localVarPath = "/Portals/{id}/templateFolders/{nk}/templates/{fk}/rel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateFoldersNkTemplatesFkRelDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplate)));
            
        }

        /// <summary>
        /// Link folder with Template and Portal 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="nk">PortalTemplateFolder id</param>
        /// <param name="fk">Template id</param>
        /// <returns>PortalTemplate</returns>
        public PortalTemplate PortalsIdTemplateFoldersNkTemplatesFkRelPut (string id, string id2, string nk, string fk)
        {
             ApiResponse<PortalTemplate> localVarResponse = PortalsIdTemplateFoldersNkTemplatesFkRelPutWithHttpInfo(id, id2, nk, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Link folder with Template and Portal 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="nk">PortalTemplateFolder id</param>
        /// <param name="fk">Template id</param>
        /// <returns>ApiResponse of PortalTemplate</returns>
        public ApiResponse< PortalTemplate > PortalsIdTemplateFoldersNkTemplatesFkRelPutWithHttpInfo (string id, string id2, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateFoldersNkTemplatesFkRelPut");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling PortalApi->PortalsIdTemplateFoldersNkTemplatesFkRelPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdTemplateFoldersNkTemplatesFkRelPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplateFoldersNkTemplatesFkRelPut");

            var localVarPath = "/Portals/{id}/templateFolders/{nk}/templates/{fk}/rel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateFoldersNkTemplatesFkRelPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplate)));
            
        }

        /// <summary>
        /// Link folder with Template and Portal 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="nk">PortalTemplateFolder id</param>
        /// <param name="fk">Template id</param>
        /// <returns>Task of PortalTemplate</returns>
        public async System.Threading.Tasks.Task<PortalTemplate> PortalsIdTemplateFoldersNkTemplatesFkRelPutAsync (string id, string id2, string nk, string fk)
        {
             ApiResponse<PortalTemplate> localVarResponse = await PortalsIdTemplateFoldersNkTemplatesFkRelPutAsyncWithHttpInfo(id, id2, nk, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Link folder with Template and Portal 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="nk">PortalTemplateFolder id</param>
        /// <param name="fk">Template id</param>
        /// <returns>Task of ApiResponse (PortalTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalTemplate>> PortalsIdTemplateFoldersNkTemplatesFkRelPutAsyncWithHttpInfo (string id, string id2, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateFoldersNkTemplatesFkRelPut");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling PortalApi->PortalsIdTemplateFoldersNkTemplatesFkRelPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling PortalApi->PortalsIdTemplateFoldersNkTemplatesFkRelPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplateFoldersNkTemplatesFkRelPut");

            var localVarPath = "/Portals/{id}/templateFolders/{nk}/templates/{fk}/rel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateFoldersNkTemplatesFkRelPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplate)));
            
        }

        /// <summary>
        /// Creates a new instance in templateFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        public PortalTemplateFolder PortalsIdTemplateFoldersPost (string id, PortalTemplateFolder data = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = PortalsIdTemplateFoldersPostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in templateFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        public ApiResponse< PortalTemplateFolder > PortalsIdTemplateFoldersPostWithHttpInfo (string id, PortalTemplateFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateFoldersPost");

            var localVarPath = "/Portals/{id}/templateFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateFoldersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Creates a new instance in templateFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        public async System.Threading.Tasks.Task<PortalTemplateFolder> PortalsIdTemplateFoldersPostAsync (string id, PortalTemplateFolder data = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = await PortalsIdTemplateFoldersPostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in templateFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalsIdTemplateFoldersPostAsyncWithHttpInfo (string id, PortalTemplateFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateFoldersPost");

            var localVarPath = "/Portals/{id}/templateFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateFoldersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// List templates on root folder 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="filter">Only include changes that match this filter (optional)</param>
        /// <returns>List&lt;PortalTemplate&gt;</returns>
        public List<PortalTemplate> PortalsIdTemplateFoldersRootTemplatesGet (string id, string id2, string filter = null)
        {
             ApiResponse<List<PortalTemplate>> localVarResponse = PortalsIdTemplateFoldersRootTemplatesGetWithHttpInfo(id, id2, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List templates on root folder 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="filter">Only include changes that match this filter (optional)</param>
        /// <returns>ApiResponse of List&lt;PortalTemplate&gt;</returns>
        public ApiResponse< List<PortalTemplate> > PortalsIdTemplateFoldersRootTemplatesGetWithHttpInfo (string id, string id2, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateFoldersRootTemplatesGet");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling PortalApi->PortalsIdTemplateFoldersRootTemplatesGet");

            var localVarPath = "/Portals/{id}/templateFolders/root/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateFoldersRootTemplatesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PortalTemplate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PortalTemplate>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PortalTemplate>)));
            
        }

        /// <summary>
        /// List templates on root folder 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="filter">Only include changes that match this filter (optional)</param>
        /// <returns>Task of List&lt;PortalTemplate&gt;</returns>
        public async System.Threading.Tasks.Task<List<PortalTemplate>> PortalsIdTemplateFoldersRootTemplatesGetAsync (string id, string id2, string filter = null)
        {
             ApiResponse<List<PortalTemplate>> localVarResponse = await PortalsIdTemplateFoldersRootTemplatesGetAsyncWithHttpInfo(id, id2, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List templates on root folder 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2">Portal id</param>
        /// <param name="filter">Only include changes that match this filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PortalTemplate&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PortalTemplate>>> PortalsIdTemplateFoldersRootTemplatesGetAsyncWithHttpInfo (string id, string id2, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateFoldersRootTemplatesGet");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling PortalApi->PortalsIdTemplateFoldersRootTemplatesGet");

            var localVarPath = "/Portals/{id}/templateFolders/root/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateFoldersRootTemplatesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PortalTemplate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PortalTemplate>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PortalTemplate>)));
            
        }

        /// <summary>
        /// Counts templateRels of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 PortalsIdTemplateRelsCountGet (string id, string where = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = PortalsIdTemplateRelsCountGetWithHttpInfo(id, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts templateRels of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > PortalsIdTemplateRelsCountGetWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateRelsCountGet");

            var localVarPath = "/Portals/{id}/templateRels/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateRelsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Counts templateRels of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> PortalsIdTemplateRelsCountGetAsync (string id, string where = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await PortalsIdTemplateRelsCountGetAsyncWithHttpInfo(id, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts templateRels of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PortalsIdTemplateRelsCountGetAsyncWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateRelsCountGet");

            var localVarPath = "/Portals/{id}/templateRels/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateRelsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Deletes all templateRels of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns></returns>
        public void PortalsIdTemplateRelsDelete (string id)
        {
             PortalsIdTemplateRelsDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes all templateRels of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdTemplateRelsDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateRelsDelete");

            var localVarPath = "/Portals/{id}/templateRels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateRelsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all templateRels of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdTemplateRelsDeleteAsync (string id)
        {
             await PortalsIdTemplateRelsDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes all templateRels of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdTemplateRelsDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateRelsDelete");

            var localVarPath = "/Portals/{id}/templateRels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateRelsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for templateRels. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateRels</param>
        /// <returns></returns>
        public void PortalsIdTemplateRelsFkDelete (string id, string fk)
        {
             PortalsIdTemplateRelsFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Delete a related item by id for templateRels. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateRels</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdTemplateRelsFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateRelsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplateRelsFkDelete");

            var localVarPath = "/Portals/{id}/templateRels/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateRelsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for templateRels. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateRels</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdTemplateRelsFkDeleteAsync (string id, string fk)
        {
             await PortalsIdTemplateRelsFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Delete a related item by id for templateRels. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateRels</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdTemplateRelsFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateRelsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplateRelsFkDelete");

            var localVarPath = "/Portals/{id}/templateRels/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateRelsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for templateRels. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateRels</param>
        /// <returns>PortalTemplate</returns>
        public PortalTemplate PortalsIdTemplateRelsFkGet (string id, string fk)
        {
             ApiResponse<PortalTemplate> localVarResponse = PortalsIdTemplateRelsFkGetWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for templateRels. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateRels</param>
        /// <returns>ApiResponse of PortalTemplate</returns>
        public ApiResponse< PortalTemplate > PortalsIdTemplateRelsFkGetWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateRelsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplateRelsFkGet");

            var localVarPath = "/Portals/{id}/templateRels/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateRelsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplate)));
            
        }

        /// <summary>
        /// Find a related item by id for templateRels. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateRels</param>
        /// <returns>Task of PortalTemplate</returns>
        public async System.Threading.Tasks.Task<PortalTemplate> PortalsIdTemplateRelsFkGetAsync (string id, string fk)
        {
             ApiResponse<PortalTemplate> localVarResponse = await PortalsIdTemplateRelsFkGetAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for templateRels. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateRels</param>
        /// <returns>Task of ApiResponse (PortalTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalTemplate>> PortalsIdTemplateRelsFkGetAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateRelsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplateRelsFkGet");

            var localVarPath = "/Portals/{id}/templateRels/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateRelsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplate)));
            
        }

        /// <summary>
        /// Update a related item by id for templateRels. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateRels</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalTemplate</returns>
        public PortalTemplate PortalsIdTemplateRelsFkPut (string id, string fk, PortalTemplate data = null)
        {
             ApiResponse<PortalTemplate> localVarResponse = PortalsIdTemplateRelsFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for templateRels. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateRels</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalTemplate</returns>
        public ApiResponse< PortalTemplate > PortalsIdTemplateRelsFkPutWithHttpInfo (string id, string fk, PortalTemplate data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateRelsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplateRelsFkPut");

            var localVarPath = "/Portals/{id}/templateRels/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateRelsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplate)));
            
        }

        /// <summary>
        /// Update a related item by id for templateRels. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateRels</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalTemplate</returns>
        public async System.Threading.Tasks.Task<PortalTemplate> PortalsIdTemplateRelsFkPutAsync (string id, string fk, PortalTemplate data = null)
        {
             ApiResponse<PortalTemplate> localVarResponse = await PortalsIdTemplateRelsFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for templateRels. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templateRels</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalTemplate>> PortalsIdTemplateRelsFkPutAsyncWithHttpInfo (string id, string fk, PortalTemplate data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateRelsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplateRelsFkPut");

            var localVarPath = "/Portals/{id}/templateRels/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateRelsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplate)));
            
        }

        /// <summary>
        /// Queries templateRels of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;PortalTemplate&gt;</returns>
        public List<PortalTemplate> PortalsIdTemplateRelsGet (string id, string filter = null)
        {
             ApiResponse<List<PortalTemplate>> localVarResponse = PortalsIdTemplateRelsGetWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries templateRels of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;PortalTemplate&gt;</returns>
        public ApiResponse< List<PortalTemplate> > PortalsIdTemplateRelsGetWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateRelsGet");

            var localVarPath = "/Portals/{id}/templateRels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateRelsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PortalTemplate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PortalTemplate>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PortalTemplate>)));
            
        }

        /// <summary>
        /// Queries templateRels of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;PortalTemplate&gt;</returns>
        public async System.Threading.Tasks.Task<List<PortalTemplate>> PortalsIdTemplateRelsGetAsync (string id, string filter = null)
        {
             ApiResponse<List<PortalTemplate>> localVarResponse = await PortalsIdTemplateRelsGetAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries templateRels of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PortalTemplate&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PortalTemplate>>> PortalsIdTemplateRelsGetAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateRelsGet");

            var localVarPath = "/Portals/{id}/templateRels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateRelsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PortalTemplate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PortalTemplate>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PortalTemplate>)));
            
        }

        /// <summary>
        /// Creates a new instance in templateRels of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalTemplate</returns>
        public PortalTemplate PortalsIdTemplateRelsPost (string id, PortalTemplate data = null)
        {
             ApiResponse<PortalTemplate> localVarResponse = PortalsIdTemplateRelsPostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in templateRels of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalTemplate</returns>
        public ApiResponse< PortalTemplate > PortalsIdTemplateRelsPostWithHttpInfo (string id, PortalTemplate data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateRelsPost");

            var localVarPath = "/Portals/{id}/templateRels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateRelsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplate)));
            
        }

        /// <summary>
        /// Creates a new instance in templateRels of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalTemplate</returns>
        public async System.Threading.Tasks.Task<PortalTemplate> PortalsIdTemplateRelsPostAsync (string id, PortalTemplate data = null)
        {
             ApiResponse<PortalTemplate> localVarResponse = await PortalsIdTemplateRelsPostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in templateRels of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalTemplate>> PortalsIdTemplateRelsPostAsyncWithHttpInfo (string id, PortalTemplate data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplateRelsPost");

            var localVarPath = "/Portals/{id}/templateRels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplateRelsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplate)));
            
        }

        /// <summary>
        /// Counts templates of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 PortalsIdTemplatesCountGet (string id, string where = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = PortalsIdTemplatesCountGetWithHttpInfo(id, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts templates of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > PortalsIdTemplatesCountGetWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplatesCountGet");

            var localVarPath = "/Portals/{id}/templates/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplatesCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Counts templates of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> PortalsIdTemplatesCountGetAsync (string id, string where = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await PortalsIdTemplatesCountGetAsyncWithHttpInfo(id, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts templates of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PortalsIdTemplatesCountGetAsyncWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplatesCountGet");

            var localVarPath = "/Portals/{id}/templates/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplatesCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Deletes all templates of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns></returns>
        public void PortalsIdTemplatesDelete (string id)
        {
             PortalsIdTemplatesDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes all templates of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdTemplatesDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplatesDelete");

            var localVarPath = "/Portals/{id}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplatesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all templates of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdTemplatesDeleteAsync (string id)
        {
             await PortalsIdTemplatesDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes all templates of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdTemplatesDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplatesDelete");

            var localVarPath = "/Portals/{id}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplatesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns></returns>
        public void PortalsIdTemplatesFkDelete (string id, string fk)
        {
             PortalsIdTemplatesFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Delete a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdTemplatesFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplatesFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplatesFkDelete");

            var localVarPath = "/Portals/{id}/templates/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplatesFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdTemplatesFkDeleteAsync (string id, string fk)
        {
             await PortalsIdTemplatesFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Delete a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdTemplatesFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplatesFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplatesFkDelete");

            var localVarPath = "/Portals/{id}/templates/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplatesFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Generate Design from Template 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2"></param>
        /// <param name="fk"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>List&lt;Design&gt;</returns>
        public List<Design> PortalsIdTemplatesFkDesignsGenerateBulkPost (string id, string id2, string fk, List<Object> data = null)
        {
             ApiResponse<List<Design>> localVarResponse = PortalsIdTemplatesFkDesignsGenerateBulkPostWithHttpInfo(id, id2, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Design from Template 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2"></param>
        /// <param name="fk"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Design&gt;</returns>
        public ApiResponse< List<Design> > PortalsIdTemplatesFkDesignsGenerateBulkPostWithHttpInfo (string id, string id2, string fk, List<Object> data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplatesFkDesignsGenerateBulkPost");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling PortalApi->PortalsIdTemplatesFkDesignsGenerateBulkPost");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplatesFkDesignsGenerateBulkPost");

            var localVarPath = "/Portals/{id}/templates/{fk}/designs/generate/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplatesFkDesignsGenerateBulkPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Design>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Design>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Design>)));
            
        }

        /// <summary>
        /// Generate Design from Template 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2"></param>
        /// <param name="fk"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of List&lt;Design&gt;</returns>
        public async System.Threading.Tasks.Task<List<Design>> PortalsIdTemplatesFkDesignsGenerateBulkPostAsync (string id, string id2, string fk, List<Object> data = null)
        {
             ApiResponse<List<Design>> localVarResponse = await PortalsIdTemplatesFkDesignsGenerateBulkPostAsyncWithHttpInfo(id, id2, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate Design from Template 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2"></param>
        /// <param name="fk"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Design&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Design>>> PortalsIdTemplatesFkDesignsGenerateBulkPostAsyncWithHttpInfo (string id, string id2, string fk, List<Object> data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplatesFkDesignsGenerateBulkPost");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling PortalApi->PortalsIdTemplatesFkDesignsGenerateBulkPost");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplatesFkDesignsGenerateBulkPost");

            var localVarPath = "/Portals/{id}/templates/{fk}/designs/generate/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplatesFkDesignsGenerateBulkPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Design>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Design>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Design>)));
            
        }

        /// <summary>
        /// Generate Design from Template 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2"></param>
        /// <param name="fk"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>Design</returns>
        public Design PortalsIdTemplatesFkDesignsGeneratePost (string id, string id2, string fk, Portal data = null)
        {
             ApiResponse<Design> localVarResponse = PortalsIdTemplatesFkDesignsGeneratePostWithHttpInfo(id, id2, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Design from Template 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2"></param>
        /// <param name="fk"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Design</returns>
        public ApiResponse< Design > PortalsIdTemplatesFkDesignsGeneratePostWithHttpInfo (string id, string id2, string fk, Portal data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplatesFkDesignsGeneratePost");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling PortalApi->PortalsIdTemplatesFkDesignsGeneratePost");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplatesFkDesignsGeneratePost");

            var localVarPath = "/Portals/{id}/templates/{fk}/designs/generate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplatesFkDesignsGeneratePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Design>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Design) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Design)));
            
        }

        /// <summary>
        /// Generate Design from Template 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2"></param>
        /// <param name="fk"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Design</returns>
        public async System.Threading.Tasks.Task<Design> PortalsIdTemplatesFkDesignsGeneratePostAsync (string id, string id2, string fk, Portal data = null)
        {
             ApiResponse<Design> localVarResponse = await PortalsIdTemplatesFkDesignsGeneratePostAsyncWithHttpInfo(id, id2, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate Design from Template 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="id2"></param>
        /// <param name="fk"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Design)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Design>> PortalsIdTemplatesFkDesignsGeneratePostAsyncWithHttpInfo (string id, string id2, string fk, Portal data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplatesFkDesignsGeneratePost");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling PortalApi->PortalsIdTemplatesFkDesignsGeneratePost");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplatesFkDesignsGeneratePost");

            var localVarPath = "/Portals/{id}/templates/{fk}/designs/generate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplatesFkDesignsGeneratePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Design>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Design) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Design)));
            
        }

        /// <summary>
        /// Find a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Template</returns>
        public Template PortalsIdTemplatesFkGet (string id, string fk)
        {
             ApiResponse<Template> localVarResponse = PortalsIdTemplatesFkGetWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse< Template > PortalsIdTemplatesFkGetWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplatesFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplatesFkGet");

            var localVarPath = "/Portals/{id}/templates/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplatesFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Find a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> PortalsIdTemplatesFkGetAsync (string id, string fk)
        {
             ApiResponse<Template> localVarResponse = await PortalsIdTemplatesFkGetAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template>> PortalsIdTemplatesFkGetAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplatesFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplatesFkGet");

            var localVarPath = "/Portals/{id}/templates/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplatesFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Update a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Template</returns>
        public Template PortalsIdTemplatesFkPut (string id, string fk, Template data = null)
        {
             ApiResponse<Template> localVarResponse = PortalsIdTemplatesFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse< Template > PortalsIdTemplatesFkPutWithHttpInfo (string id, string fk, Template data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplatesFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplatesFkPut");

            var localVarPath = "/Portals/{id}/templates/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplatesFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Update a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> PortalsIdTemplatesFkPutAsync (string id, string fk, Template data = null)
        {
             ApiResponse<Template> localVarResponse = await PortalsIdTemplatesFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template>> PortalsIdTemplatesFkPutAsyncWithHttpInfo (string id, string fk, Template data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplatesFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplatesFkPut");

            var localVarPath = "/Portals/{id}/templates/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplatesFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Queries templates of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;Template&gt;</returns>
        public List<Template> PortalsIdTemplatesGet (string id, string filter = null)
        {
             ApiResponse<List<Template>> localVarResponse = PortalsIdTemplatesGetWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries templates of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Template&gt;</returns>
        public ApiResponse< List<Template> > PortalsIdTemplatesGetWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplatesGet");

            var localVarPath = "/Portals/{id}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplatesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Template>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Template>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Template>)));
            
        }

        /// <summary>
        /// Queries templates of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;Template&gt;</returns>
        public async System.Threading.Tasks.Task<List<Template>> PortalsIdTemplatesGetAsync (string id, string filter = null)
        {
             ApiResponse<List<Template>> localVarResponse = await PortalsIdTemplatesGetAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries templates of Portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Template&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Template>>> PortalsIdTemplatesGetAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplatesGet");

            var localVarPath = "/Portals/{id}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplatesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Template>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Template>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Template>)));
            
        }

        /// <summary>
        /// Creates a new instance in templates of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Template</returns>
        public Template PortalsIdTemplatesPost (string id, Template data = null)
        {
             ApiResponse<Template> localVarResponse = PortalsIdTemplatesPostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in templates of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse< Template > PortalsIdTemplatesPostWithHttpInfo (string id, Template data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplatesPost");

            var localVarPath = "/Portals/{id}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplatesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Creates a new instance in templates of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> PortalsIdTemplatesPostAsync (string id, Template data = null)
        {
             ApiResponse<Template> localVarResponse = await PortalsIdTemplatesPostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in templates of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template>> PortalsIdTemplatesPostAsyncWithHttpInfo (string id, Template data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplatesPost");

            var localVarPath = "/Portals/{id}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplatesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Remove the templates relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns></returns>
        public void PortalsIdTemplatesRelFkDelete (string id, string fk)
        {
             PortalsIdTemplatesRelFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Remove the templates relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalsIdTemplatesRelFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplatesRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplatesRelFkDelete");

            var localVarPath = "/Portals/{id}/templates/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplatesRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove the templates relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalsIdTemplatesRelFkDeleteAsync (string id, string fk)
        {
             await PortalsIdTemplatesRelFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Remove the templates relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalsIdTemplatesRelFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplatesRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplatesRelFkDelete");

            var localVarPath = "/Portals/{id}/templates/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplatesRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Check the existence of templates relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>bool?</returns>
        public bool? PortalsIdTemplatesRelFkHead (string id, string fk)
        {
             ApiResponse<bool?> localVarResponse = PortalsIdTemplatesRelFkHeadWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check the existence of templates relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > PortalsIdTemplatesRelFkHeadWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplatesRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplatesRelFkHead");

            var localVarPath = "/Portals/{id}/templates/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplatesRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Check the existence of templates relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> PortalsIdTemplatesRelFkHeadAsync (string id, string fk)
        {
             ApiResponse<bool?> localVarResponse = await PortalsIdTemplatesRelFkHeadAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check the existence of templates relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> PortalsIdTemplatesRelFkHeadAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplatesRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplatesRelFkHead");

            var localVarPath = "/Portals/{id}/templates/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplatesRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Add a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalTemplate</returns>
        public PortalTemplate PortalsIdTemplatesRelFkPut (string id, string fk, PortalTemplate data = null)
        {
             ApiResponse<PortalTemplate> localVarResponse = PortalsIdTemplatesRelFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalTemplate</returns>
        public ApiResponse< PortalTemplate > PortalsIdTemplatesRelFkPutWithHttpInfo (string id, string fk, PortalTemplate data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplatesRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplatesRelFkPut");

            var localVarPath = "/Portals/{id}/templates/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplatesRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplate)));
            
        }

        /// <summary>
        /// Add a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalTemplate</returns>
        public async System.Threading.Tasks.Task<PortalTemplate> PortalsIdTemplatesRelFkPutAsync (string id, string fk, PortalTemplate data = null)
        {
             ApiResponse<PortalTemplate> localVarResponse = await PortalsIdTemplatesRelFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Portal id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalTemplate>> PortalsIdTemplatesRelFkPutAsyncWithHttpInfo (string id, string fk, PortalTemplate data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalApi->PortalsIdTemplatesRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalApi->PortalsIdTemplatesRelFkPut");

            var localVarPath = "/Portals/{id}/templates/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsIdTemplatesRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplate)));
            
        }

        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Portal</returns>
        public Portal PortalsPatch (Portal data = null)
        {
             ApiResponse<Portal> localVarResponse = PortalsPatchWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        public ApiResponse< Portal > PortalsPatchWithHttpInfo (Portal data = null)
        {

            var localVarPath = "/Portals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of Portal</returns>
        public async System.Threading.Tasks.Task<Portal> PortalsPatchAsync (Portal data = null)
        {
             ApiResponse<Portal> localVarResponse = await PortalsPatchAsyncWithHttpInfo(data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Portal>> PortalsPatchAsyncWithHttpInfo (Portal data = null)
        {

            var localVarPath = "/Portals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Create a new instance of the model and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Portal</returns>
        public Portal PortalsPost (Portal data = null)
        {
             ApiResponse<Portal> localVarResponse = PortalsPostWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new instance of the model and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        public ApiResponse< Portal > PortalsPostWithHttpInfo (Portal data = null)
        {

            var localVarPath = "/Portals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Create a new instance of the model and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of Portal</returns>
        public async System.Threading.Tasks.Task<Portal> PortalsPostAsync (Portal data = null)
        {
             ApiResponse<Portal> localVarResponse = await PortalsPostAsyncWithHttpInfo(data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new instance of the model and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Portal>> PortalsPostAsyncWithHttpInfo (Portal data = null)
        {

            var localVarPath = "/Portals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Portal</returns>
        public Portal PortalsPut (Portal data = null)
        {
             ApiResponse<Portal> localVarResponse = PortalsPutWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        public ApiResponse< Portal > PortalsPutWithHttpInfo (Portal data = null)
        {

            var localVarPath = "/Portals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of Portal</returns>
        public async System.Threading.Tasks.Task<Portal> PortalsPutAsync (Portal data = null)
        {
             ApiResponse<Portal> localVarResponse = await PortalsPutAsyncWithHttpInfo(data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Portal>> PortalsPutAsyncWithHttpInfo (Portal data = null)
        {

            var localVarPath = "/Portals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Portal</returns>
        public Portal PortalsReplaceOrCreatePost (Portal data = null)
        {
             ApiResponse<Portal> localVarResponse = PortalsReplaceOrCreatePostWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        public ApiResponse< Portal > PortalsReplaceOrCreatePostWithHttpInfo (Portal data = null)
        {

            var localVarPath = "/Portals/replaceOrCreate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsReplaceOrCreatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of Portal</returns>
        public async System.Threading.Tasks.Task<Portal> PortalsReplaceOrCreatePostAsync (Portal data = null)
        {
             ApiResponse<Portal> localVarResponse = await PortalsReplaceOrCreatePostAsyncWithHttpInfo(data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Portal>> PortalsReplaceOrCreatePostAsyncWithHttpInfo (Portal data = null)
        {

            var localVarPath = "/Portals/replaceOrCreate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsReplaceOrCreatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 PortalsUpdatePost (string where = null, Portal data = null)
        {
             ApiResponse<InlineResponse2002> localVarResponse = PortalsUpdatePostWithHttpInfo(where, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > PortalsUpdatePostWithHttpInfo (string where = null, Portal data = null)
        {

            var localVarPath = "/Portals/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsUpdatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
            
        }

        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> PortalsUpdatePostAsync (string where = null, Portal data = null)
        {
             ApiResponse<InlineResponse2002> localVarResponse = await PortalsUpdatePostAsyncWithHttpInfo(where, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> PortalsUpdatePostAsyncWithHttpInfo (string where = null, Portal data = null)
        {

            var localVarPath = "/Portals/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsUpdatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
            
        }

        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Portal</returns>
        public Portal PortalsUpsertWithWherePost (string where = null, Portal data = null)
        {
             ApiResponse<Portal> localVarResponse = PortalsUpsertWithWherePostWithHttpInfo(where, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        public ApiResponse< Portal > PortalsUpsertWithWherePostWithHttpInfo (string where = null, Portal data = null)
        {

            var localVarPath = "/Portals/upsertWithWhere";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsUpsertWithWherePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of Portal</returns>
        public async System.Threading.Tasks.Task<Portal> PortalsUpsertWithWherePostAsync (string where = null, Portal data = null)
        {
             ApiResponse<Portal> localVarResponse = await PortalsUpsertWithWherePostAsyncWithHttpInfo(where, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Portal>> PortalsUpsertWithWherePostAsyncWithHttpInfo (string where = null, Portal data = null)
        {

            var localVarPath = "/Portals/upsertWithWhere";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalsUpsertWithWherePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

    }
}
