/* 
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.7-beta.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TweakApi.Client;
using TweakApi.Model;

namespace TweakApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplateApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream TemplatesChangeStreamGet (string options = null);

        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> TemplatesChangeStreamGetWithHttpInfo (string options = null);
        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream TemplatesChangeStreamPost (string options = null);

        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> TemplatesChangeStreamPostWithHttpInfo (string options = null);
        /// <summary>
        /// Count instances of the model matched by where from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 TemplatesCountGet (string where = null);

        /// <summary>
        /// Count instances of the model matched by where from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> TemplatesCountGetWithHttpInfo (string where = null);
        /// <summary>
        /// Find first instance of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Template</returns>
        Template TemplatesFindOneGet (string filter = null);

        /// <summary>
        /// Find first instance of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> TemplatesFindOneGetWithHttpInfo (string filter = null);
        /// <summary>
        /// Find all instances of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>List&lt;Template&gt;</returns>
        List<Template> TemplatesGet (string filter = null);

        /// <summary>
        /// Find all instances of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of List&lt;Template&gt;</returns>
        ApiResponse<List<Template>> TemplatesGetWithHttpInfo (string filter = null);
        /// <summary>
        /// Delete a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Object</returns>
        Object TemplatesIdDelete (string id);

        /// <summary>
        /// Delete a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TemplatesIdDeleteWithHttpInfo (string id);
        /// <summary>
        /// Counts designs of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 TemplatesIdDesignsCountGet (string id, string where = null);

        /// <summary>
        /// Counts designs of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> TemplatesIdDesignsCountGetWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all designs of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns></returns>
        void TemplatesIdDesignsDelete (string id);

        /// <summary>
        /// Deletes all designs of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TemplatesIdDesignsDeleteWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for designs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns></returns>
        void TemplatesIdDesignsFkDelete (string id, string fk);

        /// <summary>
        /// Delete a related item by id for designs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TemplatesIdDesignsFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for designs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns>Design</returns>
        Design TemplatesIdDesignsFkGet (string id, string fk);

        /// <summary>
        /// Find a related item by id for designs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns>ApiResponse of Design</returns>
        ApiResponse<Design> TemplatesIdDesignsFkGetWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for designs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Design</returns>
        Design TemplatesIdDesignsFkPut (string id, string fk, Design data = null);

        /// <summary>
        /// Update a related item by id for designs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Design</returns>
        ApiResponse<Design> TemplatesIdDesignsFkPutWithHttpInfo (string id, string fk, Design data = null);
        /// <summary>
        /// Generate design from template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>Design</returns>
        Design TemplatesIdDesignsGeneratePost (string id, string id2, Template data = null);

        /// <summary>
        /// Generate design from template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Design</returns>
        ApiResponse<Design> TemplatesIdDesignsGeneratePostWithHttpInfo (string id, string id2, Template data = null);
        /// <summary>
        /// Queries designs of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;Design&gt;</returns>
        List<Design> TemplatesIdDesignsGet (string id, string filter = null);

        /// <summary>
        /// Queries designs of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Design&gt;</returns>
        ApiResponse<List<Design>> TemplatesIdDesignsGetWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in designs of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Design</returns>
        Design TemplatesIdDesignsPost (string id, Design data = null);

        /// <summary>
        /// Creates a new instance in designs of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Design</returns>
        ApiResponse<Design> TemplatesIdDesignsPostWithHttpInfo (string id, Design data = null);
        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 TemplatesIdExistsGet (string id);

        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> TemplatesIdExistsGetWithHttpInfo (string id);
        /// <summary>
        /// Find a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Template</returns>
        Template TemplatesIdGet (string id, string filter = null);

        /// <summary>
        /// Find a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> TemplatesIdGetWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 TemplatesIdHead (string id);

        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> TemplatesIdHeadWithHttpInfo (string id);
        /// <summary>
        /// Delete InvitationTickets for this Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2">Template id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <returns>Object</returns>
        Object TemplatesIdInvitationTicketsFkDelete (string id, string id2, string fk);

        /// <summary>
        /// Delete InvitationTickets for this Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2">Template id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TemplatesIdInvitationTicketsFkDeleteWithHttpInfo (string id, string id2, string fk);
        /// <summary>
        /// Get InvitationTicket by Id for this Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2">Template id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <param name="filter">Only include changes that match this filter (optional)</param>
        /// <returns>InvitationTicket</returns>
        InvitationTicket TemplatesIdInvitationTicketsFkGet (string id, string id2, string fk, string filter = null);

        /// <summary>
        /// Get InvitationTicket by Id for this Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2">Template id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <param name="filter">Only include changes that match this filter (optional)</param>
        /// <returns>ApiResponse of InvitationTicket</returns>
        ApiResponse<InvitationTicket> TemplatesIdInvitationTicketsFkGetWithHttpInfo (string id, string id2, string fk, string filter = null);
        /// <summary>
        /// List InvitationTickets for this Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2">Template id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>List&lt;InvitationTicket&gt;</returns>
        List<InvitationTicket> TemplatesIdInvitationTicketsGet (string id, string id2, string filter = null);

        /// <summary>
        /// List InvitationTickets for this Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2">Template id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of List&lt;InvitationTicket&gt;</returns>
        ApiResponse<List<InvitationTicket>> TemplatesIdInvitationTicketsGetWithHttpInfo (string id, string id2, string filter = null);
        /// <summary>
        /// Counts members of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 TemplatesIdMembersCountGet (string id, string where = null);

        /// <summary>
        /// Counts members of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> TemplatesIdMembersCountGetWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all members of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns></returns>
        void TemplatesIdMembersDelete (string id);

        /// <summary>
        /// Deletes all members of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TemplatesIdMembersDeleteWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns></returns>
        void TemplatesIdMembersFkDelete (string id, string fk);

        /// <summary>
        /// Delete a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TemplatesIdMembersFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>TeamMember</returns>
        TeamMember TemplatesIdMembersFkGet (string id, string fk);

        /// <summary>
        /// Find a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>ApiResponse of TeamMember</returns>
        ApiResponse<TeamMember> TemplatesIdMembersFkGetWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamMember</returns>
        TeamMember TemplatesIdMembersFkPut (string id, string fk, TeamMember data = null);

        /// <summary>
        /// Update a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        ApiResponse<TeamMember> TemplatesIdMembersFkPutWithHttpInfo (string id, string fk, TeamMember data = null);
        /// <summary>
        /// Queries members of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;TeamMember&gt;</returns>
        List<TeamMember> TemplatesIdMembersGet (string id, string filter = null);

        /// <summary>
        /// Queries members of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamMember&gt;</returns>
        ApiResponse<List<TeamMember>> TemplatesIdMembersGetWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in members of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamMember</returns>
        TeamMember TemplatesIdMembersPost (string id, TeamMember data = null);

        /// <summary>
        /// Creates a new instance in members of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        ApiResponse<TeamMember> TemplatesIdMembersPostWithHttpInfo (string id, TeamMember data = null);
        /// <summary>
        /// Remove the members relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns></returns>
        void TemplatesIdMembersRelFkDelete (string id, string fk);

        /// <summary>
        /// Remove the members relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TemplatesIdMembersRelFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Check the existence of members relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>bool?</returns>
        bool? TemplatesIdMembersRelFkHead (string id, string fk);

        /// <summary>
        /// Check the existence of members relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> TemplatesIdMembersRelFkHeadWithHttpInfo (string id, string fk);
        /// <summary>
        /// Add a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TemplateMember</returns>
        TemplateMember TemplatesIdMembersRelFkPut (string id, string fk, TemplateMember data = null);

        /// <summary>
        /// Add a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TemplateMember</returns>
        ApiResponse<TemplateMember> TemplatesIdMembersRelFkPutWithHttpInfo (string id, string fk, TemplateMember data = null);
        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Template</returns>
        Template TemplatesIdPatch (string id, Template data = null);

        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> TemplatesIdPatchWithHttpInfo (string id, Template data = null);
        /// <summary>
        /// Deletes permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns></returns>
        void TemplatesIdPermissionDelete (string id);

        /// <summary>
        /// Deletes permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TemplatesIdPermissionDeleteWithHttpInfo (string id);
        /// <summary>
        /// Fetches hasOne relation permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>TemplatePermissionSet</returns>
        TemplatePermissionSet TemplatesIdPermissionGet (string id, bool? refresh = null);

        /// <summary>
        /// Fetches hasOne relation permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of TemplatePermissionSet</returns>
        ApiResponse<TemplatePermissionSet> TemplatesIdPermissionGetWithHttpInfo (string id, bool? refresh = null);
        /// <summary>
        /// Creates a new instance in permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TemplatePermissionSet</returns>
        TemplatePermissionSet TemplatesIdPermissionPost (string id, TemplatePermissionSet data = null);

        /// <summary>
        /// Creates a new instance in permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TemplatePermissionSet</returns>
        ApiResponse<TemplatePermissionSet> TemplatesIdPermissionPostWithHttpInfo (string id, TemplatePermissionSet data = null);
        /// <summary>
        /// Update permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TemplatePermissionSet</returns>
        TemplatePermissionSet TemplatesIdPermissionPut (string id, TemplatePermissionSet data = null);

        /// <summary>
        /// Update permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TemplatePermissionSet</returns>
        ApiResponse<TemplatePermissionSet> TemplatesIdPermissionPutWithHttpInfo (string id, TemplatePermissionSet data = null);
        /// <summary>
        /// Counts portalFolders of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 TemplatesIdPortalFoldersCountGet (string id, string where = null);

        /// <summary>
        /// Counts portalFolders of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> TemplatesIdPortalFoldersCountGetWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all portalFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns></returns>
        void TemplatesIdPortalFoldersDelete (string id);

        /// <summary>
        /// Deletes all portalFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TemplatesIdPortalFoldersDeleteWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for portalFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns></returns>
        void TemplatesIdPortalFoldersFkDelete (string id, string fk);

        /// <summary>
        /// Delete a related item by id for portalFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TemplatesIdPortalFoldersFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for portalFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns>PortalTemplateFolder</returns>
        PortalTemplateFolder TemplatesIdPortalFoldersFkGet (string id, string fk);

        /// <summary>
        /// Find a related item by id for portalFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        ApiResponse<PortalTemplateFolder> TemplatesIdPortalFoldersFkGetWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for portalFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        PortalTemplateFolder TemplatesIdPortalFoldersFkPut (string id, string fk, PortalTemplateFolder data = null);

        /// <summary>
        /// Update a related item by id for portalFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        ApiResponse<PortalTemplateFolder> TemplatesIdPortalFoldersFkPutWithHttpInfo (string id, string fk, PortalTemplateFolder data = null);
        /// <summary>
        /// Queries portalFolders of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;PortalTemplateFolder&gt;</returns>
        List<PortalTemplateFolder> TemplatesIdPortalFoldersGet (string id, string filter = null);

        /// <summary>
        /// Queries portalFolders of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;PortalTemplateFolder&gt;</returns>
        ApiResponse<List<PortalTemplateFolder>> TemplatesIdPortalFoldersGetWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in portalFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        PortalTemplateFolder TemplatesIdPortalFoldersPost (string id, PortalTemplateFolder data = null);

        /// <summary>
        /// Creates a new instance in portalFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        ApiResponse<PortalTemplateFolder> TemplatesIdPortalFoldersPostWithHttpInfo (string id, PortalTemplateFolder data = null);
        /// <summary>
        /// Remove the portalFolders relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns></returns>
        void TemplatesIdPortalFoldersRelFkDelete (string id, string fk);

        /// <summary>
        /// Remove the portalFolders relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TemplatesIdPortalFoldersRelFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Check the existence of portalFolders relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns>bool?</returns>
        bool? TemplatesIdPortalFoldersRelFkHead (string id, string fk);

        /// <summary>
        /// Check the existence of portalFolders relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> TemplatesIdPortalFoldersRelFkHeadWithHttpInfo (string id, string fk);
        /// <summary>
        /// Add a related item by id for portalFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalTemplate</returns>
        PortalTemplate TemplatesIdPortalFoldersRelFkPut (string id, string fk, PortalTemplate data = null);

        /// <summary>
        /// Add a related item by id for portalFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalTemplate</returns>
        ApiResponse<PortalTemplate> TemplatesIdPortalFoldersRelFkPutWithHttpInfo (string id, string fk, PortalTemplate data = null);
        /// <summary>
        /// Counts portals of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 TemplatesIdPortalsCountGet (string id, string where = null);

        /// <summary>
        /// Counts portals of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> TemplatesIdPortalsCountGetWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all portals of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns></returns>
        void TemplatesIdPortalsDelete (string id);

        /// <summary>
        /// Deletes all portals of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TemplatesIdPortalsDeleteWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns></returns>
        void TemplatesIdPortalsFkDelete (string id, string fk);

        /// <summary>
        /// Delete a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TemplatesIdPortalsFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Portal</returns>
        Portal TemplatesIdPortalsFkGet (string id, string fk);

        /// <summary>
        /// Find a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>ApiResponse of Portal</returns>
        ApiResponse<Portal> TemplatesIdPortalsFkGetWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Portal</returns>
        Portal TemplatesIdPortalsFkPut (string id, string fk, Portal data = null);

        /// <summary>
        /// Update a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        ApiResponse<Portal> TemplatesIdPortalsFkPutWithHttpInfo (string id, string fk, Portal data = null);
        /// <summary>
        /// Queries portals of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;Portal&gt;</returns>
        List<Portal> TemplatesIdPortalsGet (string id, string filter = null);

        /// <summary>
        /// Queries portals of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Portal&gt;</returns>
        ApiResponse<List<Portal>> TemplatesIdPortalsGetWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in portals of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Portal</returns>
        Portal TemplatesIdPortalsPost (string id, Portal data = null);

        /// <summary>
        /// Creates a new instance in portals of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        ApiResponse<Portal> TemplatesIdPortalsPostWithHttpInfo (string id, Portal data = null);
        /// <summary>
        /// Remove the portals relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns></returns>
        void TemplatesIdPortalsRelFkDelete (string id, string fk);

        /// <summary>
        /// Remove the portals relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TemplatesIdPortalsRelFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Check the existence of portals relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>bool?</returns>
        bool? TemplatesIdPortalsRelFkHead (string id, string fk);

        /// <summary>
        /// Check the existence of portals relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> TemplatesIdPortalsRelFkHeadWithHttpInfo (string id, string fk);
        /// <summary>
        /// Add a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalTemplate</returns>
        PortalTemplate TemplatesIdPortalsRelFkPut (string id, string fk, PortalTemplate data = null);

        /// <summary>
        /// Add a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalTemplate</returns>
        ApiResponse<PortalTemplate> TemplatesIdPortalsRelFkPutWithHttpInfo (string id, string fk, PortalTemplate data = null);
        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Template</returns>
        Template TemplatesIdPut (string id, Template data = null);

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> TemplatesIdPutWithHttpInfo (string id, Template data = null);
        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Template</returns>
        Template TemplatesIdReplacePost (string id, Template data = null);

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> TemplatesIdReplacePostWithHttpInfo (string id, Template data = null);
        /// <summary>
        /// Counts tags of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 TemplatesIdTagsCountGet (string id, string where = null);

        /// <summary>
        /// Counts tags of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> TemplatesIdTagsCountGetWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all tags of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns></returns>
        void TemplatesIdTagsDelete (string id);

        /// <summary>
        /// Deletes all tags of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TemplatesIdTagsDeleteWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns></returns>
        void TemplatesIdTagsFkDelete (string id, string fk);

        /// <summary>
        /// Delete a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TemplatesIdTagsFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Tag</returns>
        Tag TemplatesIdTagsFkGet (string id, string fk);

        /// <summary>
        /// Find a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> TemplatesIdTagsFkGetWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Tag</returns>
        Tag TemplatesIdTagsFkPut (string id, string fk, Tag data = null);

        /// <summary>
        /// Update a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> TemplatesIdTagsFkPutWithHttpInfo (string id, string fk, Tag data = null);
        /// <summary>
        /// Queries tags of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;Tag&gt;</returns>
        List<Tag> TemplatesIdTagsGet (string id, string filter = null);

        /// <summary>
        /// Queries tags of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Tag&gt;</returns>
        ApiResponse<List<Tag>> TemplatesIdTagsGetWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in tags of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Tag</returns>
        Tag TemplatesIdTagsPost (string id, Tag data = null);

        /// <summary>
        /// Creates a new instance in tags of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> TemplatesIdTagsPostWithHttpInfo (string id, Tag data = null);
        /// <summary>
        /// Remove the tags relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns></returns>
        void TemplatesIdTagsRelFkDelete (string id, string fk);

        /// <summary>
        /// Remove the tags relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TemplatesIdTagsRelFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Check the existence of tags relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>bool?</returns>
        bool? TemplatesIdTagsRelFkHead (string id, string fk);

        /// <summary>
        /// Check the existence of tags relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> TemplatesIdTagsRelFkHeadWithHttpInfo (string id, string fk);
        /// <summary>
        /// Add a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TemplateTag</returns>
        TemplateTag TemplatesIdTagsRelFkPut (string id, string fk, TemplateTag data = null);

        /// <summary>
        /// Add a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TemplateTag</returns>
        ApiResponse<TemplateTag> TemplatesIdTagsRelFkPutWithHttpInfo (string id, string fk, TemplateTag data = null);
        /// <summary>
        /// Fetches belongsTo relation teamFolder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>TeamTemplateFolder</returns>
        TeamTemplateFolder TemplatesIdTeamFolderGet (string id, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation teamFolder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of TeamTemplateFolder</returns>
        ApiResponse<TeamTemplateFolder> TemplatesIdTeamFolderGetWithHttpInfo (string id, bool? refresh = null);
        /// <summary>
        /// Fetches belongsTo relation team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Team</returns>
        Team TemplatesIdTeamGet (string id, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> TemplatesIdTeamGetWithHttpInfo (string id, bool? refresh = null);
        /// <summary>
        /// Counts templateMembers of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 TemplatesIdTemplateMembersCountGet (string id, string where = null);

        /// <summary>
        /// Counts templateMembers of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> TemplatesIdTemplateMembersCountGetWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all templateMembers of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns></returns>
        void TemplatesIdTemplateMembersDelete (string id);

        /// <summary>
        /// Deletes all templateMembers of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TemplatesIdTemplateMembersDeleteWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for templateMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for templateMembers</param>
        /// <returns></returns>
        void TemplatesIdTemplateMembersFkDelete (string id, string fk);

        /// <summary>
        /// Delete a related item by id for templateMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for templateMembers</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TemplatesIdTemplateMembersFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for templateMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for templateMembers</param>
        /// <returns>TemplateMember</returns>
        TemplateMember TemplatesIdTemplateMembersFkGet (string id, string fk);

        /// <summary>
        /// Find a related item by id for templateMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for templateMembers</param>
        /// <returns>ApiResponse of TemplateMember</returns>
        ApiResponse<TemplateMember> TemplatesIdTemplateMembersFkGetWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for templateMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for templateMembers</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TemplateMember</returns>
        TemplateMember TemplatesIdTemplateMembersFkPut (string id, string fk, TemplateMember data = null);

        /// <summary>
        /// Update a related item by id for templateMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for templateMembers</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TemplateMember</returns>
        ApiResponse<TemplateMember> TemplatesIdTemplateMembersFkPutWithHttpInfo (string id, string fk, TemplateMember data = null);
        /// <summary>
        /// Queries templateMembers of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;TemplateMember&gt;</returns>
        List<TemplateMember> TemplatesIdTemplateMembersGet (string id, string filter = null);

        /// <summary>
        /// Queries templateMembers of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TemplateMember&gt;</returns>
        ApiResponse<List<TemplateMember>> TemplatesIdTemplateMembersGetWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in templateMembers of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TemplateMember</returns>
        TemplateMember TemplatesIdTemplateMembersPost (string id, TemplateMember data = null);

        /// <summary>
        /// Creates a new instance in templateMembers of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TemplateMember</returns>
        ApiResponse<TemplateMember> TemplatesIdTemplateMembersPostWithHttpInfo (string id, TemplateMember data = null);
        /// <summary>
        /// Fetches belongsTo relation uploader.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>TeamMember</returns>
        TeamMember TemplatesIdUploaderGet (string id, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation uploader.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        ApiResponse<TeamMember> TemplatesIdUploaderGetWithHttpInfo (string id, bool? refresh = null);
        /// <summary>
        /// Get URL to review a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>string</returns>
        string TemplatesIdUrlReviewGet (string id);

        /// <summary>
        /// Get URL to review a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> TemplatesIdUrlReviewGetWithHttpInfo (string id);
        /// <summary>
        /// Fetches belongsTo relation workflow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Workflow</returns>
        Workflow TemplatesIdWorkflowGet (string id, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation workflow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of Workflow</returns>
        ApiResponse<Workflow> TemplatesIdWorkflowGetWithHttpInfo (string id, bool? refresh = null);
        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Template</returns>
        Template TemplatesPatch (Template data = null);

        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> TemplatesPatchWithHttpInfo (Template data = null);
        /// <summary>
        /// Create a new instance of the model and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Template</returns>
        Template TemplatesPost (Template data = null);

        /// <summary>
        /// Create a new instance of the model and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> TemplatesPostWithHttpInfo (Template data = null);
        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Template</returns>
        Template TemplatesPut (Template data = null);

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> TemplatesPutWithHttpInfo (Template data = null);
        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Template</returns>
        Template TemplatesReplaceOrCreatePost (Template data = null);

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> TemplatesReplaceOrCreatePostWithHttpInfo (Template data = null);
        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 TemplatesUpdatePost (string where = null, Template data = null);

        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> TemplatesUpdatePostWithHttpInfo (string where = null, Template data = null);
        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Template</returns>
        Template TemplatesUpsertWithWherePost (string where = null, Template data = null);

        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> TemplatesUpsertWithWherePostWithHttpInfo (string where = null, Template data = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> TemplatesChangeStreamGetAsync (string options = null);

        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> TemplatesChangeStreamGetAsyncWithHttpInfo (string options = null);
        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> TemplatesChangeStreamPostAsync (string options = null);

        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> TemplatesChangeStreamPostAsyncWithHttpInfo (string options = null);
        /// <summary>
        /// Count instances of the model matched by where from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> TemplatesCountGetAsync (string where = null);

        /// <summary>
        /// Count instances of the model matched by where from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TemplatesCountGetAsyncWithHttpInfo (string where = null);
        /// <summary>
        /// Find first instance of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> TemplatesFindOneGetAsync (string filter = null);

        /// <summary>
        /// Find first instance of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> TemplatesFindOneGetAsyncWithHttpInfo (string filter = null);
        /// <summary>
        /// Find all instances of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of List&lt;Template&gt;</returns>
        System.Threading.Tasks.Task<List<Template>> TemplatesGetAsync (string filter = null);

        /// <summary>
        /// Find all instances of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Template&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Template>>> TemplatesGetAsyncWithHttpInfo (string filter = null);
        /// <summary>
        /// Delete a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TemplatesIdDeleteAsync (string id);

        /// <summary>
        /// Delete a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Counts designs of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> TemplatesIdDesignsCountGetAsync (string id, string where = null);

        /// <summary>
        /// Counts designs of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TemplatesIdDesignsCountGetAsyncWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all designs of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TemplatesIdDesignsDeleteAsync (string id);

        /// <summary>
        /// Deletes all designs of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdDesignsDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for designs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TemplatesIdDesignsFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Delete a related item by id for designs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdDesignsFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for designs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns>Task of Design</returns>
        System.Threading.Tasks.Task<Design> TemplatesIdDesignsFkGetAsync (string id, string fk);

        /// <summary>
        /// Find a related item by id for designs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns>Task of ApiResponse (Design)</returns>
        System.Threading.Tasks.Task<ApiResponse<Design>> TemplatesIdDesignsFkGetAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for designs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Design</returns>
        System.Threading.Tasks.Task<Design> TemplatesIdDesignsFkPutAsync (string id, string fk, Design data = null);

        /// <summary>
        /// Update a related item by id for designs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Design)</returns>
        System.Threading.Tasks.Task<ApiResponse<Design>> TemplatesIdDesignsFkPutAsyncWithHttpInfo (string id, string fk, Design data = null);
        /// <summary>
        /// Generate design from template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Design</returns>
        System.Threading.Tasks.Task<Design> TemplatesIdDesignsGeneratePostAsync (string id, string id2, Template data = null);

        /// <summary>
        /// Generate design from template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Design)</returns>
        System.Threading.Tasks.Task<ApiResponse<Design>> TemplatesIdDesignsGeneratePostAsyncWithHttpInfo (string id, string id2, Template data = null);
        /// <summary>
        /// Queries designs of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;Design&gt;</returns>
        System.Threading.Tasks.Task<List<Design>> TemplatesIdDesignsGetAsync (string id, string filter = null);

        /// <summary>
        /// Queries designs of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Design&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Design>>> TemplatesIdDesignsGetAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in designs of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Design</returns>
        System.Threading.Tasks.Task<Design> TemplatesIdDesignsPostAsync (string id, Design data = null);

        /// <summary>
        /// Creates a new instance in designs of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Design)</returns>
        System.Threading.Tasks.Task<ApiResponse<Design>> TemplatesIdDesignsPostAsyncWithHttpInfo (string id, Design data = null);
        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> TemplatesIdExistsGetAsync (string id);

        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> TemplatesIdExistsGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Find a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> TemplatesIdGetAsync (string id, string filter = null);

        /// <summary>
        /// Find a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> TemplatesIdGetAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> TemplatesIdHeadAsync (string id);

        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> TemplatesIdHeadAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete InvitationTickets for this Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2">Template id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TemplatesIdInvitationTicketsFkDeleteAsync (string id, string id2, string fk);

        /// <summary>
        /// Delete InvitationTickets for this Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2">Template id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdInvitationTicketsFkDeleteAsyncWithHttpInfo (string id, string id2, string fk);
        /// <summary>
        /// Get InvitationTicket by Id for this Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2">Template id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <param name="filter">Only include changes that match this filter (optional)</param>
        /// <returns>Task of InvitationTicket</returns>
        System.Threading.Tasks.Task<InvitationTicket> TemplatesIdInvitationTicketsFkGetAsync (string id, string id2, string fk, string filter = null);

        /// <summary>
        /// Get InvitationTicket by Id for this Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2">Template id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <param name="filter">Only include changes that match this filter (optional)</param>
        /// <returns>Task of ApiResponse (InvitationTicket)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvitationTicket>> TemplatesIdInvitationTicketsFkGetAsyncWithHttpInfo (string id, string id2, string fk, string filter = null);
        /// <summary>
        /// List InvitationTickets for this Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2">Template id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of List&lt;InvitationTicket&gt;</returns>
        System.Threading.Tasks.Task<List<InvitationTicket>> TemplatesIdInvitationTicketsGetAsync (string id, string id2, string filter = null);

        /// <summary>
        /// List InvitationTickets for this Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2">Template id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InvitationTicket&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InvitationTicket>>> TemplatesIdInvitationTicketsGetAsyncWithHttpInfo (string id, string id2, string filter = null);
        /// <summary>
        /// Counts members of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> TemplatesIdMembersCountGetAsync (string id, string where = null);

        /// <summary>
        /// Counts members of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TemplatesIdMembersCountGetAsyncWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all members of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TemplatesIdMembersDeleteAsync (string id);

        /// <summary>
        /// Deletes all members of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdMembersDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TemplatesIdMembersFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Delete a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdMembersFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of TeamMember</returns>
        System.Threading.Tasks.Task<TeamMember> TemplatesIdMembersFkGetAsync (string id, string fk);

        /// <summary>
        /// Find a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMember>> TemplatesIdMembersFkGetAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamMember</returns>
        System.Threading.Tasks.Task<TeamMember> TemplatesIdMembersFkPutAsync (string id, string fk, TeamMember data = null);

        /// <summary>
        /// Update a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMember>> TemplatesIdMembersFkPutAsyncWithHttpInfo (string id, string fk, TeamMember data = null);
        /// <summary>
        /// Queries members of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;TeamMember&gt;</returns>
        System.Threading.Tasks.Task<List<TeamMember>> TemplatesIdMembersGetAsync (string id, string filter = null);

        /// <summary>
        /// Queries members of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamMember&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamMember>>> TemplatesIdMembersGetAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in members of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamMember</returns>
        System.Threading.Tasks.Task<TeamMember> TemplatesIdMembersPostAsync (string id, TeamMember data = null);

        /// <summary>
        /// Creates a new instance in members of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMember>> TemplatesIdMembersPostAsyncWithHttpInfo (string id, TeamMember data = null);
        /// <summary>
        /// Remove the members relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TemplatesIdMembersRelFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Remove the members relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdMembersRelFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Check the existence of members relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> TemplatesIdMembersRelFkHeadAsync (string id, string fk);

        /// <summary>
        /// Check the existence of members relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> TemplatesIdMembersRelFkHeadAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Add a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TemplateMember</returns>
        System.Threading.Tasks.Task<TemplateMember> TemplatesIdMembersRelFkPutAsync (string id, string fk, TemplateMember data = null);

        /// <summary>
        /// Add a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateMember>> TemplatesIdMembersRelFkPutAsyncWithHttpInfo (string id, string fk, TemplateMember data = null);
        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> TemplatesIdPatchAsync (string id, Template data = null);

        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> TemplatesIdPatchAsyncWithHttpInfo (string id, Template data = null);
        /// <summary>
        /// Deletes permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TemplatesIdPermissionDeleteAsync (string id);

        /// <summary>
        /// Deletes permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdPermissionDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Fetches hasOne relation permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of TemplatePermissionSet</returns>
        System.Threading.Tasks.Task<TemplatePermissionSet> TemplatesIdPermissionGetAsync (string id, bool? refresh = null);

        /// <summary>
        /// Fetches hasOne relation permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplatePermissionSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplatePermissionSet>> TemplatesIdPermissionGetAsyncWithHttpInfo (string id, bool? refresh = null);
        /// <summary>
        /// Creates a new instance in permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TemplatePermissionSet</returns>
        System.Threading.Tasks.Task<TemplatePermissionSet> TemplatesIdPermissionPostAsync (string id, TemplatePermissionSet data = null);

        /// <summary>
        /// Creates a new instance in permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplatePermissionSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplatePermissionSet>> TemplatesIdPermissionPostAsyncWithHttpInfo (string id, TemplatePermissionSet data = null);
        /// <summary>
        /// Update permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TemplatePermissionSet</returns>
        System.Threading.Tasks.Task<TemplatePermissionSet> TemplatesIdPermissionPutAsync (string id, TemplatePermissionSet data = null);

        /// <summary>
        /// Update permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplatePermissionSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplatePermissionSet>> TemplatesIdPermissionPutAsyncWithHttpInfo (string id, TemplatePermissionSet data = null);
        /// <summary>
        /// Counts portalFolders of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> TemplatesIdPortalFoldersCountGetAsync (string id, string where = null);

        /// <summary>
        /// Counts portalFolders of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TemplatesIdPortalFoldersCountGetAsyncWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all portalFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TemplatesIdPortalFoldersDeleteAsync (string id);

        /// <summary>
        /// Deletes all portalFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdPortalFoldersDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for portalFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TemplatesIdPortalFoldersFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Delete a related item by id for portalFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdPortalFoldersFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for portalFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        System.Threading.Tasks.Task<PortalTemplateFolder> TemplatesIdPortalFoldersFkGetAsync (string id, string fk);

        /// <summary>
        /// Find a related item by id for portalFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> TemplatesIdPortalFoldersFkGetAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for portalFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        System.Threading.Tasks.Task<PortalTemplateFolder> TemplatesIdPortalFoldersFkPutAsync (string id, string fk, PortalTemplateFolder data = null);

        /// <summary>
        /// Update a related item by id for portalFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> TemplatesIdPortalFoldersFkPutAsyncWithHttpInfo (string id, string fk, PortalTemplateFolder data = null);
        /// <summary>
        /// Queries portalFolders of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;PortalTemplateFolder&gt;</returns>
        System.Threading.Tasks.Task<List<PortalTemplateFolder>> TemplatesIdPortalFoldersGetAsync (string id, string filter = null);

        /// <summary>
        /// Queries portalFolders of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PortalTemplateFolder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PortalTemplateFolder>>> TemplatesIdPortalFoldersGetAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in portalFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        System.Threading.Tasks.Task<PortalTemplateFolder> TemplatesIdPortalFoldersPostAsync (string id, PortalTemplateFolder data = null);

        /// <summary>
        /// Creates a new instance in portalFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> TemplatesIdPortalFoldersPostAsyncWithHttpInfo (string id, PortalTemplateFolder data = null);
        /// <summary>
        /// Remove the portalFolders relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TemplatesIdPortalFoldersRelFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Remove the portalFolders relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdPortalFoldersRelFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Check the existence of portalFolders relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> TemplatesIdPortalFoldersRelFkHeadAsync (string id, string fk);

        /// <summary>
        /// Check the existence of portalFolders relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> TemplatesIdPortalFoldersRelFkHeadAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Add a related item by id for portalFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalTemplate</returns>
        System.Threading.Tasks.Task<PortalTemplate> TemplatesIdPortalFoldersRelFkPutAsync (string id, string fk, PortalTemplate data = null);

        /// <summary>
        /// Add a related item by id for portalFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalTemplate>> TemplatesIdPortalFoldersRelFkPutAsyncWithHttpInfo (string id, string fk, PortalTemplate data = null);
        /// <summary>
        /// Counts portals of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> TemplatesIdPortalsCountGetAsync (string id, string where = null);

        /// <summary>
        /// Counts portals of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TemplatesIdPortalsCountGetAsyncWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all portals of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TemplatesIdPortalsDeleteAsync (string id);

        /// <summary>
        /// Deletes all portals of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdPortalsDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TemplatesIdPortalsFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Delete a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdPortalsFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of Portal</returns>
        System.Threading.Tasks.Task<Portal> TemplatesIdPortalsFkGetAsync (string id, string fk);

        /// <summary>
        /// Find a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        System.Threading.Tasks.Task<ApiResponse<Portal>> TemplatesIdPortalsFkGetAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Portal</returns>
        System.Threading.Tasks.Task<Portal> TemplatesIdPortalsFkPutAsync (string id, string fk, Portal data = null);

        /// <summary>
        /// Update a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        System.Threading.Tasks.Task<ApiResponse<Portal>> TemplatesIdPortalsFkPutAsyncWithHttpInfo (string id, string fk, Portal data = null);
        /// <summary>
        /// Queries portals of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;Portal&gt;</returns>
        System.Threading.Tasks.Task<List<Portal>> TemplatesIdPortalsGetAsync (string id, string filter = null);

        /// <summary>
        /// Queries portals of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Portal&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Portal>>> TemplatesIdPortalsGetAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in portals of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Portal</returns>
        System.Threading.Tasks.Task<Portal> TemplatesIdPortalsPostAsync (string id, Portal data = null);

        /// <summary>
        /// Creates a new instance in portals of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        System.Threading.Tasks.Task<ApiResponse<Portal>> TemplatesIdPortalsPostAsyncWithHttpInfo (string id, Portal data = null);
        /// <summary>
        /// Remove the portals relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TemplatesIdPortalsRelFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Remove the portals relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdPortalsRelFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Check the existence of portals relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> TemplatesIdPortalsRelFkHeadAsync (string id, string fk);

        /// <summary>
        /// Check the existence of portals relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> TemplatesIdPortalsRelFkHeadAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Add a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalTemplate</returns>
        System.Threading.Tasks.Task<PortalTemplate> TemplatesIdPortalsRelFkPutAsync (string id, string fk, PortalTemplate data = null);

        /// <summary>
        /// Add a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalTemplate>> TemplatesIdPortalsRelFkPutAsyncWithHttpInfo (string id, string fk, PortalTemplate data = null);
        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> TemplatesIdPutAsync (string id, Template data = null);

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> TemplatesIdPutAsyncWithHttpInfo (string id, Template data = null);
        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> TemplatesIdReplacePostAsync (string id, Template data = null);

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> TemplatesIdReplacePostAsyncWithHttpInfo (string id, Template data = null);
        /// <summary>
        /// Counts tags of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> TemplatesIdTagsCountGetAsync (string id, string where = null);

        /// <summary>
        /// Counts tags of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TemplatesIdTagsCountGetAsyncWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all tags of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TemplatesIdTagsDeleteAsync (string id);

        /// <summary>
        /// Deletes all tags of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdTagsDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TemplatesIdTagsFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Delete a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdTagsFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> TemplatesIdTagsFkGetAsync (string id, string fk);

        /// <summary>
        /// Find a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> TemplatesIdTagsFkGetAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> TemplatesIdTagsFkPutAsync (string id, string fk, Tag data = null);

        /// <summary>
        /// Update a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> TemplatesIdTagsFkPutAsyncWithHttpInfo (string id, string fk, Tag data = null);
        /// <summary>
        /// Queries tags of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;Tag&gt;</returns>
        System.Threading.Tasks.Task<List<Tag>> TemplatesIdTagsGetAsync (string id, string filter = null);

        /// <summary>
        /// Queries tags of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Tag&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Tag>>> TemplatesIdTagsGetAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in tags of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> TemplatesIdTagsPostAsync (string id, Tag data = null);

        /// <summary>
        /// Creates a new instance in tags of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> TemplatesIdTagsPostAsyncWithHttpInfo (string id, Tag data = null);
        /// <summary>
        /// Remove the tags relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TemplatesIdTagsRelFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Remove the tags relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdTagsRelFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Check the existence of tags relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> TemplatesIdTagsRelFkHeadAsync (string id, string fk);

        /// <summary>
        /// Check the existence of tags relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> TemplatesIdTagsRelFkHeadAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Add a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TemplateTag</returns>
        System.Threading.Tasks.Task<TemplateTag> TemplatesIdTagsRelFkPutAsync (string id, string fk, TemplateTag data = null);

        /// <summary>
        /// Add a related item by id for tags.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateTag)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateTag>> TemplatesIdTagsRelFkPutAsyncWithHttpInfo (string id, string fk, TemplateTag data = null);
        /// <summary>
        /// Fetches belongsTo relation teamFolder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of TeamTemplateFolder</returns>
        System.Threading.Tasks.Task<TeamTemplateFolder> TemplatesIdTeamFolderGetAsync (string id, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation teamFolder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamTemplateFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamTemplateFolder>> TemplatesIdTeamFolderGetAsyncWithHttpInfo (string id, bool? refresh = null);
        /// <summary>
        /// Fetches belongsTo relation team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> TemplatesIdTeamGetAsync (string id, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> TemplatesIdTeamGetAsyncWithHttpInfo (string id, bool? refresh = null);
        /// <summary>
        /// Counts templateMembers of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> TemplatesIdTemplateMembersCountGetAsync (string id, string where = null);

        /// <summary>
        /// Counts templateMembers of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TemplatesIdTemplateMembersCountGetAsyncWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all templateMembers of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TemplatesIdTemplateMembersDeleteAsync (string id);

        /// <summary>
        /// Deletes all templateMembers of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdTemplateMembersDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for templateMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for templateMembers</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TemplatesIdTemplateMembersFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Delete a related item by id for templateMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for templateMembers</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdTemplateMembersFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for templateMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for templateMembers</param>
        /// <returns>Task of TemplateMember</returns>
        System.Threading.Tasks.Task<TemplateMember> TemplatesIdTemplateMembersFkGetAsync (string id, string fk);

        /// <summary>
        /// Find a related item by id for templateMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for templateMembers</param>
        /// <returns>Task of ApiResponse (TemplateMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateMember>> TemplatesIdTemplateMembersFkGetAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for templateMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for templateMembers</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TemplateMember</returns>
        System.Threading.Tasks.Task<TemplateMember> TemplatesIdTemplateMembersFkPutAsync (string id, string fk, TemplateMember data = null);

        /// <summary>
        /// Update a related item by id for templateMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for templateMembers</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateMember>> TemplatesIdTemplateMembersFkPutAsyncWithHttpInfo (string id, string fk, TemplateMember data = null);
        /// <summary>
        /// Queries templateMembers of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;TemplateMember&gt;</returns>
        System.Threading.Tasks.Task<List<TemplateMember>> TemplatesIdTemplateMembersGetAsync (string id, string filter = null);

        /// <summary>
        /// Queries templateMembers of Template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TemplateMember&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TemplateMember>>> TemplatesIdTemplateMembersGetAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in templateMembers of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TemplateMember</returns>
        System.Threading.Tasks.Task<TemplateMember> TemplatesIdTemplateMembersPostAsync (string id, TemplateMember data = null);

        /// <summary>
        /// Creates a new instance in templateMembers of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateMember>> TemplatesIdTemplateMembersPostAsyncWithHttpInfo (string id, TemplateMember data = null);
        /// <summary>
        /// Fetches belongsTo relation uploader.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of TeamMember</returns>
        System.Threading.Tasks.Task<TeamMember> TemplatesIdUploaderGetAsync (string id, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation uploader.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMember>> TemplatesIdUploaderGetAsyncWithHttpInfo (string id, bool? refresh = null);
        /// <summary>
        /// Get URL to review a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> TemplatesIdUrlReviewGetAsync (string id);

        /// <summary>
        /// Get URL to review a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> TemplatesIdUrlReviewGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Fetches belongsTo relation workflow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of Workflow</returns>
        System.Threading.Tasks.Task<Workflow> TemplatesIdWorkflowGetAsync (string id, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation workflow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (Workflow)</returns>
        System.Threading.Tasks.Task<ApiResponse<Workflow>> TemplatesIdWorkflowGetAsyncWithHttpInfo (string id, bool? refresh = null);
        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> TemplatesPatchAsync (Template data = null);

        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> TemplatesPatchAsyncWithHttpInfo (Template data = null);
        /// <summary>
        /// Create a new instance of the model and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> TemplatesPostAsync (Template data = null);

        /// <summary>
        /// Create a new instance of the model and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> TemplatesPostAsyncWithHttpInfo (Template data = null);
        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> TemplatesPutAsync (Template data = null);

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> TemplatesPutAsyncWithHttpInfo (Template data = null);
        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> TemplatesReplaceOrCreatePostAsync (Template data = null);

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> TemplatesReplaceOrCreatePostAsyncWithHttpInfo (Template data = null);
        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> TemplatesUpdatePostAsync (string where = null, Template data = null);

        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> TemplatesUpdatePostAsyncWithHttpInfo (string where = null, Template data = null);
        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> TemplatesUpsertWithWherePostAsync (string where = null, Template data = null);

        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> TemplatesUpsertWithWherePostAsyncWithHttpInfo (string where = null, Template data = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TemplateApi : ITemplateApi
    {
        private TweakApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplateApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = TweakApi.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TemplateApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TweakApi.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TweakApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream TemplatesChangeStreamGet (string options = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = TemplatesChangeStreamGetWithHttpInfo(options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > TemplatesChangeStreamGetWithHttpInfo (string options = null)
        {

            var localVarPath = "/Templates/change-stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesChangeStreamGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> TemplatesChangeStreamGetAsync (string options = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await TemplatesChangeStreamGetAsyncWithHttpInfo(options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> TemplatesChangeStreamGetAsyncWithHttpInfo (string options = null)
        {

            var localVarPath = "/Templates/change-stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesChangeStreamGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream TemplatesChangeStreamPost (string options = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = TemplatesChangeStreamPostWithHttpInfo(options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > TemplatesChangeStreamPostWithHttpInfo (string options = null)
        {

            var localVarPath = "/Templates/change-stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarFormParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // form parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesChangeStreamPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> TemplatesChangeStreamPostAsync (string options = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await TemplatesChangeStreamPostAsyncWithHttpInfo(options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> TemplatesChangeStreamPostAsyncWithHttpInfo (string options = null)
        {

            var localVarPath = "/Templates/change-stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarFormParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // form parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesChangeStreamPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Count instances of the model matched by where from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 TemplatesCountGet (string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = TemplatesCountGetWithHttpInfo(where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Count instances of the model matched by where from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > TemplatesCountGetWithHttpInfo (string where = null)
        {

            var localVarPath = "/Templates/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Count instances of the model matched by where from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> TemplatesCountGetAsync (string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await TemplatesCountGetAsyncWithHttpInfo(where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Count instances of the model matched by where from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TemplatesCountGetAsyncWithHttpInfo (string where = null)
        {

            var localVarPath = "/Templates/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Find first instance of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Template</returns>
        public Template TemplatesFindOneGet (string filter = null)
        {
             ApiResponse<Template> localVarResponse = TemplatesFindOneGetWithHttpInfo(filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find first instance of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse< Template > TemplatesFindOneGetWithHttpInfo (string filter = null)
        {

            var localVarPath = "/Templates/findOne";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesFindOneGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Find first instance of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> TemplatesFindOneGetAsync (string filter = null)
        {
             ApiResponse<Template> localVarResponse = await TemplatesFindOneGetAsyncWithHttpInfo(filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find first instance of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template>> TemplatesFindOneGetAsyncWithHttpInfo (string filter = null)
        {

            var localVarPath = "/Templates/findOne";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesFindOneGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Find all instances of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>List&lt;Template&gt;</returns>
        public List<Template> TemplatesGet (string filter = null)
        {
             ApiResponse<List<Template>> localVarResponse = TemplatesGetWithHttpInfo(filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find all instances of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of List&lt;Template&gt;</returns>
        public ApiResponse< List<Template> > TemplatesGetWithHttpInfo (string filter = null)
        {

            var localVarPath = "/Templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Template>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Template>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Template>)));
            
        }

        /// <summary>
        /// Find all instances of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of List&lt;Template&gt;</returns>
        public async System.Threading.Tasks.Task<List<Template>> TemplatesGetAsync (string filter = null)
        {
             ApiResponse<List<Template>> localVarResponse = await TemplatesGetAsyncWithHttpInfo(filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find all instances of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Template&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Template>>> TemplatesGetAsyncWithHttpInfo (string filter = null)
        {

            var localVarPath = "/Templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Template>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Template>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Template>)));
            
        }

        /// <summary>
        /// Delete a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Object</returns>
        public Object TemplatesIdDelete (string id)
        {
             ApiResponse<Object> localVarResponse = TemplatesIdDeleteWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > TemplatesIdDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdDelete");

            var localVarPath = "/Templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Delete a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TemplatesIdDeleteAsync (string id)
        {
             ApiResponse<Object> localVarResponse = await TemplatesIdDeleteAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdDelete");

            var localVarPath = "/Templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Counts designs of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 TemplatesIdDesignsCountGet (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = TemplatesIdDesignsCountGetWithHttpInfo(id, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts designs of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > TemplatesIdDesignsCountGetWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdDesignsCountGet");

            var localVarPath = "/Templates/{id}/designs/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdDesignsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts designs of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> TemplatesIdDesignsCountGetAsync (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await TemplatesIdDesignsCountGetAsyncWithHttpInfo(id, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts designs of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TemplatesIdDesignsCountGetAsyncWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdDesignsCountGet");

            var localVarPath = "/Templates/{id}/designs/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdDesignsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all designs of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns></returns>
        public void TemplatesIdDesignsDelete (string id)
        {
             TemplatesIdDesignsDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes all designs of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TemplatesIdDesignsDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdDesignsDelete");

            var localVarPath = "/Templates/{id}/designs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdDesignsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all designs of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TemplatesIdDesignsDeleteAsync (string id)
        {
             await TemplatesIdDesignsDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes all designs of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdDesignsDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdDesignsDelete");

            var localVarPath = "/Templates/{id}/designs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdDesignsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for designs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns></returns>
        public void TemplatesIdDesignsFkDelete (string id, string fk)
        {
             TemplatesIdDesignsFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Delete a related item by id for designs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TemplatesIdDesignsFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdDesignsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdDesignsFkDelete");

            var localVarPath = "/Templates/{id}/designs/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdDesignsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for designs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TemplatesIdDesignsFkDeleteAsync (string id, string fk)
        {
             await TemplatesIdDesignsFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Delete a related item by id for designs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdDesignsFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdDesignsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdDesignsFkDelete");

            var localVarPath = "/Templates/{id}/designs/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdDesignsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for designs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns>Design</returns>
        public Design TemplatesIdDesignsFkGet (string id, string fk)
        {
             ApiResponse<Design> localVarResponse = TemplatesIdDesignsFkGetWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for designs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns>ApiResponse of Design</returns>
        public ApiResponse< Design > TemplatesIdDesignsFkGetWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdDesignsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdDesignsFkGet");

            var localVarPath = "/Templates/{id}/designs/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdDesignsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Design>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Design) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Design)));
            
        }

        /// <summary>
        /// Find a related item by id for designs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns>Task of Design</returns>
        public async System.Threading.Tasks.Task<Design> TemplatesIdDesignsFkGetAsync (string id, string fk)
        {
             ApiResponse<Design> localVarResponse = await TemplatesIdDesignsFkGetAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for designs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <returns>Task of ApiResponse (Design)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Design>> TemplatesIdDesignsFkGetAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdDesignsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdDesignsFkGet");

            var localVarPath = "/Templates/{id}/designs/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdDesignsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Design>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Design) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Design)));
            
        }

        /// <summary>
        /// Update a related item by id for designs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Design</returns>
        public Design TemplatesIdDesignsFkPut (string id, string fk, Design data = null)
        {
             ApiResponse<Design> localVarResponse = TemplatesIdDesignsFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for designs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Design</returns>
        public ApiResponse< Design > TemplatesIdDesignsFkPutWithHttpInfo (string id, string fk, Design data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdDesignsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdDesignsFkPut");

            var localVarPath = "/Templates/{id}/designs/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdDesignsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Design>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Design) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Design)));
            
        }

        /// <summary>
        /// Update a related item by id for designs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Design</returns>
        public async System.Threading.Tasks.Task<Design> TemplatesIdDesignsFkPutAsync (string id, string fk, Design data = null)
        {
             ApiResponse<Design> localVarResponse = await TemplatesIdDesignsFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for designs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for designs</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Design)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Design>> TemplatesIdDesignsFkPutAsyncWithHttpInfo (string id, string fk, Design data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdDesignsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdDesignsFkPut");

            var localVarPath = "/Templates/{id}/designs/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdDesignsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Design>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Design) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Design)));
            
        }

        /// <summary>
        /// Generate design from template 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>Design</returns>
        public Design TemplatesIdDesignsGeneratePost (string id, string id2, Template data = null)
        {
             ApiResponse<Design> localVarResponse = TemplatesIdDesignsGeneratePostWithHttpInfo(id, id2, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate design from template 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Design</returns>
        public ApiResponse< Design > TemplatesIdDesignsGeneratePostWithHttpInfo (string id, string id2, Template data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdDesignsGeneratePost");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling TemplateApi->TemplatesIdDesignsGeneratePost");

            var localVarPath = "/Templates/{id}/designs/generate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdDesignsGeneratePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Design>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Design) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Design)));
            
        }

        /// <summary>
        /// Generate design from template 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Design</returns>
        public async System.Threading.Tasks.Task<Design> TemplatesIdDesignsGeneratePostAsync (string id, string id2, Template data = null)
        {
             ApiResponse<Design> localVarResponse = await TemplatesIdDesignsGeneratePostAsyncWithHttpInfo(id, id2, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate design from template 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2"></param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Design)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Design>> TemplatesIdDesignsGeneratePostAsyncWithHttpInfo (string id, string id2, Template data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdDesignsGeneratePost");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling TemplateApi->TemplatesIdDesignsGeneratePost");

            var localVarPath = "/Templates/{id}/designs/generate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdDesignsGeneratePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Design>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Design) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Design)));
            
        }

        /// <summary>
        /// Queries designs of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;Design&gt;</returns>
        public List<Design> TemplatesIdDesignsGet (string id, string filter = null)
        {
             ApiResponse<List<Design>> localVarResponse = TemplatesIdDesignsGetWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries designs of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Design&gt;</returns>
        public ApiResponse< List<Design> > TemplatesIdDesignsGetWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdDesignsGet");

            var localVarPath = "/Templates/{id}/designs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdDesignsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Design>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Design>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Design>)));
            
        }

        /// <summary>
        /// Queries designs of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;Design&gt;</returns>
        public async System.Threading.Tasks.Task<List<Design>> TemplatesIdDesignsGetAsync (string id, string filter = null)
        {
             ApiResponse<List<Design>> localVarResponse = await TemplatesIdDesignsGetAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries designs of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Design&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Design>>> TemplatesIdDesignsGetAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdDesignsGet");

            var localVarPath = "/Templates/{id}/designs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdDesignsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Design>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Design>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Design>)));
            
        }

        /// <summary>
        /// Creates a new instance in designs of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Design</returns>
        public Design TemplatesIdDesignsPost (string id, Design data = null)
        {
             ApiResponse<Design> localVarResponse = TemplatesIdDesignsPostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in designs of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Design</returns>
        public ApiResponse< Design > TemplatesIdDesignsPostWithHttpInfo (string id, Design data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdDesignsPost");

            var localVarPath = "/Templates/{id}/designs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdDesignsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Design>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Design) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Design)));
            
        }

        /// <summary>
        /// Creates a new instance in designs of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Design</returns>
        public async System.Threading.Tasks.Task<Design> TemplatesIdDesignsPostAsync (string id, Design data = null)
        {
             ApiResponse<Design> localVarResponse = await TemplatesIdDesignsPostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in designs of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Design)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Design>> TemplatesIdDesignsPostAsyncWithHttpInfo (string id, Design data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdDesignsPost");

            var localVarPath = "/Templates/{id}/designs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdDesignsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Design>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Design) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Design)));
            
        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 TemplatesIdExistsGet (string id)
        {
             ApiResponse<InlineResponse2002> localVarResponse = TemplatesIdExistsGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > TemplatesIdExistsGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdExistsGet");

            var localVarPath = "/Templates/{id}/exists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdExistsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
            
        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> TemplatesIdExistsGetAsync (string id)
        {
             ApiResponse<InlineResponse2002> localVarResponse = await TemplatesIdExistsGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> TemplatesIdExistsGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdExistsGet");

            var localVarPath = "/Templates/{id}/exists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdExistsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
            
        }

        /// <summary>
        /// Find a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Template</returns>
        public Template TemplatesIdGet (string id, string filter = null)
        {
             ApiResponse<Template> localVarResponse = TemplatesIdGetWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse< Template > TemplatesIdGetWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdGet");

            var localVarPath = "/Templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Find a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> TemplatesIdGetAsync (string id, string filter = null)
        {
             ApiResponse<Template> localVarResponse = await TemplatesIdGetAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template>> TemplatesIdGetAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdGet");

            var localVarPath = "/Templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 TemplatesIdHead (string id)
        {
             ApiResponse<InlineResponse2002> localVarResponse = TemplatesIdHeadWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > TemplatesIdHeadWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdHead");

            var localVarPath = "/Templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
            
        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> TemplatesIdHeadAsync (string id)
        {
             ApiResponse<InlineResponse2002> localVarResponse = await TemplatesIdHeadAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> TemplatesIdHeadAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdHead");

            var localVarPath = "/Templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
            
        }

        /// <summary>
        /// Delete InvitationTickets for this Template 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2">Template id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <returns>Object</returns>
        public Object TemplatesIdInvitationTicketsFkDelete (string id, string id2, string fk)
        {
             ApiResponse<Object> localVarResponse = TemplatesIdInvitationTicketsFkDeleteWithHttpInfo(id, id2, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete InvitationTickets for this Template 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2">Template id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > TemplatesIdInvitationTicketsFkDeleteWithHttpInfo (string id, string id2, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdInvitationTicketsFkDelete");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling TemplateApi->TemplatesIdInvitationTicketsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdInvitationTicketsFkDelete");

            var localVarPath = "/Templates/{id}/invitationTickets/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdInvitationTicketsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Delete InvitationTickets for this Template 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2">Template id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TemplatesIdInvitationTicketsFkDeleteAsync (string id, string id2, string fk)
        {
             ApiResponse<Object> localVarResponse = await TemplatesIdInvitationTicketsFkDeleteAsyncWithHttpInfo(id, id2, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete InvitationTickets for this Template 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2">Template id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdInvitationTicketsFkDeleteAsyncWithHttpInfo (string id, string id2, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdInvitationTicketsFkDelete");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling TemplateApi->TemplatesIdInvitationTicketsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdInvitationTicketsFkDelete");

            var localVarPath = "/Templates/{id}/invitationTickets/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdInvitationTicketsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Get InvitationTicket by Id for this Template 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2">Template id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <param name="filter">Only include changes that match this filter (optional)</param>
        /// <returns>InvitationTicket</returns>
        public InvitationTicket TemplatesIdInvitationTicketsFkGet (string id, string id2, string fk, string filter = null)
        {
             ApiResponse<InvitationTicket> localVarResponse = TemplatesIdInvitationTicketsFkGetWithHttpInfo(id, id2, fk, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get InvitationTicket by Id for this Template 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2">Template id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <param name="filter">Only include changes that match this filter (optional)</param>
        /// <returns>ApiResponse of InvitationTicket</returns>
        public ApiResponse< InvitationTicket > TemplatesIdInvitationTicketsFkGetWithHttpInfo (string id, string id2, string fk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdInvitationTicketsFkGet");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling TemplateApi->TemplatesIdInvitationTicketsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdInvitationTicketsFkGet");

            var localVarPath = "/Templates/{id}/invitationTickets/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdInvitationTicketsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationTicket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationTicket) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationTicket)));
            
        }

        /// <summary>
        /// Get InvitationTicket by Id for this Template 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2">Template id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <param name="filter">Only include changes that match this filter (optional)</param>
        /// <returns>Task of InvitationTicket</returns>
        public async System.Threading.Tasks.Task<InvitationTicket> TemplatesIdInvitationTicketsFkGetAsync (string id, string id2, string fk, string filter = null)
        {
             ApiResponse<InvitationTicket> localVarResponse = await TemplatesIdInvitationTicketsFkGetAsyncWithHttpInfo(id, id2, fk, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get InvitationTicket by Id for this Template 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2">Template id</param>
        /// <param name="fk">InvitationTicket id</param>
        /// <param name="filter">Only include changes that match this filter (optional)</param>
        /// <returns>Task of ApiResponse (InvitationTicket)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvitationTicket>> TemplatesIdInvitationTicketsFkGetAsyncWithHttpInfo (string id, string id2, string fk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdInvitationTicketsFkGet");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling TemplateApi->TemplatesIdInvitationTicketsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdInvitationTicketsFkGet");

            var localVarPath = "/Templates/{id}/invitationTickets/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdInvitationTicketsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationTicket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationTicket) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationTicket)));
            
        }

        /// <summary>
        /// List InvitationTickets for this Template 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2">Template id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>List&lt;InvitationTicket&gt;</returns>
        public List<InvitationTicket> TemplatesIdInvitationTicketsGet (string id, string id2, string filter = null)
        {
             ApiResponse<List<InvitationTicket>> localVarResponse = TemplatesIdInvitationTicketsGetWithHttpInfo(id, id2, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List InvitationTickets for this Template 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2">Template id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of List&lt;InvitationTicket&gt;</returns>
        public ApiResponse< List<InvitationTicket> > TemplatesIdInvitationTicketsGetWithHttpInfo (string id, string id2, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdInvitationTicketsGet");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling TemplateApi->TemplatesIdInvitationTicketsGet");

            var localVarPath = "/Templates/{id}/invitationTickets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdInvitationTicketsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InvitationTicket>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InvitationTicket>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InvitationTicket>)));
            
        }

        /// <summary>
        /// List InvitationTickets for this Template 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2">Template id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of List&lt;InvitationTicket&gt;</returns>
        public async System.Threading.Tasks.Task<List<InvitationTicket>> TemplatesIdInvitationTicketsGetAsync (string id, string id2, string filter = null)
        {
             ApiResponse<List<InvitationTicket>> localVarResponse = await TemplatesIdInvitationTicketsGetAsyncWithHttpInfo(id, id2, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List InvitationTickets for this Template 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="id2">Template id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InvitationTicket&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InvitationTicket>>> TemplatesIdInvitationTicketsGetAsyncWithHttpInfo (string id, string id2, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdInvitationTicketsGet");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling TemplateApi->TemplatesIdInvitationTicketsGet");

            var localVarPath = "/Templates/{id}/invitationTickets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdInvitationTicketsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InvitationTicket>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InvitationTicket>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InvitationTicket>)));
            
        }

        /// <summary>
        /// Counts members of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 TemplatesIdMembersCountGet (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = TemplatesIdMembersCountGetWithHttpInfo(id, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts members of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > TemplatesIdMembersCountGetWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdMembersCountGet");

            var localVarPath = "/Templates/{id}/members/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdMembersCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts members of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> TemplatesIdMembersCountGetAsync (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await TemplatesIdMembersCountGetAsyncWithHttpInfo(id, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts members of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TemplatesIdMembersCountGetAsyncWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdMembersCountGet");

            var localVarPath = "/Templates/{id}/members/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdMembersCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all members of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns></returns>
        public void TemplatesIdMembersDelete (string id)
        {
             TemplatesIdMembersDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes all members of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TemplatesIdMembersDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdMembersDelete");

            var localVarPath = "/Templates/{id}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdMembersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all members of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TemplatesIdMembersDeleteAsync (string id)
        {
             await TemplatesIdMembersDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes all members of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdMembersDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdMembersDelete");

            var localVarPath = "/Templates/{id}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdMembersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns></returns>
        public void TemplatesIdMembersFkDelete (string id, string fk)
        {
             TemplatesIdMembersFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Delete a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TemplatesIdMembersFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdMembersFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdMembersFkDelete");

            var localVarPath = "/Templates/{id}/members/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdMembersFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TemplatesIdMembersFkDeleteAsync (string id, string fk)
        {
             await TemplatesIdMembersFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Delete a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdMembersFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdMembersFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdMembersFkDelete");

            var localVarPath = "/Templates/{id}/members/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdMembersFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>TeamMember</returns>
        public TeamMember TemplatesIdMembersFkGet (string id, string fk)
        {
             ApiResponse<TeamMember> localVarResponse = TemplatesIdMembersFkGetWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>ApiResponse of TeamMember</returns>
        public ApiResponse< TeamMember > TemplatesIdMembersFkGetWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdMembersFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdMembersFkGet");

            var localVarPath = "/Templates/{id}/members/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdMembersFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Find a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of TeamMember</returns>
        public async System.Threading.Tasks.Task<TeamMember> TemplatesIdMembersFkGetAsync (string id, string fk)
        {
             ApiResponse<TeamMember> localVarResponse = await TemplatesIdMembersFkGetAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMember>> TemplatesIdMembersFkGetAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdMembersFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdMembersFkGet");

            var localVarPath = "/Templates/{id}/members/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdMembersFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Update a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamMember</returns>
        public TeamMember TemplatesIdMembersFkPut (string id, string fk, TeamMember data = null)
        {
             ApiResponse<TeamMember> localVarResponse = TemplatesIdMembersFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        public ApiResponse< TeamMember > TemplatesIdMembersFkPutWithHttpInfo (string id, string fk, TeamMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdMembersFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdMembersFkPut");

            var localVarPath = "/Templates/{id}/members/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdMembersFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Update a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamMember</returns>
        public async System.Threading.Tasks.Task<TeamMember> TemplatesIdMembersFkPutAsync (string id, string fk, TeamMember data = null)
        {
             ApiResponse<TeamMember> localVarResponse = await TemplatesIdMembersFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMember>> TemplatesIdMembersFkPutAsyncWithHttpInfo (string id, string fk, TeamMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdMembersFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdMembersFkPut");

            var localVarPath = "/Templates/{id}/members/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdMembersFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Queries members of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;TeamMember&gt;</returns>
        public List<TeamMember> TemplatesIdMembersGet (string id, string filter = null)
        {
             ApiResponse<List<TeamMember>> localVarResponse = TemplatesIdMembersGetWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries members of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamMember&gt;</returns>
        public ApiResponse< List<TeamMember> > TemplatesIdMembersGetWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdMembersGet");

            var localVarPath = "/Templates/{id}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TeamMember>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TeamMember>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamMember>)));
            
        }

        /// <summary>
        /// Queries members of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;TeamMember&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamMember>> TemplatesIdMembersGetAsync (string id, string filter = null)
        {
             ApiResponse<List<TeamMember>> localVarResponse = await TemplatesIdMembersGetAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries members of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamMember&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TeamMember>>> TemplatesIdMembersGetAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdMembersGet");

            var localVarPath = "/Templates/{id}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TeamMember>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TeamMember>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamMember>)));
            
        }

        /// <summary>
        /// Creates a new instance in members of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamMember</returns>
        public TeamMember TemplatesIdMembersPost (string id, TeamMember data = null)
        {
             ApiResponse<TeamMember> localVarResponse = TemplatesIdMembersPostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in members of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        public ApiResponse< TeamMember > TemplatesIdMembersPostWithHttpInfo (string id, TeamMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdMembersPost");

            var localVarPath = "/Templates/{id}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Creates a new instance in members of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamMember</returns>
        public async System.Threading.Tasks.Task<TeamMember> TemplatesIdMembersPostAsync (string id, TeamMember data = null)
        {
             ApiResponse<TeamMember> localVarResponse = await TemplatesIdMembersPostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in members of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMember>> TemplatesIdMembersPostAsyncWithHttpInfo (string id, TeamMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdMembersPost");

            var localVarPath = "/Templates/{id}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Remove the members relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns></returns>
        public void TemplatesIdMembersRelFkDelete (string id, string fk)
        {
             TemplatesIdMembersRelFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Remove the members relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TemplatesIdMembersRelFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdMembersRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdMembersRelFkDelete");

            var localVarPath = "/Templates/{id}/members/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdMembersRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove the members relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TemplatesIdMembersRelFkDeleteAsync (string id, string fk)
        {
             await TemplatesIdMembersRelFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Remove the members relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdMembersRelFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdMembersRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdMembersRelFkDelete");

            var localVarPath = "/Templates/{id}/members/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdMembersRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Check the existence of members relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>bool?</returns>
        public bool? TemplatesIdMembersRelFkHead (string id, string fk)
        {
             ApiResponse<bool?> localVarResponse = TemplatesIdMembersRelFkHeadWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check the existence of members relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > TemplatesIdMembersRelFkHeadWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdMembersRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdMembersRelFkHead");

            var localVarPath = "/Templates/{id}/members/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdMembersRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Check the existence of members relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> TemplatesIdMembersRelFkHeadAsync (string id, string fk)
        {
             ApiResponse<bool?> localVarResponse = await TemplatesIdMembersRelFkHeadAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check the existence of members relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> TemplatesIdMembersRelFkHeadAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdMembersRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdMembersRelFkHead");

            var localVarPath = "/Templates/{id}/members/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdMembersRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Add a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TemplateMember</returns>
        public TemplateMember TemplatesIdMembersRelFkPut (string id, string fk, TemplateMember data = null)
        {
             ApiResponse<TemplateMember> localVarResponse = TemplatesIdMembersRelFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TemplateMember</returns>
        public ApiResponse< TemplateMember > TemplatesIdMembersRelFkPutWithHttpInfo (string id, string fk, TemplateMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdMembersRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdMembersRelFkPut");

            var localVarPath = "/Templates/{id}/members/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdMembersRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateMember)));
            
        }

        /// <summary>
        /// Add a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TemplateMember</returns>
        public async System.Threading.Tasks.Task<TemplateMember> TemplatesIdMembersRelFkPutAsync (string id, string fk, TemplateMember data = null)
        {
             ApiResponse<TemplateMember> localVarResponse = await TemplatesIdMembersRelFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateMember>> TemplatesIdMembersRelFkPutAsyncWithHttpInfo (string id, string fk, TemplateMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdMembersRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdMembersRelFkPut");

            var localVarPath = "/Templates/{id}/members/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdMembersRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateMember)));
            
        }

        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Template</returns>
        public Template TemplatesIdPatch (string id, Template data = null)
        {
             ApiResponse<Template> localVarResponse = TemplatesIdPatchWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse< Template > TemplatesIdPatchWithHttpInfo (string id, Template data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPatch");

            var localVarPath = "/Templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> TemplatesIdPatchAsync (string id, Template data = null)
        {
             ApiResponse<Template> localVarResponse = await TemplatesIdPatchAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template>> TemplatesIdPatchAsyncWithHttpInfo (string id, Template data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPatch");

            var localVarPath = "/Templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Deletes permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns></returns>
        public void TemplatesIdPermissionDelete (string id)
        {
             TemplatesIdPermissionDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TemplatesIdPermissionDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPermissionDelete");

            var localVarPath = "/Templates/{id}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPermissionDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TemplatesIdPermissionDeleteAsync (string id)
        {
             await TemplatesIdPermissionDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdPermissionDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPermissionDelete");

            var localVarPath = "/Templates/{id}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPermissionDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Fetches hasOne relation permission. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>TemplatePermissionSet</returns>
        public TemplatePermissionSet TemplatesIdPermissionGet (string id, bool? refresh = null)
        {
             ApiResponse<TemplatePermissionSet> localVarResponse = TemplatesIdPermissionGetWithHttpInfo(id, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches hasOne relation permission. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of TemplatePermissionSet</returns>
        public ApiResponse< TemplatePermissionSet > TemplatesIdPermissionGetWithHttpInfo (string id, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPermissionGet");

            var localVarPath = "/Templates/{id}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPermissionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplatePermissionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplatePermissionSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplatePermissionSet)));
            
        }

        /// <summary>
        /// Fetches hasOne relation permission. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of TemplatePermissionSet</returns>
        public async System.Threading.Tasks.Task<TemplatePermissionSet> TemplatesIdPermissionGetAsync (string id, bool? refresh = null)
        {
             ApiResponse<TemplatePermissionSet> localVarResponse = await TemplatesIdPermissionGetAsyncWithHttpInfo(id, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches hasOne relation permission. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplatePermissionSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplatePermissionSet>> TemplatesIdPermissionGetAsyncWithHttpInfo (string id, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPermissionGet");

            var localVarPath = "/Templates/{id}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPermissionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplatePermissionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplatePermissionSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplatePermissionSet)));
            
        }

        /// <summary>
        /// Creates a new instance in permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TemplatePermissionSet</returns>
        public TemplatePermissionSet TemplatesIdPermissionPost (string id, TemplatePermissionSet data = null)
        {
             ApiResponse<TemplatePermissionSet> localVarResponse = TemplatesIdPermissionPostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TemplatePermissionSet</returns>
        public ApiResponse< TemplatePermissionSet > TemplatesIdPermissionPostWithHttpInfo (string id, TemplatePermissionSet data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPermissionPost");

            var localVarPath = "/Templates/{id}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPermissionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplatePermissionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplatePermissionSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplatePermissionSet)));
            
        }

        /// <summary>
        /// Creates a new instance in permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TemplatePermissionSet</returns>
        public async System.Threading.Tasks.Task<TemplatePermissionSet> TemplatesIdPermissionPostAsync (string id, TemplatePermissionSet data = null)
        {
             ApiResponse<TemplatePermissionSet> localVarResponse = await TemplatesIdPermissionPostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplatePermissionSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplatePermissionSet>> TemplatesIdPermissionPostAsyncWithHttpInfo (string id, TemplatePermissionSet data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPermissionPost");

            var localVarPath = "/Templates/{id}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPermissionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplatePermissionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplatePermissionSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplatePermissionSet)));
            
        }

        /// <summary>
        /// Update permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TemplatePermissionSet</returns>
        public TemplatePermissionSet TemplatesIdPermissionPut (string id, TemplatePermissionSet data = null)
        {
             ApiResponse<TemplatePermissionSet> localVarResponse = TemplatesIdPermissionPutWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TemplatePermissionSet</returns>
        public ApiResponse< TemplatePermissionSet > TemplatesIdPermissionPutWithHttpInfo (string id, TemplatePermissionSet data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPermissionPut");

            var localVarPath = "/Templates/{id}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPermissionPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplatePermissionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplatePermissionSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplatePermissionSet)));
            
        }

        /// <summary>
        /// Update permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TemplatePermissionSet</returns>
        public async System.Threading.Tasks.Task<TemplatePermissionSet> TemplatesIdPermissionPutAsync (string id, TemplatePermissionSet data = null)
        {
             ApiResponse<TemplatePermissionSet> localVarResponse = await TemplatesIdPermissionPutAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplatePermissionSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplatePermissionSet>> TemplatesIdPermissionPutAsyncWithHttpInfo (string id, TemplatePermissionSet data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPermissionPut");

            var localVarPath = "/Templates/{id}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPermissionPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplatePermissionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplatePermissionSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplatePermissionSet)));
            
        }

        /// <summary>
        /// Counts portalFolders of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 TemplatesIdPortalFoldersCountGet (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = TemplatesIdPortalFoldersCountGetWithHttpInfo(id, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts portalFolders of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > TemplatesIdPortalFoldersCountGetWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalFoldersCountGet");

            var localVarPath = "/Templates/{id}/portalFolders/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalFoldersCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts portalFolders of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> TemplatesIdPortalFoldersCountGetAsync (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await TemplatesIdPortalFoldersCountGetAsyncWithHttpInfo(id, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts portalFolders of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TemplatesIdPortalFoldersCountGetAsyncWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalFoldersCountGet");

            var localVarPath = "/Templates/{id}/portalFolders/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalFoldersCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all portalFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns></returns>
        public void TemplatesIdPortalFoldersDelete (string id)
        {
             TemplatesIdPortalFoldersDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes all portalFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TemplatesIdPortalFoldersDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalFoldersDelete");

            var localVarPath = "/Templates/{id}/portalFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalFoldersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all portalFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TemplatesIdPortalFoldersDeleteAsync (string id)
        {
             await TemplatesIdPortalFoldersDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes all portalFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdPortalFoldersDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalFoldersDelete");

            var localVarPath = "/Templates/{id}/portalFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalFoldersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for portalFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns></returns>
        public void TemplatesIdPortalFoldersFkDelete (string id, string fk)
        {
             TemplatesIdPortalFoldersFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Delete a related item by id for portalFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TemplatesIdPortalFoldersFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalFoldersFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdPortalFoldersFkDelete");

            var localVarPath = "/Templates/{id}/portalFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalFoldersFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for portalFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TemplatesIdPortalFoldersFkDeleteAsync (string id, string fk)
        {
             await TemplatesIdPortalFoldersFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Delete a related item by id for portalFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdPortalFoldersFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalFoldersFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdPortalFoldersFkDelete");

            var localVarPath = "/Templates/{id}/portalFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalFoldersFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for portalFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns>PortalTemplateFolder</returns>
        public PortalTemplateFolder TemplatesIdPortalFoldersFkGet (string id, string fk)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = TemplatesIdPortalFoldersFkGetWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for portalFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        public ApiResponse< PortalTemplateFolder > TemplatesIdPortalFoldersFkGetWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalFoldersFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdPortalFoldersFkGet");

            var localVarPath = "/Templates/{id}/portalFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalFoldersFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Find a related item by id for portalFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        public async System.Threading.Tasks.Task<PortalTemplateFolder> TemplatesIdPortalFoldersFkGetAsync (string id, string fk)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = await TemplatesIdPortalFoldersFkGetAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for portalFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> TemplatesIdPortalFoldersFkGetAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalFoldersFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdPortalFoldersFkGet");

            var localVarPath = "/Templates/{id}/portalFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalFoldersFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Update a related item by id for portalFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        public PortalTemplateFolder TemplatesIdPortalFoldersFkPut (string id, string fk, PortalTemplateFolder data = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = TemplatesIdPortalFoldersFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for portalFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        public ApiResponse< PortalTemplateFolder > TemplatesIdPortalFoldersFkPutWithHttpInfo (string id, string fk, PortalTemplateFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalFoldersFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdPortalFoldersFkPut");

            var localVarPath = "/Templates/{id}/portalFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalFoldersFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Update a related item by id for portalFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        public async System.Threading.Tasks.Task<PortalTemplateFolder> TemplatesIdPortalFoldersFkPutAsync (string id, string fk, PortalTemplateFolder data = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = await TemplatesIdPortalFoldersFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for portalFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> TemplatesIdPortalFoldersFkPutAsyncWithHttpInfo (string id, string fk, PortalTemplateFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalFoldersFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdPortalFoldersFkPut");

            var localVarPath = "/Templates/{id}/portalFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalFoldersFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Queries portalFolders of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;PortalTemplateFolder&gt;</returns>
        public List<PortalTemplateFolder> TemplatesIdPortalFoldersGet (string id, string filter = null)
        {
             ApiResponse<List<PortalTemplateFolder>> localVarResponse = TemplatesIdPortalFoldersGetWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries portalFolders of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;PortalTemplateFolder&gt;</returns>
        public ApiResponse< List<PortalTemplateFolder> > TemplatesIdPortalFoldersGetWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalFoldersGet");

            var localVarPath = "/Templates/{id}/portalFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalFoldersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PortalTemplateFolder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PortalTemplateFolder>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PortalTemplateFolder>)));
            
        }

        /// <summary>
        /// Queries portalFolders of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;PortalTemplateFolder&gt;</returns>
        public async System.Threading.Tasks.Task<List<PortalTemplateFolder>> TemplatesIdPortalFoldersGetAsync (string id, string filter = null)
        {
             ApiResponse<List<PortalTemplateFolder>> localVarResponse = await TemplatesIdPortalFoldersGetAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries portalFolders of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PortalTemplateFolder&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PortalTemplateFolder>>> TemplatesIdPortalFoldersGetAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalFoldersGet");

            var localVarPath = "/Templates/{id}/portalFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalFoldersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PortalTemplateFolder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PortalTemplateFolder>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PortalTemplateFolder>)));
            
        }

        /// <summary>
        /// Creates a new instance in portalFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        public PortalTemplateFolder TemplatesIdPortalFoldersPost (string id, PortalTemplateFolder data = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = TemplatesIdPortalFoldersPostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in portalFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        public ApiResponse< PortalTemplateFolder > TemplatesIdPortalFoldersPostWithHttpInfo (string id, PortalTemplateFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalFoldersPost");

            var localVarPath = "/Templates/{id}/portalFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalFoldersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Creates a new instance in portalFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        public async System.Threading.Tasks.Task<PortalTemplateFolder> TemplatesIdPortalFoldersPostAsync (string id, PortalTemplateFolder data = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = await TemplatesIdPortalFoldersPostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in portalFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> TemplatesIdPortalFoldersPostAsyncWithHttpInfo (string id, PortalTemplateFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalFoldersPost");

            var localVarPath = "/Templates/{id}/portalFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalFoldersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Remove the portalFolders relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns></returns>
        public void TemplatesIdPortalFoldersRelFkDelete (string id, string fk)
        {
             TemplatesIdPortalFoldersRelFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Remove the portalFolders relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TemplatesIdPortalFoldersRelFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalFoldersRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdPortalFoldersRelFkDelete");

            var localVarPath = "/Templates/{id}/portalFolders/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalFoldersRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove the portalFolders relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TemplatesIdPortalFoldersRelFkDeleteAsync (string id, string fk)
        {
             await TemplatesIdPortalFoldersRelFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Remove the portalFolders relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdPortalFoldersRelFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalFoldersRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdPortalFoldersRelFkDelete");

            var localVarPath = "/Templates/{id}/portalFolders/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalFoldersRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Check the existence of portalFolders relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns>bool?</returns>
        public bool? TemplatesIdPortalFoldersRelFkHead (string id, string fk)
        {
             ApiResponse<bool?> localVarResponse = TemplatesIdPortalFoldersRelFkHeadWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check the existence of portalFolders relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > TemplatesIdPortalFoldersRelFkHeadWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalFoldersRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdPortalFoldersRelFkHead");

            var localVarPath = "/Templates/{id}/portalFolders/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalFoldersRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Check the existence of portalFolders relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> TemplatesIdPortalFoldersRelFkHeadAsync (string id, string fk)
        {
             ApiResponse<bool?> localVarResponse = await TemplatesIdPortalFoldersRelFkHeadAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check the existence of portalFolders relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> TemplatesIdPortalFoldersRelFkHeadAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalFoldersRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdPortalFoldersRelFkHead");

            var localVarPath = "/Templates/{id}/portalFolders/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalFoldersRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Add a related item by id for portalFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalTemplate</returns>
        public PortalTemplate TemplatesIdPortalFoldersRelFkPut (string id, string fk, PortalTemplate data = null)
        {
             ApiResponse<PortalTemplate> localVarResponse = TemplatesIdPortalFoldersRelFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a related item by id for portalFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalTemplate</returns>
        public ApiResponse< PortalTemplate > TemplatesIdPortalFoldersRelFkPutWithHttpInfo (string id, string fk, PortalTemplate data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalFoldersRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdPortalFoldersRelFkPut");

            var localVarPath = "/Templates/{id}/portalFolders/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalFoldersRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplate)));
            
        }

        /// <summary>
        /// Add a related item by id for portalFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalTemplate</returns>
        public async System.Threading.Tasks.Task<PortalTemplate> TemplatesIdPortalFoldersRelFkPutAsync (string id, string fk, PortalTemplate data = null)
        {
             ApiResponse<PortalTemplate> localVarResponse = await TemplatesIdPortalFoldersRelFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a related item by id for portalFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portalFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalTemplate>> TemplatesIdPortalFoldersRelFkPutAsyncWithHttpInfo (string id, string fk, PortalTemplate data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalFoldersRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdPortalFoldersRelFkPut");

            var localVarPath = "/Templates/{id}/portalFolders/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalFoldersRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplate)));
            
        }

        /// <summary>
        /// Counts portals of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 TemplatesIdPortalsCountGet (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = TemplatesIdPortalsCountGetWithHttpInfo(id, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts portals of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > TemplatesIdPortalsCountGetWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalsCountGet");

            var localVarPath = "/Templates/{id}/portals/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts portals of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> TemplatesIdPortalsCountGetAsync (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await TemplatesIdPortalsCountGetAsyncWithHttpInfo(id, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts portals of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TemplatesIdPortalsCountGetAsyncWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalsCountGet");

            var localVarPath = "/Templates/{id}/portals/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all portals of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns></returns>
        public void TemplatesIdPortalsDelete (string id)
        {
             TemplatesIdPortalsDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes all portals of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TemplatesIdPortalsDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalsDelete");

            var localVarPath = "/Templates/{id}/portals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all portals of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TemplatesIdPortalsDeleteAsync (string id)
        {
             await TemplatesIdPortalsDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes all portals of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdPortalsDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalsDelete");

            var localVarPath = "/Templates/{id}/portals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns></returns>
        public void TemplatesIdPortalsFkDelete (string id, string fk)
        {
             TemplatesIdPortalsFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Delete a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TemplatesIdPortalsFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdPortalsFkDelete");

            var localVarPath = "/Templates/{id}/portals/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TemplatesIdPortalsFkDeleteAsync (string id, string fk)
        {
             await TemplatesIdPortalsFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Delete a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdPortalsFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdPortalsFkDelete");

            var localVarPath = "/Templates/{id}/portals/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Portal</returns>
        public Portal TemplatesIdPortalsFkGet (string id, string fk)
        {
             ApiResponse<Portal> localVarResponse = TemplatesIdPortalsFkGetWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>ApiResponse of Portal</returns>
        public ApiResponse< Portal > TemplatesIdPortalsFkGetWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdPortalsFkGet");

            var localVarPath = "/Templates/{id}/portals/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Find a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of Portal</returns>
        public async System.Threading.Tasks.Task<Portal> TemplatesIdPortalsFkGetAsync (string id, string fk)
        {
             ApiResponse<Portal> localVarResponse = await TemplatesIdPortalsFkGetAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Portal>> TemplatesIdPortalsFkGetAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdPortalsFkGet");

            var localVarPath = "/Templates/{id}/portals/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Update a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Portal</returns>
        public Portal TemplatesIdPortalsFkPut (string id, string fk, Portal data = null)
        {
             ApiResponse<Portal> localVarResponse = TemplatesIdPortalsFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        public ApiResponse< Portal > TemplatesIdPortalsFkPutWithHttpInfo (string id, string fk, Portal data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdPortalsFkPut");

            var localVarPath = "/Templates/{id}/portals/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Update a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Portal</returns>
        public async System.Threading.Tasks.Task<Portal> TemplatesIdPortalsFkPutAsync (string id, string fk, Portal data = null)
        {
             ApiResponse<Portal> localVarResponse = await TemplatesIdPortalsFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Portal>> TemplatesIdPortalsFkPutAsyncWithHttpInfo (string id, string fk, Portal data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdPortalsFkPut");

            var localVarPath = "/Templates/{id}/portals/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Queries portals of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;Portal&gt;</returns>
        public List<Portal> TemplatesIdPortalsGet (string id, string filter = null)
        {
             ApiResponse<List<Portal>> localVarResponse = TemplatesIdPortalsGetWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries portals of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Portal&gt;</returns>
        public ApiResponse< List<Portal> > TemplatesIdPortalsGetWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalsGet");

            var localVarPath = "/Templates/{id}/portals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Portal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Portal>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Portal>)));
            
        }

        /// <summary>
        /// Queries portals of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;Portal&gt;</returns>
        public async System.Threading.Tasks.Task<List<Portal>> TemplatesIdPortalsGetAsync (string id, string filter = null)
        {
             ApiResponse<List<Portal>> localVarResponse = await TemplatesIdPortalsGetAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries portals of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Portal&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Portal>>> TemplatesIdPortalsGetAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalsGet");

            var localVarPath = "/Templates/{id}/portals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Portal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Portal>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Portal>)));
            
        }

        /// <summary>
        /// Creates a new instance in portals of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Portal</returns>
        public Portal TemplatesIdPortalsPost (string id, Portal data = null)
        {
             ApiResponse<Portal> localVarResponse = TemplatesIdPortalsPostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in portals of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        public ApiResponse< Portal > TemplatesIdPortalsPostWithHttpInfo (string id, Portal data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalsPost");

            var localVarPath = "/Templates/{id}/portals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Creates a new instance in portals of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Portal</returns>
        public async System.Threading.Tasks.Task<Portal> TemplatesIdPortalsPostAsync (string id, Portal data = null)
        {
             ApiResponse<Portal> localVarResponse = await TemplatesIdPortalsPostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in portals of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Portal>> TemplatesIdPortalsPostAsyncWithHttpInfo (string id, Portal data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalsPost");

            var localVarPath = "/Templates/{id}/portals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Remove the portals relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns></returns>
        public void TemplatesIdPortalsRelFkDelete (string id, string fk)
        {
             TemplatesIdPortalsRelFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Remove the portals relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TemplatesIdPortalsRelFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalsRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdPortalsRelFkDelete");

            var localVarPath = "/Templates/{id}/portals/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalsRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove the portals relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TemplatesIdPortalsRelFkDeleteAsync (string id, string fk)
        {
             await TemplatesIdPortalsRelFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Remove the portals relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdPortalsRelFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalsRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdPortalsRelFkDelete");

            var localVarPath = "/Templates/{id}/portals/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalsRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Check the existence of portals relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>bool?</returns>
        public bool? TemplatesIdPortalsRelFkHead (string id, string fk)
        {
             ApiResponse<bool?> localVarResponse = TemplatesIdPortalsRelFkHeadWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check the existence of portals relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > TemplatesIdPortalsRelFkHeadWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalsRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdPortalsRelFkHead");

            var localVarPath = "/Templates/{id}/portals/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalsRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Check the existence of portals relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> TemplatesIdPortalsRelFkHeadAsync (string id, string fk)
        {
             ApiResponse<bool?> localVarResponse = await TemplatesIdPortalsRelFkHeadAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check the existence of portals relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> TemplatesIdPortalsRelFkHeadAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalsRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdPortalsRelFkHead");

            var localVarPath = "/Templates/{id}/portals/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalsRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Add a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalTemplate</returns>
        public PortalTemplate TemplatesIdPortalsRelFkPut (string id, string fk, PortalTemplate data = null)
        {
             ApiResponse<PortalTemplate> localVarResponse = TemplatesIdPortalsRelFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalTemplate</returns>
        public ApiResponse< PortalTemplate > TemplatesIdPortalsRelFkPutWithHttpInfo (string id, string fk, PortalTemplate data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalsRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdPortalsRelFkPut");

            var localVarPath = "/Templates/{id}/portals/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalsRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplate)));
            
        }

        /// <summary>
        /// Add a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalTemplate</returns>
        public async System.Threading.Tasks.Task<PortalTemplate> TemplatesIdPortalsRelFkPutAsync (string id, string fk, PortalTemplate data = null)
        {
             ApiResponse<PortalTemplate> localVarResponse = await TemplatesIdPortalsRelFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalTemplate>> TemplatesIdPortalsRelFkPutAsyncWithHttpInfo (string id, string fk, PortalTemplate data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPortalsRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdPortalsRelFkPut");

            var localVarPath = "/Templates/{id}/portals/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPortalsRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplate)));
            
        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Template</returns>
        public Template TemplatesIdPut (string id, Template data = null)
        {
             ApiResponse<Template> localVarResponse = TemplatesIdPutWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse< Template > TemplatesIdPutWithHttpInfo (string id, Template data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPut");

            var localVarPath = "/Templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> TemplatesIdPutAsync (string id, Template data = null)
        {
             ApiResponse<Template> localVarResponse = await TemplatesIdPutAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template>> TemplatesIdPutAsyncWithHttpInfo (string id, Template data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdPut");

            var localVarPath = "/Templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Template</returns>
        public Template TemplatesIdReplacePost (string id, Template data = null)
        {
             ApiResponse<Template> localVarResponse = TemplatesIdReplacePostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse< Template > TemplatesIdReplacePostWithHttpInfo (string id, Template data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdReplacePost");

            var localVarPath = "/Templates/{id}/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdReplacePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> TemplatesIdReplacePostAsync (string id, Template data = null)
        {
             ApiResponse<Template> localVarResponse = await TemplatesIdReplacePostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template>> TemplatesIdReplacePostAsyncWithHttpInfo (string id, Template data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdReplacePost");

            var localVarPath = "/Templates/{id}/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdReplacePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Counts tags of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 TemplatesIdTagsCountGet (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = TemplatesIdTagsCountGetWithHttpInfo(id, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts tags of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > TemplatesIdTagsCountGetWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTagsCountGet");

            var localVarPath = "/Templates/{id}/tags/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTagsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts tags of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> TemplatesIdTagsCountGetAsync (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await TemplatesIdTagsCountGetAsyncWithHttpInfo(id, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts tags of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TemplatesIdTagsCountGetAsyncWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTagsCountGet");

            var localVarPath = "/Templates/{id}/tags/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTagsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all tags of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns></returns>
        public void TemplatesIdTagsDelete (string id)
        {
             TemplatesIdTagsDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes all tags of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TemplatesIdTagsDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTagsDelete");

            var localVarPath = "/Templates/{id}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTagsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all tags of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TemplatesIdTagsDeleteAsync (string id)
        {
             await TemplatesIdTagsDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes all tags of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdTagsDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTagsDelete");

            var localVarPath = "/Templates/{id}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTagsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns></returns>
        public void TemplatesIdTagsFkDelete (string id, string fk)
        {
             TemplatesIdTagsFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Delete a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TemplatesIdTagsFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTagsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdTagsFkDelete");

            var localVarPath = "/Templates/{id}/tags/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTagsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TemplatesIdTagsFkDeleteAsync (string id, string fk)
        {
             await TemplatesIdTagsFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Delete a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdTagsFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTagsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdTagsFkDelete");

            var localVarPath = "/Templates/{id}/tags/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTagsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Tag</returns>
        public Tag TemplatesIdTagsFkGet (string id, string fk)
        {
             ApiResponse<Tag> localVarResponse = TemplatesIdTagsFkGetWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>ApiResponse of Tag</returns>
        public ApiResponse< Tag > TemplatesIdTagsFkGetWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTagsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdTagsFkGet");

            var localVarPath = "/Templates/{id}/tags/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTagsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Tag) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag)));
            
        }

        /// <summary>
        /// Find a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> TemplatesIdTagsFkGetAsync (string id, string fk)
        {
             ApiResponse<Tag> localVarResponse = await TemplatesIdTagsFkGetAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tag>> TemplatesIdTagsFkGetAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTagsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdTagsFkGet");

            var localVarPath = "/Templates/{id}/tags/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTagsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Tag) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag)));
            
        }

        /// <summary>
        /// Update a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Tag</returns>
        public Tag TemplatesIdTagsFkPut (string id, string fk, Tag data = null)
        {
             ApiResponse<Tag> localVarResponse = TemplatesIdTagsFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Tag</returns>
        public ApiResponse< Tag > TemplatesIdTagsFkPutWithHttpInfo (string id, string fk, Tag data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTagsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdTagsFkPut");

            var localVarPath = "/Templates/{id}/tags/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTagsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Tag) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag)));
            
        }

        /// <summary>
        /// Update a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> TemplatesIdTagsFkPutAsync (string id, string fk, Tag data = null)
        {
             ApiResponse<Tag> localVarResponse = await TemplatesIdTagsFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tag>> TemplatesIdTagsFkPutAsyncWithHttpInfo (string id, string fk, Tag data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTagsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdTagsFkPut");

            var localVarPath = "/Templates/{id}/tags/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTagsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Tag) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag)));
            
        }

        /// <summary>
        /// Queries tags of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;Tag&gt;</returns>
        public List<Tag> TemplatesIdTagsGet (string id, string filter = null)
        {
             ApiResponse<List<Tag>> localVarResponse = TemplatesIdTagsGetWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries tags of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Tag&gt;</returns>
        public ApiResponse< List<Tag> > TemplatesIdTagsGetWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTagsGet");

            var localVarPath = "/Templates/{id}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTagsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Tag>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Tag>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Tag>)));
            
        }

        /// <summary>
        /// Queries tags of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;Tag&gt;</returns>
        public async System.Threading.Tasks.Task<List<Tag>> TemplatesIdTagsGetAsync (string id, string filter = null)
        {
             ApiResponse<List<Tag>> localVarResponse = await TemplatesIdTagsGetAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries tags of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Tag&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Tag>>> TemplatesIdTagsGetAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTagsGet");

            var localVarPath = "/Templates/{id}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTagsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Tag>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Tag>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Tag>)));
            
        }

        /// <summary>
        /// Creates a new instance in tags of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Tag</returns>
        public Tag TemplatesIdTagsPost (string id, Tag data = null)
        {
             ApiResponse<Tag> localVarResponse = TemplatesIdTagsPostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in tags of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Tag</returns>
        public ApiResponse< Tag > TemplatesIdTagsPostWithHttpInfo (string id, Tag data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTagsPost");

            var localVarPath = "/Templates/{id}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTagsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Tag) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag)));
            
        }

        /// <summary>
        /// Creates a new instance in tags of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> TemplatesIdTagsPostAsync (string id, Tag data = null)
        {
             ApiResponse<Tag> localVarResponse = await TemplatesIdTagsPostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in tags of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Tag>> TemplatesIdTagsPostAsyncWithHttpInfo (string id, Tag data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTagsPost");

            var localVarPath = "/Templates/{id}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTagsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Tag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Tag) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Tag)));
            
        }

        /// <summary>
        /// Remove the tags relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns></returns>
        public void TemplatesIdTagsRelFkDelete (string id, string fk)
        {
             TemplatesIdTagsRelFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Remove the tags relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TemplatesIdTagsRelFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTagsRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdTagsRelFkDelete");

            var localVarPath = "/Templates/{id}/tags/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTagsRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove the tags relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TemplatesIdTagsRelFkDeleteAsync (string id, string fk)
        {
             await TemplatesIdTagsRelFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Remove the tags relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdTagsRelFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTagsRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdTagsRelFkDelete");

            var localVarPath = "/Templates/{id}/tags/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTagsRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Check the existence of tags relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>bool?</returns>
        public bool? TemplatesIdTagsRelFkHead (string id, string fk)
        {
             ApiResponse<bool?> localVarResponse = TemplatesIdTagsRelFkHeadWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check the existence of tags relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > TemplatesIdTagsRelFkHeadWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTagsRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdTagsRelFkHead");

            var localVarPath = "/Templates/{id}/tags/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTagsRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Check the existence of tags relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> TemplatesIdTagsRelFkHeadAsync (string id, string fk)
        {
             ApiResponse<bool?> localVarResponse = await TemplatesIdTagsRelFkHeadAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check the existence of tags relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> TemplatesIdTagsRelFkHeadAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTagsRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdTagsRelFkHead");

            var localVarPath = "/Templates/{id}/tags/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTagsRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Add a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TemplateTag</returns>
        public TemplateTag TemplatesIdTagsRelFkPut (string id, string fk, TemplateTag data = null)
        {
             ApiResponse<TemplateTag> localVarResponse = TemplatesIdTagsRelFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TemplateTag</returns>
        public ApiResponse< TemplateTag > TemplatesIdTagsRelFkPutWithHttpInfo (string id, string fk, TemplateTag data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTagsRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdTagsRelFkPut");

            var localVarPath = "/Templates/{id}/tags/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTagsRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateTag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateTag) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateTag)));
            
        }

        /// <summary>
        /// Add a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TemplateTag</returns>
        public async System.Threading.Tasks.Task<TemplateTag> TemplatesIdTagsRelFkPutAsync (string id, string fk, TemplateTag data = null)
        {
             ApiResponse<TemplateTag> localVarResponse = await TemplatesIdTagsRelFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a related item by id for tags. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for tags</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateTag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateTag>> TemplatesIdTagsRelFkPutAsyncWithHttpInfo (string id, string fk, TemplateTag data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTagsRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdTagsRelFkPut");

            var localVarPath = "/Templates/{id}/tags/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTagsRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateTag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateTag) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateTag)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation teamFolder. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>TeamTemplateFolder</returns>
        public TeamTemplateFolder TemplatesIdTeamFolderGet (string id, bool? refresh = null)
        {
             ApiResponse<TeamTemplateFolder> localVarResponse = TemplatesIdTeamFolderGetWithHttpInfo(id, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches belongsTo relation teamFolder. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of TeamTemplateFolder</returns>
        public ApiResponse< TeamTemplateFolder > TemplatesIdTeamFolderGetWithHttpInfo (string id, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTeamFolderGet");

            var localVarPath = "/Templates/{id}/teamFolder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTeamFolderGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamTemplateFolder)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation teamFolder. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of TeamTemplateFolder</returns>
        public async System.Threading.Tasks.Task<TeamTemplateFolder> TemplatesIdTeamFolderGetAsync (string id, bool? refresh = null)
        {
             ApiResponse<TeamTemplateFolder> localVarResponse = await TemplatesIdTeamFolderGetAsyncWithHttpInfo(id, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches belongsTo relation teamFolder. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamTemplateFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamTemplateFolder>> TemplatesIdTeamFolderGetAsyncWithHttpInfo (string id, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTeamFolderGet");

            var localVarPath = "/Templates/{id}/teamFolder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTeamFolderGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamTemplateFolder)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Team</returns>
        public Team TemplatesIdTeamGet (string id, bool? refresh = null)
        {
             ApiResponse<Team> localVarResponse = TemplatesIdTeamGetWithHttpInfo(id, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches belongsTo relation team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of Team</returns>
        public ApiResponse< Team > TemplatesIdTeamGetWithHttpInfo (string id, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTeamGet");

            var localVarPath = "/Templates/{id}/team";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTeamGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Team) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> TemplatesIdTeamGetAsync (string id, bool? refresh = null)
        {
             ApiResponse<Team> localVarResponse = await TemplatesIdTeamGetAsyncWithHttpInfo(id, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches belongsTo relation team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Team>> TemplatesIdTeamGetAsyncWithHttpInfo (string id, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTeamGet");

            var localVarPath = "/Templates/{id}/team";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTeamGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Team) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
            
        }

        /// <summary>
        /// Counts templateMembers of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 TemplatesIdTemplateMembersCountGet (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = TemplatesIdTemplateMembersCountGetWithHttpInfo(id, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts templateMembers of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > TemplatesIdTemplateMembersCountGetWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTemplateMembersCountGet");

            var localVarPath = "/Templates/{id}/templateMembers/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTemplateMembersCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts templateMembers of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> TemplatesIdTemplateMembersCountGetAsync (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await TemplatesIdTemplateMembersCountGetAsyncWithHttpInfo(id, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts templateMembers of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TemplatesIdTemplateMembersCountGetAsyncWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTemplateMembersCountGet");

            var localVarPath = "/Templates/{id}/templateMembers/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTemplateMembersCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all templateMembers of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns></returns>
        public void TemplatesIdTemplateMembersDelete (string id)
        {
             TemplatesIdTemplateMembersDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes all templateMembers of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TemplatesIdTemplateMembersDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTemplateMembersDelete");

            var localVarPath = "/Templates/{id}/templateMembers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTemplateMembersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all templateMembers of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TemplatesIdTemplateMembersDeleteAsync (string id)
        {
             await TemplatesIdTemplateMembersDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes all templateMembers of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdTemplateMembersDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTemplateMembersDelete");

            var localVarPath = "/Templates/{id}/templateMembers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTemplateMembersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for templateMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for templateMembers</param>
        /// <returns></returns>
        public void TemplatesIdTemplateMembersFkDelete (string id, string fk)
        {
             TemplatesIdTemplateMembersFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Delete a related item by id for templateMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for templateMembers</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TemplatesIdTemplateMembersFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTemplateMembersFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdTemplateMembersFkDelete");

            var localVarPath = "/Templates/{id}/templateMembers/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTemplateMembersFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for templateMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for templateMembers</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TemplatesIdTemplateMembersFkDeleteAsync (string id, string fk)
        {
             await TemplatesIdTemplateMembersFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Delete a related item by id for templateMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for templateMembers</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TemplatesIdTemplateMembersFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTemplateMembersFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdTemplateMembersFkDelete");

            var localVarPath = "/Templates/{id}/templateMembers/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTemplateMembersFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for templateMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for templateMembers</param>
        /// <returns>TemplateMember</returns>
        public TemplateMember TemplatesIdTemplateMembersFkGet (string id, string fk)
        {
             ApiResponse<TemplateMember> localVarResponse = TemplatesIdTemplateMembersFkGetWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for templateMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for templateMembers</param>
        /// <returns>ApiResponse of TemplateMember</returns>
        public ApiResponse< TemplateMember > TemplatesIdTemplateMembersFkGetWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTemplateMembersFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdTemplateMembersFkGet");

            var localVarPath = "/Templates/{id}/templateMembers/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTemplateMembersFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateMember)));
            
        }

        /// <summary>
        /// Find a related item by id for templateMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for templateMembers</param>
        /// <returns>Task of TemplateMember</returns>
        public async System.Threading.Tasks.Task<TemplateMember> TemplatesIdTemplateMembersFkGetAsync (string id, string fk)
        {
             ApiResponse<TemplateMember> localVarResponse = await TemplatesIdTemplateMembersFkGetAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for templateMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for templateMembers</param>
        /// <returns>Task of ApiResponse (TemplateMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateMember>> TemplatesIdTemplateMembersFkGetAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTemplateMembersFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdTemplateMembersFkGet");

            var localVarPath = "/Templates/{id}/templateMembers/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTemplateMembersFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateMember)));
            
        }

        /// <summary>
        /// Update a related item by id for templateMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for templateMembers</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TemplateMember</returns>
        public TemplateMember TemplatesIdTemplateMembersFkPut (string id, string fk, TemplateMember data = null)
        {
             ApiResponse<TemplateMember> localVarResponse = TemplatesIdTemplateMembersFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for templateMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for templateMembers</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TemplateMember</returns>
        public ApiResponse< TemplateMember > TemplatesIdTemplateMembersFkPutWithHttpInfo (string id, string fk, TemplateMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTemplateMembersFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdTemplateMembersFkPut");

            var localVarPath = "/Templates/{id}/templateMembers/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTemplateMembersFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateMember)));
            
        }

        /// <summary>
        /// Update a related item by id for templateMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for templateMembers</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TemplateMember</returns>
        public async System.Threading.Tasks.Task<TemplateMember> TemplatesIdTemplateMembersFkPutAsync (string id, string fk, TemplateMember data = null)
        {
             ApiResponse<TemplateMember> localVarResponse = await TemplatesIdTemplateMembersFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for templateMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="fk">Foreign key for templateMembers</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateMember>> TemplatesIdTemplateMembersFkPutAsyncWithHttpInfo (string id, string fk, TemplateMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTemplateMembersFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TemplateApi->TemplatesIdTemplateMembersFkPut");

            var localVarPath = "/Templates/{id}/templateMembers/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTemplateMembersFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateMember)));
            
        }

        /// <summary>
        /// Queries templateMembers of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;TemplateMember&gt;</returns>
        public List<TemplateMember> TemplatesIdTemplateMembersGet (string id, string filter = null)
        {
             ApiResponse<List<TemplateMember>> localVarResponse = TemplatesIdTemplateMembersGetWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries templateMembers of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TemplateMember&gt;</returns>
        public ApiResponse< List<TemplateMember> > TemplatesIdTemplateMembersGetWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTemplateMembersGet");

            var localVarPath = "/Templates/{id}/templateMembers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTemplateMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TemplateMember>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TemplateMember>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TemplateMember>)));
            
        }

        /// <summary>
        /// Queries templateMembers of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;TemplateMember&gt;</returns>
        public async System.Threading.Tasks.Task<List<TemplateMember>> TemplatesIdTemplateMembersGetAsync (string id, string filter = null)
        {
             ApiResponse<List<TemplateMember>> localVarResponse = await TemplatesIdTemplateMembersGetAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries templateMembers of Template. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TemplateMember&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TemplateMember>>> TemplatesIdTemplateMembersGetAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTemplateMembersGet");

            var localVarPath = "/Templates/{id}/templateMembers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTemplateMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TemplateMember>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TemplateMember>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TemplateMember>)));
            
        }

        /// <summary>
        /// Creates a new instance in templateMembers of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TemplateMember</returns>
        public TemplateMember TemplatesIdTemplateMembersPost (string id, TemplateMember data = null)
        {
             ApiResponse<TemplateMember> localVarResponse = TemplatesIdTemplateMembersPostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in templateMembers of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TemplateMember</returns>
        public ApiResponse< TemplateMember > TemplatesIdTemplateMembersPostWithHttpInfo (string id, TemplateMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTemplateMembersPost");

            var localVarPath = "/Templates/{id}/templateMembers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTemplateMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateMember)));
            
        }

        /// <summary>
        /// Creates a new instance in templateMembers of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TemplateMember</returns>
        public async System.Threading.Tasks.Task<TemplateMember> TemplatesIdTemplateMembersPostAsync (string id, TemplateMember data = null)
        {
             ApiResponse<TemplateMember> localVarResponse = await TemplatesIdTemplateMembersPostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in templateMembers of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateMember>> TemplatesIdTemplateMembersPostAsyncWithHttpInfo (string id, TemplateMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdTemplateMembersPost");

            var localVarPath = "/Templates/{id}/templateMembers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdTemplateMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateMember)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation uploader. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>TeamMember</returns>
        public TeamMember TemplatesIdUploaderGet (string id, bool? refresh = null)
        {
             ApiResponse<TeamMember> localVarResponse = TemplatesIdUploaderGetWithHttpInfo(id, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches belongsTo relation uploader. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        public ApiResponse< TeamMember > TemplatesIdUploaderGetWithHttpInfo (string id, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdUploaderGet");

            var localVarPath = "/Templates/{id}/uploader";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdUploaderGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation uploader. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of TeamMember</returns>
        public async System.Threading.Tasks.Task<TeamMember> TemplatesIdUploaderGetAsync (string id, bool? refresh = null)
        {
             ApiResponse<TeamMember> localVarResponse = await TemplatesIdUploaderGetAsyncWithHttpInfo(id, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches belongsTo relation uploader. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMember>> TemplatesIdUploaderGetAsyncWithHttpInfo (string id, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdUploaderGet");

            var localVarPath = "/Templates/{id}/uploader";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdUploaderGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Get URL to review a template 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>string</returns>
        public string TemplatesIdUrlReviewGet (string id)
        {
             ApiResponse<string> localVarResponse = TemplatesIdUrlReviewGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get URL to review a template 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > TemplatesIdUrlReviewGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdUrlReviewGet");

            var localVarPath = "/Templates/{id}/url/review";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdUrlReviewGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// Get URL to review a template 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> TemplatesIdUrlReviewGetAsync (string id)
        {
             ApiResponse<string> localVarResponse = await TemplatesIdUrlReviewGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get URL to review a template 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> TemplatesIdUrlReviewGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdUrlReviewGet");

            var localVarPath = "/Templates/{id}/url/review";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdUrlReviewGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation workflow. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Workflow</returns>
        public Workflow TemplatesIdWorkflowGet (string id, bool? refresh = null)
        {
             ApiResponse<Workflow> localVarResponse = TemplatesIdWorkflowGetWithHttpInfo(id, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches belongsTo relation workflow. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of Workflow</returns>
        public ApiResponse< Workflow > TemplatesIdWorkflowGetWithHttpInfo (string id, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdWorkflowGet");

            var localVarPath = "/Templates/{id}/workflow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdWorkflowGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Workflow>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Workflow) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Workflow)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation workflow. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of Workflow</returns>
        public async System.Threading.Tasks.Task<Workflow> TemplatesIdWorkflowGetAsync (string id, bool? refresh = null)
        {
             ApiResponse<Workflow> localVarResponse = await TemplatesIdWorkflowGetAsyncWithHttpInfo(id, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches belongsTo relation workflow. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Template id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (Workflow)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Workflow>> TemplatesIdWorkflowGetAsyncWithHttpInfo (string id, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TemplateApi->TemplatesIdWorkflowGet");

            var localVarPath = "/Templates/{id}/workflow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesIdWorkflowGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Workflow>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Workflow) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Workflow)));
            
        }

        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Template</returns>
        public Template TemplatesPatch (Template data = null)
        {
             ApiResponse<Template> localVarResponse = TemplatesPatchWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse< Template > TemplatesPatchWithHttpInfo (Template data = null)
        {

            var localVarPath = "/Templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> TemplatesPatchAsync (Template data = null)
        {
             ApiResponse<Template> localVarResponse = await TemplatesPatchAsyncWithHttpInfo(data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template>> TemplatesPatchAsyncWithHttpInfo (Template data = null)
        {

            var localVarPath = "/Templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Create a new instance of the model and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Template</returns>
        public Template TemplatesPost (Template data = null)
        {
             ApiResponse<Template> localVarResponse = TemplatesPostWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new instance of the model and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse< Template > TemplatesPostWithHttpInfo (Template data = null)
        {

            var localVarPath = "/Templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Create a new instance of the model and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> TemplatesPostAsync (Template data = null)
        {
             ApiResponse<Template> localVarResponse = await TemplatesPostAsyncWithHttpInfo(data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new instance of the model and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template>> TemplatesPostAsyncWithHttpInfo (Template data = null)
        {

            var localVarPath = "/Templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Template</returns>
        public Template TemplatesPut (Template data = null)
        {
             ApiResponse<Template> localVarResponse = TemplatesPutWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse< Template > TemplatesPutWithHttpInfo (Template data = null)
        {

            var localVarPath = "/Templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> TemplatesPutAsync (Template data = null)
        {
             ApiResponse<Template> localVarResponse = await TemplatesPutAsyncWithHttpInfo(data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template>> TemplatesPutAsyncWithHttpInfo (Template data = null)
        {

            var localVarPath = "/Templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Template</returns>
        public Template TemplatesReplaceOrCreatePost (Template data = null)
        {
             ApiResponse<Template> localVarResponse = TemplatesReplaceOrCreatePostWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse< Template > TemplatesReplaceOrCreatePostWithHttpInfo (Template data = null)
        {

            var localVarPath = "/Templates/replaceOrCreate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesReplaceOrCreatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> TemplatesReplaceOrCreatePostAsync (Template data = null)
        {
             ApiResponse<Template> localVarResponse = await TemplatesReplaceOrCreatePostAsyncWithHttpInfo(data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template>> TemplatesReplaceOrCreatePostAsyncWithHttpInfo (Template data = null)
        {

            var localVarPath = "/Templates/replaceOrCreate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesReplaceOrCreatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 TemplatesUpdatePost (string where = null, Template data = null)
        {
             ApiResponse<InlineResponse2003> localVarResponse = TemplatesUpdatePostWithHttpInfo(where, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > TemplatesUpdatePostWithHttpInfo (string where = null, Template data = null)
        {

            var localVarPath = "/Templates/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesUpdatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> TemplatesUpdatePostAsync (string where = null, Template data = null)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await TemplatesUpdatePostAsyncWithHttpInfo(where, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> TemplatesUpdatePostAsyncWithHttpInfo (string where = null, Template data = null)
        {

            var localVarPath = "/Templates/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesUpdatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Template</returns>
        public Template TemplatesUpsertWithWherePost (string where = null, Template data = null)
        {
             ApiResponse<Template> localVarResponse = TemplatesUpsertWithWherePostWithHttpInfo(where, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse< Template > TemplatesUpsertWithWherePostWithHttpInfo (string where = null, Template data = null)
        {

            var localVarPath = "/Templates/upsertWithWhere";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesUpsertWithWherePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> TemplatesUpsertWithWherePostAsync (string where = null, Template data = null)
        {
             ApiResponse<Template> localVarResponse = await TemplatesUpsertWithWherePostAsyncWithHttpInfo(where, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template>> TemplatesUpsertWithWherePostAsyncWithHttpInfo (string where = null, Template data = null)
        {

            var localVarPath = "/Templates/upsertWithWhere";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatesUpsertWithWherePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

    }
}
