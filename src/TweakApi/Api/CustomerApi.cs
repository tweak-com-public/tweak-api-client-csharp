/* 
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.8-beta.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TweakApi.Client;
using TweakApi.Model;

namespace TweakApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Change a user&#39;s password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oldPassword"></param>
        /// <param name="newPassword"></param>
        /// <returns></returns>
        void CustomersChangePasswordPost (string oldPassword, string newPassword);

        /// <summary>
        /// Change a user&#39;s password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oldPassword"></param>
        /// <param name="newPassword"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersChangePasswordPostWithHttpInfo (string oldPassword, string newPassword);
        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream CustomersChangeStreamGet (string options = null);

        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> CustomersChangeStreamGetWithHttpInfo (string options = null);
        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream CustomersChangeStreamPost (string options = null);

        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> CustomersChangeStreamPostWithHttpInfo (string options = null);
        /// <summary>
        /// Confirm a user registration with identity verification token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="token"></param>
        /// <param name="redirect"> (optional)</param>
        /// <returns></returns>
        void CustomersConfirmGet (string uid, string token, string redirect = null);

        /// <summary>
        /// Confirm a user registration with identity verification token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="token"></param>
        /// <param name="redirect"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersConfirmGetWithHttpInfo (string uid, string token, string redirect = null);
        /// <summary>
        /// Count instances of the model matched by where from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 CustomersCountGet (string where = null);

        /// <summary>
        /// Count instances of the model matched by where from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> CustomersCountGetWithHttpInfo (string where = null);
        /// <summary>
        /// Define whether customer exists or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Customer email</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 CustomersEmailEmailExistsGet (string email);

        /// <summary>
        /// Define whether customer exists or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Customer email</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> CustomersEmailEmailExistsGetWithHttpInfo (string email);
        /// <summary>
        /// Find first instance of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Customer</returns>
        Customer CustomersFindOneGet (string filter = null);

        /// <summary>
        /// Find first instance of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> CustomersFindOneGetWithHttpInfo (string filter = null);
        /// <summary>
        /// Find all instances of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>List&lt;Customer&gt;</returns>
        List<Customer> CustomersGet (string filter = null);

        /// <summary>
        /// Find all instances of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of List&lt;Customer&gt;</returns>
        ApiResponse<List<Customer>> CustomersGetWithHttpInfo (string filter = null);
        /// <summary>
        /// Counts accessTokens of Customer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 CustomersIdAccessTokensCountGet (string id, string where = null);

        /// <summary>
        /// Counts accessTokens of Customer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> CustomersIdAccessTokensCountGetWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all accessTokens of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns></returns>
        void CustomersIdAccessTokensDelete (string id);

        /// <summary>
        /// Deletes all accessTokens of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdAccessTokensDeleteWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for accessTokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for accessTokens</param>
        /// <returns></returns>
        void CustomersIdAccessTokensFkDelete (string id, string fk);

        /// <summary>
        /// Delete a related item by id for accessTokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for accessTokens</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdAccessTokensFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for accessTokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for accessTokens</param>
        /// <returns>TeamMemberAccessToken</returns>
        TeamMemberAccessToken CustomersIdAccessTokensFkGet (string id, string fk);

        /// <summary>
        /// Find a related item by id for accessTokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for accessTokens</param>
        /// <returns>ApiResponse of TeamMemberAccessToken</returns>
        ApiResponse<TeamMemberAccessToken> CustomersIdAccessTokensFkGetWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for accessTokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for accessTokens</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamMemberAccessToken</returns>
        TeamMemberAccessToken CustomersIdAccessTokensFkPut (string id, string fk, TeamMemberAccessToken data = null);

        /// <summary>
        /// Update a related item by id for accessTokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for accessTokens</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamMemberAccessToken</returns>
        ApiResponse<TeamMemberAccessToken> CustomersIdAccessTokensFkPutWithHttpInfo (string id, string fk, TeamMemberAccessToken data = null);
        /// <summary>
        /// Queries accessTokens of Customer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;TeamMemberAccessToken&gt;</returns>
        List<TeamMemberAccessToken> CustomersIdAccessTokensGet (string id, string filter = null);

        /// <summary>
        /// Queries accessTokens of Customer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamMemberAccessToken&gt;</returns>
        ApiResponse<List<TeamMemberAccessToken>> CustomersIdAccessTokensGetWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in accessTokens of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamMemberAccessToken</returns>
        TeamMemberAccessToken CustomersIdAccessTokensPost (string id, TeamMemberAccessToken data = null);

        /// <summary>
        /// Creates a new instance in accessTokens of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamMemberAccessToken</returns>
        ApiResponse<TeamMemberAccessToken> CustomersIdAccessTokensPostWithHttpInfo (string id, TeamMemberAccessToken data = null);
        /// <summary>
        /// Define whether customer is active or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id or email</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 CustomersIdActiveGet (string id);

        /// <summary>
        /// Define whether customer is active or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id or email</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> CustomersIdActiveGetWithHttpInfo (string id);
        /// <summary>
        /// Delete a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Object</returns>
        Object CustomersIdDelete (string id);

        /// <summary>
        /// Delete a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CustomersIdDeleteWithHttpInfo (string id);
        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 CustomersIdExistsGet (string id);

        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> CustomersIdExistsGetWithHttpInfo (string id);
        /// <summary>
        /// Find a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Customer</returns>
        Customer CustomersIdGet (string id, string filter = null);

        /// <summary>
        /// Find a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> CustomersIdGetWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 CustomersIdHead (string id);

        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> CustomersIdHeadWithHttpInfo (string id);
        /// <summary>
        /// Counts invitationTickets of Customer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 CustomersIdInvitationTicketsCountGet (string id, string where = null);

        /// <summary>
        /// Counts invitationTickets of Customer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> CustomersIdInvitationTicketsCountGetWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all invitationTickets of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns></returns>
        void CustomersIdInvitationTicketsDelete (string id);

        /// <summary>
        /// Deletes all invitationTickets of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdInvitationTicketsDeleteWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for invitationTickets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for invitationTickets</param>
        /// <returns></returns>
        void CustomersIdInvitationTicketsFkDelete (string id, string fk);

        /// <summary>
        /// Delete a related item by id for invitationTickets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for invitationTickets</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdInvitationTicketsFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for invitationTickets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for invitationTickets</param>
        /// <returns>InvitationTicket</returns>
        InvitationTicket CustomersIdInvitationTicketsFkGet (string id, string fk);

        /// <summary>
        /// Find a related item by id for invitationTickets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for invitationTickets</param>
        /// <returns>ApiResponse of InvitationTicket</returns>
        ApiResponse<InvitationTicket> CustomersIdInvitationTicketsFkGetWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for invitationTickets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for invitationTickets</param>
        /// <param name="data"> (optional)</param>
        /// <returns>InvitationTicket</returns>
        InvitationTicket CustomersIdInvitationTicketsFkPut (string id, string fk, InvitationTicket data = null);

        /// <summary>
        /// Update a related item by id for invitationTickets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for invitationTickets</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of InvitationTicket</returns>
        ApiResponse<InvitationTicket> CustomersIdInvitationTicketsFkPutWithHttpInfo (string id, string fk, InvitationTicket data = null);
        /// <summary>
        /// Queries invitationTickets of Customer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;InvitationTicket&gt;</returns>
        List<InvitationTicket> CustomersIdInvitationTicketsGet (string id, string filter = null);

        /// <summary>
        /// Queries invitationTickets of Customer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;InvitationTicket&gt;</returns>
        ApiResponse<List<InvitationTicket>> CustomersIdInvitationTicketsGetWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in invitationTickets of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>InvitationTicket</returns>
        InvitationTicket CustomersIdInvitationTicketsPost (string id, InvitationTicket data = null);

        /// <summary>
        /// Creates a new instance in invitationTickets of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of InvitationTicket</returns>
        ApiResponse<InvitationTicket> CustomersIdInvitationTicketsPostWithHttpInfo (string id, InvitationTicket data = null);
        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Customer</returns>
        Customer CustomersIdPatch (string id, Customer data = null);

        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> CustomersIdPatchWithHttpInfo (string id, Customer data = null);
        /// <summary>
        /// Deletes permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns></returns>
        void CustomersIdPermissionDelete (string id);

        /// <summary>
        /// Deletes permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdPermissionDeleteWithHttpInfo (string id);
        /// <summary>
        /// Fetches hasOne relation permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>CustomerPermissionSet</returns>
        CustomerPermissionSet CustomersIdPermissionGet (string id, bool? refresh = null);

        /// <summary>
        /// Fetches hasOne relation permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of CustomerPermissionSet</returns>
        ApiResponse<CustomerPermissionSet> CustomersIdPermissionGetWithHttpInfo (string id, bool? refresh = null);
        /// <summary>
        /// Creates a new instance in permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>CustomerPermissionSet</returns>
        CustomerPermissionSet CustomersIdPermissionPost (string id, CustomerPermissionSet data = null);

        /// <summary>
        /// Creates a new instance in permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of CustomerPermissionSet</returns>
        ApiResponse<CustomerPermissionSet> CustomersIdPermissionPostWithHttpInfo (string id, CustomerPermissionSet data = null);
        /// <summary>
        /// Update permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>CustomerPermissionSet</returns>
        CustomerPermissionSet CustomersIdPermissionPut (string id, CustomerPermissionSet data = null);

        /// <summary>
        /// Update permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of CustomerPermissionSet</returns>
        ApiResponse<CustomerPermissionSet> CustomersIdPermissionPutWithHttpInfo (string id, CustomerPermissionSet data = null);
        /// <summary>
        /// Change profile picture
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <param name="data">Profile picture</param>
        /// <returns>Customer</returns>
        Customer CustomersIdProfilePicturePut (string id, string id2, Customer data);

        /// <summary>
        /// Change profile picture
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <param name="data">Profile picture</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> CustomersIdProfilePicturePutWithHttpInfo (string id, string id2, Customer data);
        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Customer</returns>
        Customer CustomersIdPut (string id, Customer data = null);

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> CustomersIdPutWithHttpInfo (string id, Customer data = null);
        /// <summary>
        /// Register team and assign it to the customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>TeamMember</returns>
        TeamMember CustomersIdRegisterTeamPost (string id, Team data = null);

        /// <summary>
        /// Register team and assign it to the customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        ApiResponse<TeamMember> CustomersIdRegisterTeamPostWithHttpInfo (string id, Team data = null);
        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Customer</returns>
        Customer CustomersIdReplacePost (string id, Customer data = null);

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> CustomersIdReplacePostWithHttpInfo (string id, Customer data = null);
        /// <summary>
        /// Counts teams of Customer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 CustomersIdTeamsCountGet (string id, string where = null);

        /// <summary>
        /// Counts teams of Customer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> CustomersIdTeamsCountGetWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all teams of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns></returns>
        void CustomersIdTeamsDelete (string id);

        /// <summary>
        /// Deletes all teams of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsDeleteWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for teams.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns></returns>
        void CustomersIdTeamsFkDelete (string id, string fk);

        /// <summary>
        /// Delete a related item by id for teams.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for teams.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns>Team</returns>
        Team CustomersIdTeamsFkGet (string id, string fk);

        /// <summary>
        /// Find a related item by id for teams.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> CustomersIdTeamsFkGetWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for teams.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Team</returns>
        Team CustomersIdTeamsFkPut (string id, string fk, Team data = null);

        /// <summary>
        /// Update a related item by id for teams.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> CustomersIdTeamsFkPutWithHttpInfo (string id, string fk, Team data = null);
        /// <summary>
        /// Queries teams of Customer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;Team&gt;</returns>
        List<Team> CustomersIdTeamsGet (string id, string filter = null);

        /// <summary>
        /// Queries teams of Customer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        ApiResponse<List<Team>> CustomersIdTeamsGetWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Deletes brand of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns></returns>
        void CustomersIdTeamsNkBrandDelete (string id, string nk);

        /// <summary>
        /// Deletes brand of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsNkBrandDeleteWithHttpInfo (string id, string nk);
        /// <summary>
        /// Fetches hasOne relation brand.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>TeamBrand</returns>
        TeamBrand CustomersIdTeamsNkBrandGet (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches hasOne relation brand.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of TeamBrand</returns>
        ApiResponse<TeamBrand> CustomersIdTeamsNkBrandGetWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Creates a new instance in brand of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamBrand</returns>
        TeamBrand CustomersIdTeamsNkBrandPost (string id, string nk, TeamBrand data = null);

        /// <summary>
        /// Creates a new instance in brand of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamBrand</returns>
        ApiResponse<TeamBrand> CustomersIdTeamsNkBrandPostWithHttpInfo (string id, string nk, TeamBrand data = null);
        /// <summary>
        /// Update brand of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamBrand</returns>
        TeamBrand CustomersIdTeamsNkBrandPut (string id, string nk, TeamBrand data = null);

        /// <summary>
        /// Update brand of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamBrand</returns>
        ApiResponse<TeamBrand> CustomersIdTeamsNkBrandPutWithHttpInfo (string id, string nk, TeamBrand data = null);
        /// <summary>
        /// Counts builderConfigs of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 CustomersIdTeamsNkBuilderConfigsCountGet (string id, string nk, string where = null);

        /// <summary>
        /// Counts builderConfigs of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> CustomersIdTeamsNkBuilderConfigsCountGetWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all builderConfigs of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns></returns>
        void CustomersIdTeamsNkBuilderConfigsDelete (string id, string nk);

        /// <summary>
        /// Deletes all builderConfigs of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsNkBuilderConfigsDeleteWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for builderConfigs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for builderConfigs</param>
        /// <returns></returns>
        void CustomersIdTeamsNkBuilderConfigsFkDelete (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for builderConfigs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for builderConfigs</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsNkBuilderConfigsFkDeleteWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for builderConfigs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for builderConfigs</param>
        /// <returns>TeamBuilderConfig</returns>
        TeamBuilderConfig CustomersIdTeamsNkBuilderConfigsFkGet (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for builderConfigs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for builderConfigs</param>
        /// <returns>ApiResponse of TeamBuilderConfig</returns>
        ApiResponse<TeamBuilderConfig> CustomersIdTeamsNkBuilderConfigsFkGetWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for builderConfigs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for builderConfigs</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamBuilderConfig</returns>
        TeamBuilderConfig CustomersIdTeamsNkBuilderConfigsFkPut (string id, string nk, string fk, TeamBuilderConfig data = null);

        /// <summary>
        /// Update a related item by id for builderConfigs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for builderConfigs</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfig</returns>
        ApiResponse<TeamBuilderConfig> CustomersIdTeamsNkBuilderConfigsFkPutWithHttpInfo (string id, string nk, string fk, TeamBuilderConfig data = null);
        /// <summary>
        /// Queries builderConfigs of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;TeamBuilderConfig&gt;</returns>
        List<TeamBuilderConfig> CustomersIdTeamsNkBuilderConfigsGet (string id, string nk, string filter = null);

        /// <summary>
        /// Queries builderConfigs of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamBuilderConfig&gt;</returns>
        ApiResponse<List<TeamBuilderConfig>> CustomersIdTeamsNkBuilderConfigsGetWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in builderConfigs of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamBuilderConfig</returns>
        TeamBuilderConfig CustomersIdTeamsNkBuilderConfigsPost (string id, string nk, TeamBuilderConfig data = null);

        /// <summary>
        /// Creates a new instance in builderConfigs of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfig</returns>
        ApiResponse<TeamBuilderConfig> CustomersIdTeamsNkBuilderConfigsPostWithHttpInfo (string id, string nk, TeamBuilderConfig data = null);
        /// <summary>
        /// Counts dataSourceSoaps of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 CustomersIdTeamsNkDataSourceSoapsCountGet (string id, string nk, string where = null);

        /// <summary>
        /// Counts dataSourceSoaps of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> CustomersIdTeamsNkDataSourceSoapsCountGetWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Delete a related item by id for dataSourceSoaps.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dataSourceSoaps</param>
        /// <returns></returns>
        void CustomersIdTeamsNkDataSourceSoapsFkDelete (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for dataSourceSoaps.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dataSourceSoaps</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsNkDataSourceSoapsFkDeleteWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for dataSourceSoaps.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dataSourceSoaps</param>
        /// <returns>DataSourceSoap</returns>
        DataSourceSoap CustomersIdTeamsNkDataSourceSoapsFkGet (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for dataSourceSoaps.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dataSourceSoaps</param>
        /// <returns>ApiResponse of DataSourceSoap</returns>
        ApiResponse<DataSourceSoap> CustomersIdTeamsNkDataSourceSoapsFkGetWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for dataSourceSoaps.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dataSourceSoaps</param>
        /// <param name="data"> (optional)</param>
        /// <returns>DataSourceSoap</returns>
        DataSourceSoap CustomersIdTeamsNkDataSourceSoapsFkPut (string id, string nk, string fk, DataSourceSoap data = null);

        /// <summary>
        /// Update a related item by id for dataSourceSoaps.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dataSourceSoaps</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of DataSourceSoap</returns>
        ApiResponse<DataSourceSoap> CustomersIdTeamsNkDataSourceSoapsFkPutWithHttpInfo (string id, string nk, string fk, DataSourceSoap data = null);
        /// <summary>
        /// Queries dataSourceSoaps of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;DataSourceSoap&gt;</returns>
        List<DataSourceSoap> CustomersIdTeamsNkDataSourceSoapsGet (string id, string nk, string filter = null);

        /// <summary>
        /// Queries dataSourceSoaps of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DataSourceSoap&gt;</returns>
        ApiResponse<List<DataSourceSoap>> CustomersIdTeamsNkDataSourceSoapsGetWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in dataSourceSoaps of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>DataSourceSoap</returns>
        DataSourceSoap CustomersIdTeamsNkDataSourceSoapsPost (string id, string nk, DataSourceSoap data = null);

        /// <summary>
        /// Creates a new instance in dataSourceSoaps of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of DataSourceSoap</returns>
        ApiResponse<DataSourceSoap> CustomersIdTeamsNkDataSourceSoapsPostWithHttpInfo (string id, string nk, DataSourceSoap data = null);
        /// <summary>
        /// Counts dynamicDatas of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 CustomersIdTeamsNkDynamicDatasCountGet (string id, string nk, string where = null);

        /// <summary>
        /// Counts dynamicDatas of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> CustomersIdTeamsNkDynamicDatasCountGetWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Delete a related item by id for dynamicDatas.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dynamicDatas</param>
        /// <returns></returns>
        void CustomersIdTeamsNkDynamicDatasFkDelete (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for dynamicDatas.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dynamicDatas</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsNkDynamicDatasFkDeleteWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for dynamicDatas.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dynamicDatas</param>
        /// <returns>DynamicData</returns>
        DynamicData CustomersIdTeamsNkDynamicDatasFkGet (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for dynamicDatas.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dynamicDatas</param>
        /// <returns>ApiResponse of DynamicData</returns>
        ApiResponse<DynamicData> CustomersIdTeamsNkDynamicDatasFkGetWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for dynamicDatas.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dynamicDatas</param>
        /// <param name="data"> (optional)</param>
        /// <returns>DynamicData</returns>
        DynamicData CustomersIdTeamsNkDynamicDatasFkPut (string id, string nk, string fk, DynamicData data = null);

        /// <summary>
        /// Update a related item by id for dynamicDatas.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dynamicDatas</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of DynamicData</returns>
        ApiResponse<DynamicData> CustomersIdTeamsNkDynamicDatasFkPutWithHttpInfo (string id, string nk, string fk, DynamicData data = null);
        /// <summary>
        /// Queries dynamicDatas of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;DynamicData&gt;</returns>
        List<DynamicData> CustomersIdTeamsNkDynamicDatasGet (string id, string nk, string filter = null);

        /// <summary>
        /// Queries dynamicDatas of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DynamicData&gt;</returns>
        ApiResponse<List<DynamicData>> CustomersIdTeamsNkDynamicDatasGetWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in dynamicDatas of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>DynamicData</returns>
        DynamicData CustomersIdTeamsNkDynamicDatasPost (string id, string nk, DynamicData data = null);

        /// <summary>
        /// Creates a new instance in dynamicDatas of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of DynamicData</returns>
        ApiResponse<DynamicData> CustomersIdTeamsNkDynamicDatasPostWithHttpInfo (string id, string nk, DynamicData data = null);
        /// <summary>
        /// Counts imageFolders of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 CustomersIdTeamsNkImageFoldersCountGet (string id, string nk, string where = null);

        /// <summary>
        /// Counts imageFolders of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> CustomersIdTeamsNkImageFoldersCountGetWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all imageFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns></returns>
        void CustomersIdTeamsNkImageFoldersDelete (string id, string nk);

        /// <summary>
        /// Deletes all imageFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsNkImageFoldersDeleteWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for imageFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns></returns>
        void CustomersIdTeamsNkImageFoldersFkDelete (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for imageFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsNkImageFoldersFkDeleteWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for imageFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>ImageFolder</returns>
        ImageFolder CustomersIdTeamsNkImageFoldersFkGet (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for imageFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>ApiResponse of ImageFolder</returns>
        ApiResponse<ImageFolder> CustomersIdTeamsNkImageFoldersFkGetWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for imageFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ImageFolder</returns>
        ImageFolder CustomersIdTeamsNkImageFoldersFkPut (string id, string nk, string fk, ImageFolder data = null);

        /// <summary>
        /// Update a related item by id for imageFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ImageFolder</returns>
        ApiResponse<ImageFolder> CustomersIdTeamsNkImageFoldersFkPutWithHttpInfo (string id, string nk, string fk, ImageFolder data = null);
        /// <summary>
        /// Queries imageFolders of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;ImageFolder&gt;</returns>
        List<ImageFolder> CustomersIdTeamsNkImageFoldersGet (string id, string nk, string filter = null);

        /// <summary>
        /// Queries imageFolders of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ImageFolder&gt;</returns>
        ApiResponse<List<ImageFolder>> CustomersIdTeamsNkImageFoldersGetWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in imageFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ImageFolder</returns>
        ImageFolder CustomersIdTeamsNkImageFoldersPost (string id, string nk, ImageFolder data = null);

        /// <summary>
        /// Creates a new instance in imageFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ImageFolder</returns>
        ApiResponse<ImageFolder> CustomersIdTeamsNkImageFoldersPostWithHttpInfo (string id, string nk, ImageFolder data = null);
        /// <summary>
        /// Counts images of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 CustomersIdTeamsNkImagesCountGet (string id, string nk, string where = null);

        /// <summary>
        /// Counts images of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> CustomersIdTeamsNkImagesCountGetWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all images of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns></returns>
        void CustomersIdTeamsNkImagesDelete (string id, string nk);

        /// <summary>
        /// Deletes all images of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsNkImagesDeleteWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for images.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for images</param>
        /// <returns></returns>
        void CustomersIdTeamsNkImagesFkDelete (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for images.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for images</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsNkImagesFkDeleteWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for images.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for images</param>
        /// <returns>Image</returns>
        Image CustomersIdTeamsNkImagesFkGet (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for images.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for images</param>
        /// <returns>ApiResponse of Image</returns>
        ApiResponse<Image> CustomersIdTeamsNkImagesFkGetWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for images.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for images</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Image</returns>
        Image CustomersIdTeamsNkImagesFkPut (string id, string nk, string fk, Image data = null);

        /// <summary>
        /// Update a related item by id for images.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for images</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Image</returns>
        ApiResponse<Image> CustomersIdTeamsNkImagesFkPutWithHttpInfo (string id, string nk, string fk, Image data = null);
        /// <summary>
        /// Queries images of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;Image&gt;</returns>
        List<Image> CustomersIdTeamsNkImagesGet (string id, string nk, string filter = null);

        /// <summary>
        /// Queries images of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Image&gt;</returns>
        ApiResponse<List<Image>> CustomersIdTeamsNkImagesGetWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in images of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Image</returns>
        Image CustomersIdTeamsNkImagesPost (string id, string nk, Image data = null);

        /// <summary>
        /// Creates a new instance in images of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Image</returns>
        ApiResponse<Image> CustomersIdTeamsNkImagesPostWithHttpInfo (string id, string nk, Image data = null);
        /// <summary>
        /// Counts members of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 CustomersIdTeamsNkMembersCountGet (string id, string nk, string where = null);

        /// <summary>
        /// Counts members of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> CustomersIdTeamsNkMembersCountGetWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all members of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns></returns>
        void CustomersIdTeamsNkMembersDelete (string id, string nk);

        /// <summary>
        /// Deletes all members of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsNkMembersDeleteWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns></returns>
        void CustomersIdTeamsNkMembersFkDelete (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsNkMembersFkDeleteWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Customer</returns>
        Customer CustomersIdTeamsNkMembersFkGet (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> CustomersIdTeamsNkMembersFkGetWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Customer</returns>
        Customer CustomersIdTeamsNkMembersFkPut (string id, string nk, string fk, Customer data = null);

        /// <summary>
        /// Update a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> CustomersIdTeamsNkMembersFkPutWithHttpInfo (string id, string nk, string fk, Customer data = null);
        /// <summary>
        /// Queries members of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;Customer&gt;</returns>
        List<Customer> CustomersIdTeamsNkMembersGet (string id, string nk, string filter = null);

        /// <summary>
        /// Queries members of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Customer&gt;</returns>
        ApiResponse<List<Customer>> CustomersIdTeamsNkMembersGetWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in members of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Customer</returns>
        Customer CustomersIdTeamsNkMembersPost (string id, string nk, Customer data = null);

        /// <summary>
        /// Creates a new instance in members of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> CustomersIdTeamsNkMembersPostWithHttpInfo (string id, string nk, Customer data = null);
        /// <summary>
        /// Remove the members relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns></returns>
        void CustomersIdTeamsNkMembersRelFkDelete (string id, string nk, string fk);

        /// <summary>
        /// Remove the members relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsNkMembersRelFkDeleteWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Check the existence of members relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>bool?</returns>
        bool? CustomersIdTeamsNkMembersRelFkHead (string id, string nk, string fk);

        /// <summary>
        /// Check the existence of members relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> CustomersIdTeamsNkMembersRelFkHeadWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Add a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamMember</returns>
        TeamMember CustomersIdTeamsNkMembersRelFkPut (string id, string nk, string fk, TeamMember data = null);

        /// <summary>
        /// Add a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        ApiResponse<TeamMember> CustomersIdTeamsNkMembersRelFkPutWithHttpInfo (string id, string nk, string fk, TeamMember data = null);
        /// <summary>
        /// Deletes permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns></returns>
        void CustomersIdTeamsNkPermissionDelete (string id, string nk);

        /// <summary>
        /// Deletes permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsNkPermissionDeleteWithHttpInfo (string id, string nk);
        /// <summary>
        /// Fetches hasOne relation permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>TeamPermissionSet</returns>
        TeamPermissionSet CustomersIdTeamsNkPermissionGet (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches hasOne relation permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of TeamPermissionSet</returns>
        ApiResponse<TeamPermissionSet> CustomersIdTeamsNkPermissionGetWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Creates a new instance in permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamPermissionSet</returns>
        TeamPermissionSet CustomersIdTeamsNkPermissionPost (string id, string nk, TeamPermissionSet data = null);

        /// <summary>
        /// Creates a new instance in permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamPermissionSet</returns>
        ApiResponse<TeamPermissionSet> CustomersIdTeamsNkPermissionPostWithHttpInfo (string id, string nk, TeamPermissionSet data = null);
        /// <summary>
        /// Update permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamPermissionSet</returns>
        TeamPermissionSet CustomersIdTeamsNkPermissionPut (string id, string nk, TeamPermissionSet data = null);

        /// <summary>
        /// Update permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamPermissionSet</returns>
        ApiResponse<TeamPermissionSet> CustomersIdTeamsNkPermissionPutWithHttpInfo (string id, string nk, TeamPermissionSet data = null);
        /// <summary>
        /// Counts portals of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 CustomersIdTeamsNkPortalsCountGet (string id, string nk, string where = null);

        /// <summary>
        /// Counts portals of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> CustomersIdTeamsNkPortalsCountGetWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all portals of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns></returns>
        void CustomersIdTeamsNkPortalsDelete (string id, string nk);

        /// <summary>
        /// Deletes all portals of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsNkPortalsDeleteWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns></returns>
        void CustomersIdTeamsNkPortalsFkDelete (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsNkPortalsFkDeleteWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Portal</returns>
        Portal CustomersIdTeamsNkPortalsFkGet (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>ApiResponse of Portal</returns>
        ApiResponse<Portal> CustomersIdTeamsNkPortalsFkGetWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Portal</returns>
        Portal CustomersIdTeamsNkPortalsFkPut (string id, string nk, string fk, Portal data = null);

        /// <summary>
        /// Update a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        ApiResponse<Portal> CustomersIdTeamsNkPortalsFkPutWithHttpInfo (string id, string nk, string fk, Portal data = null);
        /// <summary>
        /// Queries portals of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;Portal&gt;</returns>
        List<Portal> CustomersIdTeamsNkPortalsGet (string id, string nk, string filter = null);

        /// <summary>
        /// Queries portals of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Portal&gt;</returns>
        ApiResponse<List<Portal>> CustomersIdTeamsNkPortalsGetWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in portals of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Portal</returns>
        Portal CustomersIdTeamsNkPortalsPost (string id, string nk, Portal data = null);

        /// <summary>
        /// Creates a new instance in portals of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        ApiResponse<Portal> CustomersIdTeamsNkPortalsPostWithHttpInfo (string id, string nk, Portal data = null);
        /// <summary>
        /// Counts productMaterials of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 CustomersIdTeamsNkProductMaterialsCountGet (string id, string nk, string where = null);

        /// <summary>
        /// Counts productMaterials of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> CustomersIdTeamsNkProductMaterialsCountGetWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all productMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns></returns>
        void CustomersIdTeamsNkProductMaterialsDelete (string id, string nk);

        /// <summary>
        /// Deletes all productMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsNkProductMaterialsDeleteWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for productMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productMaterials</param>
        /// <returns></returns>
        void CustomersIdTeamsNkProductMaterialsFkDelete (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for productMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productMaterials</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsNkProductMaterialsFkDeleteWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for productMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productMaterials</param>
        /// <returns>ProductMaterial</returns>
        ProductMaterial CustomersIdTeamsNkProductMaterialsFkGet (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for productMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productMaterials</param>
        /// <returns>ApiResponse of ProductMaterial</returns>
        ApiResponse<ProductMaterial> CustomersIdTeamsNkProductMaterialsFkGetWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for productMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductMaterial</returns>
        ProductMaterial CustomersIdTeamsNkProductMaterialsFkPut (string id, string nk, string fk, ProductMaterial data = null);

        /// <summary>
        /// Update a related item by id for productMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductMaterial</returns>
        ApiResponse<ProductMaterial> CustomersIdTeamsNkProductMaterialsFkPutWithHttpInfo (string id, string nk, string fk, ProductMaterial data = null);
        /// <summary>
        /// Queries productMaterials of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;ProductMaterial&gt;</returns>
        List<ProductMaterial> CustomersIdTeamsNkProductMaterialsGet (string id, string nk, string filter = null);

        /// <summary>
        /// Queries productMaterials of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductMaterial&gt;</returns>
        ApiResponse<List<ProductMaterial>> CustomersIdTeamsNkProductMaterialsGetWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in productMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductMaterial</returns>
        ProductMaterial CustomersIdTeamsNkProductMaterialsPost (string id, string nk, ProductMaterial data = null);

        /// <summary>
        /// Creates a new instance in productMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductMaterial</returns>
        ApiResponse<ProductMaterial> CustomersIdTeamsNkProductMaterialsPostWithHttpInfo (string id, string nk, ProductMaterial data = null);
        /// <summary>
        /// Counts productPdfColorProfiles of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 CustomersIdTeamsNkProductPdfColorProfilesCountGet (string id, string nk, string where = null);

        /// <summary>
        /// Counts productPdfColorProfiles of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> CustomersIdTeamsNkProductPdfColorProfilesCountGetWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all productPdfColorProfiles of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns></returns>
        void CustomersIdTeamsNkProductPdfColorProfilesDelete (string id, string nk);

        /// <summary>
        /// Deletes all productPdfColorProfiles of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsNkProductPdfColorProfilesDeleteWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for productPdfColorProfiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productPdfColorProfiles</param>
        /// <returns></returns>
        void CustomersIdTeamsNkProductPdfColorProfilesFkDelete (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for productPdfColorProfiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productPdfColorProfiles</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsNkProductPdfColorProfilesFkDeleteWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for productPdfColorProfiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productPdfColorProfiles</param>
        /// <returns>ProductPdfColorProfile</returns>
        ProductPdfColorProfile CustomersIdTeamsNkProductPdfColorProfilesFkGet (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for productPdfColorProfiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productPdfColorProfiles</param>
        /// <returns>ApiResponse of ProductPdfColorProfile</returns>
        ApiResponse<ProductPdfColorProfile> CustomersIdTeamsNkProductPdfColorProfilesFkGetWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for productPdfColorProfiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productPdfColorProfiles</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductPdfColorProfile</returns>
        ProductPdfColorProfile CustomersIdTeamsNkProductPdfColorProfilesFkPut (string id, string nk, string fk, ProductPdfColorProfile data = null);

        /// <summary>
        /// Update a related item by id for productPdfColorProfiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productPdfColorProfiles</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductPdfColorProfile</returns>
        ApiResponse<ProductPdfColorProfile> CustomersIdTeamsNkProductPdfColorProfilesFkPutWithHttpInfo (string id, string nk, string fk, ProductPdfColorProfile data = null);
        /// <summary>
        /// Queries productPdfColorProfiles of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;ProductPdfColorProfile&gt;</returns>
        List<ProductPdfColorProfile> CustomersIdTeamsNkProductPdfColorProfilesGet (string id, string nk, string filter = null);

        /// <summary>
        /// Queries productPdfColorProfiles of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductPdfColorProfile&gt;</returns>
        ApiResponse<List<ProductPdfColorProfile>> CustomersIdTeamsNkProductPdfColorProfilesGetWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Counts productSizeMaterials of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 CustomersIdTeamsNkProductSizeMaterialsCountGet (string id, string nk, string where = null);

        /// <summary>
        /// Counts productSizeMaterials of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> CustomersIdTeamsNkProductSizeMaterialsCountGetWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all productSizeMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns></returns>
        void CustomersIdTeamsNkProductSizeMaterialsDelete (string id, string nk);

        /// <summary>
        /// Deletes all productSizeMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsNkProductSizeMaterialsDeleteWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for productSizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns></returns>
        void CustomersIdTeamsNkProductSizeMaterialsFkDelete (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for productSizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsNkProductSizeMaterialsFkDeleteWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for productSizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>ProductSizeMaterial</returns>
        ProductSizeMaterial CustomersIdTeamsNkProductSizeMaterialsFkGet (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for productSizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>ApiResponse of ProductSizeMaterial</returns>
        ApiResponse<ProductSizeMaterial> CustomersIdTeamsNkProductSizeMaterialsFkGetWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for productSizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductSizeMaterial</returns>
        ProductSizeMaterial CustomersIdTeamsNkProductSizeMaterialsFkPut (string id, string nk, string fk, ProductSizeMaterial data = null);

        /// <summary>
        /// Update a related item by id for productSizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductSizeMaterial</returns>
        ApiResponse<ProductSizeMaterial> CustomersIdTeamsNkProductSizeMaterialsFkPutWithHttpInfo (string id, string nk, string fk, ProductSizeMaterial data = null);
        /// <summary>
        /// Queries productSizeMaterials of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;ProductSizeMaterial&gt;</returns>
        List<ProductSizeMaterial> CustomersIdTeamsNkProductSizeMaterialsGet (string id, string nk, string filter = null);

        /// <summary>
        /// Queries productSizeMaterials of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductSizeMaterial&gt;</returns>
        ApiResponse<List<ProductSizeMaterial>> CustomersIdTeamsNkProductSizeMaterialsGetWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in productSizeMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductSizeMaterial</returns>
        ProductSizeMaterial CustomersIdTeamsNkProductSizeMaterialsPost (string id, string nk, ProductSizeMaterial data = null);

        /// <summary>
        /// Creates a new instance in productSizeMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductSizeMaterial</returns>
        ApiResponse<ProductSizeMaterial> CustomersIdTeamsNkProductSizeMaterialsPostWithHttpInfo (string id, string nk, ProductSizeMaterial data = null);
        /// <summary>
        /// Fetches belongsTo relation teamData.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>DynamicData</returns>
        DynamicData CustomersIdTeamsNkTeamDataGet (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation teamData.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of DynamicData</returns>
        ApiResponse<DynamicData> CustomersIdTeamsNkTeamDataGetWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Counts teamMembers of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 CustomersIdTeamsNkTeamMembersCountGet (string id, string nk, string where = null);

        /// <summary>
        /// Counts teamMembers of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> CustomersIdTeamsNkTeamMembersCountGetWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all teamMembers of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns></returns>
        void CustomersIdTeamsNkTeamMembersDelete (string id, string nk);

        /// <summary>
        /// Deletes all teamMembers of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsNkTeamMembersDeleteWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for teamMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for teamMembers</param>
        /// <returns></returns>
        void CustomersIdTeamsNkTeamMembersFkDelete (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for teamMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for teamMembers</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsNkTeamMembersFkDeleteWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for teamMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for teamMembers</param>
        /// <returns>TeamMember</returns>
        TeamMember CustomersIdTeamsNkTeamMembersFkGet (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for teamMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for teamMembers</param>
        /// <returns>ApiResponse of TeamMember</returns>
        ApiResponse<TeamMember> CustomersIdTeamsNkTeamMembersFkGetWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for teamMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for teamMembers</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamMember</returns>
        TeamMember CustomersIdTeamsNkTeamMembersFkPut (string id, string nk, string fk, TeamMember data = null);

        /// <summary>
        /// Update a related item by id for teamMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for teamMembers</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        ApiResponse<TeamMember> CustomersIdTeamsNkTeamMembersFkPutWithHttpInfo (string id, string nk, string fk, TeamMember data = null);
        /// <summary>
        /// Queries teamMembers of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;TeamMember&gt;</returns>
        List<TeamMember> CustomersIdTeamsNkTeamMembersGet (string id, string nk, string filter = null);

        /// <summary>
        /// Queries teamMembers of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamMember&gt;</returns>
        ApiResponse<List<TeamMember>> CustomersIdTeamsNkTeamMembersGetWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in teamMembers of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamMember</returns>
        TeamMember CustomersIdTeamsNkTeamMembersPost (string id, string nk, TeamMember data = null);

        /// <summary>
        /// Creates a new instance in teamMembers of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        ApiResponse<TeamMember> CustomersIdTeamsNkTeamMembersPostWithHttpInfo (string id, string nk, TeamMember data = null);
        /// <summary>
        /// Counts templateFolders of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 CustomersIdTeamsNkTemplateFoldersCountGet (string id, string nk, string where = null);

        /// <summary>
        /// Counts templateFolders of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> CustomersIdTeamsNkTemplateFoldersCountGetWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all templateFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns></returns>
        void CustomersIdTeamsNkTemplateFoldersDelete (string id, string nk);

        /// <summary>
        /// Deletes all templateFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsNkTemplateFoldersDeleteWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for templateFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns></returns>
        void CustomersIdTeamsNkTemplateFoldersFkDelete (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for templateFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsNkTemplateFoldersFkDeleteWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for templateFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns>TeamTemplateFolder</returns>
        TeamTemplateFolder CustomersIdTeamsNkTemplateFoldersFkGet (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for templateFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns>ApiResponse of TeamTemplateFolder</returns>
        ApiResponse<TeamTemplateFolder> CustomersIdTeamsNkTemplateFoldersFkGetWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for templateFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamTemplateFolder</returns>
        TeamTemplateFolder CustomersIdTeamsNkTemplateFoldersFkPut (string id, string nk, string fk, TeamTemplateFolder data = null);

        /// <summary>
        /// Update a related item by id for templateFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamTemplateFolder</returns>
        ApiResponse<TeamTemplateFolder> CustomersIdTeamsNkTemplateFoldersFkPutWithHttpInfo (string id, string nk, string fk, TeamTemplateFolder data = null);
        /// <summary>
        /// Queries templateFolders of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;TeamTemplateFolder&gt;</returns>
        List<TeamTemplateFolder> CustomersIdTeamsNkTemplateFoldersGet (string id, string nk, string filter = null);

        /// <summary>
        /// Queries templateFolders of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamTemplateFolder&gt;</returns>
        ApiResponse<List<TeamTemplateFolder>> CustomersIdTeamsNkTemplateFoldersGetWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in templateFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamTemplateFolder</returns>
        TeamTemplateFolder CustomersIdTeamsNkTemplateFoldersPost (string id, string nk, TeamTemplateFolder data = null);

        /// <summary>
        /// Creates a new instance in templateFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamTemplateFolder</returns>
        ApiResponse<TeamTemplateFolder> CustomersIdTeamsNkTemplateFoldersPostWithHttpInfo (string id, string nk, TeamTemplateFolder data = null);
        /// <summary>
        /// Counts templates of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 CustomersIdTeamsNkTemplatesCountGet (string id, string nk, string where = null);

        /// <summary>
        /// Counts templates of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> CustomersIdTeamsNkTemplatesCountGetWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all templates of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns></returns>
        void CustomersIdTeamsNkTemplatesDelete (string id, string nk);

        /// <summary>
        /// Deletes all templates of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsNkTemplatesDeleteWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns></returns>
        void CustomersIdTeamsNkTemplatesFkDelete (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsNkTemplatesFkDeleteWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Template</returns>
        Template CustomersIdTeamsNkTemplatesFkGet (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> CustomersIdTeamsNkTemplatesFkGetWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Template</returns>
        Template CustomersIdTeamsNkTemplatesFkPut (string id, string nk, string fk, Template data = null);

        /// <summary>
        /// Update a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> CustomersIdTeamsNkTemplatesFkPutWithHttpInfo (string id, string nk, string fk, Template data = null);
        /// <summary>
        /// Queries templates of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;Template&gt;</returns>
        List<Template> CustomersIdTeamsNkTemplatesGet (string id, string nk, string filter = null);

        /// <summary>
        /// Queries templates of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Template&gt;</returns>
        ApiResponse<List<Template>> CustomersIdTeamsNkTemplatesGetWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in templates of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Template</returns>
        Template CustomersIdTeamsNkTemplatesPost (string id, string nk, Template data = null);

        /// <summary>
        /// Creates a new instance in templates of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> CustomersIdTeamsNkTemplatesPostWithHttpInfo (string id, string nk, Template data = null);
        /// <summary>
        /// Counts workflows of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 CustomersIdTeamsNkWorkflowsCountGet (string id, string nk, string where = null);

        /// <summary>
        /// Counts workflows of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> CustomersIdTeamsNkWorkflowsCountGetWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all workflows of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns></returns>
        void CustomersIdTeamsNkWorkflowsDelete (string id, string nk);

        /// <summary>
        /// Deletes all workflows of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsNkWorkflowsDeleteWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for workflows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for workflows</param>
        /// <returns></returns>
        void CustomersIdTeamsNkWorkflowsFkDelete (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for workflows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for workflows</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsNkWorkflowsFkDeleteWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for workflows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for workflows</param>
        /// <returns>Workflow</returns>
        Workflow CustomersIdTeamsNkWorkflowsFkGet (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for workflows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for workflows</param>
        /// <returns>ApiResponse of Workflow</returns>
        ApiResponse<Workflow> CustomersIdTeamsNkWorkflowsFkGetWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for workflows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for workflows</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Workflow</returns>
        Workflow CustomersIdTeamsNkWorkflowsFkPut (string id, string nk, string fk, Workflow data = null);

        /// <summary>
        /// Update a related item by id for workflows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for workflows</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Workflow</returns>
        ApiResponse<Workflow> CustomersIdTeamsNkWorkflowsFkPutWithHttpInfo (string id, string nk, string fk, Workflow data = null);
        /// <summary>
        /// Queries workflows of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;Workflow&gt;</returns>
        List<Workflow> CustomersIdTeamsNkWorkflowsGet (string id, string nk, string filter = null);

        /// <summary>
        /// Queries workflows of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Workflow&gt;</returns>
        ApiResponse<List<Workflow>> CustomersIdTeamsNkWorkflowsGetWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in workflows of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Workflow</returns>
        Workflow CustomersIdTeamsNkWorkflowsPost (string id, string nk, Workflow data = null);

        /// <summary>
        /// Creates a new instance in workflows of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Workflow</returns>
        ApiResponse<Workflow> CustomersIdTeamsNkWorkflowsPostWithHttpInfo (string id, string nk, Workflow data = null);
        /// <summary>
        /// Creates a new instance in teams of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Team</returns>
        Team CustomersIdTeamsPost (string id, Team data = null);

        /// <summary>
        /// Creates a new instance in teams of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> CustomersIdTeamsPostWithHttpInfo (string id, Team data = null);
        /// <summary>
        /// Remove the teams relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns></returns>
        void CustomersIdTeamsRelFkDelete (string id, string fk);

        /// <summary>
        /// Remove the teams relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdTeamsRelFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Check the existence of teams relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns>bool?</returns>
        bool? CustomersIdTeamsRelFkHead (string id, string fk);

        /// <summary>
        /// Check the existence of teams relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> CustomersIdTeamsRelFkHeadWithHttpInfo (string id, string fk);
        /// <summary>
        /// Add a related item by id for teams.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamMember</returns>
        TeamMember CustomersIdTeamsRelFkPut (string id, string fk, TeamMember data = null);

        /// <summary>
        /// Add a related item by id for teams.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        ApiResponse<TeamMember> CustomersIdTeamsRelFkPutWithHttpInfo (string id, string fk, TeamMember data = null);
        /// <summary>
        /// Move authentication to a Team
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <param name="teamId">Team id</param>
        /// <returns>TeamMemberAccessToken</returns>
        TeamMemberAccessToken CustomersIdTeamsTeamIdChangePost (string id, string id2, string teamId);

        /// <summary>
        /// Move authentication to a Team
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <param name="teamId">Team id</param>
        /// <returns>ApiResponse of TeamMemberAccessToken</returns>
        ApiResponse<TeamMemberAccessToken> CustomersIdTeamsTeamIdChangePostWithHttpInfo (string id, string id2, string teamId);
        /// <summary>
        /// Move authentication to a Portal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <param name="teamId">Team id</param>
        /// <param name="portalId">Portal id</param>
        /// <returns>TeamMemberAccessToken</returns>
        TeamMemberAccessToken CustomersIdTeamsTeamIdPortalsPortalIdChangePost (string id, string id2, string teamId, string portalId);

        /// <summary>
        /// Move authentication to a Portal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <param name="teamId">Team id</param>
        /// <param name="portalId">Portal id</param>
        /// <returns>ApiResponse of TeamMemberAccessToken</returns>
        ApiResponse<TeamMemberAccessToken> CustomersIdTeamsTeamIdPortalsPortalIdChangePostWithHttpInfo (string id, string id2, string teamId, string portalId);
        /// <summary>
        /// Get token info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <returns>TeamMemberAccessToken</returns>
        TeamMemberAccessToken CustomersIdTokenGet (string id, string id2);

        /// <summary>
        /// Get token info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <returns>ApiResponse of TeamMemberAccessToken</returns>
        ApiResponse<TeamMemberAccessToken> CustomersIdTokenGetWithHttpInfo (string id, string id2);
        /// <summary>
        /// Trigger user&#39;s identity verification with configured verifyOptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns></returns>
        void CustomersIdVerifyPost (string id);

        /// <summary>
        /// Trigger user&#39;s identity verification with configured verifyOptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersIdVerifyPostWithHttpInfo (string id);
        /// <summary>
        /// Accept invitation with token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Token describing invitation ticket</param>
        /// <param name="data">Customer data in case new customer (optional)</param>
        /// <returns>InvitationTicket</returns>
        InvitationTicket CustomersInvitationTicketsTokenAcceptPost (string token, Customer data = null);

        /// <summary>
        /// Accept invitation with token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Token describing invitation ticket</param>
        /// <param name="data">Customer data in case new customer (optional)</param>
        /// <returns>ApiResponse of InvitationTicket</returns>
        ApiResponse<InvitationTicket> CustomersInvitationTicketsTokenAcceptPostWithHttpInfo (string token, Customer data = null);
        /// <summary>
        /// Get invitation details with token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Token describing invitation ticket</param>
        /// <returns>InvitationTicket</returns>
        InvitationTicket CustomersInvitationTicketsTokenGet (string token);

        /// <summary>
        /// Get invitation details with token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Token describing invitation ticket</param>
        /// <returns>ApiResponse of InvitationTicket</returns>
        ApiResponse<InvitationTicket> CustomersInvitationTicketsTokenGetWithHttpInfo (string token);
        /// <summary>
        /// Login a user with username/email and password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials"></param>
        /// <param name="include">Related objects to include in the response. See the description of return value for more details. (optional)</param>
        /// <returns>Object</returns>
        Object CustomersLoginPost (Object credentials, string include = null);

        /// <summary>
        /// Login a user with username/email and password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials"></param>
        /// <param name="include">Related objects to include in the response. See the description of return value for more details. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CustomersLoginPostWithHttpInfo (Object credentials, string include = null);
        /// <summary>
        /// Logout a user with access token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void CustomersLogoutPost ();

        /// <summary>
        /// Logout a user with access token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersLogoutPostWithHttpInfo ();
        /// <summary>
        /// Get token info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TeamMemberAccessToken</returns>
        TeamMemberAccessToken CustomersMeTokenGet ();

        /// <summary>
        /// Get token info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TeamMemberAccessToken</returns>
        ApiResponse<TeamMemberAccessToken> CustomersMeTokenGetWithHttpInfo ();
        /// <summary>
        /// Refresh current access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken">AccessToken refreshToken</param>
        /// <returns>TeamMemberAccessToken</returns>
        TeamMemberAccessToken CustomersMeTokenRefreshGet (string refreshToken);

        /// <summary>
        /// Refresh current access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken">AccessToken refreshToken</param>
        /// <returns>ApiResponse of TeamMemberAccessToken</returns>
        ApiResponse<TeamMemberAccessToken> CustomersMeTokenRefreshGetWithHttpInfo (string refreshToken);
        /// <summary>
        /// Create a new instance of the model and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Customer</returns>
        Customer CustomersPost (Customer data = null);

        /// <summary>
        /// Create a new instance of the model and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> CustomersPostWithHttpInfo (Customer data = null);
        /// <summary>
        /// Create customer and assign it to a team
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>TeamMember</returns>
        TeamMember CustomersRegisterPost (Customer data = null);

        /// <summary>
        /// Create customer and assign it to a team
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        ApiResponse<TeamMember> CustomersRegisterPostWithHttpInfo (Customer data = null);
        /// <summary>
        /// Reset user&#39;s password via a password-reset token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newPassword"></param>
        /// <returns></returns>
        void CustomersResetPasswordPost (string newPassword);

        /// <summary>
        /// Reset user&#39;s password via a password-reset token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newPassword"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersResetPasswordPostWithHttpInfo (string newPassword);
        /// <summary>
        /// Get token info for reset password token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Reset password access token</param>
        /// <returns>TeamMemberAccessToken</returns>
        TeamMemberAccessToken CustomersResetPasswordTokenGet (string token);

        /// <summary>
        /// Get token info for reset password token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Reset password access token</param>
        /// <returns>ApiResponse of TeamMemberAccessToken</returns>
        ApiResponse<TeamMemberAccessToken> CustomersResetPasswordTokenGetWithHttpInfo (string token);
        /// <summary>
        /// Reset password for a user with email.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"></param>
        /// <returns></returns>
        void CustomersResetPost (Object options);

        /// <summary>
        /// Reset password for a user with email.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CustomersResetPostWithHttpInfo (Object options);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Change a user&#39;s password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oldPassword"></param>
        /// <param name="newPassword"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersChangePasswordPostAsync (string oldPassword, string newPassword);

        /// <summary>
        /// Change a user&#39;s password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oldPassword"></param>
        /// <param name="newPassword"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersChangePasswordPostAsyncWithHttpInfo (string oldPassword, string newPassword);
        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> CustomersChangeStreamGetAsync (string options = null);

        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CustomersChangeStreamGetAsyncWithHttpInfo (string options = null);
        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> CustomersChangeStreamPostAsync (string options = null);

        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CustomersChangeStreamPostAsyncWithHttpInfo (string options = null);
        /// <summary>
        /// Confirm a user registration with identity verification token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="token"></param>
        /// <param name="redirect"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersConfirmGetAsync (string uid, string token, string redirect = null);

        /// <summary>
        /// Confirm a user registration with identity verification token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="token"></param>
        /// <param name="redirect"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersConfirmGetAsyncWithHttpInfo (string uid, string token, string redirect = null);
        /// <summary>
        /// Count instances of the model matched by where from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> CustomersCountGetAsync (string where = null);

        /// <summary>
        /// Count instances of the model matched by where from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersCountGetAsyncWithHttpInfo (string where = null);
        /// <summary>
        /// Define whether customer exists or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Customer email</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> CustomersEmailEmailExistsGetAsync (string email);

        /// <summary>
        /// Define whether customer exists or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Customer email</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> CustomersEmailEmailExistsGetAsyncWithHttpInfo (string email);
        /// <summary>
        /// Find first instance of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> CustomersFindOneGetAsync (string filter = null);

        /// <summary>
        /// Find first instance of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> CustomersFindOneGetAsyncWithHttpInfo (string filter = null);
        /// <summary>
        /// Find all instances of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of List&lt;Customer&gt;</returns>
        System.Threading.Tasks.Task<List<Customer>> CustomersGetAsync (string filter = null);

        /// <summary>
        /// Find all instances of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Customer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Customer>>> CustomersGetAsyncWithHttpInfo (string filter = null);
        /// <summary>
        /// Counts accessTokens of Customer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> CustomersIdAccessTokensCountGetAsync (string id, string where = null);

        /// <summary>
        /// Counts accessTokens of Customer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdAccessTokensCountGetAsyncWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all accessTokens of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdAccessTokensDeleteAsync (string id);

        /// <summary>
        /// Deletes all accessTokens of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdAccessTokensDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for accessTokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for accessTokens</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdAccessTokensFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Delete a related item by id for accessTokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for accessTokens</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdAccessTokensFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for accessTokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for accessTokens</param>
        /// <returns>Task of TeamMemberAccessToken</returns>
        System.Threading.Tasks.Task<TeamMemberAccessToken> CustomersIdAccessTokensFkGetAsync (string id, string fk);

        /// <summary>
        /// Find a related item by id for accessTokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for accessTokens</param>
        /// <returns>Task of ApiResponse (TeamMemberAccessToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMemberAccessToken>> CustomersIdAccessTokensFkGetAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for accessTokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for accessTokens</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamMemberAccessToken</returns>
        System.Threading.Tasks.Task<TeamMemberAccessToken> CustomersIdAccessTokensFkPutAsync (string id, string fk, TeamMemberAccessToken data = null);

        /// <summary>
        /// Update a related item by id for accessTokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for accessTokens</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMemberAccessToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMemberAccessToken>> CustomersIdAccessTokensFkPutAsyncWithHttpInfo (string id, string fk, TeamMemberAccessToken data = null);
        /// <summary>
        /// Queries accessTokens of Customer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;TeamMemberAccessToken&gt;</returns>
        System.Threading.Tasks.Task<List<TeamMemberAccessToken>> CustomersIdAccessTokensGetAsync (string id, string filter = null);

        /// <summary>
        /// Queries accessTokens of Customer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamMemberAccessToken&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamMemberAccessToken>>> CustomersIdAccessTokensGetAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in accessTokens of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamMemberAccessToken</returns>
        System.Threading.Tasks.Task<TeamMemberAccessToken> CustomersIdAccessTokensPostAsync (string id, TeamMemberAccessToken data = null);

        /// <summary>
        /// Creates a new instance in accessTokens of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMemberAccessToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMemberAccessToken>> CustomersIdAccessTokensPostAsyncWithHttpInfo (string id, TeamMemberAccessToken data = null);
        /// <summary>
        /// Define whether customer is active or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id or email</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> CustomersIdActiveGetAsync (string id);

        /// <summary>
        /// Define whether customer is active or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id or email</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> CustomersIdActiveGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CustomersIdDeleteAsync (string id);

        /// <summary>
        /// Delete a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> CustomersIdExistsGetAsync (string id);

        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> CustomersIdExistsGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Find a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> CustomersIdGetAsync (string id, string filter = null);

        /// <summary>
        /// Find a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> CustomersIdGetAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> CustomersIdHeadAsync (string id);

        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> CustomersIdHeadAsyncWithHttpInfo (string id);
        /// <summary>
        /// Counts invitationTickets of Customer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> CustomersIdInvitationTicketsCountGetAsync (string id, string where = null);

        /// <summary>
        /// Counts invitationTickets of Customer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdInvitationTicketsCountGetAsyncWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all invitationTickets of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdInvitationTicketsDeleteAsync (string id);

        /// <summary>
        /// Deletes all invitationTickets of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdInvitationTicketsDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for invitationTickets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for invitationTickets</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdInvitationTicketsFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Delete a related item by id for invitationTickets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for invitationTickets</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdInvitationTicketsFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for invitationTickets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for invitationTickets</param>
        /// <returns>Task of InvitationTicket</returns>
        System.Threading.Tasks.Task<InvitationTicket> CustomersIdInvitationTicketsFkGetAsync (string id, string fk);

        /// <summary>
        /// Find a related item by id for invitationTickets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for invitationTickets</param>
        /// <returns>Task of ApiResponse (InvitationTicket)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvitationTicket>> CustomersIdInvitationTicketsFkGetAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for invitationTickets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for invitationTickets</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of InvitationTicket</returns>
        System.Threading.Tasks.Task<InvitationTicket> CustomersIdInvitationTicketsFkPutAsync (string id, string fk, InvitationTicket data = null);

        /// <summary>
        /// Update a related item by id for invitationTickets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for invitationTickets</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (InvitationTicket)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvitationTicket>> CustomersIdInvitationTicketsFkPutAsyncWithHttpInfo (string id, string fk, InvitationTicket data = null);
        /// <summary>
        /// Queries invitationTickets of Customer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;InvitationTicket&gt;</returns>
        System.Threading.Tasks.Task<List<InvitationTicket>> CustomersIdInvitationTicketsGetAsync (string id, string filter = null);

        /// <summary>
        /// Queries invitationTickets of Customer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InvitationTicket&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InvitationTicket>>> CustomersIdInvitationTicketsGetAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in invitationTickets of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of InvitationTicket</returns>
        System.Threading.Tasks.Task<InvitationTicket> CustomersIdInvitationTicketsPostAsync (string id, InvitationTicket data = null);

        /// <summary>
        /// Creates a new instance in invitationTickets of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (InvitationTicket)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvitationTicket>> CustomersIdInvitationTicketsPostAsyncWithHttpInfo (string id, InvitationTicket data = null);
        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> CustomersIdPatchAsync (string id, Customer data = null);

        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> CustomersIdPatchAsyncWithHttpInfo (string id, Customer data = null);
        /// <summary>
        /// Deletes permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdPermissionDeleteAsync (string id);

        /// <summary>
        /// Deletes permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdPermissionDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Fetches hasOne relation permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of CustomerPermissionSet</returns>
        System.Threading.Tasks.Task<CustomerPermissionSet> CustomersIdPermissionGetAsync (string id, bool? refresh = null);

        /// <summary>
        /// Fetches hasOne relation permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomerPermissionSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerPermissionSet>> CustomersIdPermissionGetAsyncWithHttpInfo (string id, bool? refresh = null);
        /// <summary>
        /// Creates a new instance in permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of CustomerPermissionSet</returns>
        System.Threading.Tasks.Task<CustomerPermissionSet> CustomersIdPermissionPostAsync (string id, CustomerPermissionSet data = null);

        /// <summary>
        /// Creates a new instance in permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomerPermissionSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerPermissionSet>> CustomersIdPermissionPostAsyncWithHttpInfo (string id, CustomerPermissionSet data = null);
        /// <summary>
        /// Update permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of CustomerPermissionSet</returns>
        System.Threading.Tasks.Task<CustomerPermissionSet> CustomersIdPermissionPutAsync (string id, CustomerPermissionSet data = null);

        /// <summary>
        /// Update permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomerPermissionSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerPermissionSet>> CustomersIdPermissionPutAsyncWithHttpInfo (string id, CustomerPermissionSet data = null);
        /// <summary>
        /// Change profile picture
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <param name="data">Profile picture</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> CustomersIdProfilePicturePutAsync (string id, string id2, Customer data);

        /// <summary>
        /// Change profile picture
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <param name="data">Profile picture</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> CustomersIdProfilePicturePutAsyncWithHttpInfo (string id, string id2, Customer data);
        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> CustomersIdPutAsync (string id, Customer data = null);

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> CustomersIdPutAsyncWithHttpInfo (string id, Customer data = null);
        /// <summary>
        /// Register team and assign it to the customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of TeamMember</returns>
        System.Threading.Tasks.Task<TeamMember> CustomersIdRegisterTeamPostAsync (string id, Team data = null);

        /// <summary>
        /// Register team and assign it to the customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMember>> CustomersIdRegisterTeamPostAsyncWithHttpInfo (string id, Team data = null);
        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> CustomersIdReplacePostAsync (string id, Customer data = null);

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> CustomersIdReplacePostAsyncWithHttpInfo (string id, Customer data = null);
        /// <summary>
        /// Counts teams of Customer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> CustomersIdTeamsCountGetAsync (string id, string where = null);

        /// <summary>
        /// Counts teams of Customer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdTeamsCountGetAsyncWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all teams of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsDeleteAsync (string id);

        /// <summary>
        /// Deletes all teams of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for teams.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Delete a related item by id for teams.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for teams.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> CustomersIdTeamsFkGetAsync (string id, string fk);

        /// <summary>
        /// Find a related item by id for teams.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> CustomersIdTeamsFkGetAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for teams.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> CustomersIdTeamsFkPutAsync (string id, string fk, Team data = null);

        /// <summary>
        /// Update a related item by id for teams.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> CustomersIdTeamsFkPutAsyncWithHttpInfo (string id, string fk, Team data = null);
        /// <summary>
        /// Queries teams of Customer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        System.Threading.Tasks.Task<List<Team>> CustomersIdTeamsGetAsync (string id, string filter = null);

        /// <summary>
        /// Queries teams of Customer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Team>>> CustomersIdTeamsGetAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Deletes brand of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsNkBrandDeleteAsync (string id, string nk);

        /// <summary>
        /// Deletes brand of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkBrandDeleteAsyncWithHttpInfo (string id, string nk);
        /// <summary>
        /// Fetches hasOne relation brand.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of TeamBrand</returns>
        System.Threading.Tasks.Task<TeamBrand> CustomersIdTeamsNkBrandGetAsync (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches hasOne relation brand.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamBrand)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamBrand>> CustomersIdTeamsNkBrandGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Creates a new instance in brand of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamBrand</returns>
        System.Threading.Tasks.Task<TeamBrand> CustomersIdTeamsNkBrandPostAsync (string id, string nk, TeamBrand data = null);

        /// <summary>
        /// Creates a new instance in brand of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamBrand)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamBrand>> CustomersIdTeamsNkBrandPostAsyncWithHttpInfo (string id, string nk, TeamBrand data = null);
        /// <summary>
        /// Update brand of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamBrand</returns>
        System.Threading.Tasks.Task<TeamBrand> CustomersIdTeamsNkBrandPutAsync (string id, string nk, TeamBrand data = null);

        /// <summary>
        /// Update brand of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamBrand)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamBrand>> CustomersIdTeamsNkBrandPutAsyncWithHttpInfo (string id, string nk, TeamBrand data = null);
        /// <summary>
        /// Counts builderConfigs of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> CustomersIdTeamsNkBuilderConfigsCountGetAsync (string id, string nk, string where = null);

        /// <summary>
        /// Counts builderConfigs of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdTeamsNkBuilderConfigsCountGetAsyncWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all builderConfigs of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsNkBuilderConfigsDeleteAsync (string id, string nk);

        /// <summary>
        /// Deletes all builderConfigs of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkBuilderConfigsDeleteAsyncWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for builderConfigs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for builderConfigs</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsNkBuilderConfigsFkDeleteAsync (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for builderConfigs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for builderConfigs</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkBuilderConfigsFkDeleteAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for builderConfigs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for builderConfigs</param>
        /// <returns>Task of TeamBuilderConfig</returns>
        System.Threading.Tasks.Task<TeamBuilderConfig> CustomersIdTeamsNkBuilderConfigsFkGetAsync (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for builderConfigs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for builderConfigs</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfig>> CustomersIdTeamsNkBuilderConfigsFkGetAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for builderConfigs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for builderConfigs</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamBuilderConfig</returns>
        System.Threading.Tasks.Task<TeamBuilderConfig> CustomersIdTeamsNkBuilderConfigsFkPutAsync (string id, string nk, string fk, TeamBuilderConfig data = null);

        /// <summary>
        /// Update a related item by id for builderConfigs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for builderConfigs</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfig>> CustomersIdTeamsNkBuilderConfigsFkPutAsyncWithHttpInfo (string id, string nk, string fk, TeamBuilderConfig data = null);
        /// <summary>
        /// Queries builderConfigs of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;TeamBuilderConfig&gt;</returns>
        System.Threading.Tasks.Task<List<TeamBuilderConfig>> CustomersIdTeamsNkBuilderConfigsGetAsync (string id, string nk, string filter = null);

        /// <summary>
        /// Queries builderConfigs of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamBuilderConfig&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamBuilderConfig>>> CustomersIdTeamsNkBuilderConfigsGetAsyncWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in builderConfigs of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamBuilderConfig</returns>
        System.Threading.Tasks.Task<TeamBuilderConfig> CustomersIdTeamsNkBuilderConfigsPostAsync (string id, string nk, TeamBuilderConfig data = null);

        /// <summary>
        /// Creates a new instance in builderConfigs of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfig>> CustomersIdTeamsNkBuilderConfigsPostAsyncWithHttpInfo (string id, string nk, TeamBuilderConfig data = null);
        /// <summary>
        /// Counts dataSourceSoaps of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> CustomersIdTeamsNkDataSourceSoapsCountGetAsync (string id, string nk, string where = null);

        /// <summary>
        /// Counts dataSourceSoaps of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdTeamsNkDataSourceSoapsCountGetAsyncWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Delete a related item by id for dataSourceSoaps.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dataSourceSoaps</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsNkDataSourceSoapsFkDeleteAsync (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for dataSourceSoaps.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dataSourceSoaps</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkDataSourceSoapsFkDeleteAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for dataSourceSoaps.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dataSourceSoaps</param>
        /// <returns>Task of DataSourceSoap</returns>
        System.Threading.Tasks.Task<DataSourceSoap> CustomersIdTeamsNkDataSourceSoapsFkGetAsync (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for dataSourceSoaps.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dataSourceSoaps</param>
        /// <returns>Task of ApiResponse (DataSourceSoap)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataSourceSoap>> CustomersIdTeamsNkDataSourceSoapsFkGetAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for dataSourceSoaps.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dataSourceSoaps</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of DataSourceSoap</returns>
        System.Threading.Tasks.Task<DataSourceSoap> CustomersIdTeamsNkDataSourceSoapsFkPutAsync (string id, string nk, string fk, DataSourceSoap data = null);

        /// <summary>
        /// Update a related item by id for dataSourceSoaps.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dataSourceSoaps</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (DataSourceSoap)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataSourceSoap>> CustomersIdTeamsNkDataSourceSoapsFkPutAsyncWithHttpInfo (string id, string nk, string fk, DataSourceSoap data = null);
        /// <summary>
        /// Queries dataSourceSoaps of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;DataSourceSoap&gt;</returns>
        System.Threading.Tasks.Task<List<DataSourceSoap>> CustomersIdTeamsNkDataSourceSoapsGetAsync (string id, string nk, string filter = null);

        /// <summary>
        /// Queries dataSourceSoaps of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DataSourceSoap&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DataSourceSoap>>> CustomersIdTeamsNkDataSourceSoapsGetAsyncWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in dataSourceSoaps of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of DataSourceSoap</returns>
        System.Threading.Tasks.Task<DataSourceSoap> CustomersIdTeamsNkDataSourceSoapsPostAsync (string id, string nk, DataSourceSoap data = null);

        /// <summary>
        /// Creates a new instance in dataSourceSoaps of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (DataSourceSoap)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataSourceSoap>> CustomersIdTeamsNkDataSourceSoapsPostAsyncWithHttpInfo (string id, string nk, DataSourceSoap data = null);
        /// <summary>
        /// Counts dynamicDatas of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> CustomersIdTeamsNkDynamicDatasCountGetAsync (string id, string nk, string where = null);

        /// <summary>
        /// Counts dynamicDatas of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdTeamsNkDynamicDatasCountGetAsyncWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Delete a related item by id for dynamicDatas.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dynamicDatas</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsNkDynamicDatasFkDeleteAsync (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for dynamicDatas.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dynamicDatas</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkDynamicDatasFkDeleteAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for dynamicDatas.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dynamicDatas</param>
        /// <returns>Task of DynamicData</returns>
        System.Threading.Tasks.Task<DynamicData> CustomersIdTeamsNkDynamicDatasFkGetAsync (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for dynamicDatas.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dynamicDatas</param>
        /// <returns>Task of ApiResponse (DynamicData)</returns>
        System.Threading.Tasks.Task<ApiResponse<DynamicData>> CustomersIdTeamsNkDynamicDatasFkGetAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for dynamicDatas.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dynamicDatas</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of DynamicData</returns>
        System.Threading.Tasks.Task<DynamicData> CustomersIdTeamsNkDynamicDatasFkPutAsync (string id, string nk, string fk, DynamicData data = null);

        /// <summary>
        /// Update a related item by id for dynamicDatas.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dynamicDatas</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (DynamicData)</returns>
        System.Threading.Tasks.Task<ApiResponse<DynamicData>> CustomersIdTeamsNkDynamicDatasFkPutAsyncWithHttpInfo (string id, string nk, string fk, DynamicData data = null);
        /// <summary>
        /// Queries dynamicDatas of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;DynamicData&gt;</returns>
        System.Threading.Tasks.Task<List<DynamicData>> CustomersIdTeamsNkDynamicDatasGetAsync (string id, string nk, string filter = null);

        /// <summary>
        /// Queries dynamicDatas of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DynamicData&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DynamicData>>> CustomersIdTeamsNkDynamicDatasGetAsyncWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in dynamicDatas of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of DynamicData</returns>
        System.Threading.Tasks.Task<DynamicData> CustomersIdTeamsNkDynamicDatasPostAsync (string id, string nk, DynamicData data = null);

        /// <summary>
        /// Creates a new instance in dynamicDatas of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (DynamicData)</returns>
        System.Threading.Tasks.Task<ApiResponse<DynamicData>> CustomersIdTeamsNkDynamicDatasPostAsyncWithHttpInfo (string id, string nk, DynamicData data = null);
        /// <summary>
        /// Counts imageFolders of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> CustomersIdTeamsNkImageFoldersCountGetAsync (string id, string nk, string where = null);

        /// <summary>
        /// Counts imageFolders of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdTeamsNkImageFoldersCountGetAsyncWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all imageFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsNkImageFoldersDeleteAsync (string id, string nk);

        /// <summary>
        /// Deletes all imageFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkImageFoldersDeleteAsyncWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for imageFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsNkImageFoldersFkDeleteAsync (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for imageFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkImageFoldersFkDeleteAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for imageFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>Task of ImageFolder</returns>
        System.Threading.Tasks.Task<ImageFolder> CustomersIdTeamsNkImageFoldersFkGetAsync (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for imageFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>Task of ApiResponse (ImageFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageFolder>> CustomersIdTeamsNkImageFoldersFkGetAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for imageFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ImageFolder</returns>
        System.Threading.Tasks.Task<ImageFolder> CustomersIdTeamsNkImageFoldersFkPutAsync (string id, string nk, string fk, ImageFolder data = null);

        /// <summary>
        /// Update a related item by id for imageFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ImageFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageFolder>> CustomersIdTeamsNkImageFoldersFkPutAsyncWithHttpInfo (string id, string nk, string fk, ImageFolder data = null);
        /// <summary>
        /// Queries imageFolders of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;ImageFolder&gt;</returns>
        System.Threading.Tasks.Task<List<ImageFolder>> CustomersIdTeamsNkImageFoldersGetAsync (string id, string nk, string filter = null);

        /// <summary>
        /// Queries imageFolders of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ImageFolder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ImageFolder>>> CustomersIdTeamsNkImageFoldersGetAsyncWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in imageFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ImageFolder</returns>
        System.Threading.Tasks.Task<ImageFolder> CustomersIdTeamsNkImageFoldersPostAsync (string id, string nk, ImageFolder data = null);

        /// <summary>
        /// Creates a new instance in imageFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ImageFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImageFolder>> CustomersIdTeamsNkImageFoldersPostAsyncWithHttpInfo (string id, string nk, ImageFolder data = null);
        /// <summary>
        /// Counts images of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> CustomersIdTeamsNkImagesCountGetAsync (string id, string nk, string where = null);

        /// <summary>
        /// Counts images of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdTeamsNkImagesCountGetAsyncWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all images of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsNkImagesDeleteAsync (string id, string nk);

        /// <summary>
        /// Deletes all images of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkImagesDeleteAsyncWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for images.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for images</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsNkImagesFkDeleteAsync (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for images.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for images</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkImagesFkDeleteAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for images.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for images</param>
        /// <returns>Task of Image</returns>
        System.Threading.Tasks.Task<Image> CustomersIdTeamsNkImagesFkGetAsync (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for images.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for images</param>
        /// <returns>Task of ApiResponse (Image)</returns>
        System.Threading.Tasks.Task<ApiResponse<Image>> CustomersIdTeamsNkImagesFkGetAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for images.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for images</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Image</returns>
        System.Threading.Tasks.Task<Image> CustomersIdTeamsNkImagesFkPutAsync (string id, string nk, string fk, Image data = null);

        /// <summary>
        /// Update a related item by id for images.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for images</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Image)</returns>
        System.Threading.Tasks.Task<ApiResponse<Image>> CustomersIdTeamsNkImagesFkPutAsyncWithHttpInfo (string id, string nk, string fk, Image data = null);
        /// <summary>
        /// Queries images of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;Image&gt;</returns>
        System.Threading.Tasks.Task<List<Image>> CustomersIdTeamsNkImagesGetAsync (string id, string nk, string filter = null);

        /// <summary>
        /// Queries images of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Image&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Image>>> CustomersIdTeamsNkImagesGetAsyncWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in images of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Image</returns>
        System.Threading.Tasks.Task<Image> CustomersIdTeamsNkImagesPostAsync (string id, string nk, Image data = null);

        /// <summary>
        /// Creates a new instance in images of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Image)</returns>
        System.Threading.Tasks.Task<ApiResponse<Image>> CustomersIdTeamsNkImagesPostAsyncWithHttpInfo (string id, string nk, Image data = null);
        /// <summary>
        /// Counts members of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> CustomersIdTeamsNkMembersCountGetAsync (string id, string nk, string where = null);

        /// <summary>
        /// Counts members of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdTeamsNkMembersCountGetAsyncWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all members of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsNkMembersDeleteAsync (string id, string nk);

        /// <summary>
        /// Deletes all members of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkMembersDeleteAsyncWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsNkMembersFkDeleteAsync (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkMembersFkDeleteAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> CustomersIdTeamsNkMembersFkGetAsync (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> CustomersIdTeamsNkMembersFkGetAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> CustomersIdTeamsNkMembersFkPutAsync (string id, string nk, string fk, Customer data = null);

        /// <summary>
        /// Update a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> CustomersIdTeamsNkMembersFkPutAsyncWithHttpInfo (string id, string nk, string fk, Customer data = null);
        /// <summary>
        /// Queries members of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;Customer&gt;</returns>
        System.Threading.Tasks.Task<List<Customer>> CustomersIdTeamsNkMembersGetAsync (string id, string nk, string filter = null);

        /// <summary>
        /// Queries members of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Customer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Customer>>> CustomersIdTeamsNkMembersGetAsyncWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in members of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> CustomersIdTeamsNkMembersPostAsync (string id, string nk, Customer data = null);

        /// <summary>
        /// Creates a new instance in members of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> CustomersIdTeamsNkMembersPostAsyncWithHttpInfo (string id, string nk, Customer data = null);
        /// <summary>
        /// Remove the members relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsNkMembersRelFkDeleteAsync (string id, string nk, string fk);

        /// <summary>
        /// Remove the members relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkMembersRelFkDeleteAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Check the existence of members relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> CustomersIdTeamsNkMembersRelFkHeadAsync (string id, string nk, string fk);

        /// <summary>
        /// Check the existence of members relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> CustomersIdTeamsNkMembersRelFkHeadAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Add a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamMember</returns>
        System.Threading.Tasks.Task<TeamMember> CustomersIdTeamsNkMembersRelFkPutAsync (string id, string nk, string fk, TeamMember data = null);

        /// <summary>
        /// Add a related item by id for members.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMember>> CustomersIdTeamsNkMembersRelFkPutAsyncWithHttpInfo (string id, string nk, string fk, TeamMember data = null);
        /// <summary>
        /// Deletes permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsNkPermissionDeleteAsync (string id, string nk);

        /// <summary>
        /// Deletes permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkPermissionDeleteAsyncWithHttpInfo (string id, string nk);
        /// <summary>
        /// Fetches hasOne relation permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of TeamPermissionSet</returns>
        System.Threading.Tasks.Task<TeamPermissionSet> CustomersIdTeamsNkPermissionGetAsync (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches hasOne relation permission.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamPermissionSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamPermissionSet>> CustomersIdTeamsNkPermissionGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Creates a new instance in permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamPermissionSet</returns>
        System.Threading.Tasks.Task<TeamPermissionSet> CustomersIdTeamsNkPermissionPostAsync (string id, string nk, TeamPermissionSet data = null);

        /// <summary>
        /// Creates a new instance in permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamPermissionSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamPermissionSet>> CustomersIdTeamsNkPermissionPostAsyncWithHttpInfo (string id, string nk, TeamPermissionSet data = null);
        /// <summary>
        /// Update permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamPermissionSet</returns>
        System.Threading.Tasks.Task<TeamPermissionSet> CustomersIdTeamsNkPermissionPutAsync (string id, string nk, TeamPermissionSet data = null);

        /// <summary>
        /// Update permission of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamPermissionSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamPermissionSet>> CustomersIdTeamsNkPermissionPutAsyncWithHttpInfo (string id, string nk, TeamPermissionSet data = null);
        /// <summary>
        /// Counts portals of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> CustomersIdTeamsNkPortalsCountGetAsync (string id, string nk, string where = null);

        /// <summary>
        /// Counts portals of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdTeamsNkPortalsCountGetAsyncWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all portals of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsNkPortalsDeleteAsync (string id, string nk);

        /// <summary>
        /// Deletes all portals of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkPortalsDeleteAsyncWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsNkPortalsFkDeleteAsync (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkPortalsFkDeleteAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of Portal</returns>
        System.Threading.Tasks.Task<Portal> CustomersIdTeamsNkPortalsFkGetAsync (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        System.Threading.Tasks.Task<ApiResponse<Portal>> CustomersIdTeamsNkPortalsFkGetAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Portal</returns>
        System.Threading.Tasks.Task<Portal> CustomersIdTeamsNkPortalsFkPutAsync (string id, string nk, string fk, Portal data = null);

        /// <summary>
        /// Update a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        System.Threading.Tasks.Task<ApiResponse<Portal>> CustomersIdTeamsNkPortalsFkPutAsyncWithHttpInfo (string id, string nk, string fk, Portal data = null);
        /// <summary>
        /// Queries portals of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;Portal&gt;</returns>
        System.Threading.Tasks.Task<List<Portal>> CustomersIdTeamsNkPortalsGetAsync (string id, string nk, string filter = null);

        /// <summary>
        /// Queries portals of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Portal&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Portal>>> CustomersIdTeamsNkPortalsGetAsyncWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in portals of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Portal</returns>
        System.Threading.Tasks.Task<Portal> CustomersIdTeamsNkPortalsPostAsync (string id, string nk, Portal data = null);

        /// <summary>
        /// Creates a new instance in portals of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        System.Threading.Tasks.Task<ApiResponse<Portal>> CustomersIdTeamsNkPortalsPostAsyncWithHttpInfo (string id, string nk, Portal data = null);
        /// <summary>
        /// Counts productMaterials of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> CustomersIdTeamsNkProductMaterialsCountGetAsync (string id, string nk, string where = null);

        /// <summary>
        /// Counts productMaterials of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdTeamsNkProductMaterialsCountGetAsyncWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all productMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsNkProductMaterialsDeleteAsync (string id, string nk);

        /// <summary>
        /// Deletes all productMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkProductMaterialsDeleteAsyncWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for productMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productMaterials</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsNkProductMaterialsFkDeleteAsync (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for productMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productMaterials</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkProductMaterialsFkDeleteAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for productMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productMaterials</param>
        /// <returns>Task of ProductMaterial</returns>
        System.Threading.Tasks.Task<ProductMaterial> CustomersIdTeamsNkProductMaterialsFkGetAsync (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for productMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productMaterials</param>
        /// <returns>Task of ApiResponse (ProductMaterial)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductMaterial>> CustomersIdTeamsNkProductMaterialsFkGetAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for productMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductMaterial</returns>
        System.Threading.Tasks.Task<ProductMaterial> CustomersIdTeamsNkProductMaterialsFkPutAsync (string id, string nk, string fk, ProductMaterial data = null);

        /// <summary>
        /// Update a related item by id for productMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductMaterial)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductMaterial>> CustomersIdTeamsNkProductMaterialsFkPutAsyncWithHttpInfo (string id, string nk, string fk, ProductMaterial data = null);
        /// <summary>
        /// Queries productMaterials of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;ProductMaterial&gt;</returns>
        System.Threading.Tasks.Task<List<ProductMaterial>> CustomersIdTeamsNkProductMaterialsGetAsync (string id, string nk, string filter = null);

        /// <summary>
        /// Queries productMaterials of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProductMaterial&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductMaterial>>> CustomersIdTeamsNkProductMaterialsGetAsyncWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in productMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductMaterial</returns>
        System.Threading.Tasks.Task<ProductMaterial> CustomersIdTeamsNkProductMaterialsPostAsync (string id, string nk, ProductMaterial data = null);

        /// <summary>
        /// Creates a new instance in productMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductMaterial)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductMaterial>> CustomersIdTeamsNkProductMaterialsPostAsyncWithHttpInfo (string id, string nk, ProductMaterial data = null);
        /// <summary>
        /// Counts productPdfColorProfiles of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> CustomersIdTeamsNkProductPdfColorProfilesCountGetAsync (string id, string nk, string where = null);

        /// <summary>
        /// Counts productPdfColorProfiles of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdTeamsNkProductPdfColorProfilesCountGetAsyncWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all productPdfColorProfiles of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsNkProductPdfColorProfilesDeleteAsync (string id, string nk);

        /// <summary>
        /// Deletes all productPdfColorProfiles of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkProductPdfColorProfilesDeleteAsyncWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for productPdfColorProfiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productPdfColorProfiles</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsNkProductPdfColorProfilesFkDeleteAsync (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for productPdfColorProfiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productPdfColorProfiles</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkProductPdfColorProfilesFkDeleteAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for productPdfColorProfiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productPdfColorProfiles</param>
        /// <returns>Task of ProductPdfColorProfile</returns>
        System.Threading.Tasks.Task<ProductPdfColorProfile> CustomersIdTeamsNkProductPdfColorProfilesFkGetAsync (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for productPdfColorProfiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productPdfColorProfiles</param>
        /// <returns>Task of ApiResponse (ProductPdfColorProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductPdfColorProfile>> CustomersIdTeamsNkProductPdfColorProfilesFkGetAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for productPdfColorProfiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productPdfColorProfiles</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductPdfColorProfile</returns>
        System.Threading.Tasks.Task<ProductPdfColorProfile> CustomersIdTeamsNkProductPdfColorProfilesFkPutAsync (string id, string nk, string fk, ProductPdfColorProfile data = null);

        /// <summary>
        /// Update a related item by id for productPdfColorProfiles.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productPdfColorProfiles</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductPdfColorProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductPdfColorProfile>> CustomersIdTeamsNkProductPdfColorProfilesFkPutAsyncWithHttpInfo (string id, string nk, string fk, ProductPdfColorProfile data = null);
        /// <summary>
        /// Queries productPdfColorProfiles of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;ProductPdfColorProfile&gt;</returns>
        System.Threading.Tasks.Task<List<ProductPdfColorProfile>> CustomersIdTeamsNkProductPdfColorProfilesGetAsync (string id, string nk, string filter = null);

        /// <summary>
        /// Queries productPdfColorProfiles of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProductPdfColorProfile&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductPdfColorProfile>>> CustomersIdTeamsNkProductPdfColorProfilesGetAsyncWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Counts productSizeMaterials of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> CustomersIdTeamsNkProductSizeMaterialsCountGetAsync (string id, string nk, string where = null);

        /// <summary>
        /// Counts productSizeMaterials of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdTeamsNkProductSizeMaterialsCountGetAsyncWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all productSizeMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsNkProductSizeMaterialsDeleteAsync (string id, string nk);

        /// <summary>
        /// Deletes all productSizeMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkProductSizeMaterialsDeleteAsyncWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for productSizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsNkProductSizeMaterialsFkDeleteAsync (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for productSizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkProductSizeMaterialsFkDeleteAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for productSizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>Task of ProductSizeMaterial</returns>
        System.Threading.Tasks.Task<ProductSizeMaterial> CustomersIdTeamsNkProductSizeMaterialsFkGetAsync (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for productSizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>Task of ApiResponse (ProductSizeMaterial)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductSizeMaterial>> CustomersIdTeamsNkProductSizeMaterialsFkGetAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for productSizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductSizeMaterial</returns>
        System.Threading.Tasks.Task<ProductSizeMaterial> CustomersIdTeamsNkProductSizeMaterialsFkPutAsync (string id, string nk, string fk, ProductSizeMaterial data = null);

        /// <summary>
        /// Update a related item by id for productSizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductSizeMaterial)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductSizeMaterial>> CustomersIdTeamsNkProductSizeMaterialsFkPutAsyncWithHttpInfo (string id, string nk, string fk, ProductSizeMaterial data = null);
        /// <summary>
        /// Queries productSizeMaterials of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;ProductSizeMaterial&gt;</returns>
        System.Threading.Tasks.Task<List<ProductSizeMaterial>> CustomersIdTeamsNkProductSizeMaterialsGetAsync (string id, string nk, string filter = null);

        /// <summary>
        /// Queries productSizeMaterials of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProductSizeMaterial&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductSizeMaterial>>> CustomersIdTeamsNkProductSizeMaterialsGetAsyncWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in productSizeMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductSizeMaterial</returns>
        System.Threading.Tasks.Task<ProductSizeMaterial> CustomersIdTeamsNkProductSizeMaterialsPostAsync (string id, string nk, ProductSizeMaterial data = null);

        /// <summary>
        /// Creates a new instance in productSizeMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductSizeMaterial)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductSizeMaterial>> CustomersIdTeamsNkProductSizeMaterialsPostAsyncWithHttpInfo (string id, string nk, ProductSizeMaterial data = null);
        /// <summary>
        /// Fetches belongsTo relation teamData.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of DynamicData</returns>
        System.Threading.Tasks.Task<DynamicData> CustomersIdTeamsNkTeamDataGetAsync (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation teamData.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (DynamicData)</returns>
        System.Threading.Tasks.Task<ApiResponse<DynamicData>> CustomersIdTeamsNkTeamDataGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Counts teamMembers of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> CustomersIdTeamsNkTeamMembersCountGetAsync (string id, string nk, string where = null);

        /// <summary>
        /// Counts teamMembers of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdTeamsNkTeamMembersCountGetAsyncWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all teamMembers of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsNkTeamMembersDeleteAsync (string id, string nk);

        /// <summary>
        /// Deletes all teamMembers of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkTeamMembersDeleteAsyncWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for teamMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for teamMembers</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsNkTeamMembersFkDeleteAsync (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for teamMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for teamMembers</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkTeamMembersFkDeleteAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for teamMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for teamMembers</param>
        /// <returns>Task of TeamMember</returns>
        System.Threading.Tasks.Task<TeamMember> CustomersIdTeamsNkTeamMembersFkGetAsync (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for teamMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for teamMembers</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMember>> CustomersIdTeamsNkTeamMembersFkGetAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for teamMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for teamMembers</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamMember</returns>
        System.Threading.Tasks.Task<TeamMember> CustomersIdTeamsNkTeamMembersFkPutAsync (string id, string nk, string fk, TeamMember data = null);

        /// <summary>
        /// Update a related item by id for teamMembers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for teamMembers</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMember>> CustomersIdTeamsNkTeamMembersFkPutAsyncWithHttpInfo (string id, string nk, string fk, TeamMember data = null);
        /// <summary>
        /// Queries teamMembers of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;TeamMember&gt;</returns>
        System.Threading.Tasks.Task<List<TeamMember>> CustomersIdTeamsNkTeamMembersGetAsync (string id, string nk, string filter = null);

        /// <summary>
        /// Queries teamMembers of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamMember&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamMember>>> CustomersIdTeamsNkTeamMembersGetAsyncWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in teamMembers of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamMember</returns>
        System.Threading.Tasks.Task<TeamMember> CustomersIdTeamsNkTeamMembersPostAsync (string id, string nk, TeamMember data = null);

        /// <summary>
        /// Creates a new instance in teamMembers of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMember>> CustomersIdTeamsNkTeamMembersPostAsyncWithHttpInfo (string id, string nk, TeamMember data = null);
        /// <summary>
        /// Counts templateFolders of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> CustomersIdTeamsNkTemplateFoldersCountGetAsync (string id, string nk, string where = null);

        /// <summary>
        /// Counts templateFolders of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdTeamsNkTemplateFoldersCountGetAsyncWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all templateFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsNkTemplateFoldersDeleteAsync (string id, string nk);

        /// <summary>
        /// Deletes all templateFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkTemplateFoldersDeleteAsyncWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for templateFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsNkTemplateFoldersFkDeleteAsync (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for templateFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkTemplateFoldersFkDeleteAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for templateFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns>Task of TeamTemplateFolder</returns>
        System.Threading.Tasks.Task<TeamTemplateFolder> CustomersIdTeamsNkTemplateFoldersFkGetAsync (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for templateFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns>Task of ApiResponse (TeamTemplateFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamTemplateFolder>> CustomersIdTeamsNkTemplateFoldersFkGetAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for templateFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamTemplateFolder</returns>
        System.Threading.Tasks.Task<TeamTemplateFolder> CustomersIdTeamsNkTemplateFoldersFkPutAsync (string id, string nk, string fk, TeamTemplateFolder data = null);

        /// <summary>
        /// Update a related item by id for templateFolders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamTemplateFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamTemplateFolder>> CustomersIdTeamsNkTemplateFoldersFkPutAsyncWithHttpInfo (string id, string nk, string fk, TeamTemplateFolder data = null);
        /// <summary>
        /// Queries templateFolders of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;TeamTemplateFolder&gt;</returns>
        System.Threading.Tasks.Task<List<TeamTemplateFolder>> CustomersIdTeamsNkTemplateFoldersGetAsync (string id, string nk, string filter = null);

        /// <summary>
        /// Queries templateFolders of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamTemplateFolder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamTemplateFolder>>> CustomersIdTeamsNkTemplateFoldersGetAsyncWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in templateFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamTemplateFolder</returns>
        System.Threading.Tasks.Task<TeamTemplateFolder> CustomersIdTeamsNkTemplateFoldersPostAsync (string id, string nk, TeamTemplateFolder data = null);

        /// <summary>
        /// Creates a new instance in templateFolders of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamTemplateFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamTemplateFolder>> CustomersIdTeamsNkTemplateFoldersPostAsyncWithHttpInfo (string id, string nk, TeamTemplateFolder data = null);
        /// <summary>
        /// Counts templates of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> CustomersIdTeamsNkTemplatesCountGetAsync (string id, string nk, string where = null);

        /// <summary>
        /// Counts templates of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdTeamsNkTemplatesCountGetAsyncWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all templates of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsNkTemplatesDeleteAsync (string id, string nk);

        /// <summary>
        /// Deletes all templates of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkTemplatesDeleteAsyncWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsNkTemplatesFkDeleteAsync (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkTemplatesFkDeleteAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> CustomersIdTeamsNkTemplatesFkGetAsync (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> CustomersIdTeamsNkTemplatesFkGetAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> CustomersIdTeamsNkTemplatesFkPutAsync (string id, string nk, string fk, Template data = null);

        /// <summary>
        /// Update a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> CustomersIdTeamsNkTemplatesFkPutAsyncWithHttpInfo (string id, string nk, string fk, Template data = null);
        /// <summary>
        /// Queries templates of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;Template&gt;</returns>
        System.Threading.Tasks.Task<List<Template>> CustomersIdTeamsNkTemplatesGetAsync (string id, string nk, string filter = null);

        /// <summary>
        /// Queries templates of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Template&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Template>>> CustomersIdTeamsNkTemplatesGetAsyncWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in templates of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> CustomersIdTeamsNkTemplatesPostAsync (string id, string nk, Template data = null);

        /// <summary>
        /// Creates a new instance in templates of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> CustomersIdTeamsNkTemplatesPostAsyncWithHttpInfo (string id, string nk, Template data = null);
        /// <summary>
        /// Counts workflows of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> CustomersIdTeamsNkWorkflowsCountGetAsync (string id, string nk, string where = null);

        /// <summary>
        /// Counts workflows of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdTeamsNkWorkflowsCountGetAsyncWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all workflows of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsNkWorkflowsDeleteAsync (string id, string nk);

        /// <summary>
        /// Deletes all workflows of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkWorkflowsDeleteAsyncWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for workflows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for workflows</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsNkWorkflowsFkDeleteAsync (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for workflows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for workflows</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkWorkflowsFkDeleteAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for workflows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for workflows</param>
        /// <returns>Task of Workflow</returns>
        System.Threading.Tasks.Task<Workflow> CustomersIdTeamsNkWorkflowsFkGetAsync (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for workflows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for workflows</param>
        /// <returns>Task of ApiResponse (Workflow)</returns>
        System.Threading.Tasks.Task<ApiResponse<Workflow>> CustomersIdTeamsNkWorkflowsFkGetAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for workflows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for workflows</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Workflow</returns>
        System.Threading.Tasks.Task<Workflow> CustomersIdTeamsNkWorkflowsFkPutAsync (string id, string nk, string fk, Workflow data = null);

        /// <summary>
        /// Update a related item by id for workflows.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for workflows</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Workflow)</returns>
        System.Threading.Tasks.Task<ApiResponse<Workflow>> CustomersIdTeamsNkWorkflowsFkPutAsyncWithHttpInfo (string id, string nk, string fk, Workflow data = null);
        /// <summary>
        /// Queries workflows of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;Workflow&gt;</returns>
        System.Threading.Tasks.Task<List<Workflow>> CustomersIdTeamsNkWorkflowsGetAsync (string id, string nk, string filter = null);

        /// <summary>
        /// Queries workflows of Team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Workflow&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Workflow>>> CustomersIdTeamsNkWorkflowsGetAsyncWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in workflows of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Workflow</returns>
        System.Threading.Tasks.Task<Workflow> CustomersIdTeamsNkWorkflowsPostAsync (string id, string nk, Workflow data = null);

        /// <summary>
        /// Creates a new instance in workflows of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Workflow)</returns>
        System.Threading.Tasks.Task<ApiResponse<Workflow>> CustomersIdTeamsNkWorkflowsPostAsyncWithHttpInfo (string id, string nk, Workflow data = null);
        /// <summary>
        /// Creates a new instance in teams of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> CustomersIdTeamsPostAsync (string id, Team data = null);

        /// <summary>
        /// Creates a new instance in teams of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> CustomersIdTeamsPostAsyncWithHttpInfo (string id, Team data = null);
        /// <summary>
        /// Remove the teams relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdTeamsRelFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Remove the teams relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsRelFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Check the existence of teams relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> CustomersIdTeamsRelFkHeadAsync (string id, string fk);

        /// <summary>
        /// Check the existence of teams relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> CustomersIdTeamsRelFkHeadAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Add a related item by id for teams.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamMember</returns>
        System.Threading.Tasks.Task<TeamMember> CustomersIdTeamsRelFkPutAsync (string id, string fk, TeamMember data = null);

        /// <summary>
        /// Add a related item by id for teams.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMember>> CustomersIdTeamsRelFkPutAsyncWithHttpInfo (string id, string fk, TeamMember data = null);
        /// <summary>
        /// Move authentication to a Team
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <param name="teamId">Team id</param>
        /// <returns>Task of TeamMemberAccessToken</returns>
        System.Threading.Tasks.Task<TeamMemberAccessToken> CustomersIdTeamsTeamIdChangePostAsync (string id, string id2, string teamId);

        /// <summary>
        /// Move authentication to a Team
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <param name="teamId">Team id</param>
        /// <returns>Task of ApiResponse (TeamMemberAccessToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMemberAccessToken>> CustomersIdTeamsTeamIdChangePostAsyncWithHttpInfo (string id, string id2, string teamId);
        /// <summary>
        /// Move authentication to a Portal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <param name="teamId">Team id</param>
        /// <param name="portalId">Portal id</param>
        /// <returns>Task of TeamMemberAccessToken</returns>
        System.Threading.Tasks.Task<TeamMemberAccessToken> CustomersIdTeamsTeamIdPortalsPortalIdChangePostAsync (string id, string id2, string teamId, string portalId);

        /// <summary>
        /// Move authentication to a Portal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <param name="teamId">Team id</param>
        /// <param name="portalId">Portal id</param>
        /// <returns>Task of ApiResponse (TeamMemberAccessToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMemberAccessToken>> CustomersIdTeamsTeamIdPortalsPortalIdChangePostAsyncWithHttpInfo (string id, string id2, string teamId, string portalId);
        /// <summary>
        /// Get token info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <returns>Task of TeamMemberAccessToken</returns>
        System.Threading.Tasks.Task<TeamMemberAccessToken> CustomersIdTokenGetAsync (string id, string id2);

        /// <summary>
        /// Get token info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <returns>Task of ApiResponse (TeamMemberAccessToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMemberAccessToken>> CustomersIdTokenGetAsyncWithHttpInfo (string id, string id2);
        /// <summary>
        /// Trigger user&#39;s identity verification with configured verifyOptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersIdVerifyPostAsync (string id);

        /// <summary>
        /// Trigger user&#39;s identity verification with configured verifyOptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdVerifyPostAsyncWithHttpInfo (string id);
        /// <summary>
        /// Accept invitation with token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Token describing invitation ticket</param>
        /// <param name="data">Customer data in case new customer (optional)</param>
        /// <returns>Task of InvitationTicket</returns>
        System.Threading.Tasks.Task<InvitationTicket> CustomersInvitationTicketsTokenAcceptPostAsync (string token, Customer data = null);

        /// <summary>
        /// Accept invitation with token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Token describing invitation ticket</param>
        /// <param name="data">Customer data in case new customer (optional)</param>
        /// <returns>Task of ApiResponse (InvitationTicket)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvitationTicket>> CustomersInvitationTicketsTokenAcceptPostAsyncWithHttpInfo (string token, Customer data = null);
        /// <summary>
        /// Get invitation details with token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Token describing invitation ticket</param>
        /// <returns>Task of InvitationTicket</returns>
        System.Threading.Tasks.Task<InvitationTicket> CustomersInvitationTicketsTokenGetAsync (string token);

        /// <summary>
        /// Get invitation details with token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Token describing invitation ticket</param>
        /// <returns>Task of ApiResponse (InvitationTicket)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvitationTicket>> CustomersInvitationTicketsTokenGetAsyncWithHttpInfo (string token);
        /// <summary>
        /// Login a user with username/email and password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials"></param>
        /// <param name="include">Related objects to include in the response. See the description of return value for more details. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CustomersLoginPostAsync (Object credentials, string include = null);

        /// <summary>
        /// Login a user with username/email and password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials"></param>
        /// <param name="include">Related objects to include in the response. See the description of return value for more details. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersLoginPostAsyncWithHttpInfo (Object credentials, string include = null);
        /// <summary>
        /// Logout a user with access token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersLogoutPostAsync ();

        /// <summary>
        /// Logout a user with access token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersLogoutPostAsyncWithHttpInfo ();
        /// <summary>
        /// Get token info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TeamMemberAccessToken</returns>
        System.Threading.Tasks.Task<TeamMemberAccessToken> CustomersMeTokenGetAsync ();

        /// <summary>
        /// Get token info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TeamMemberAccessToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMemberAccessToken>> CustomersMeTokenGetAsyncWithHttpInfo ();
        /// <summary>
        /// Refresh current access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken">AccessToken refreshToken</param>
        /// <returns>Task of TeamMemberAccessToken</returns>
        System.Threading.Tasks.Task<TeamMemberAccessToken> CustomersMeTokenRefreshGetAsync (string refreshToken);

        /// <summary>
        /// Refresh current access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken">AccessToken refreshToken</param>
        /// <returns>Task of ApiResponse (TeamMemberAccessToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMemberAccessToken>> CustomersMeTokenRefreshGetAsyncWithHttpInfo (string refreshToken);
        /// <summary>
        /// Create a new instance of the model and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> CustomersPostAsync (Customer data = null);

        /// <summary>
        /// Create a new instance of the model and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> CustomersPostAsyncWithHttpInfo (Customer data = null);
        /// <summary>
        /// Create customer and assign it to a team
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of TeamMember</returns>
        System.Threading.Tasks.Task<TeamMember> CustomersRegisterPostAsync (Customer data = null);

        /// <summary>
        /// Create customer and assign it to a team
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMember>> CustomersRegisterPostAsyncWithHttpInfo (Customer data = null);
        /// <summary>
        /// Reset user&#39;s password via a password-reset token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newPassword"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersResetPasswordPostAsync (string newPassword);

        /// <summary>
        /// Reset user&#39;s password via a password-reset token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newPassword"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersResetPasswordPostAsyncWithHttpInfo (string newPassword);
        /// <summary>
        /// Get token info for reset password token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Reset password access token</param>
        /// <returns>Task of TeamMemberAccessToken</returns>
        System.Threading.Tasks.Task<TeamMemberAccessToken> CustomersResetPasswordTokenGetAsync (string token);

        /// <summary>
        /// Get token info for reset password token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Reset password access token</param>
        /// <returns>Task of ApiResponse (TeamMemberAccessToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMemberAccessToken>> CustomersResetPasswordTokenGetAsyncWithHttpInfo (string token);
        /// <summary>
        /// Reset password for a user with email.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CustomersResetPostAsync (Object options);

        /// <summary>
        /// Reset password for a user with email.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CustomersResetPostAsyncWithHttpInfo (Object options);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CustomerApi : ICustomerApi
    {
        private TweakApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomerApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = TweakApi.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CustomerApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TweakApi.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TweakApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Change a user&#39;s password. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oldPassword"></param>
        /// <param name="newPassword"></param>
        /// <returns></returns>
        public void CustomersChangePasswordPost (string oldPassword, string newPassword)
        {
             CustomersChangePasswordPostWithHttpInfo(oldPassword, newPassword);
        }

        /// <summary>
        /// Change a user&#39;s password. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oldPassword"></param>
        /// <param name="newPassword"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersChangePasswordPostWithHttpInfo (string oldPassword, string newPassword)
        {
            // verify the required parameter 'oldPassword' is set
            if (oldPassword == null)
                throw new ApiException(400, "Missing required parameter 'oldPassword' when calling CustomerApi->CustomersChangePasswordPost");
            // verify the required parameter 'newPassword' is set
            if (newPassword == null)
                throw new ApiException(400, "Missing required parameter 'newPassword' when calling CustomerApi->CustomersChangePasswordPost");

            var localVarPath = "/Customers/change-password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (oldPassword != null) localVarFormParams.Add("oldPassword", Configuration.ApiClient.ParameterToString(oldPassword)); // form parameter
            if (newPassword != null) localVarFormParams.Add("newPassword", Configuration.ApiClient.ParameterToString(newPassword)); // form parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersChangePasswordPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Change a user&#39;s password. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oldPassword"></param>
        /// <param name="newPassword"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersChangePasswordPostAsync (string oldPassword, string newPassword)
        {
             await CustomersChangePasswordPostAsyncWithHttpInfo(oldPassword, newPassword);

        }

        /// <summary>
        /// Change a user&#39;s password. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oldPassword"></param>
        /// <param name="newPassword"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersChangePasswordPostAsyncWithHttpInfo (string oldPassword, string newPassword)
        {
            // verify the required parameter 'oldPassword' is set
            if (oldPassword == null)
                throw new ApiException(400, "Missing required parameter 'oldPassword' when calling CustomerApi->CustomersChangePasswordPost");
            // verify the required parameter 'newPassword' is set
            if (newPassword == null)
                throw new ApiException(400, "Missing required parameter 'newPassword' when calling CustomerApi->CustomersChangePasswordPost");

            var localVarPath = "/Customers/change-password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (oldPassword != null) localVarFormParams.Add("oldPassword", Configuration.ApiClient.ParameterToString(oldPassword)); // form parameter
            if (newPassword != null) localVarFormParams.Add("newPassword", Configuration.ApiClient.ParameterToString(newPassword)); // form parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersChangePasswordPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream CustomersChangeStreamGet (string options = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = CustomersChangeStreamGetWithHttpInfo(options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > CustomersChangeStreamGetWithHttpInfo (string options = null)
        {

            var localVarPath = "/Customers/change-stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersChangeStreamGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> CustomersChangeStreamGetAsync (string options = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await CustomersChangeStreamGetAsyncWithHttpInfo(options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CustomersChangeStreamGetAsyncWithHttpInfo (string options = null)
        {

            var localVarPath = "/Customers/change-stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersChangeStreamGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream CustomersChangeStreamPost (string options = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = CustomersChangeStreamPostWithHttpInfo(options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > CustomersChangeStreamPostWithHttpInfo (string options = null)
        {

            var localVarPath = "/Customers/change-stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarFormParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // form parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersChangeStreamPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> CustomersChangeStreamPostAsync (string options = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await CustomersChangeStreamPostAsyncWithHttpInfo(options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CustomersChangeStreamPostAsyncWithHttpInfo (string options = null)
        {

            var localVarPath = "/Customers/change-stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarFormParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // form parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersChangeStreamPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Confirm a user registration with identity verification token. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="token"></param>
        /// <param name="redirect"> (optional)</param>
        /// <returns></returns>
        public void CustomersConfirmGet (string uid, string token, string redirect = null)
        {
             CustomersConfirmGetWithHttpInfo(uid, token, redirect);
        }

        /// <summary>
        /// Confirm a user registration with identity verification token. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="token"></param>
        /// <param name="redirect"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersConfirmGetWithHttpInfo (string uid, string token, string redirect = null)
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling CustomerApi->CustomersConfirmGet");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling CustomerApi->CustomersConfirmGet");

            var localVarPath = "/Customers/confirm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (uid != null) localVarQueryParams.Add("uid", Configuration.ApiClient.ParameterToString(uid)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (redirect != null) localVarQueryParams.Add("redirect", Configuration.ApiClient.ParameterToString(redirect)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersConfirmGet", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Confirm a user registration with identity verification token. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="token"></param>
        /// <param name="redirect"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersConfirmGetAsync (string uid, string token, string redirect = null)
        {
             await CustomersConfirmGetAsyncWithHttpInfo(uid, token, redirect);

        }

        /// <summary>
        /// Confirm a user registration with identity verification token. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid"></param>
        /// <param name="token"></param>
        /// <param name="redirect"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersConfirmGetAsyncWithHttpInfo (string uid, string token, string redirect = null)
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling CustomerApi->CustomersConfirmGet");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling CustomerApi->CustomersConfirmGet");

            var localVarPath = "/Customers/confirm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (uid != null) localVarQueryParams.Add("uid", Configuration.ApiClient.ParameterToString(uid)); // query parameter
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (redirect != null) localVarQueryParams.Add("redirect", Configuration.ApiClient.ParameterToString(redirect)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersConfirmGet", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Count instances of the model matched by where from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 CustomersCountGet (string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = CustomersCountGetWithHttpInfo(where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Count instances of the model matched by where from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > CustomersCountGetWithHttpInfo (string where = null)
        {

            var localVarPath = "/Customers/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Count instances of the model matched by where from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> CustomersCountGetAsync (string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await CustomersCountGetAsyncWithHttpInfo(where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Count instances of the model matched by where from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersCountGetAsyncWithHttpInfo (string where = null)
        {

            var localVarPath = "/Customers/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Define whether customer exists or not 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Customer email</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 CustomersEmailEmailExistsGet (string email)
        {
             ApiResponse<InlineResponse2002> localVarResponse = CustomersEmailEmailExistsGetWithHttpInfo(email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Define whether customer exists or not 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Customer email</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > CustomersEmailEmailExistsGetWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling CustomerApi->CustomersEmailEmailExistsGet");

            var localVarPath = "/Customers/email/{email}/exists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarPathParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersEmailEmailExistsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
            
        }

        /// <summary>
        /// Define whether customer exists or not 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Customer email</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> CustomersEmailEmailExistsGetAsync (string email)
        {
             ApiResponse<InlineResponse2002> localVarResponse = await CustomersEmailEmailExistsGetAsyncWithHttpInfo(email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Define whether customer exists or not 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Customer email</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> CustomersEmailEmailExistsGetAsyncWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling CustomerApi->CustomersEmailEmailExistsGet");

            var localVarPath = "/Customers/email/{email}/exists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarPathParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersEmailEmailExistsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
            
        }

        /// <summary>
        /// Find first instance of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Customer</returns>
        public Customer CustomersFindOneGet (string filter = null)
        {
             ApiResponse<Customer> localVarResponse = CustomersFindOneGetWithHttpInfo(filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find first instance of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        public ApiResponse< Customer > CustomersFindOneGetWithHttpInfo (string filter = null)
        {

            var localVarPath = "/Customers/findOne";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersFindOneGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Find first instance of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> CustomersFindOneGetAsync (string filter = null)
        {
             ApiResponse<Customer> localVarResponse = await CustomersFindOneGetAsyncWithHttpInfo(filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find first instance of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Customer>> CustomersFindOneGetAsyncWithHttpInfo (string filter = null)
        {

            var localVarPath = "/Customers/findOne";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersFindOneGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Find all instances of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>List&lt;Customer&gt;</returns>
        public List<Customer> CustomersGet (string filter = null)
        {
             ApiResponse<List<Customer>> localVarResponse = CustomersGetWithHttpInfo(filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find all instances of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of List&lt;Customer&gt;</returns>
        public ApiResponse< List<Customer> > CustomersGetWithHttpInfo (string filter = null)
        {

            var localVarPath = "/Customers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Customer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Customer>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Customer>)));
            
        }

        /// <summary>
        /// Find all instances of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of List&lt;Customer&gt;</returns>
        public async System.Threading.Tasks.Task<List<Customer>> CustomersGetAsync (string filter = null)
        {
             ApiResponse<List<Customer>> localVarResponse = await CustomersGetAsyncWithHttpInfo(filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find all instances of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Customer&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Customer>>> CustomersGetAsyncWithHttpInfo (string filter = null)
        {

            var localVarPath = "/Customers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Customer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Customer>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Customer>)));
            
        }

        /// <summary>
        /// Counts accessTokens of Customer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 CustomersIdAccessTokensCountGet (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = CustomersIdAccessTokensCountGetWithHttpInfo(id, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts accessTokens of Customer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > CustomersIdAccessTokensCountGetWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdAccessTokensCountGet");

            var localVarPath = "/Customers/{id}/accessTokens/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdAccessTokensCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts accessTokens of Customer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> CustomersIdAccessTokensCountGetAsync (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await CustomersIdAccessTokensCountGetAsyncWithHttpInfo(id, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts accessTokens of Customer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdAccessTokensCountGetAsyncWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdAccessTokensCountGet");

            var localVarPath = "/Customers/{id}/accessTokens/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdAccessTokensCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all accessTokens of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns></returns>
        public void CustomersIdAccessTokensDelete (string id)
        {
             CustomersIdAccessTokensDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes all accessTokens of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdAccessTokensDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdAccessTokensDelete");

            var localVarPath = "/Customers/{id}/accessTokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdAccessTokensDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all accessTokens of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdAccessTokensDeleteAsync (string id)
        {
             await CustomersIdAccessTokensDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes all accessTokens of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdAccessTokensDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdAccessTokensDelete");

            var localVarPath = "/Customers/{id}/accessTokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdAccessTokensDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for accessTokens. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for accessTokens</param>
        /// <returns></returns>
        public void CustomersIdAccessTokensFkDelete (string id, string fk)
        {
             CustomersIdAccessTokensFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Delete a related item by id for accessTokens. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for accessTokens</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdAccessTokensFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdAccessTokensFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdAccessTokensFkDelete");

            var localVarPath = "/Customers/{id}/accessTokens/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdAccessTokensFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for accessTokens. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for accessTokens</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdAccessTokensFkDeleteAsync (string id, string fk)
        {
             await CustomersIdAccessTokensFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Delete a related item by id for accessTokens. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for accessTokens</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdAccessTokensFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdAccessTokensFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdAccessTokensFkDelete");

            var localVarPath = "/Customers/{id}/accessTokens/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdAccessTokensFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for accessTokens. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for accessTokens</param>
        /// <returns>TeamMemberAccessToken</returns>
        public TeamMemberAccessToken CustomersIdAccessTokensFkGet (string id, string fk)
        {
             ApiResponse<TeamMemberAccessToken> localVarResponse = CustomersIdAccessTokensFkGetWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for accessTokens. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for accessTokens</param>
        /// <returns>ApiResponse of TeamMemberAccessToken</returns>
        public ApiResponse< TeamMemberAccessToken > CustomersIdAccessTokensFkGetWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdAccessTokensFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdAccessTokensFkGet");

            var localVarPath = "/Customers/{id}/accessTokens/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdAccessTokensFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMemberAccessToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMemberAccessToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMemberAccessToken)));
            
        }

        /// <summary>
        /// Find a related item by id for accessTokens. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for accessTokens</param>
        /// <returns>Task of TeamMemberAccessToken</returns>
        public async System.Threading.Tasks.Task<TeamMemberAccessToken> CustomersIdAccessTokensFkGetAsync (string id, string fk)
        {
             ApiResponse<TeamMemberAccessToken> localVarResponse = await CustomersIdAccessTokensFkGetAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for accessTokens. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for accessTokens</param>
        /// <returns>Task of ApiResponse (TeamMemberAccessToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMemberAccessToken>> CustomersIdAccessTokensFkGetAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdAccessTokensFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdAccessTokensFkGet");

            var localVarPath = "/Customers/{id}/accessTokens/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdAccessTokensFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMemberAccessToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMemberAccessToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMemberAccessToken)));
            
        }

        /// <summary>
        /// Update a related item by id for accessTokens. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for accessTokens</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamMemberAccessToken</returns>
        public TeamMemberAccessToken CustomersIdAccessTokensFkPut (string id, string fk, TeamMemberAccessToken data = null)
        {
             ApiResponse<TeamMemberAccessToken> localVarResponse = CustomersIdAccessTokensFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for accessTokens. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for accessTokens</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamMemberAccessToken</returns>
        public ApiResponse< TeamMemberAccessToken > CustomersIdAccessTokensFkPutWithHttpInfo (string id, string fk, TeamMemberAccessToken data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdAccessTokensFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdAccessTokensFkPut");

            var localVarPath = "/Customers/{id}/accessTokens/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdAccessTokensFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMemberAccessToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMemberAccessToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMemberAccessToken)));
            
        }

        /// <summary>
        /// Update a related item by id for accessTokens. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for accessTokens</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamMemberAccessToken</returns>
        public async System.Threading.Tasks.Task<TeamMemberAccessToken> CustomersIdAccessTokensFkPutAsync (string id, string fk, TeamMemberAccessToken data = null)
        {
             ApiResponse<TeamMemberAccessToken> localVarResponse = await CustomersIdAccessTokensFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for accessTokens. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for accessTokens</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMemberAccessToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMemberAccessToken>> CustomersIdAccessTokensFkPutAsyncWithHttpInfo (string id, string fk, TeamMemberAccessToken data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdAccessTokensFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdAccessTokensFkPut");

            var localVarPath = "/Customers/{id}/accessTokens/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdAccessTokensFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMemberAccessToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMemberAccessToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMemberAccessToken)));
            
        }

        /// <summary>
        /// Queries accessTokens of Customer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;TeamMemberAccessToken&gt;</returns>
        public List<TeamMemberAccessToken> CustomersIdAccessTokensGet (string id, string filter = null)
        {
             ApiResponse<List<TeamMemberAccessToken>> localVarResponse = CustomersIdAccessTokensGetWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries accessTokens of Customer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamMemberAccessToken&gt;</returns>
        public ApiResponse< List<TeamMemberAccessToken> > CustomersIdAccessTokensGetWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdAccessTokensGet");

            var localVarPath = "/Customers/{id}/accessTokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdAccessTokensGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TeamMemberAccessToken>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TeamMemberAccessToken>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamMemberAccessToken>)));
            
        }

        /// <summary>
        /// Queries accessTokens of Customer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;TeamMemberAccessToken&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamMemberAccessToken>> CustomersIdAccessTokensGetAsync (string id, string filter = null)
        {
             ApiResponse<List<TeamMemberAccessToken>> localVarResponse = await CustomersIdAccessTokensGetAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries accessTokens of Customer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamMemberAccessToken&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TeamMemberAccessToken>>> CustomersIdAccessTokensGetAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdAccessTokensGet");

            var localVarPath = "/Customers/{id}/accessTokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdAccessTokensGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TeamMemberAccessToken>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TeamMemberAccessToken>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamMemberAccessToken>)));
            
        }

        /// <summary>
        /// Creates a new instance in accessTokens of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamMemberAccessToken</returns>
        public TeamMemberAccessToken CustomersIdAccessTokensPost (string id, TeamMemberAccessToken data = null)
        {
             ApiResponse<TeamMemberAccessToken> localVarResponse = CustomersIdAccessTokensPostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in accessTokens of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamMemberAccessToken</returns>
        public ApiResponse< TeamMemberAccessToken > CustomersIdAccessTokensPostWithHttpInfo (string id, TeamMemberAccessToken data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdAccessTokensPost");

            var localVarPath = "/Customers/{id}/accessTokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdAccessTokensPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMemberAccessToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMemberAccessToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMemberAccessToken)));
            
        }

        /// <summary>
        /// Creates a new instance in accessTokens of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamMemberAccessToken</returns>
        public async System.Threading.Tasks.Task<TeamMemberAccessToken> CustomersIdAccessTokensPostAsync (string id, TeamMemberAccessToken data = null)
        {
             ApiResponse<TeamMemberAccessToken> localVarResponse = await CustomersIdAccessTokensPostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in accessTokens of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMemberAccessToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMemberAccessToken>> CustomersIdAccessTokensPostAsyncWithHttpInfo (string id, TeamMemberAccessToken data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdAccessTokensPost");

            var localVarPath = "/Customers/{id}/accessTokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdAccessTokensPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMemberAccessToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMemberAccessToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMemberAccessToken)));
            
        }

        /// <summary>
        /// Define whether customer is active or not 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id or email</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 CustomersIdActiveGet (string id)
        {
             ApiResponse<InlineResponse2003> localVarResponse = CustomersIdActiveGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Define whether customer is active or not 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id or email</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > CustomersIdActiveGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdActiveGet");

            var localVarPath = "/Customers/{id}/active";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdActiveGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Define whether customer is active or not 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id or email</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> CustomersIdActiveGetAsync (string id)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await CustomersIdActiveGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Define whether customer is active or not 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id or email</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> CustomersIdActiveGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdActiveGet");

            var localVarPath = "/Customers/{id}/active";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdActiveGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Delete a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Object</returns>
        public Object CustomersIdDelete (string id)
        {
             ApiResponse<Object> localVarResponse = CustomersIdDeleteWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CustomersIdDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdDelete");

            var localVarPath = "/Customers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Delete a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CustomersIdDeleteAsync (string id)
        {
             ApiResponse<Object> localVarResponse = await CustomersIdDeleteAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdDelete");

            var localVarPath = "/Customers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 CustomersIdExistsGet (string id)
        {
             ApiResponse<InlineResponse2002> localVarResponse = CustomersIdExistsGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > CustomersIdExistsGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdExistsGet");

            var localVarPath = "/Customers/{id}/exists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdExistsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
            
        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> CustomersIdExistsGetAsync (string id)
        {
             ApiResponse<InlineResponse2002> localVarResponse = await CustomersIdExistsGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> CustomersIdExistsGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdExistsGet");

            var localVarPath = "/Customers/{id}/exists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdExistsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
            
        }

        /// <summary>
        /// Find a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Customer</returns>
        public Customer CustomersIdGet (string id, string filter = null)
        {
             ApiResponse<Customer> localVarResponse = CustomersIdGetWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        public ApiResponse< Customer > CustomersIdGetWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdGet");

            var localVarPath = "/Customers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Find a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> CustomersIdGetAsync (string id, string filter = null)
        {
             ApiResponse<Customer> localVarResponse = await CustomersIdGetAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Customer>> CustomersIdGetAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdGet");

            var localVarPath = "/Customers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 CustomersIdHead (string id)
        {
             ApiResponse<InlineResponse2002> localVarResponse = CustomersIdHeadWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > CustomersIdHeadWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdHead");

            var localVarPath = "/Customers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
            
        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> CustomersIdHeadAsync (string id)
        {
             ApiResponse<InlineResponse2002> localVarResponse = await CustomersIdHeadAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> CustomersIdHeadAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdHead");

            var localVarPath = "/Customers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
            
        }

        /// <summary>
        /// Counts invitationTickets of Customer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 CustomersIdInvitationTicketsCountGet (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = CustomersIdInvitationTicketsCountGetWithHttpInfo(id, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts invitationTickets of Customer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > CustomersIdInvitationTicketsCountGetWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdInvitationTicketsCountGet");

            var localVarPath = "/Customers/{id}/invitationTickets/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdInvitationTicketsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts invitationTickets of Customer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> CustomersIdInvitationTicketsCountGetAsync (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await CustomersIdInvitationTicketsCountGetAsyncWithHttpInfo(id, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts invitationTickets of Customer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdInvitationTicketsCountGetAsyncWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdInvitationTicketsCountGet");

            var localVarPath = "/Customers/{id}/invitationTickets/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdInvitationTicketsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all invitationTickets of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns></returns>
        public void CustomersIdInvitationTicketsDelete (string id)
        {
             CustomersIdInvitationTicketsDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes all invitationTickets of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdInvitationTicketsDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdInvitationTicketsDelete");

            var localVarPath = "/Customers/{id}/invitationTickets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdInvitationTicketsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all invitationTickets of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdInvitationTicketsDeleteAsync (string id)
        {
             await CustomersIdInvitationTicketsDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes all invitationTickets of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdInvitationTicketsDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdInvitationTicketsDelete");

            var localVarPath = "/Customers/{id}/invitationTickets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdInvitationTicketsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for invitationTickets. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for invitationTickets</param>
        /// <returns></returns>
        public void CustomersIdInvitationTicketsFkDelete (string id, string fk)
        {
             CustomersIdInvitationTicketsFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Delete a related item by id for invitationTickets. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for invitationTickets</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdInvitationTicketsFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdInvitationTicketsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdInvitationTicketsFkDelete");

            var localVarPath = "/Customers/{id}/invitationTickets/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdInvitationTicketsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for invitationTickets. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for invitationTickets</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdInvitationTicketsFkDeleteAsync (string id, string fk)
        {
             await CustomersIdInvitationTicketsFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Delete a related item by id for invitationTickets. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for invitationTickets</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdInvitationTicketsFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdInvitationTicketsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdInvitationTicketsFkDelete");

            var localVarPath = "/Customers/{id}/invitationTickets/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdInvitationTicketsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for invitationTickets. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for invitationTickets</param>
        /// <returns>InvitationTicket</returns>
        public InvitationTicket CustomersIdInvitationTicketsFkGet (string id, string fk)
        {
             ApiResponse<InvitationTicket> localVarResponse = CustomersIdInvitationTicketsFkGetWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for invitationTickets. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for invitationTickets</param>
        /// <returns>ApiResponse of InvitationTicket</returns>
        public ApiResponse< InvitationTicket > CustomersIdInvitationTicketsFkGetWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdInvitationTicketsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdInvitationTicketsFkGet");

            var localVarPath = "/Customers/{id}/invitationTickets/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdInvitationTicketsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationTicket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationTicket) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationTicket)));
            
        }

        /// <summary>
        /// Find a related item by id for invitationTickets. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for invitationTickets</param>
        /// <returns>Task of InvitationTicket</returns>
        public async System.Threading.Tasks.Task<InvitationTicket> CustomersIdInvitationTicketsFkGetAsync (string id, string fk)
        {
             ApiResponse<InvitationTicket> localVarResponse = await CustomersIdInvitationTicketsFkGetAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for invitationTickets. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for invitationTickets</param>
        /// <returns>Task of ApiResponse (InvitationTicket)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvitationTicket>> CustomersIdInvitationTicketsFkGetAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdInvitationTicketsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdInvitationTicketsFkGet");

            var localVarPath = "/Customers/{id}/invitationTickets/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdInvitationTicketsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationTicket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationTicket) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationTicket)));
            
        }

        /// <summary>
        /// Update a related item by id for invitationTickets. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for invitationTickets</param>
        /// <param name="data"> (optional)</param>
        /// <returns>InvitationTicket</returns>
        public InvitationTicket CustomersIdInvitationTicketsFkPut (string id, string fk, InvitationTicket data = null)
        {
             ApiResponse<InvitationTicket> localVarResponse = CustomersIdInvitationTicketsFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for invitationTickets. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for invitationTickets</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of InvitationTicket</returns>
        public ApiResponse< InvitationTicket > CustomersIdInvitationTicketsFkPutWithHttpInfo (string id, string fk, InvitationTicket data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdInvitationTicketsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdInvitationTicketsFkPut");

            var localVarPath = "/Customers/{id}/invitationTickets/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdInvitationTicketsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationTicket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationTicket) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationTicket)));
            
        }

        /// <summary>
        /// Update a related item by id for invitationTickets. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for invitationTickets</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of InvitationTicket</returns>
        public async System.Threading.Tasks.Task<InvitationTicket> CustomersIdInvitationTicketsFkPutAsync (string id, string fk, InvitationTicket data = null)
        {
             ApiResponse<InvitationTicket> localVarResponse = await CustomersIdInvitationTicketsFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for invitationTickets. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for invitationTickets</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (InvitationTicket)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvitationTicket>> CustomersIdInvitationTicketsFkPutAsyncWithHttpInfo (string id, string fk, InvitationTicket data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdInvitationTicketsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdInvitationTicketsFkPut");

            var localVarPath = "/Customers/{id}/invitationTickets/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdInvitationTicketsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationTicket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationTicket) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationTicket)));
            
        }

        /// <summary>
        /// Queries invitationTickets of Customer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;InvitationTicket&gt;</returns>
        public List<InvitationTicket> CustomersIdInvitationTicketsGet (string id, string filter = null)
        {
             ApiResponse<List<InvitationTicket>> localVarResponse = CustomersIdInvitationTicketsGetWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries invitationTickets of Customer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;InvitationTicket&gt;</returns>
        public ApiResponse< List<InvitationTicket> > CustomersIdInvitationTicketsGetWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdInvitationTicketsGet");

            var localVarPath = "/Customers/{id}/invitationTickets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdInvitationTicketsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InvitationTicket>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InvitationTicket>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InvitationTicket>)));
            
        }

        /// <summary>
        /// Queries invitationTickets of Customer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;InvitationTicket&gt;</returns>
        public async System.Threading.Tasks.Task<List<InvitationTicket>> CustomersIdInvitationTicketsGetAsync (string id, string filter = null)
        {
             ApiResponse<List<InvitationTicket>> localVarResponse = await CustomersIdInvitationTicketsGetAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries invitationTickets of Customer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InvitationTicket&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InvitationTicket>>> CustomersIdInvitationTicketsGetAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdInvitationTicketsGet");

            var localVarPath = "/Customers/{id}/invitationTickets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdInvitationTicketsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InvitationTicket>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InvitationTicket>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InvitationTicket>)));
            
        }

        /// <summary>
        /// Creates a new instance in invitationTickets of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>InvitationTicket</returns>
        public InvitationTicket CustomersIdInvitationTicketsPost (string id, InvitationTicket data = null)
        {
             ApiResponse<InvitationTicket> localVarResponse = CustomersIdInvitationTicketsPostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in invitationTickets of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of InvitationTicket</returns>
        public ApiResponse< InvitationTicket > CustomersIdInvitationTicketsPostWithHttpInfo (string id, InvitationTicket data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdInvitationTicketsPost");

            var localVarPath = "/Customers/{id}/invitationTickets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdInvitationTicketsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationTicket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationTicket) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationTicket)));
            
        }

        /// <summary>
        /// Creates a new instance in invitationTickets of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of InvitationTicket</returns>
        public async System.Threading.Tasks.Task<InvitationTicket> CustomersIdInvitationTicketsPostAsync (string id, InvitationTicket data = null)
        {
             ApiResponse<InvitationTicket> localVarResponse = await CustomersIdInvitationTicketsPostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in invitationTickets of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (InvitationTicket)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvitationTicket>> CustomersIdInvitationTicketsPostAsyncWithHttpInfo (string id, InvitationTicket data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdInvitationTicketsPost");

            var localVarPath = "/Customers/{id}/invitationTickets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdInvitationTicketsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationTicket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationTicket) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationTicket)));
            
        }

        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Customer</returns>
        public Customer CustomersIdPatch (string id, Customer data = null)
        {
             ApiResponse<Customer> localVarResponse = CustomersIdPatchWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        public ApiResponse< Customer > CustomersIdPatchWithHttpInfo (string id, Customer data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdPatch");

            var localVarPath = "/Customers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> CustomersIdPatchAsync (string id, Customer data = null)
        {
             ApiResponse<Customer> localVarResponse = await CustomersIdPatchAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Customer>> CustomersIdPatchAsyncWithHttpInfo (string id, Customer data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdPatch");

            var localVarPath = "/Customers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Deletes permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns></returns>
        public void CustomersIdPermissionDelete (string id)
        {
             CustomersIdPermissionDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdPermissionDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdPermissionDelete");

            var localVarPath = "/Customers/{id}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdPermissionDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdPermissionDeleteAsync (string id)
        {
             await CustomersIdPermissionDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdPermissionDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdPermissionDelete");

            var localVarPath = "/Customers/{id}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdPermissionDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Fetches hasOne relation permission. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>CustomerPermissionSet</returns>
        public CustomerPermissionSet CustomersIdPermissionGet (string id, bool? refresh = null)
        {
             ApiResponse<CustomerPermissionSet> localVarResponse = CustomersIdPermissionGetWithHttpInfo(id, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches hasOne relation permission. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of CustomerPermissionSet</returns>
        public ApiResponse< CustomerPermissionSet > CustomersIdPermissionGetWithHttpInfo (string id, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdPermissionGet");

            var localVarPath = "/Customers/{id}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdPermissionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerPermissionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerPermissionSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerPermissionSet)));
            
        }

        /// <summary>
        /// Fetches hasOne relation permission. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of CustomerPermissionSet</returns>
        public async System.Threading.Tasks.Task<CustomerPermissionSet> CustomersIdPermissionGetAsync (string id, bool? refresh = null)
        {
             ApiResponse<CustomerPermissionSet> localVarResponse = await CustomersIdPermissionGetAsyncWithHttpInfo(id, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches hasOne relation permission. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomerPermissionSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerPermissionSet>> CustomersIdPermissionGetAsyncWithHttpInfo (string id, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdPermissionGet");

            var localVarPath = "/Customers/{id}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdPermissionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerPermissionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerPermissionSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerPermissionSet)));
            
        }

        /// <summary>
        /// Creates a new instance in permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>CustomerPermissionSet</returns>
        public CustomerPermissionSet CustomersIdPermissionPost (string id, CustomerPermissionSet data = null)
        {
             ApiResponse<CustomerPermissionSet> localVarResponse = CustomersIdPermissionPostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of CustomerPermissionSet</returns>
        public ApiResponse< CustomerPermissionSet > CustomersIdPermissionPostWithHttpInfo (string id, CustomerPermissionSet data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdPermissionPost");

            var localVarPath = "/Customers/{id}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdPermissionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerPermissionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerPermissionSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerPermissionSet)));
            
        }

        /// <summary>
        /// Creates a new instance in permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of CustomerPermissionSet</returns>
        public async System.Threading.Tasks.Task<CustomerPermissionSet> CustomersIdPermissionPostAsync (string id, CustomerPermissionSet data = null)
        {
             ApiResponse<CustomerPermissionSet> localVarResponse = await CustomersIdPermissionPostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomerPermissionSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerPermissionSet>> CustomersIdPermissionPostAsyncWithHttpInfo (string id, CustomerPermissionSet data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdPermissionPost");

            var localVarPath = "/Customers/{id}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdPermissionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerPermissionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerPermissionSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerPermissionSet)));
            
        }

        /// <summary>
        /// Update permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>CustomerPermissionSet</returns>
        public CustomerPermissionSet CustomersIdPermissionPut (string id, CustomerPermissionSet data = null)
        {
             ApiResponse<CustomerPermissionSet> localVarResponse = CustomersIdPermissionPutWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of CustomerPermissionSet</returns>
        public ApiResponse< CustomerPermissionSet > CustomersIdPermissionPutWithHttpInfo (string id, CustomerPermissionSet data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdPermissionPut");

            var localVarPath = "/Customers/{id}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdPermissionPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerPermissionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerPermissionSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerPermissionSet)));
            
        }

        /// <summary>
        /// Update permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of CustomerPermissionSet</returns>
        public async System.Threading.Tasks.Task<CustomerPermissionSet> CustomersIdPermissionPutAsync (string id, CustomerPermissionSet data = null)
        {
             ApiResponse<CustomerPermissionSet> localVarResponse = await CustomersIdPermissionPutAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomerPermissionSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerPermissionSet>> CustomersIdPermissionPutAsyncWithHttpInfo (string id, CustomerPermissionSet data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdPermissionPut");

            var localVarPath = "/Customers/{id}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdPermissionPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerPermissionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerPermissionSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerPermissionSet)));
            
        }

        /// <summary>
        /// Change profile picture 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <param name="data">Profile picture</param>
        /// <returns>Customer</returns>
        public Customer CustomersIdProfilePicturePut (string id, string id2, Customer data)
        {
             ApiResponse<Customer> localVarResponse = CustomersIdProfilePicturePutWithHttpInfo(id, id2, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change profile picture 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <param name="data">Profile picture</param>
        /// <returns>ApiResponse of Customer</returns>
        public ApiResponse< Customer > CustomersIdProfilePicturePutWithHttpInfo (string id, string id2, Customer data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdProfilePicturePut");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling CustomerApi->CustomersIdProfilePicturePut");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling CustomerApi->CustomersIdProfilePicturePut");

            var localVarPath = "/Customers/{id}/profilePicture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdProfilePicturePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Change profile picture 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <param name="data">Profile picture</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> CustomersIdProfilePicturePutAsync (string id, string id2, Customer data)
        {
             ApiResponse<Customer> localVarResponse = await CustomersIdProfilePicturePutAsyncWithHttpInfo(id, id2, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change profile picture 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <param name="data">Profile picture</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Customer>> CustomersIdProfilePicturePutAsyncWithHttpInfo (string id, string id2, Customer data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdProfilePicturePut");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling CustomerApi->CustomersIdProfilePicturePut");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling CustomerApi->CustomersIdProfilePicturePut");

            var localVarPath = "/Customers/{id}/profilePicture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdProfilePicturePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Customer</returns>
        public Customer CustomersIdPut (string id, Customer data = null)
        {
             ApiResponse<Customer> localVarResponse = CustomersIdPutWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        public ApiResponse< Customer > CustomersIdPutWithHttpInfo (string id, Customer data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdPut");

            var localVarPath = "/Customers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> CustomersIdPutAsync (string id, Customer data = null)
        {
             ApiResponse<Customer> localVarResponse = await CustomersIdPutAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Customer>> CustomersIdPutAsyncWithHttpInfo (string id, Customer data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdPut");

            var localVarPath = "/Customers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Register team and assign it to the customer 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>TeamMember</returns>
        public TeamMember CustomersIdRegisterTeamPost (string id, Team data = null)
        {
             ApiResponse<TeamMember> localVarResponse = CustomersIdRegisterTeamPostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Register team and assign it to the customer 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        public ApiResponse< TeamMember > CustomersIdRegisterTeamPostWithHttpInfo (string id, Team data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdRegisterTeamPost");

            var localVarPath = "/Customers/{id}/register/team";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdRegisterTeamPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Register team and assign it to the customer 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of TeamMember</returns>
        public async System.Threading.Tasks.Task<TeamMember> CustomersIdRegisterTeamPostAsync (string id, Team data = null)
        {
             ApiResponse<TeamMember> localVarResponse = await CustomersIdRegisterTeamPostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Register team and assign it to the customer 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMember>> CustomersIdRegisterTeamPostAsyncWithHttpInfo (string id, Team data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdRegisterTeamPost");

            var localVarPath = "/Customers/{id}/register/team";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdRegisterTeamPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Customer</returns>
        public Customer CustomersIdReplacePost (string id, Customer data = null)
        {
             ApiResponse<Customer> localVarResponse = CustomersIdReplacePostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        public ApiResponse< Customer > CustomersIdReplacePostWithHttpInfo (string id, Customer data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdReplacePost");

            var localVarPath = "/Customers/{id}/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdReplacePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> CustomersIdReplacePostAsync (string id, Customer data = null)
        {
             ApiResponse<Customer> localVarResponse = await CustomersIdReplacePostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Customer>> CustomersIdReplacePostAsyncWithHttpInfo (string id, Customer data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdReplacePost");

            var localVarPath = "/Customers/{id}/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdReplacePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Counts teams of Customer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 CustomersIdTeamsCountGet (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = CustomersIdTeamsCountGetWithHttpInfo(id, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts teams of Customer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > CustomersIdTeamsCountGetWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsCountGet");

            var localVarPath = "/Customers/{id}/teams/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts teams of Customer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> CustomersIdTeamsCountGetAsync (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await CustomersIdTeamsCountGetAsyncWithHttpInfo(id, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts teams of Customer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdTeamsCountGetAsyncWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsCountGet");

            var localVarPath = "/Customers/{id}/teams/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all teams of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns></returns>
        public void CustomersIdTeamsDelete (string id)
        {
             CustomersIdTeamsDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes all teams of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsDelete");

            var localVarPath = "/Customers/{id}/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all teams of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsDeleteAsync (string id)
        {
             await CustomersIdTeamsDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes all teams of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsDelete");

            var localVarPath = "/Customers/{id}/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for teams. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns></returns>
        public void CustomersIdTeamsFkDelete (string id, string fk)
        {
             CustomersIdTeamsFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Delete a related item by id for teams. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsFkDelete");

            var localVarPath = "/Customers/{id}/teams/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for teams. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsFkDeleteAsync (string id, string fk)
        {
             await CustomersIdTeamsFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Delete a related item by id for teams. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsFkDelete");

            var localVarPath = "/Customers/{id}/teams/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for teams. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns>Team</returns>
        public Team CustomersIdTeamsFkGet (string id, string fk)
        {
             ApiResponse<Team> localVarResponse = CustomersIdTeamsFkGetWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for teams. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns>ApiResponse of Team</returns>
        public ApiResponse< Team > CustomersIdTeamsFkGetWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsFkGet");

            var localVarPath = "/Customers/{id}/teams/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Team) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
            
        }

        /// <summary>
        /// Find a related item by id for teams. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> CustomersIdTeamsFkGetAsync (string id, string fk)
        {
             ApiResponse<Team> localVarResponse = await CustomersIdTeamsFkGetAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for teams. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Team>> CustomersIdTeamsFkGetAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsFkGet");

            var localVarPath = "/Customers/{id}/teams/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Team) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
            
        }

        /// <summary>
        /// Update a related item by id for teams. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Team</returns>
        public Team CustomersIdTeamsFkPut (string id, string fk, Team data = null)
        {
             ApiResponse<Team> localVarResponse = CustomersIdTeamsFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for teams. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Team</returns>
        public ApiResponse< Team > CustomersIdTeamsFkPutWithHttpInfo (string id, string fk, Team data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsFkPut");

            var localVarPath = "/Customers/{id}/teams/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Team) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
            
        }

        /// <summary>
        /// Update a related item by id for teams. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> CustomersIdTeamsFkPutAsync (string id, string fk, Team data = null)
        {
             ApiResponse<Team> localVarResponse = await CustomersIdTeamsFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for teams. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Team>> CustomersIdTeamsFkPutAsyncWithHttpInfo (string id, string fk, Team data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsFkPut");

            var localVarPath = "/Customers/{id}/teams/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Team) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
            
        }

        /// <summary>
        /// Queries teams of Customer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;Team&gt;</returns>
        public List<Team> CustomersIdTeamsGet (string id, string filter = null)
        {
             ApiResponse<List<Team>> localVarResponse = CustomersIdTeamsGetWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries teams of Customer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        public ApiResponse< List<Team> > CustomersIdTeamsGetWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsGet");

            var localVarPath = "/Customers/{id}/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Team>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Team>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Team>)));
            
        }

        /// <summary>
        /// Queries teams of Customer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        public async System.Threading.Tasks.Task<List<Team>> CustomersIdTeamsGetAsync (string id, string filter = null)
        {
             ApiResponse<List<Team>> localVarResponse = await CustomersIdTeamsGetAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries teams of Customer. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Team>>> CustomersIdTeamsGetAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsGet");

            var localVarPath = "/Customers/{id}/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Team>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Team>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Team>)));
            
        }

        /// <summary>
        /// Deletes brand of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns></returns>
        public void CustomersIdTeamsNkBrandDelete (string id, string nk)
        {
             CustomersIdTeamsNkBrandDeleteWithHttpInfo(id, nk);
        }

        /// <summary>
        /// Deletes brand of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsNkBrandDeleteWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkBrandDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkBrandDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/brand";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkBrandDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes brand of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsNkBrandDeleteAsync (string id, string nk)
        {
             await CustomersIdTeamsNkBrandDeleteAsyncWithHttpInfo(id, nk);

        }

        /// <summary>
        /// Deletes brand of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkBrandDeleteAsyncWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkBrandDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkBrandDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/brand";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkBrandDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Fetches hasOne relation brand. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>TeamBrand</returns>
        public TeamBrand CustomersIdTeamsNkBrandGet (string id, string nk, bool? refresh = null)
        {
             ApiResponse<TeamBrand> localVarResponse = CustomersIdTeamsNkBrandGetWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches hasOne relation brand. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of TeamBrand</returns>
        public ApiResponse< TeamBrand > CustomersIdTeamsNkBrandGetWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkBrandGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkBrandGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/brand";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkBrandGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBrand>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBrand) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBrand)));
            
        }

        /// <summary>
        /// Fetches hasOne relation brand. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of TeamBrand</returns>
        public async System.Threading.Tasks.Task<TeamBrand> CustomersIdTeamsNkBrandGetAsync (string id, string nk, bool? refresh = null)
        {
             ApiResponse<TeamBrand> localVarResponse = await CustomersIdTeamsNkBrandGetAsyncWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches hasOne relation brand. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamBrand)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamBrand>> CustomersIdTeamsNkBrandGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkBrandGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkBrandGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/brand";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkBrandGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBrand>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBrand) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBrand)));
            
        }

        /// <summary>
        /// Creates a new instance in brand of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamBrand</returns>
        public TeamBrand CustomersIdTeamsNkBrandPost (string id, string nk, TeamBrand data = null)
        {
             ApiResponse<TeamBrand> localVarResponse = CustomersIdTeamsNkBrandPostWithHttpInfo(id, nk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in brand of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamBrand</returns>
        public ApiResponse< TeamBrand > CustomersIdTeamsNkBrandPostWithHttpInfo (string id, string nk, TeamBrand data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkBrandPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkBrandPost");

            var localVarPath = "/Customers/{id}/teams/{nk}/brand";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkBrandPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBrand>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBrand) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBrand)));
            
        }

        /// <summary>
        /// Creates a new instance in brand of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamBrand</returns>
        public async System.Threading.Tasks.Task<TeamBrand> CustomersIdTeamsNkBrandPostAsync (string id, string nk, TeamBrand data = null)
        {
             ApiResponse<TeamBrand> localVarResponse = await CustomersIdTeamsNkBrandPostAsyncWithHttpInfo(id, nk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in brand of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamBrand)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamBrand>> CustomersIdTeamsNkBrandPostAsyncWithHttpInfo (string id, string nk, TeamBrand data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkBrandPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkBrandPost");

            var localVarPath = "/Customers/{id}/teams/{nk}/brand";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkBrandPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBrand>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBrand) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBrand)));
            
        }

        /// <summary>
        /// Update brand of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamBrand</returns>
        public TeamBrand CustomersIdTeamsNkBrandPut (string id, string nk, TeamBrand data = null)
        {
             ApiResponse<TeamBrand> localVarResponse = CustomersIdTeamsNkBrandPutWithHttpInfo(id, nk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update brand of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamBrand</returns>
        public ApiResponse< TeamBrand > CustomersIdTeamsNkBrandPutWithHttpInfo (string id, string nk, TeamBrand data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkBrandPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkBrandPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/brand";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkBrandPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBrand>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBrand) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBrand)));
            
        }

        /// <summary>
        /// Update brand of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamBrand</returns>
        public async System.Threading.Tasks.Task<TeamBrand> CustomersIdTeamsNkBrandPutAsync (string id, string nk, TeamBrand data = null)
        {
             ApiResponse<TeamBrand> localVarResponse = await CustomersIdTeamsNkBrandPutAsyncWithHttpInfo(id, nk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update brand of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamBrand)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamBrand>> CustomersIdTeamsNkBrandPutAsyncWithHttpInfo (string id, string nk, TeamBrand data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkBrandPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkBrandPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/brand";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkBrandPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBrand>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBrand) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBrand)));
            
        }

        /// <summary>
        /// Counts builderConfigs of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 CustomersIdTeamsNkBuilderConfigsCountGet (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = CustomersIdTeamsNkBuilderConfigsCountGetWithHttpInfo(id, nk, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts builderConfigs of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > CustomersIdTeamsNkBuilderConfigsCountGetWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsCountGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/builderConfigs/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkBuilderConfigsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts builderConfigs of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> CustomersIdTeamsNkBuilderConfigsCountGetAsync (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await CustomersIdTeamsNkBuilderConfigsCountGetAsyncWithHttpInfo(id, nk, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts builderConfigs of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdTeamsNkBuilderConfigsCountGetAsyncWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsCountGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/builderConfigs/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkBuilderConfigsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all builderConfigs of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns></returns>
        public void CustomersIdTeamsNkBuilderConfigsDelete (string id, string nk)
        {
             CustomersIdTeamsNkBuilderConfigsDeleteWithHttpInfo(id, nk);
        }

        /// <summary>
        /// Deletes all builderConfigs of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsNkBuilderConfigsDeleteWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/builderConfigs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkBuilderConfigsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all builderConfigs of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsNkBuilderConfigsDeleteAsync (string id, string nk)
        {
             await CustomersIdTeamsNkBuilderConfigsDeleteAsyncWithHttpInfo(id, nk);

        }

        /// <summary>
        /// Deletes all builderConfigs of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkBuilderConfigsDeleteAsyncWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/builderConfigs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkBuilderConfigsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for builderConfigs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for builderConfigs</param>
        /// <returns></returns>
        public void CustomersIdTeamsNkBuilderConfigsFkDelete (string id, string nk, string fk)
        {
             CustomersIdTeamsNkBuilderConfigsFkDeleteWithHttpInfo(id, nk, fk);
        }

        /// <summary>
        /// Delete a related item by id for builderConfigs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for builderConfigs</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsNkBuilderConfigsFkDeleteWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsFkDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/builderConfigs/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkBuilderConfigsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for builderConfigs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for builderConfigs</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsNkBuilderConfigsFkDeleteAsync (string id, string nk, string fk)
        {
             await CustomersIdTeamsNkBuilderConfigsFkDeleteAsyncWithHttpInfo(id, nk, fk);

        }

        /// <summary>
        /// Delete a related item by id for builderConfigs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for builderConfigs</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkBuilderConfigsFkDeleteAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsFkDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/builderConfigs/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkBuilderConfigsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for builderConfigs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for builderConfigs</param>
        /// <returns>TeamBuilderConfig</returns>
        public TeamBuilderConfig CustomersIdTeamsNkBuilderConfigsFkGet (string id, string nk, string fk)
        {
             ApiResponse<TeamBuilderConfig> localVarResponse = CustomersIdTeamsNkBuilderConfigsFkGetWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for builderConfigs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for builderConfigs</param>
        /// <returns>ApiResponse of TeamBuilderConfig</returns>
        public ApiResponse< TeamBuilderConfig > CustomersIdTeamsNkBuilderConfigsFkGetWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsFkGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/builderConfigs/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkBuilderConfigsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfig)));
            
        }

        /// <summary>
        /// Find a related item by id for builderConfigs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for builderConfigs</param>
        /// <returns>Task of TeamBuilderConfig</returns>
        public async System.Threading.Tasks.Task<TeamBuilderConfig> CustomersIdTeamsNkBuilderConfigsFkGetAsync (string id, string nk, string fk)
        {
             ApiResponse<TeamBuilderConfig> localVarResponse = await CustomersIdTeamsNkBuilderConfigsFkGetAsyncWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for builderConfigs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for builderConfigs</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfig>> CustomersIdTeamsNkBuilderConfigsFkGetAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsFkGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/builderConfigs/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkBuilderConfigsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfig)));
            
        }

        /// <summary>
        /// Update a related item by id for builderConfigs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for builderConfigs</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamBuilderConfig</returns>
        public TeamBuilderConfig CustomersIdTeamsNkBuilderConfigsFkPut (string id, string nk, string fk, TeamBuilderConfig data = null)
        {
             ApiResponse<TeamBuilderConfig> localVarResponse = CustomersIdTeamsNkBuilderConfigsFkPutWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for builderConfigs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for builderConfigs</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfig</returns>
        public ApiResponse< TeamBuilderConfig > CustomersIdTeamsNkBuilderConfigsFkPutWithHttpInfo (string id, string nk, string fk, TeamBuilderConfig data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsFkPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/builderConfigs/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkBuilderConfigsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfig)));
            
        }

        /// <summary>
        /// Update a related item by id for builderConfigs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for builderConfigs</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamBuilderConfig</returns>
        public async System.Threading.Tasks.Task<TeamBuilderConfig> CustomersIdTeamsNkBuilderConfigsFkPutAsync (string id, string nk, string fk, TeamBuilderConfig data = null)
        {
             ApiResponse<TeamBuilderConfig> localVarResponse = await CustomersIdTeamsNkBuilderConfigsFkPutAsyncWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for builderConfigs. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for builderConfigs</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfig>> CustomersIdTeamsNkBuilderConfigsFkPutAsyncWithHttpInfo (string id, string nk, string fk, TeamBuilderConfig data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsFkPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/builderConfigs/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkBuilderConfigsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfig)));
            
        }

        /// <summary>
        /// Queries builderConfigs of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;TeamBuilderConfig&gt;</returns>
        public List<TeamBuilderConfig> CustomersIdTeamsNkBuilderConfigsGet (string id, string nk, string filter = null)
        {
             ApiResponse<List<TeamBuilderConfig>> localVarResponse = CustomersIdTeamsNkBuilderConfigsGetWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries builderConfigs of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamBuilderConfig&gt;</returns>
        public ApiResponse< List<TeamBuilderConfig> > CustomersIdTeamsNkBuilderConfigsGetWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/builderConfigs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkBuilderConfigsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TeamBuilderConfig>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TeamBuilderConfig>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamBuilderConfig>)));
            
        }

        /// <summary>
        /// Queries builderConfigs of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;TeamBuilderConfig&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamBuilderConfig>> CustomersIdTeamsNkBuilderConfigsGetAsync (string id, string nk, string filter = null)
        {
             ApiResponse<List<TeamBuilderConfig>> localVarResponse = await CustomersIdTeamsNkBuilderConfigsGetAsyncWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries builderConfigs of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamBuilderConfig&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TeamBuilderConfig>>> CustomersIdTeamsNkBuilderConfigsGetAsyncWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/builderConfigs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkBuilderConfigsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TeamBuilderConfig>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TeamBuilderConfig>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamBuilderConfig>)));
            
        }

        /// <summary>
        /// Creates a new instance in builderConfigs of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamBuilderConfig</returns>
        public TeamBuilderConfig CustomersIdTeamsNkBuilderConfigsPost (string id, string nk, TeamBuilderConfig data = null)
        {
             ApiResponse<TeamBuilderConfig> localVarResponse = CustomersIdTeamsNkBuilderConfigsPostWithHttpInfo(id, nk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in builderConfigs of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfig</returns>
        public ApiResponse< TeamBuilderConfig > CustomersIdTeamsNkBuilderConfigsPostWithHttpInfo (string id, string nk, TeamBuilderConfig data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsPost");

            var localVarPath = "/Customers/{id}/teams/{nk}/builderConfigs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkBuilderConfigsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfig)));
            
        }

        /// <summary>
        /// Creates a new instance in builderConfigs of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamBuilderConfig</returns>
        public async System.Threading.Tasks.Task<TeamBuilderConfig> CustomersIdTeamsNkBuilderConfigsPostAsync (string id, string nk, TeamBuilderConfig data = null)
        {
             ApiResponse<TeamBuilderConfig> localVarResponse = await CustomersIdTeamsNkBuilderConfigsPostAsyncWithHttpInfo(id, nk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in builderConfigs of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfig>> CustomersIdTeamsNkBuilderConfigsPostAsyncWithHttpInfo (string id, string nk, TeamBuilderConfig data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkBuilderConfigsPost");

            var localVarPath = "/Customers/{id}/teams/{nk}/builderConfigs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkBuilderConfigsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfig)));
            
        }

        /// <summary>
        /// Counts dataSourceSoaps of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 CustomersIdTeamsNkDataSourceSoapsCountGet (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = CustomersIdTeamsNkDataSourceSoapsCountGetWithHttpInfo(id, nk, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts dataSourceSoaps of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > CustomersIdTeamsNkDataSourceSoapsCountGetWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkDataSourceSoapsCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkDataSourceSoapsCountGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/dataSourceSoaps/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkDataSourceSoapsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts dataSourceSoaps of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> CustomersIdTeamsNkDataSourceSoapsCountGetAsync (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await CustomersIdTeamsNkDataSourceSoapsCountGetAsyncWithHttpInfo(id, nk, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts dataSourceSoaps of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdTeamsNkDataSourceSoapsCountGetAsyncWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkDataSourceSoapsCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkDataSourceSoapsCountGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/dataSourceSoaps/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkDataSourceSoapsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Delete a related item by id for dataSourceSoaps. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dataSourceSoaps</param>
        /// <returns></returns>
        public void CustomersIdTeamsNkDataSourceSoapsFkDelete (string id, string nk, string fk)
        {
             CustomersIdTeamsNkDataSourceSoapsFkDeleteWithHttpInfo(id, nk, fk);
        }

        /// <summary>
        /// Delete a related item by id for dataSourceSoaps. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dataSourceSoaps</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsNkDataSourceSoapsFkDeleteWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkDataSourceSoapsFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkDataSourceSoapsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkDataSourceSoapsFkDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/dataSourceSoaps/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkDataSourceSoapsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for dataSourceSoaps. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dataSourceSoaps</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsNkDataSourceSoapsFkDeleteAsync (string id, string nk, string fk)
        {
             await CustomersIdTeamsNkDataSourceSoapsFkDeleteAsyncWithHttpInfo(id, nk, fk);

        }

        /// <summary>
        /// Delete a related item by id for dataSourceSoaps. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dataSourceSoaps</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkDataSourceSoapsFkDeleteAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkDataSourceSoapsFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkDataSourceSoapsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkDataSourceSoapsFkDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/dataSourceSoaps/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkDataSourceSoapsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for dataSourceSoaps. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dataSourceSoaps</param>
        /// <returns>DataSourceSoap</returns>
        public DataSourceSoap CustomersIdTeamsNkDataSourceSoapsFkGet (string id, string nk, string fk)
        {
             ApiResponse<DataSourceSoap> localVarResponse = CustomersIdTeamsNkDataSourceSoapsFkGetWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for dataSourceSoaps. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dataSourceSoaps</param>
        /// <returns>ApiResponse of DataSourceSoap</returns>
        public ApiResponse< DataSourceSoap > CustomersIdTeamsNkDataSourceSoapsFkGetWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkDataSourceSoapsFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkDataSourceSoapsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkDataSourceSoapsFkGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/dataSourceSoaps/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkDataSourceSoapsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataSourceSoap>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataSourceSoap) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataSourceSoap)));
            
        }

        /// <summary>
        /// Find a related item by id for dataSourceSoaps. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dataSourceSoaps</param>
        /// <returns>Task of DataSourceSoap</returns>
        public async System.Threading.Tasks.Task<DataSourceSoap> CustomersIdTeamsNkDataSourceSoapsFkGetAsync (string id, string nk, string fk)
        {
             ApiResponse<DataSourceSoap> localVarResponse = await CustomersIdTeamsNkDataSourceSoapsFkGetAsyncWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for dataSourceSoaps. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dataSourceSoaps</param>
        /// <returns>Task of ApiResponse (DataSourceSoap)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataSourceSoap>> CustomersIdTeamsNkDataSourceSoapsFkGetAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkDataSourceSoapsFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkDataSourceSoapsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkDataSourceSoapsFkGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/dataSourceSoaps/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkDataSourceSoapsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataSourceSoap>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataSourceSoap) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataSourceSoap)));
            
        }

        /// <summary>
        /// Update a related item by id for dataSourceSoaps. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dataSourceSoaps</param>
        /// <param name="data"> (optional)</param>
        /// <returns>DataSourceSoap</returns>
        public DataSourceSoap CustomersIdTeamsNkDataSourceSoapsFkPut (string id, string nk, string fk, DataSourceSoap data = null)
        {
             ApiResponse<DataSourceSoap> localVarResponse = CustomersIdTeamsNkDataSourceSoapsFkPutWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for dataSourceSoaps. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dataSourceSoaps</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of DataSourceSoap</returns>
        public ApiResponse< DataSourceSoap > CustomersIdTeamsNkDataSourceSoapsFkPutWithHttpInfo (string id, string nk, string fk, DataSourceSoap data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkDataSourceSoapsFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkDataSourceSoapsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkDataSourceSoapsFkPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/dataSourceSoaps/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkDataSourceSoapsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataSourceSoap>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataSourceSoap) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataSourceSoap)));
            
        }

        /// <summary>
        /// Update a related item by id for dataSourceSoaps. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dataSourceSoaps</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of DataSourceSoap</returns>
        public async System.Threading.Tasks.Task<DataSourceSoap> CustomersIdTeamsNkDataSourceSoapsFkPutAsync (string id, string nk, string fk, DataSourceSoap data = null)
        {
             ApiResponse<DataSourceSoap> localVarResponse = await CustomersIdTeamsNkDataSourceSoapsFkPutAsyncWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for dataSourceSoaps. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dataSourceSoaps</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (DataSourceSoap)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataSourceSoap>> CustomersIdTeamsNkDataSourceSoapsFkPutAsyncWithHttpInfo (string id, string nk, string fk, DataSourceSoap data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkDataSourceSoapsFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkDataSourceSoapsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkDataSourceSoapsFkPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/dataSourceSoaps/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkDataSourceSoapsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataSourceSoap>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataSourceSoap) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataSourceSoap)));
            
        }

        /// <summary>
        /// Queries dataSourceSoaps of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;DataSourceSoap&gt;</returns>
        public List<DataSourceSoap> CustomersIdTeamsNkDataSourceSoapsGet (string id, string nk, string filter = null)
        {
             ApiResponse<List<DataSourceSoap>> localVarResponse = CustomersIdTeamsNkDataSourceSoapsGetWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries dataSourceSoaps of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DataSourceSoap&gt;</returns>
        public ApiResponse< List<DataSourceSoap> > CustomersIdTeamsNkDataSourceSoapsGetWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkDataSourceSoapsGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkDataSourceSoapsGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/dataSourceSoaps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkDataSourceSoapsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DataSourceSoap>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DataSourceSoap>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DataSourceSoap>)));
            
        }

        /// <summary>
        /// Queries dataSourceSoaps of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;DataSourceSoap&gt;</returns>
        public async System.Threading.Tasks.Task<List<DataSourceSoap>> CustomersIdTeamsNkDataSourceSoapsGetAsync (string id, string nk, string filter = null)
        {
             ApiResponse<List<DataSourceSoap>> localVarResponse = await CustomersIdTeamsNkDataSourceSoapsGetAsyncWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries dataSourceSoaps of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DataSourceSoap&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DataSourceSoap>>> CustomersIdTeamsNkDataSourceSoapsGetAsyncWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkDataSourceSoapsGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkDataSourceSoapsGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/dataSourceSoaps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkDataSourceSoapsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DataSourceSoap>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DataSourceSoap>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DataSourceSoap>)));
            
        }

        /// <summary>
        /// Creates a new instance in dataSourceSoaps of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>DataSourceSoap</returns>
        public DataSourceSoap CustomersIdTeamsNkDataSourceSoapsPost (string id, string nk, DataSourceSoap data = null)
        {
             ApiResponse<DataSourceSoap> localVarResponse = CustomersIdTeamsNkDataSourceSoapsPostWithHttpInfo(id, nk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in dataSourceSoaps of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of DataSourceSoap</returns>
        public ApiResponse< DataSourceSoap > CustomersIdTeamsNkDataSourceSoapsPostWithHttpInfo (string id, string nk, DataSourceSoap data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkDataSourceSoapsPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkDataSourceSoapsPost");

            var localVarPath = "/Customers/{id}/teams/{nk}/dataSourceSoaps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkDataSourceSoapsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataSourceSoap>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataSourceSoap) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataSourceSoap)));
            
        }

        /// <summary>
        /// Creates a new instance in dataSourceSoaps of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of DataSourceSoap</returns>
        public async System.Threading.Tasks.Task<DataSourceSoap> CustomersIdTeamsNkDataSourceSoapsPostAsync (string id, string nk, DataSourceSoap data = null)
        {
             ApiResponse<DataSourceSoap> localVarResponse = await CustomersIdTeamsNkDataSourceSoapsPostAsyncWithHttpInfo(id, nk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in dataSourceSoaps of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (DataSourceSoap)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataSourceSoap>> CustomersIdTeamsNkDataSourceSoapsPostAsyncWithHttpInfo (string id, string nk, DataSourceSoap data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkDataSourceSoapsPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkDataSourceSoapsPost");

            var localVarPath = "/Customers/{id}/teams/{nk}/dataSourceSoaps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkDataSourceSoapsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataSourceSoap>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataSourceSoap) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataSourceSoap)));
            
        }

        /// <summary>
        /// Counts dynamicDatas of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 CustomersIdTeamsNkDynamicDatasCountGet (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = CustomersIdTeamsNkDynamicDatasCountGetWithHttpInfo(id, nk, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts dynamicDatas of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > CustomersIdTeamsNkDynamicDatasCountGetWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkDynamicDatasCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkDynamicDatasCountGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/dynamicDatas/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkDynamicDatasCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts dynamicDatas of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> CustomersIdTeamsNkDynamicDatasCountGetAsync (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await CustomersIdTeamsNkDynamicDatasCountGetAsyncWithHttpInfo(id, nk, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts dynamicDatas of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdTeamsNkDynamicDatasCountGetAsyncWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkDynamicDatasCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkDynamicDatasCountGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/dynamicDatas/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkDynamicDatasCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Delete a related item by id for dynamicDatas. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dynamicDatas</param>
        /// <returns></returns>
        public void CustomersIdTeamsNkDynamicDatasFkDelete (string id, string nk, string fk)
        {
             CustomersIdTeamsNkDynamicDatasFkDeleteWithHttpInfo(id, nk, fk);
        }

        /// <summary>
        /// Delete a related item by id for dynamicDatas. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dynamicDatas</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsNkDynamicDatasFkDeleteWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkDynamicDatasFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkDynamicDatasFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkDynamicDatasFkDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/dynamicDatas/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkDynamicDatasFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for dynamicDatas. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dynamicDatas</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsNkDynamicDatasFkDeleteAsync (string id, string nk, string fk)
        {
             await CustomersIdTeamsNkDynamicDatasFkDeleteAsyncWithHttpInfo(id, nk, fk);

        }

        /// <summary>
        /// Delete a related item by id for dynamicDatas. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dynamicDatas</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkDynamicDatasFkDeleteAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkDynamicDatasFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkDynamicDatasFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkDynamicDatasFkDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/dynamicDatas/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkDynamicDatasFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for dynamicDatas. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dynamicDatas</param>
        /// <returns>DynamicData</returns>
        public DynamicData CustomersIdTeamsNkDynamicDatasFkGet (string id, string nk, string fk)
        {
             ApiResponse<DynamicData> localVarResponse = CustomersIdTeamsNkDynamicDatasFkGetWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for dynamicDatas. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dynamicDatas</param>
        /// <returns>ApiResponse of DynamicData</returns>
        public ApiResponse< DynamicData > CustomersIdTeamsNkDynamicDatasFkGetWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkDynamicDatasFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkDynamicDatasFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkDynamicDatasFkGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/dynamicDatas/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkDynamicDatasFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DynamicData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DynamicData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DynamicData)));
            
        }

        /// <summary>
        /// Find a related item by id for dynamicDatas. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dynamicDatas</param>
        /// <returns>Task of DynamicData</returns>
        public async System.Threading.Tasks.Task<DynamicData> CustomersIdTeamsNkDynamicDatasFkGetAsync (string id, string nk, string fk)
        {
             ApiResponse<DynamicData> localVarResponse = await CustomersIdTeamsNkDynamicDatasFkGetAsyncWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for dynamicDatas. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dynamicDatas</param>
        /// <returns>Task of ApiResponse (DynamicData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DynamicData>> CustomersIdTeamsNkDynamicDatasFkGetAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkDynamicDatasFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkDynamicDatasFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkDynamicDatasFkGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/dynamicDatas/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkDynamicDatasFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DynamicData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DynamicData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DynamicData)));
            
        }

        /// <summary>
        /// Update a related item by id for dynamicDatas. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dynamicDatas</param>
        /// <param name="data"> (optional)</param>
        /// <returns>DynamicData</returns>
        public DynamicData CustomersIdTeamsNkDynamicDatasFkPut (string id, string nk, string fk, DynamicData data = null)
        {
             ApiResponse<DynamicData> localVarResponse = CustomersIdTeamsNkDynamicDatasFkPutWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for dynamicDatas. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dynamicDatas</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of DynamicData</returns>
        public ApiResponse< DynamicData > CustomersIdTeamsNkDynamicDatasFkPutWithHttpInfo (string id, string nk, string fk, DynamicData data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkDynamicDatasFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkDynamicDatasFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkDynamicDatasFkPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/dynamicDatas/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkDynamicDatasFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DynamicData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DynamicData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DynamicData)));
            
        }

        /// <summary>
        /// Update a related item by id for dynamicDatas. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dynamicDatas</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of DynamicData</returns>
        public async System.Threading.Tasks.Task<DynamicData> CustomersIdTeamsNkDynamicDatasFkPutAsync (string id, string nk, string fk, DynamicData data = null)
        {
             ApiResponse<DynamicData> localVarResponse = await CustomersIdTeamsNkDynamicDatasFkPutAsyncWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for dynamicDatas. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for dynamicDatas</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (DynamicData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DynamicData>> CustomersIdTeamsNkDynamicDatasFkPutAsyncWithHttpInfo (string id, string nk, string fk, DynamicData data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkDynamicDatasFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkDynamicDatasFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkDynamicDatasFkPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/dynamicDatas/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkDynamicDatasFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DynamicData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DynamicData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DynamicData)));
            
        }

        /// <summary>
        /// Queries dynamicDatas of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;DynamicData&gt;</returns>
        public List<DynamicData> CustomersIdTeamsNkDynamicDatasGet (string id, string nk, string filter = null)
        {
             ApiResponse<List<DynamicData>> localVarResponse = CustomersIdTeamsNkDynamicDatasGetWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries dynamicDatas of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DynamicData&gt;</returns>
        public ApiResponse< List<DynamicData> > CustomersIdTeamsNkDynamicDatasGetWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkDynamicDatasGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkDynamicDatasGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/dynamicDatas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkDynamicDatasGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DynamicData>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DynamicData>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DynamicData>)));
            
        }

        /// <summary>
        /// Queries dynamicDatas of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;DynamicData&gt;</returns>
        public async System.Threading.Tasks.Task<List<DynamicData>> CustomersIdTeamsNkDynamicDatasGetAsync (string id, string nk, string filter = null)
        {
             ApiResponse<List<DynamicData>> localVarResponse = await CustomersIdTeamsNkDynamicDatasGetAsyncWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries dynamicDatas of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DynamicData&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DynamicData>>> CustomersIdTeamsNkDynamicDatasGetAsyncWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkDynamicDatasGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkDynamicDatasGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/dynamicDatas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkDynamicDatasGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DynamicData>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DynamicData>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DynamicData>)));
            
        }

        /// <summary>
        /// Creates a new instance in dynamicDatas of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>DynamicData</returns>
        public DynamicData CustomersIdTeamsNkDynamicDatasPost (string id, string nk, DynamicData data = null)
        {
             ApiResponse<DynamicData> localVarResponse = CustomersIdTeamsNkDynamicDatasPostWithHttpInfo(id, nk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in dynamicDatas of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of DynamicData</returns>
        public ApiResponse< DynamicData > CustomersIdTeamsNkDynamicDatasPostWithHttpInfo (string id, string nk, DynamicData data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkDynamicDatasPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkDynamicDatasPost");

            var localVarPath = "/Customers/{id}/teams/{nk}/dynamicDatas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkDynamicDatasPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DynamicData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DynamicData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DynamicData)));
            
        }

        /// <summary>
        /// Creates a new instance in dynamicDatas of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of DynamicData</returns>
        public async System.Threading.Tasks.Task<DynamicData> CustomersIdTeamsNkDynamicDatasPostAsync (string id, string nk, DynamicData data = null)
        {
             ApiResponse<DynamicData> localVarResponse = await CustomersIdTeamsNkDynamicDatasPostAsyncWithHttpInfo(id, nk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in dynamicDatas of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (DynamicData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DynamicData>> CustomersIdTeamsNkDynamicDatasPostAsyncWithHttpInfo (string id, string nk, DynamicData data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkDynamicDatasPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkDynamicDatasPost");

            var localVarPath = "/Customers/{id}/teams/{nk}/dynamicDatas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkDynamicDatasPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DynamicData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DynamicData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DynamicData)));
            
        }

        /// <summary>
        /// Counts imageFolders of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 CustomersIdTeamsNkImageFoldersCountGet (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = CustomersIdTeamsNkImageFoldersCountGetWithHttpInfo(id, nk, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts imageFolders of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > CustomersIdTeamsNkImageFoldersCountGetWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkImageFoldersCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkImageFoldersCountGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/imageFolders/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkImageFoldersCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts imageFolders of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> CustomersIdTeamsNkImageFoldersCountGetAsync (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await CustomersIdTeamsNkImageFoldersCountGetAsyncWithHttpInfo(id, nk, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts imageFolders of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdTeamsNkImageFoldersCountGetAsyncWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkImageFoldersCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkImageFoldersCountGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/imageFolders/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkImageFoldersCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all imageFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns></returns>
        public void CustomersIdTeamsNkImageFoldersDelete (string id, string nk)
        {
             CustomersIdTeamsNkImageFoldersDeleteWithHttpInfo(id, nk);
        }

        /// <summary>
        /// Deletes all imageFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsNkImageFoldersDeleteWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkImageFoldersDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkImageFoldersDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/imageFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkImageFoldersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all imageFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsNkImageFoldersDeleteAsync (string id, string nk)
        {
             await CustomersIdTeamsNkImageFoldersDeleteAsyncWithHttpInfo(id, nk);

        }

        /// <summary>
        /// Deletes all imageFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkImageFoldersDeleteAsyncWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkImageFoldersDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkImageFoldersDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/imageFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkImageFoldersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for imageFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns></returns>
        public void CustomersIdTeamsNkImageFoldersFkDelete (string id, string nk, string fk)
        {
             CustomersIdTeamsNkImageFoldersFkDeleteWithHttpInfo(id, nk, fk);
        }

        /// <summary>
        /// Delete a related item by id for imageFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsNkImageFoldersFkDeleteWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkImageFoldersFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkImageFoldersFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkImageFoldersFkDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/imageFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkImageFoldersFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for imageFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsNkImageFoldersFkDeleteAsync (string id, string nk, string fk)
        {
             await CustomersIdTeamsNkImageFoldersFkDeleteAsyncWithHttpInfo(id, nk, fk);

        }

        /// <summary>
        /// Delete a related item by id for imageFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkImageFoldersFkDeleteAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkImageFoldersFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkImageFoldersFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkImageFoldersFkDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/imageFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkImageFoldersFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for imageFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>ImageFolder</returns>
        public ImageFolder CustomersIdTeamsNkImageFoldersFkGet (string id, string nk, string fk)
        {
             ApiResponse<ImageFolder> localVarResponse = CustomersIdTeamsNkImageFoldersFkGetWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for imageFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>ApiResponse of ImageFolder</returns>
        public ApiResponse< ImageFolder > CustomersIdTeamsNkImageFoldersFkGetWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkImageFoldersFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkImageFoldersFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkImageFoldersFkGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/imageFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkImageFoldersFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImageFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageFolder)));
            
        }

        /// <summary>
        /// Find a related item by id for imageFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>Task of ImageFolder</returns>
        public async System.Threading.Tasks.Task<ImageFolder> CustomersIdTeamsNkImageFoldersFkGetAsync (string id, string nk, string fk)
        {
             ApiResponse<ImageFolder> localVarResponse = await CustomersIdTeamsNkImageFoldersFkGetAsyncWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for imageFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <returns>Task of ApiResponse (ImageFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImageFolder>> CustomersIdTeamsNkImageFoldersFkGetAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkImageFoldersFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkImageFoldersFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkImageFoldersFkGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/imageFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkImageFoldersFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImageFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageFolder)));
            
        }

        /// <summary>
        /// Update a related item by id for imageFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ImageFolder</returns>
        public ImageFolder CustomersIdTeamsNkImageFoldersFkPut (string id, string nk, string fk, ImageFolder data = null)
        {
             ApiResponse<ImageFolder> localVarResponse = CustomersIdTeamsNkImageFoldersFkPutWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for imageFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ImageFolder</returns>
        public ApiResponse< ImageFolder > CustomersIdTeamsNkImageFoldersFkPutWithHttpInfo (string id, string nk, string fk, ImageFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkImageFoldersFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkImageFoldersFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkImageFoldersFkPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/imageFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkImageFoldersFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImageFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageFolder)));
            
        }

        /// <summary>
        /// Update a related item by id for imageFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ImageFolder</returns>
        public async System.Threading.Tasks.Task<ImageFolder> CustomersIdTeamsNkImageFoldersFkPutAsync (string id, string nk, string fk, ImageFolder data = null)
        {
             ApiResponse<ImageFolder> localVarResponse = await CustomersIdTeamsNkImageFoldersFkPutAsyncWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for imageFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for imageFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ImageFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImageFolder>> CustomersIdTeamsNkImageFoldersFkPutAsyncWithHttpInfo (string id, string nk, string fk, ImageFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkImageFoldersFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkImageFoldersFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkImageFoldersFkPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/imageFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkImageFoldersFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImageFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageFolder)));
            
        }

        /// <summary>
        /// Queries imageFolders of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;ImageFolder&gt;</returns>
        public List<ImageFolder> CustomersIdTeamsNkImageFoldersGet (string id, string nk, string filter = null)
        {
             ApiResponse<List<ImageFolder>> localVarResponse = CustomersIdTeamsNkImageFoldersGetWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries imageFolders of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ImageFolder&gt;</returns>
        public ApiResponse< List<ImageFolder> > CustomersIdTeamsNkImageFoldersGetWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkImageFoldersGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkImageFoldersGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/imageFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkImageFoldersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ImageFolder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ImageFolder>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ImageFolder>)));
            
        }

        /// <summary>
        /// Queries imageFolders of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;ImageFolder&gt;</returns>
        public async System.Threading.Tasks.Task<List<ImageFolder>> CustomersIdTeamsNkImageFoldersGetAsync (string id, string nk, string filter = null)
        {
             ApiResponse<List<ImageFolder>> localVarResponse = await CustomersIdTeamsNkImageFoldersGetAsyncWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries imageFolders of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ImageFolder&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ImageFolder>>> CustomersIdTeamsNkImageFoldersGetAsyncWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkImageFoldersGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkImageFoldersGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/imageFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkImageFoldersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ImageFolder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ImageFolder>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ImageFolder>)));
            
        }

        /// <summary>
        /// Creates a new instance in imageFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ImageFolder</returns>
        public ImageFolder CustomersIdTeamsNkImageFoldersPost (string id, string nk, ImageFolder data = null)
        {
             ApiResponse<ImageFolder> localVarResponse = CustomersIdTeamsNkImageFoldersPostWithHttpInfo(id, nk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in imageFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ImageFolder</returns>
        public ApiResponse< ImageFolder > CustomersIdTeamsNkImageFoldersPostWithHttpInfo (string id, string nk, ImageFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkImageFoldersPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkImageFoldersPost");

            var localVarPath = "/Customers/{id}/teams/{nk}/imageFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkImageFoldersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImageFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageFolder)));
            
        }

        /// <summary>
        /// Creates a new instance in imageFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ImageFolder</returns>
        public async System.Threading.Tasks.Task<ImageFolder> CustomersIdTeamsNkImageFoldersPostAsync (string id, string nk, ImageFolder data = null)
        {
             ApiResponse<ImageFolder> localVarResponse = await CustomersIdTeamsNkImageFoldersPostAsyncWithHttpInfo(id, nk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in imageFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ImageFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImageFolder>> CustomersIdTeamsNkImageFoldersPostAsyncWithHttpInfo (string id, string nk, ImageFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkImageFoldersPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkImageFoldersPost");

            var localVarPath = "/Customers/{id}/teams/{nk}/imageFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkImageFoldersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImageFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImageFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImageFolder)));
            
        }

        /// <summary>
        /// Counts images of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 CustomersIdTeamsNkImagesCountGet (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = CustomersIdTeamsNkImagesCountGetWithHttpInfo(id, nk, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts images of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > CustomersIdTeamsNkImagesCountGetWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkImagesCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkImagesCountGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/images/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkImagesCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts images of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> CustomersIdTeamsNkImagesCountGetAsync (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await CustomersIdTeamsNkImagesCountGetAsyncWithHttpInfo(id, nk, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts images of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdTeamsNkImagesCountGetAsyncWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkImagesCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkImagesCountGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/images/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkImagesCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all images of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns></returns>
        public void CustomersIdTeamsNkImagesDelete (string id, string nk)
        {
             CustomersIdTeamsNkImagesDeleteWithHttpInfo(id, nk);
        }

        /// <summary>
        /// Deletes all images of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsNkImagesDeleteWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkImagesDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkImagesDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkImagesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all images of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsNkImagesDeleteAsync (string id, string nk)
        {
             await CustomersIdTeamsNkImagesDeleteAsyncWithHttpInfo(id, nk);

        }

        /// <summary>
        /// Deletes all images of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkImagesDeleteAsyncWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkImagesDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkImagesDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkImagesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for images. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for images</param>
        /// <returns></returns>
        public void CustomersIdTeamsNkImagesFkDelete (string id, string nk, string fk)
        {
             CustomersIdTeamsNkImagesFkDeleteWithHttpInfo(id, nk, fk);
        }

        /// <summary>
        /// Delete a related item by id for images. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for images</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsNkImagesFkDeleteWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkImagesFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkImagesFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkImagesFkDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/images/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkImagesFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for images. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for images</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsNkImagesFkDeleteAsync (string id, string nk, string fk)
        {
             await CustomersIdTeamsNkImagesFkDeleteAsyncWithHttpInfo(id, nk, fk);

        }

        /// <summary>
        /// Delete a related item by id for images. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for images</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkImagesFkDeleteAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkImagesFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkImagesFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkImagesFkDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/images/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkImagesFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for images. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for images</param>
        /// <returns>Image</returns>
        public Image CustomersIdTeamsNkImagesFkGet (string id, string nk, string fk)
        {
             ApiResponse<Image> localVarResponse = CustomersIdTeamsNkImagesFkGetWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for images. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for images</param>
        /// <returns>ApiResponse of Image</returns>
        public ApiResponse< Image > CustomersIdTeamsNkImagesFkGetWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkImagesFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkImagesFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkImagesFkGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/images/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkImagesFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Image>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Image) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Image)));
            
        }

        /// <summary>
        /// Find a related item by id for images. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for images</param>
        /// <returns>Task of Image</returns>
        public async System.Threading.Tasks.Task<Image> CustomersIdTeamsNkImagesFkGetAsync (string id, string nk, string fk)
        {
             ApiResponse<Image> localVarResponse = await CustomersIdTeamsNkImagesFkGetAsyncWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for images. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for images</param>
        /// <returns>Task of ApiResponse (Image)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Image>> CustomersIdTeamsNkImagesFkGetAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkImagesFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkImagesFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkImagesFkGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/images/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkImagesFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Image>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Image) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Image)));
            
        }

        /// <summary>
        /// Update a related item by id for images. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for images</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Image</returns>
        public Image CustomersIdTeamsNkImagesFkPut (string id, string nk, string fk, Image data = null)
        {
             ApiResponse<Image> localVarResponse = CustomersIdTeamsNkImagesFkPutWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for images. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for images</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Image</returns>
        public ApiResponse< Image > CustomersIdTeamsNkImagesFkPutWithHttpInfo (string id, string nk, string fk, Image data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkImagesFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkImagesFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkImagesFkPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/images/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkImagesFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Image>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Image) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Image)));
            
        }

        /// <summary>
        /// Update a related item by id for images. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for images</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Image</returns>
        public async System.Threading.Tasks.Task<Image> CustomersIdTeamsNkImagesFkPutAsync (string id, string nk, string fk, Image data = null)
        {
             ApiResponse<Image> localVarResponse = await CustomersIdTeamsNkImagesFkPutAsyncWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for images. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for images</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Image)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Image>> CustomersIdTeamsNkImagesFkPutAsyncWithHttpInfo (string id, string nk, string fk, Image data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkImagesFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkImagesFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkImagesFkPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/images/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkImagesFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Image>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Image) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Image)));
            
        }

        /// <summary>
        /// Queries images of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;Image&gt;</returns>
        public List<Image> CustomersIdTeamsNkImagesGet (string id, string nk, string filter = null)
        {
             ApiResponse<List<Image>> localVarResponse = CustomersIdTeamsNkImagesGetWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries images of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Image&gt;</returns>
        public ApiResponse< List<Image> > CustomersIdTeamsNkImagesGetWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkImagesGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkImagesGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkImagesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Image>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Image>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Image>)));
            
        }

        /// <summary>
        /// Queries images of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;Image&gt;</returns>
        public async System.Threading.Tasks.Task<List<Image>> CustomersIdTeamsNkImagesGetAsync (string id, string nk, string filter = null)
        {
             ApiResponse<List<Image>> localVarResponse = await CustomersIdTeamsNkImagesGetAsyncWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries images of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Image&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Image>>> CustomersIdTeamsNkImagesGetAsyncWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkImagesGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkImagesGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkImagesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Image>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Image>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Image>)));
            
        }

        /// <summary>
        /// Creates a new instance in images of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Image</returns>
        public Image CustomersIdTeamsNkImagesPost (string id, string nk, Image data = null)
        {
             ApiResponse<Image> localVarResponse = CustomersIdTeamsNkImagesPostWithHttpInfo(id, nk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in images of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Image</returns>
        public ApiResponse< Image > CustomersIdTeamsNkImagesPostWithHttpInfo (string id, string nk, Image data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkImagesPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkImagesPost");

            var localVarPath = "/Customers/{id}/teams/{nk}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkImagesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Image>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Image) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Image)));
            
        }

        /// <summary>
        /// Creates a new instance in images of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Image</returns>
        public async System.Threading.Tasks.Task<Image> CustomersIdTeamsNkImagesPostAsync (string id, string nk, Image data = null)
        {
             ApiResponse<Image> localVarResponse = await CustomersIdTeamsNkImagesPostAsyncWithHttpInfo(id, nk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in images of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Image)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Image>> CustomersIdTeamsNkImagesPostAsyncWithHttpInfo (string id, string nk, Image data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkImagesPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkImagesPost");

            var localVarPath = "/Customers/{id}/teams/{nk}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkImagesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Image>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Image) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Image)));
            
        }

        /// <summary>
        /// Counts members of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 CustomersIdTeamsNkMembersCountGet (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = CustomersIdTeamsNkMembersCountGetWithHttpInfo(id, nk, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts members of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > CustomersIdTeamsNkMembersCountGetWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkMembersCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkMembersCountGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/members/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkMembersCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts members of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> CustomersIdTeamsNkMembersCountGetAsync (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await CustomersIdTeamsNkMembersCountGetAsyncWithHttpInfo(id, nk, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts members of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdTeamsNkMembersCountGetAsyncWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkMembersCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkMembersCountGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/members/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkMembersCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all members of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns></returns>
        public void CustomersIdTeamsNkMembersDelete (string id, string nk)
        {
             CustomersIdTeamsNkMembersDeleteWithHttpInfo(id, nk);
        }

        /// <summary>
        /// Deletes all members of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsNkMembersDeleteWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkMembersDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkMembersDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkMembersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all members of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsNkMembersDeleteAsync (string id, string nk)
        {
             await CustomersIdTeamsNkMembersDeleteAsyncWithHttpInfo(id, nk);

        }

        /// <summary>
        /// Deletes all members of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkMembersDeleteAsyncWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkMembersDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkMembersDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkMembersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns></returns>
        public void CustomersIdTeamsNkMembersFkDelete (string id, string nk, string fk)
        {
             CustomersIdTeamsNkMembersFkDeleteWithHttpInfo(id, nk, fk);
        }

        /// <summary>
        /// Delete a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsNkMembersFkDeleteWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkMembersFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkMembersFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkMembersFkDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/members/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkMembersFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsNkMembersFkDeleteAsync (string id, string nk, string fk)
        {
             await CustomersIdTeamsNkMembersFkDeleteAsyncWithHttpInfo(id, nk, fk);

        }

        /// <summary>
        /// Delete a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkMembersFkDeleteAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkMembersFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkMembersFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkMembersFkDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/members/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkMembersFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Customer</returns>
        public Customer CustomersIdTeamsNkMembersFkGet (string id, string nk, string fk)
        {
             ApiResponse<Customer> localVarResponse = CustomersIdTeamsNkMembersFkGetWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>ApiResponse of Customer</returns>
        public ApiResponse< Customer > CustomersIdTeamsNkMembersFkGetWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkMembersFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkMembersFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkMembersFkGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/members/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkMembersFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Find a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> CustomersIdTeamsNkMembersFkGetAsync (string id, string nk, string fk)
        {
             ApiResponse<Customer> localVarResponse = await CustomersIdTeamsNkMembersFkGetAsyncWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Customer>> CustomersIdTeamsNkMembersFkGetAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkMembersFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkMembersFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkMembersFkGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/members/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkMembersFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Update a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Customer</returns>
        public Customer CustomersIdTeamsNkMembersFkPut (string id, string nk, string fk, Customer data = null)
        {
             ApiResponse<Customer> localVarResponse = CustomersIdTeamsNkMembersFkPutWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        public ApiResponse< Customer > CustomersIdTeamsNkMembersFkPutWithHttpInfo (string id, string nk, string fk, Customer data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkMembersFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkMembersFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkMembersFkPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/members/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkMembersFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Update a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> CustomersIdTeamsNkMembersFkPutAsync (string id, string nk, string fk, Customer data = null)
        {
             ApiResponse<Customer> localVarResponse = await CustomersIdTeamsNkMembersFkPutAsyncWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Customer>> CustomersIdTeamsNkMembersFkPutAsyncWithHttpInfo (string id, string nk, string fk, Customer data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkMembersFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkMembersFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkMembersFkPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/members/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkMembersFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Queries members of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;Customer&gt;</returns>
        public List<Customer> CustomersIdTeamsNkMembersGet (string id, string nk, string filter = null)
        {
             ApiResponse<List<Customer>> localVarResponse = CustomersIdTeamsNkMembersGetWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries members of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Customer&gt;</returns>
        public ApiResponse< List<Customer> > CustomersIdTeamsNkMembersGetWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkMembersGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkMembersGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Customer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Customer>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Customer>)));
            
        }

        /// <summary>
        /// Queries members of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;Customer&gt;</returns>
        public async System.Threading.Tasks.Task<List<Customer>> CustomersIdTeamsNkMembersGetAsync (string id, string nk, string filter = null)
        {
             ApiResponse<List<Customer>> localVarResponse = await CustomersIdTeamsNkMembersGetAsyncWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries members of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Customer&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Customer>>> CustomersIdTeamsNkMembersGetAsyncWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkMembersGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkMembersGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Customer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Customer>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Customer>)));
            
        }

        /// <summary>
        /// Creates a new instance in members of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Customer</returns>
        public Customer CustomersIdTeamsNkMembersPost (string id, string nk, Customer data = null)
        {
             ApiResponse<Customer> localVarResponse = CustomersIdTeamsNkMembersPostWithHttpInfo(id, nk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in members of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        public ApiResponse< Customer > CustomersIdTeamsNkMembersPostWithHttpInfo (string id, string nk, Customer data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkMembersPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkMembersPost");

            var localVarPath = "/Customers/{id}/teams/{nk}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Creates a new instance in members of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> CustomersIdTeamsNkMembersPostAsync (string id, string nk, Customer data = null)
        {
             ApiResponse<Customer> localVarResponse = await CustomersIdTeamsNkMembersPostAsyncWithHttpInfo(id, nk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in members of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Customer>> CustomersIdTeamsNkMembersPostAsyncWithHttpInfo (string id, string nk, Customer data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkMembersPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkMembersPost");

            var localVarPath = "/Customers/{id}/teams/{nk}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Remove the members relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns></returns>
        public void CustomersIdTeamsNkMembersRelFkDelete (string id, string nk, string fk)
        {
             CustomersIdTeamsNkMembersRelFkDeleteWithHttpInfo(id, nk, fk);
        }

        /// <summary>
        /// Remove the members relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsNkMembersRelFkDeleteWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkMembersRelFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkMembersRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkMembersRelFkDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/members/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkMembersRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove the members relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsNkMembersRelFkDeleteAsync (string id, string nk, string fk)
        {
             await CustomersIdTeamsNkMembersRelFkDeleteAsyncWithHttpInfo(id, nk, fk);

        }

        /// <summary>
        /// Remove the members relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkMembersRelFkDeleteAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkMembersRelFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkMembersRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkMembersRelFkDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/members/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkMembersRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Check the existence of members relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>bool?</returns>
        public bool? CustomersIdTeamsNkMembersRelFkHead (string id, string nk, string fk)
        {
             ApiResponse<bool?> localVarResponse = CustomersIdTeamsNkMembersRelFkHeadWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check the existence of members relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > CustomersIdTeamsNkMembersRelFkHeadWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkMembersRelFkHead");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkMembersRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkMembersRelFkHead");

            var localVarPath = "/Customers/{id}/teams/{nk}/members/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkMembersRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Check the existence of members relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> CustomersIdTeamsNkMembersRelFkHeadAsync (string id, string nk, string fk)
        {
             ApiResponse<bool?> localVarResponse = await CustomersIdTeamsNkMembersRelFkHeadAsyncWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check the existence of members relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> CustomersIdTeamsNkMembersRelFkHeadAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkMembersRelFkHead");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkMembersRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkMembersRelFkHead");

            var localVarPath = "/Customers/{id}/teams/{nk}/members/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkMembersRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Add a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamMember</returns>
        public TeamMember CustomersIdTeamsNkMembersRelFkPut (string id, string nk, string fk, TeamMember data = null)
        {
             ApiResponse<TeamMember> localVarResponse = CustomersIdTeamsNkMembersRelFkPutWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        public ApiResponse< TeamMember > CustomersIdTeamsNkMembersRelFkPutWithHttpInfo (string id, string nk, string fk, TeamMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkMembersRelFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkMembersRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkMembersRelFkPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/members/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkMembersRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Add a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamMember</returns>
        public async System.Threading.Tasks.Task<TeamMember> CustomersIdTeamsNkMembersRelFkPutAsync (string id, string nk, string fk, TeamMember data = null)
        {
             ApiResponse<TeamMember> localVarResponse = await CustomersIdTeamsNkMembersRelFkPutAsyncWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a related item by id for members. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for members</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMember>> CustomersIdTeamsNkMembersRelFkPutAsyncWithHttpInfo (string id, string nk, string fk, TeamMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkMembersRelFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkMembersRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkMembersRelFkPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/members/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkMembersRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Deletes permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns></returns>
        public void CustomersIdTeamsNkPermissionDelete (string id, string nk)
        {
             CustomersIdTeamsNkPermissionDeleteWithHttpInfo(id, nk);
        }

        /// <summary>
        /// Deletes permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsNkPermissionDeleteWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkPermissionDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkPermissionDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkPermissionDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsNkPermissionDeleteAsync (string id, string nk)
        {
             await CustomersIdTeamsNkPermissionDeleteAsyncWithHttpInfo(id, nk);

        }

        /// <summary>
        /// Deletes permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkPermissionDeleteAsyncWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkPermissionDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkPermissionDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkPermissionDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Fetches hasOne relation permission. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>TeamPermissionSet</returns>
        public TeamPermissionSet CustomersIdTeamsNkPermissionGet (string id, string nk, bool? refresh = null)
        {
             ApiResponse<TeamPermissionSet> localVarResponse = CustomersIdTeamsNkPermissionGetWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches hasOne relation permission. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of TeamPermissionSet</returns>
        public ApiResponse< TeamPermissionSet > CustomersIdTeamsNkPermissionGetWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkPermissionGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkPermissionGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkPermissionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamPermissionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamPermissionSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamPermissionSet)));
            
        }

        /// <summary>
        /// Fetches hasOne relation permission. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of TeamPermissionSet</returns>
        public async System.Threading.Tasks.Task<TeamPermissionSet> CustomersIdTeamsNkPermissionGetAsync (string id, string nk, bool? refresh = null)
        {
             ApiResponse<TeamPermissionSet> localVarResponse = await CustomersIdTeamsNkPermissionGetAsyncWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches hasOne relation permission. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamPermissionSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamPermissionSet>> CustomersIdTeamsNkPermissionGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkPermissionGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkPermissionGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkPermissionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamPermissionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamPermissionSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamPermissionSet)));
            
        }

        /// <summary>
        /// Creates a new instance in permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamPermissionSet</returns>
        public TeamPermissionSet CustomersIdTeamsNkPermissionPost (string id, string nk, TeamPermissionSet data = null)
        {
             ApiResponse<TeamPermissionSet> localVarResponse = CustomersIdTeamsNkPermissionPostWithHttpInfo(id, nk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamPermissionSet</returns>
        public ApiResponse< TeamPermissionSet > CustomersIdTeamsNkPermissionPostWithHttpInfo (string id, string nk, TeamPermissionSet data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkPermissionPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkPermissionPost");

            var localVarPath = "/Customers/{id}/teams/{nk}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkPermissionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamPermissionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamPermissionSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamPermissionSet)));
            
        }

        /// <summary>
        /// Creates a new instance in permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamPermissionSet</returns>
        public async System.Threading.Tasks.Task<TeamPermissionSet> CustomersIdTeamsNkPermissionPostAsync (string id, string nk, TeamPermissionSet data = null)
        {
             ApiResponse<TeamPermissionSet> localVarResponse = await CustomersIdTeamsNkPermissionPostAsyncWithHttpInfo(id, nk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamPermissionSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamPermissionSet>> CustomersIdTeamsNkPermissionPostAsyncWithHttpInfo (string id, string nk, TeamPermissionSet data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkPermissionPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkPermissionPost");

            var localVarPath = "/Customers/{id}/teams/{nk}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkPermissionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamPermissionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamPermissionSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamPermissionSet)));
            
        }

        /// <summary>
        /// Update permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamPermissionSet</returns>
        public TeamPermissionSet CustomersIdTeamsNkPermissionPut (string id, string nk, TeamPermissionSet data = null)
        {
             ApiResponse<TeamPermissionSet> localVarResponse = CustomersIdTeamsNkPermissionPutWithHttpInfo(id, nk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamPermissionSet</returns>
        public ApiResponse< TeamPermissionSet > CustomersIdTeamsNkPermissionPutWithHttpInfo (string id, string nk, TeamPermissionSet data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkPermissionPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkPermissionPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkPermissionPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamPermissionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamPermissionSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamPermissionSet)));
            
        }

        /// <summary>
        /// Update permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamPermissionSet</returns>
        public async System.Threading.Tasks.Task<TeamPermissionSet> CustomersIdTeamsNkPermissionPutAsync (string id, string nk, TeamPermissionSet data = null)
        {
             ApiResponse<TeamPermissionSet> localVarResponse = await CustomersIdTeamsNkPermissionPutAsyncWithHttpInfo(id, nk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update permission of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamPermissionSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamPermissionSet>> CustomersIdTeamsNkPermissionPutAsyncWithHttpInfo (string id, string nk, TeamPermissionSet data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkPermissionPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkPermissionPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkPermissionPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamPermissionSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamPermissionSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamPermissionSet)));
            
        }

        /// <summary>
        /// Counts portals of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 CustomersIdTeamsNkPortalsCountGet (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = CustomersIdTeamsNkPortalsCountGetWithHttpInfo(id, nk, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts portals of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > CustomersIdTeamsNkPortalsCountGetWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkPortalsCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkPortalsCountGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/portals/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkPortalsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts portals of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> CustomersIdTeamsNkPortalsCountGetAsync (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await CustomersIdTeamsNkPortalsCountGetAsyncWithHttpInfo(id, nk, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts portals of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdTeamsNkPortalsCountGetAsyncWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkPortalsCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkPortalsCountGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/portals/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkPortalsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all portals of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns></returns>
        public void CustomersIdTeamsNkPortalsDelete (string id, string nk)
        {
             CustomersIdTeamsNkPortalsDeleteWithHttpInfo(id, nk);
        }

        /// <summary>
        /// Deletes all portals of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsNkPortalsDeleteWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkPortalsDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkPortalsDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/portals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkPortalsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all portals of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsNkPortalsDeleteAsync (string id, string nk)
        {
             await CustomersIdTeamsNkPortalsDeleteAsyncWithHttpInfo(id, nk);

        }

        /// <summary>
        /// Deletes all portals of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkPortalsDeleteAsyncWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkPortalsDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkPortalsDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/portals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkPortalsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns></returns>
        public void CustomersIdTeamsNkPortalsFkDelete (string id, string nk, string fk)
        {
             CustomersIdTeamsNkPortalsFkDeleteWithHttpInfo(id, nk, fk);
        }

        /// <summary>
        /// Delete a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsNkPortalsFkDeleteWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkPortalsFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkPortalsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkPortalsFkDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/portals/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkPortalsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsNkPortalsFkDeleteAsync (string id, string nk, string fk)
        {
             await CustomersIdTeamsNkPortalsFkDeleteAsyncWithHttpInfo(id, nk, fk);

        }

        /// <summary>
        /// Delete a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkPortalsFkDeleteAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkPortalsFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkPortalsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkPortalsFkDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/portals/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkPortalsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Portal</returns>
        public Portal CustomersIdTeamsNkPortalsFkGet (string id, string nk, string fk)
        {
             ApiResponse<Portal> localVarResponse = CustomersIdTeamsNkPortalsFkGetWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>ApiResponse of Portal</returns>
        public ApiResponse< Portal > CustomersIdTeamsNkPortalsFkGetWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkPortalsFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkPortalsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkPortalsFkGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/portals/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkPortalsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Find a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of Portal</returns>
        public async System.Threading.Tasks.Task<Portal> CustomersIdTeamsNkPortalsFkGetAsync (string id, string nk, string fk)
        {
             ApiResponse<Portal> localVarResponse = await CustomersIdTeamsNkPortalsFkGetAsyncWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Portal>> CustomersIdTeamsNkPortalsFkGetAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkPortalsFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkPortalsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkPortalsFkGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/portals/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkPortalsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Update a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Portal</returns>
        public Portal CustomersIdTeamsNkPortalsFkPut (string id, string nk, string fk, Portal data = null)
        {
             ApiResponse<Portal> localVarResponse = CustomersIdTeamsNkPortalsFkPutWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        public ApiResponse< Portal > CustomersIdTeamsNkPortalsFkPutWithHttpInfo (string id, string nk, string fk, Portal data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkPortalsFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkPortalsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkPortalsFkPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/portals/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkPortalsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Update a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Portal</returns>
        public async System.Threading.Tasks.Task<Portal> CustomersIdTeamsNkPortalsFkPutAsync (string id, string nk, string fk, Portal data = null)
        {
             ApiResponse<Portal> localVarResponse = await CustomersIdTeamsNkPortalsFkPutAsyncWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Portal>> CustomersIdTeamsNkPortalsFkPutAsyncWithHttpInfo (string id, string nk, string fk, Portal data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkPortalsFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkPortalsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkPortalsFkPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/portals/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkPortalsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Queries portals of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;Portal&gt;</returns>
        public List<Portal> CustomersIdTeamsNkPortalsGet (string id, string nk, string filter = null)
        {
             ApiResponse<List<Portal>> localVarResponse = CustomersIdTeamsNkPortalsGetWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries portals of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Portal&gt;</returns>
        public ApiResponse< List<Portal> > CustomersIdTeamsNkPortalsGetWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkPortalsGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkPortalsGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/portals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkPortalsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Portal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Portal>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Portal>)));
            
        }

        /// <summary>
        /// Queries portals of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;Portal&gt;</returns>
        public async System.Threading.Tasks.Task<List<Portal>> CustomersIdTeamsNkPortalsGetAsync (string id, string nk, string filter = null)
        {
             ApiResponse<List<Portal>> localVarResponse = await CustomersIdTeamsNkPortalsGetAsyncWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries portals of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Portal&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Portal>>> CustomersIdTeamsNkPortalsGetAsyncWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkPortalsGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkPortalsGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/portals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkPortalsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Portal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Portal>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Portal>)));
            
        }

        /// <summary>
        /// Creates a new instance in portals of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Portal</returns>
        public Portal CustomersIdTeamsNkPortalsPost (string id, string nk, Portal data = null)
        {
             ApiResponse<Portal> localVarResponse = CustomersIdTeamsNkPortalsPostWithHttpInfo(id, nk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in portals of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        public ApiResponse< Portal > CustomersIdTeamsNkPortalsPostWithHttpInfo (string id, string nk, Portal data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkPortalsPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkPortalsPost");

            var localVarPath = "/Customers/{id}/teams/{nk}/portals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkPortalsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Creates a new instance in portals of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Portal</returns>
        public async System.Threading.Tasks.Task<Portal> CustomersIdTeamsNkPortalsPostAsync (string id, string nk, Portal data = null)
        {
             ApiResponse<Portal> localVarResponse = await CustomersIdTeamsNkPortalsPostAsyncWithHttpInfo(id, nk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in portals of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Portal>> CustomersIdTeamsNkPortalsPostAsyncWithHttpInfo (string id, string nk, Portal data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkPortalsPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkPortalsPost");

            var localVarPath = "/Customers/{id}/teams/{nk}/portals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkPortalsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Counts productMaterials of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 CustomersIdTeamsNkProductMaterialsCountGet (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = CustomersIdTeamsNkProductMaterialsCountGetWithHttpInfo(id, nk, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts productMaterials of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > CustomersIdTeamsNkProductMaterialsCountGetWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsCountGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/productMaterials/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductMaterialsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts productMaterials of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> CustomersIdTeamsNkProductMaterialsCountGetAsync (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await CustomersIdTeamsNkProductMaterialsCountGetAsyncWithHttpInfo(id, nk, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts productMaterials of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdTeamsNkProductMaterialsCountGetAsyncWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsCountGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/productMaterials/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductMaterialsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all productMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns></returns>
        public void CustomersIdTeamsNkProductMaterialsDelete (string id, string nk)
        {
             CustomersIdTeamsNkProductMaterialsDeleteWithHttpInfo(id, nk);
        }

        /// <summary>
        /// Deletes all productMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsNkProductMaterialsDeleteWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/productMaterials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductMaterialsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all productMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsNkProductMaterialsDeleteAsync (string id, string nk)
        {
             await CustomersIdTeamsNkProductMaterialsDeleteAsyncWithHttpInfo(id, nk);

        }

        /// <summary>
        /// Deletes all productMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkProductMaterialsDeleteAsyncWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/productMaterials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductMaterialsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for productMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productMaterials</param>
        /// <returns></returns>
        public void CustomersIdTeamsNkProductMaterialsFkDelete (string id, string nk, string fk)
        {
             CustomersIdTeamsNkProductMaterialsFkDeleteWithHttpInfo(id, nk, fk);
        }

        /// <summary>
        /// Delete a related item by id for productMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productMaterials</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsNkProductMaterialsFkDeleteWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsFkDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/productMaterials/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductMaterialsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for productMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productMaterials</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsNkProductMaterialsFkDeleteAsync (string id, string nk, string fk)
        {
             await CustomersIdTeamsNkProductMaterialsFkDeleteAsyncWithHttpInfo(id, nk, fk);

        }

        /// <summary>
        /// Delete a related item by id for productMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productMaterials</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkProductMaterialsFkDeleteAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsFkDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/productMaterials/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductMaterialsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for productMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productMaterials</param>
        /// <returns>ProductMaterial</returns>
        public ProductMaterial CustomersIdTeamsNkProductMaterialsFkGet (string id, string nk, string fk)
        {
             ApiResponse<ProductMaterial> localVarResponse = CustomersIdTeamsNkProductMaterialsFkGetWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for productMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productMaterials</param>
        /// <returns>ApiResponse of ProductMaterial</returns>
        public ApiResponse< ProductMaterial > CustomersIdTeamsNkProductMaterialsFkGetWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsFkGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/productMaterials/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductMaterialsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductMaterial)));
            
        }

        /// <summary>
        /// Find a related item by id for productMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productMaterials</param>
        /// <returns>Task of ProductMaterial</returns>
        public async System.Threading.Tasks.Task<ProductMaterial> CustomersIdTeamsNkProductMaterialsFkGetAsync (string id, string nk, string fk)
        {
             ApiResponse<ProductMaterial> localVarResponse = await CustomersIdTeamsNkProductMaterialsFkGetAsyncWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for productMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productMaterials</param>
        /// <returns>Task of ApiResponse (ProductMaterial)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductMaterial>> CustomersIdTeamsNkProductMaterialsFkGetAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsFkGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/productMaterials/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductMaterialsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductMaterial)));
            
        }

        /// <summary>
        /// Update a related item by id for productMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductMaterial</returns>
        public ProductMaterial CustomersIdTeamsNkProductMaterialsFkPut (string id, string nk, string fk, ProductMaterial data = null)
        {
             ApiResponse<ProductMaterial> localVarResponse = CustomersIdTeamsNkProductMaterialsFkPutWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for productMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductMaterial</returns>
        public ApiResponse< ProductMaterial > CustomersIdTeamsNkProductMaterialsFkPutWithHttpInfo (string id, string nk, string fk, ProductMaterial data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsFkPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/productMaterials/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductMaterialsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductMaterial)));
            
        }

        /// <summary>
        /// Update a related item by id for productMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductMaterial</returns>
        public async System.Threading.Tasks.Task<ProductMaterial> CustomersIdTeamsNkProductMaterialsFkPutAsync (string id, string nk, string fk, ProductMaterial data = null)
        {
             ApiResponse<ProductMaterial> localVarResponse = await CustomersIdTeamsNkProductMaterialsFkPutAsyncWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for productMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductMaterial)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductMaterial>> CustomersIdTeamsNkProductMaterialsFkPutAsyncWithHttpInfo (string id, string nk, string fk, ProductMaterial data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsFkPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/productMaterials/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductMaterialsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductMaterial)));
            
        }

        /// <summary>
        /// Queries productMaterials of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;ProductMaterial&gt;</returns>
        public List<ProductMaterial> CustomersIdTeamsNkProductMaterialsGet (string id, string nk, string filter = null)
        {
             ApiResponse<List<ProductMaterial>> localVarResponse = CustomersIdTeamsNkProductMaterialsGetWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries productMaterials of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductMaterial&gt;</returns>
        public ApiResponse< List<ProductMaterial> > CustomersIdTeamsNkProductMaterialsGetWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/productMaterials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductMaterialsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductMaterial>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductMaterial>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductMaterial>)));
            
        }

        /// <summary>
        /// Queries productMaterials of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;ProductMaterial&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductMaterial>> CustomersIdTeamsNkProductMaterialsGetAsync (string id, string nk, string filter = null)
        {
             ApiResponse<List<ProductMaterial>> localVarResponse = await CustomersIdTeamsNkProductMaterialsGetAsyncWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries productMaterials of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProductMaterial&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductMaterial>>> CustomersIdTeamsNkProductMaterialsGetAsyncWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/productMaterials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductMaterialsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductMaterial>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductMaterial>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductMaterial>)));
            
        }

        /// <summary>
        /// Creates a new instance in productMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductMaterial</returns>
        public ProductMaterial CustomersIdTeamsNkProductMaterialsPost (string id, string nk, ProductMaterial data = null)
        {
             ApiResponse<ProductMaterial> localVarResponse = CustomersIdTeamsNkProductMaterialsPostWithHttpInfo(id, nk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in productMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductMaterial</returns>
        public ApiResponse< ProductMaterial > CustomersIdTeamsNkProductMaterialsPostWithHttpInfo (string id, string nk, ProductMaterial data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsPost");

            var localVarPath = "/Customers/{id}/teams/{nk}/productMaterials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductMaterialsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductMaterial)));
            
        }

        /// <summary>
        /// Creates a new instance in productMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductMaterial</returns>
        public async System.Threading.Tasks.Task<ProductMaterial> CustomersIdTeamsNkProductMaterialsPostAsync (string id, string nk, ProductMaterial data = null)
        {
             ApiResponse<ProductMaterial> localVarResponse = await CustomersIdTeamsNkProductMaterialsPostAsyncWithHttpInfo(id, nk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in productMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductMaterial)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductMaterial>> CustomersIdTeamsNkProductMaterialsPostAsyncWithHttpInfo (string id, string nk, ProductMaterial data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductMaterialsPost");

            var localVarPath = "/Customers/{id}/teams/{nk}/productMaterials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductMaterialsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductMaterial)));
            
        }

        /// <summary>
        /// Counts productPdfColorProfiles of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 CustomersIdTeamsNkProductPdfColorProfilesCountGet (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = CustomersIdTeamsNkProductPdfColorProfilesCountGetWithHttpInfo(id, nk, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts productPdfColorProfiles of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > CustomersIdTeamsNkProductPdfColorProfilesCountGetWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductPdfColorProfilesCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductPdfColorProfilesCountGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/productPdfColorProfiles/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductPdfColorProfilesCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts productPdfColorProfiles of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> CustomersIdTeamsNkProductPdfColorProfilesCountGetAsync (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await CustomersIdTeamsNkProductPdfColorProfilesCountGetAsyncWithHttpInfo(id, nk, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts productPdfColorProfiles of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdTeamsNkProductPdfColorProfilesCountGetAsyncWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductPdfColorProfilesCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductPdfColorProfilesCountGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/productPdfColorProfiles/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductPdfColorProfilesCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all productPdfColorProfiles of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns></returns>
        public void CustomersIdTeamsNkProductPdfColorProfilesDelete (string id, string nk)
        {
             CustomersIdTeamsNkProductPdfColorProfilesDeleteWithHttpInfo(id, nk);
        }

        /// <summary>
        /// Deletes all productPdfColorProfiles of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsNkProductPdfColorProfilesDeleteWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductPdfColorProfilesDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductPdfColorProfilesDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/productPdfColorProfiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductPdfColorProfilesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all productPdfColorProfiles of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsNkProductPdfColorProfilesDeleteAsync (string id, string nk)
        {
             await CustomersIdTeamsNkProductPdfColorProfilesDeleteAsyncWithHttpInfo(id, nk);

        }

        /// <summary>
        /// Deletes all productPdfColorProfiles of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkProductPdfColorProfilesDeleteAsyncWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductPdfColorProfilesDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductPdfColorProfilesDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/productPdfColorProfiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductPdfColorProfilesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for productPdfColorProfiles. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productPdfColorProfiles</param>
        /// <returns></returns>
        public void CustomersIdTeamsNkProductPdfColorProfilesFkDelete (string id, string nk, string fk)
        {
             CustomersIdTeamsNkProductPdfColorProfilesFkDeleteWithHttpInfo(id, nk, fk);
        }

        /// <summary>
        /// Delete a related item by id for productPdfColorProfiles. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productPdfColorProfiles</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsNkProductPdfColorProfilesFkDeleteWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductPdfColorProfilesFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductPdfColorProfilesFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkProductPdfColorProfilesFkDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/productPdfColorProfiles/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductPdfColorProfilesFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for productPdfColorProfiles. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productPdfColorProfiles</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsNkProductPdfColorProfilesFkDeleteAsync (string id, string nk, string fk)
        {
             await CustomersIdTeamsNkProductPdfColorProfilesFkDeleteAsyncWithHttpInfo(id, nk, fk);

        }

        /// <summary>
        /// Delete a related item by id for productPdfColorProfiles. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productPdfColorProfiles</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkProductPdfColorProfilesFkDeleteAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductPdfColorProfilesFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductPdfColorProfilesFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkProductPdfColorProfilesFkDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/productPdfColorProfiles/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductPdfColorProfilesFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for productPdfColorProfiles. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productPdfColorProfiles</param>
        /// <returns>ProductPdfColorProfile</returns>
        public ProductPdfColorProfile CustomersIdTeamsNkProductPdfColorProfilesFkGet (string id, string nk, string fk)
        {
             ApiResponse<ProductPdfColorProfile> localVarResponse = CustomersIdTeamsNkProductPdfColorProfilesFkGetWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for productPdfColorProfiles. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productPdfColorProfiles</param>
        /// <returns>ApiResponse of ProductPdfColorProfile</returns>
        public ApiResponse< ProductPdfColorProfile > CustomersIdTeamsNkProductPdfColorProfilesFkGetWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductPdfColorProfilesFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductPdfColorProfilesFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkProductPdfColorProfilesFkGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/productPdfColorProfiles/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductPdfColorProfilesFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductPdfColorProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductPdfColorProfile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductPdfColorProfile)));
            
        }

        /// <summary>
        /// Find a related item by id for productPdfColorProfiles. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productPdfColorProfiles</param>
        /// <returns>Task of ProductPdfColorProfile</returns>
        public async System.Threading.Tasks.Task<ProductPdfColorProfile> CustomersIdTeamsNkProductPdfColorProfilesFkGetAsync (string id, string nk, string fk)
        {
             ApiResponse<ProductPdfColorProfile> localVarResponse = await CustomersIdTeamsNkProductPdfColorProfilesFkGetAsyncWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for productPdfColorProfiles. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productPdfColorProfiles</param>
        /// <returns>Task of ApiResponse (ProductPdfColorProfile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductPdfColorProfile>> CustomersIdTeamsNkProductPdfColorProfilesFkGetAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductPdfColorProfilesFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductPdfColorProfilesFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkProductPdfColorProfilesFkGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/productPdfColorProfiles/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductPdfColorProfilesFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductPdfColorProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductPdfColorProfile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductPdfColorProfile)));
            
        }

        /// <summary>
        /// Update a related item by id for productPdfColorProfiles. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productPdfColorProfiles</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductPdfColorProfile</returns>
        public ProductPdfColorProfile CustomersIdTeamsNkProductPdfColorProfilesFkPut (string id, string nk, string fk, ProductPdfColorProfile data = null)
        {
             ApiResponse<ProductPdfColorProfile> localVarResponse = CustomersIdTeamsNkProductPdfColorProfilesFkPutWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for productPdfColorProfiles. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productPdfColorProfiles</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductPdfColorProfile</returns>
        public ApiResponse< ProductPdfColorProfile > CustomersIdTeamsNkProductPdfColorProfilesFkPutWithHttpInfo (string id, string nk, string fk, ProductPdfColorProfile data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductPdfColorProfilesFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductPdfColorProfilesFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkProductPdfColorProfilesFkPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/productPdfColorProfiles/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductPdfColorProfilesFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductPdfColorProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductPdfColorProfile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductPdfColorProfile)));
            
        }

        /// <summary>
        /// Update a related item by id for productPdfColorProfiles. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productPdfColorProfiles</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductPdfColorProfile</returns>
        public async System.Threading.Tasks.Task<ProductPdfColorProfile> CustomersIdTeamsNkProductPdfColorProfilesFkPutAsync (string id, string nk, string fk, ProductPdfColorProfile data = null)
        {
             ApiResponse<ProductPdfColorProfile> localVarResponse = await CustomersIdTeamsNkProductPdfColorProfilesFkPutAsyncWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for productPdfColorProfiles. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productPdfColorProfiles</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductPdfColorProfile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductPdfColorProfile>> CustomersIdTeamsNkProductPdfColorProfilesFkPutAsyncWithHttpInfo (string id, string nk, string fk, ProductPdfColorProfile data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductPdfColorProfilesFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductPdfColorProfilesFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkProductPdfColorProfilesFkPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/productPdfColorProfiles/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductPdfColorProfilesFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductPdfColorProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductPdfColorProfile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductPdfColorProfile)));
            
        }

        /// <summary>
        /// Queries productPdfColorProfiles of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;ProductPdfColorProfile&gt;</returns>
        public List<ProductPdfColorProfile> CustomersIdTeamsNkProductPdfColorProfilesGet (string id, string nk, string filter = null)
        {
             ApiResponse<List<ProductPdfColorProfile>> localVarResponse = CustomersIdTeamsNkProductPdfColorProfilesGetWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries productPdfColorProfiles of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductPdfColorProfile&gt;</returns>
        public ApiResponse< List<ProductPdfColorProfile> > CustomersIdTeamsNkProductPdfColorProfilesGetWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductPdfColorProfilesGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductPdfColorProfilesGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/productPdfColorProfiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductPdfColorProfilesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductPdfColorProfile>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductPdfColorProfile>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductPdfColorProfile>)));
            
        }

        /// <summary>
        /// Queries productPdfColorProfiles of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;ProductPdfColorProfile&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductPdfColorProfile>> CustomersIdTeamsNkProductPdfColorProfilesGetAsync (string id, string nk, string filter = null)
        {
             ApiResponse<List<ProductPdfColorProfile>> localVarResponse = await CustomersIdTeamsNkProductPdfColorProfilesGetAsyncWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries productPdfColorProfiles of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProductPdfColorProfile&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductPdfColorProfile>>> CustomersIdTeamsNkProductPdfColorProfilesGetAsyncWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductPdfColorProfilesGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductPdfColorProfilesGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/productPdfColorProfiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductPdfColorProfilesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductPdfColorProfile>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductPdfColorProfile>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductPdfColorProfile>)));
            
        }

        /// <summary>
        /// Counts productSizeMaterials of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 CustomersIdTeamsNkProductSizeMaterialsCountGet (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = CustomersIdTeamsNkProductSizeMaterialsCountGetWithHttpInfo(id, nk, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts productSizeMaterials of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > CustomersIdTeamsNkProductSizeMaterialsCountGetWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsCountGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/productSizeMaterials/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductSizeMaterialsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts productSizeMaterials of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> CustomersIdTeamsNkProductSizeMaterialsCountGetAsync (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await CustomersIdTeamsNkProductSizeMaterialsCountGetAsyncWithHttpInfo(id, nk, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts productSizeMaterials of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdTeamsNkProductSizeMaterialsCountGetAsyncWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsCountGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/productSizeMaterials/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductSizeMaterialsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all productSizeMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns></returns>
        public void CustomersIdTeamsNkProductSizeMaterialsDelete (string id, string nk)
        {
             CustomersIdTeamsNkProductSizeMaterialsDeleteWithHttpInfo(id, nk);
        }

        /// <summary>
        /// Deletes all productSizeMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsNkProductSizeMaterialsDeleteWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/productSizeMaterials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductSizeMaterialsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all productSizeMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsNkProductSizeMaterialsDeleteAsync (string id, string nk)
        {
             await CustomersIdTeamsNkProductSizeMaterialsDeleteAsyncWithHttpInfo(id, nk);

        }

        /// <summary>
        /// Deletes all productSizeMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkProductSizeMaterialsDeleteAsyncWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/productSizeMaterials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductSizeMaterialsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for productSizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns></returns>
        public void CustomersIdTeamsNkProductSizeMaterialsFkDelete (string id, string nk, string fk)
        {
             CustomersIdTeamsNkProductSizeMaterialsFkDeleteWithHttpInfo(id, nk, fk);
        }

        /// <summary>
        /// Delete a related item by id for productSizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsNkProductSizeMaterialsFkDeleteWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsFkDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/productSizeMaterials/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductSizeMaterialsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for productSizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsNkProductSizeMaterialsFkDeleteAsync (string id, string nk, string fk)
        {
             await CustomersIdTeamsNkProductSizeMaterialsFkDeleteAsyncWithHttpInfo(id, nk, fk);

        }

        /// <summary>
        /// Delete a related item by id for productSizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkProductSizeMaterialsFkDeleteAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsFkDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/productSizeMaterials/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductSizeMaterialsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for productSizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>ProductSizeMaterial</returns>
        public ProductSizeMaterial CustomersIdTeamsNkProductSizeMaterialsFkGet (string id, string nk, string fk)
        {
             ApiResponse<ProductSizeMaterial> localVarResponse = CustomersIdTeamsNkProductSizeMaterialsFkGetWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for productSizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>ApiResponse of ProductSizeMaterial</returns>
        public ApiResponse< ProductSizeMaterial > CustomersIdTeamsNkProductSizeMaterialsFkGetWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsFkGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/productSizeMaterials/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductSizeMaterialsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSizeMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSizeMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSizeMaterial)));
            
        }

        /// <summary>
        /// Find a related item by id for productSizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>Task of ProductSizeMaterial</returns>
        public async System.Threading.Tasks.Task<ProductSizeMaterial> CustomersIdTeamsNkProductSizeMaterialsFkGetAsync (string id, string nk, string fk)
        {
             ApiResponse<ProductSizeMaterial> localVarResponse = await CustomersIdTeamsNkProductSizeMaterialsFkGetAsyncWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for productSizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>Task of ApiResponse (ProductSizeMaterial)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductSizeMaterial>> CustomersIdTeamsNkProductSizeMaterialsFkGetAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsFkGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/productSizeMaterials/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductSizeMaterialsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSizeMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSizeMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSizeMaterial)));
            
        }

        /// <summary>
        /// Update a related item by id for productSizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductSizeMaterial</returns>
        public ProductSizeMaterial CustomersIdTeamsNkProductSizeMaterialsFkPut (string id, string nk, string fk, ProductSizeMaterial data = null)
        {
             ApiResponse<ProductSizeMaterial> localVarResponse = CustomersIdTeamsNkProductSizeMaterialsFkPutWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for productSizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductSizeMaterial</returns>
        public ApiResponse< ProductSizeMaterial > CustomersIdTeamsNkProductSizeMaterialsFkPutWithHttpInfo (string id, string nk, string fk, ProductSizeMaterial data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsFkPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/productSizeMaterials/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductSizeMaterialsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSizeMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSizeMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSizeMaterial)));
            
        }

        /// <summary>
        /// Update a related item by id for productSizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductSizeMaterial</returns>
        public async System.Threading.Tasks.Task<ProductSizeMaterial> CustomersIdTeamsNkProductSizeMaterialsFkPutAsync (string id, string nk, string fk, ProductSizeMaterial data = null)
        {
             ApiResponse<ProductSizeMaterial> localVarResponse = await CustomersIdTeamsNkProductSizeMaterialsFkPutAsyncWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for productSizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductSizeMaterial)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductSizeMaterial>> CustomersIdTeamsNkProductSizeMaterialsFkPutAsyncWithHttpInfo (string id, string nk, string fk, ProductSizeMaterial data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsFkPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/productSizeMaterials/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductSizeMaterialsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSizeMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSizeMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSizeMaterial)));
            
        }

        /// <summary>
        /// Queries productSizeMaterials of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;ProductSizeMaterial&gt;</returns>
        public List<ProductSizeMaterial> CustomersIdTeamsNkProductSizeMaterialsGet (string id, string nk, string filter = null)
        {
             ApiResponse<List<ProductSizeMaterial>> localVarResponse = CustomersIdTeamsNkProductSizeMaterialsGetWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries productSizeMaterials of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductSizeMaterial&gt;</returns>
        public ApiResponse< List<ProductSizeMaterial> > CustomersIdTeamsNkProductSizeMaterialsGetWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/productSizeMaterials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductSizeMaterialsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductSizeMaterial>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductSizeMaterial>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductSizeMaterial>)));
            
        }

        /// <summary>
        /// Queries productSizeMaterials of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;ProductSizeMaterial&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductSizeMaterial>> CustomersIdTeamsNkProductSizeMaterialsGetAsync (string id, string nk, string filter = null)
        {
             ApiResponse<List<ProductSizeMaterial>> localVarResponse = await CustomersIdTeamsNkProductSizeMaterialsGetAsyncWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries productSizeMaterials of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProductSizeMaterial&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductSizeMaterial>>> CustomersIdTeamsNkProductSizeMaterialsGetAsyncWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/productSizeMaterials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductSizeMaterialsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductSizeMaterial>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductSizeMaterial>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductSizeMaterial>)));
            
        }

        /// <summary>
        /// Creates a new instance in productSizeMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductSizeMaterial</returns>
        public ProductSizeMaterial CustomersIdTeamsNkProductSizeMaterialsPost (string id, string nk, ProductSizeMaterial data = null)
        {
             ApiResponse<ProductSizeMaterial> localVarResponse = CustomersIdTeamsNkProductSizeMaterialsPostWithHttpInfo(id, nk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in productSizeMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductSizeMaterial</returns>
        public ApiResponse< ProductSizeMaterial > CustomersIdTeamsNkProductSizeMaterialsPostWithHttpInfo (string id, string nk, ProductSizeMaterial data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsPost");

            var localVarPath = "/Customers/{id}/teams/{nk}/productSizeMaterials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductSizeMaterialsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSizeMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSizeMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSizeMaterial)));
            
        }

        /// <summary>
        /// Creates a new instance in productSizeMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductSizeMaterial</returns>
        public async System.Threading.Tasks.Task<ProductSizeMaterial> CustomersIdTeamsNkProductSizeMaterialsPostAsync (string id, string nk, ProductSizeMaterial data = null)
        {
             ApiResponse<ProductSizeMaterial> localVarResponse = await CustomersIdTeamsNkProductSizeMaterialsPostAsyncWithHttpInfo(id, nk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in productSizeMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductSizeMaterial)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductSizeMaterial>> CustomersIdTeamsNkProductSizeMaterialsPostAsyncWithHttpInfo (string id, string nk, ProductSizeMaterial data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkProductSizeMaterialsPost");

            var localVarPath = "/Customers/{id}/teams/{nk}/productSizeMaterials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkProductSizeMaterialsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSizeMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSizeMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSizeMaterial)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation teamData. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>DynamicData</returns>
        public DynamicData CustomersIdTeamsNkTeamDataGet (string id, string nk, bool? refresh = null)
        {
             ApiResponse<DynamicData> localVarResponse = CustomersIdTeamsNkTeamDataGetWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches belongsTo relation teamData. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of DynamicData</returns>
        public ApiResponse< DynamicData > CustomersIdTeamsNkTeamDataGetWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTeamDataGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTeamDataGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/teamData";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTeamDataGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DynamicData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DynamicData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DynamicData)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation teamData. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of DynamicData</returns>
        public async System.Threading.Tasks.Task<DynamicData> CustomersIdTeamsNkTeamDataGetAsync (string id, string nk, bool? refresh = null)
        {
             ApiResponse<DynamicData> localVarResponse = await CustomersIdTeamsNkTeamDataGetAsyncWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches belongsTo relation teamData. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (DynamicData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DynamicData>> CustomersIdTeamsNkTeamDataGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTeamDataGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTeamDataGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/teamData";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTeamDataGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DynamicData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DynamicData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DynamicData)));
            
        }

        /// <summary>
        /// Counts teamMembers of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 CustomersIdTeamsNkTeamMembersCountGet (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = CustomersIdTeamsNkTeamMembersCountGetWithHttpInfo(id, nk, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts teamMembers of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > CustomersIdTeamsNkTeamMembersCountGetWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTeamMembersCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTeamMembersCountGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/teamMembers/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTeamMembersCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts teamMembers of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> CustomersIdTeamsNkTeamMembersCountGetAsync (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await CustomersIdTeamsNkTeamMembersCountGetAsyncWithHttpInfo(id, nk, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts teamMembers of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdTeamsNkTeamMembersCountGetAsyncWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTeamMembersCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTeamMembersCountGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/teamMembers/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTeamMembersCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all teamMembers of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns></returns>
        public void CustomersIdTeamsNkTeamMembersDelete (string id, string nk)
        {
             CustomersIdTeamsNkTeamMembersDeleteWithHttpInfo(id, nk);
        }

        /// <summary>
        /// Deletes all teamMembers of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsNkTeamMembersDeleteWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTeamMembersDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTeamMembersDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/teamMembers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTeamMembersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all teamMembers of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsNkTeamMembersDeleteAsync (string id, string nk)
        {
             await CustomersIdTeamsNkTeamMembersDeleteAsyncWithHttpInfo(id, nk);

        }

        /// <summary>
        /// Deletes all teamMembers of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkTeamMembersDeleteAsyncWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTeamMembersDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTeamMembersDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/teamMembers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTeamMembersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for teamMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for teamMembers</param>
        /// <returns></returns>
        public void CustomersIdTeamsNkTeamMembersFkDelete (string id, string nk, string fk)
        {
             CustomersIdTeamsNkTeamMembersFkDeleteWithHttpInfo(id, nk, fk);
        }

        /// <summary>
        /// Delete a related item by id for teamMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for teamMembers</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsNkTeamMembersFkDeleteWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTeamMembersFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTeamMembersFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkTeamMembersFkDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/teamMembers/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTeamMembersFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for teamMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for teamMembers</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsNkTeamMembersFkDeleteAsync (string id, string nk, string fk)
        {
             await CustomersIdTeamsNkTeamMembersFkDeleteAsyncWithHttpInfo(id, nk, fk);

        }

        /// <summary>
        /// Delete a related item by id for teamMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for teamMembers</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkTeamMembersFkDeleteAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTeamMembersFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTeamMembersFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkTeamMembersFkDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/teamMembers/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTeamMembersFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for teamMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for teamMembers</param>
        /// <returns>TeamMember</returns>
        public TeamMember CustomersIdTeamsNkTeamMembersFkGet (string id, string nk, string fk)
        {
             ApiResponse<TeamMember> localVarResponse = CustomersIdTeamsNkTeamMembersFkGetWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for teamMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for teamMembers</param>
        /// <returns>ApiResponse of TeamMember</returns>
        public ApiResponse< TeamMember > CustomersIdTeamsNkTeamMembersFkGetWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTeamMembersFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTeamMembersFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkTeamMembersFkGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/teamMembers/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTeamMembersFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Find a related item by id for teamMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for teamMembers</param>
        /// <returns>Task of TeamMember</returns>
        public async System.Threading.Tasks.Task<TeamMember> CustomersIdTeamsNkTeamMembersFkGetAsync (string id, string nk, string fk)
        {
             ApiResponse<TeamMember> localVarResponse = await CustomersIdTeamsNkTeamMembersFkGetAsyncWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for teamMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for teamMembers</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMember>> CustomersIdTeamsNkTeamMembersFkGetAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTeamMembersFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTeamMembersFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkTeamMembersFkGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/teamMembers/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTeamMembersFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Update a related item by id for teamMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for teamMembers</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamMember</returns>
        public TeamMember CustomersIdTeamsNkTeamMembersFkPut (string id, string nk, string fk, TeamMember data = null)
        {
             ApiResponse<TeamMember> localVarResponse = CustomersIdTeamsNkTeamMembersFkPutWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for teamMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for teamMembers</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        public ApiResponse< TeamMember > CustomersIdTeamsNkTeamMembersFkPutWithHttpInfo (string id, string nk, string fk, TeamMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTeamMembersFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTeamMembersFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkTeamMembersFkPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/teamMembers/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTeamMembersFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Update a related item by id for teamMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for teamMembers</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamMember</returns>
        public async System.Threading.Tasks.Task<TeamMember> CustomersIdTeamsNkTeamMembersFkPutAsync (string id, string nk, string fk, TeamMember data = null)
        {
             ApiResponse<TeamMember> localVarResponse = await CustomersIdTeamsNkTeamMembersFkPutAsyncWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for teamMembers. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for teamMembers</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMember>> CustomersIdTeamsNkTeamMembersFkPutAsyncWithHttpInfo (string id, string nk, string fk, TeamMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTeamMembersFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTeamMembersFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkTeamMembersFkPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/teamMembers/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTeamMembersFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Queries teamMembers of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;TeamMember&gt;</returns>
        public List<TeamMember> CustomersIdTeamsNkTeamMembersGet (string id, string nk, string filter = null)
        {
             ApiResponse<List<TeamMember>> localVarResponse = CustomersIdTeamsNkTeamMembersGetWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries teamMembers of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamMember&gt;</returns>
        public ApiResponse< List<TeamMember> > CustomersIdTeamsNkTeamMembersGetWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTeamMembersGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTeamMembersGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/teamMembers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTeamMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TeamMember>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TeamMember>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamMember>)));
            
        }

        /// <summary>
        /// Queries teamMembers of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;TeamMember&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamMember>> CustomersIdTeamsNkTeamMembersGetAsync (string id, string nk, string filter = null)
        {
             ApiResponse<List<TeamMember>> localVarResponse = await CustomersIdTeamsNkTeamMembersGetAsyncWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries teamMembers of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamMember&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TeamMember>>> CustomersIdTeamsNkTeamMembersGetAsyncWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTeamMembersGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTeamMembersGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/teamMembers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTeamMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TeamMember>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TeamMember>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamMember>)));
            
        }

        /// <summary>
        /// Creates a new instance in teamMembers of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamMember</returns>
        public TeamMember CustomersIdTeamsNkTeamMembersPost (string id, string nk, TeamMember data = null)
        {
             ApiResponse<TeamMember> localVarResponse = CustomersIdTeamsNkTeamMembersPostWithHttpInfo(id, nk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in teamMembers of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        public ApiResponse< TeamMember > CustomersIdTeamsNkTeamMembersPostWithHttpInfo (string id, string nk, TeamMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTeamMembersPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTeamMembersPost");

            var localVarPath = "/Customers/{id}/teams/{nk}/teamMembers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTeamMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Creates a new instance in teamMembers of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamMember</returns>
        public async System.Threading.Tasks.Task<TeamMember> CustomersIdTeamsNkTeamMembersPostAsync (string id, string nk, TeamMember data = null)
        {
             ApiResponse<TeamMember> localVarResponse = await CustomersIdTeamsNkTeamMembersPostAsyncWithHttpInfo(id, nk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in teamMembers of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMember>> CustomersIdTeamsNkTeamMembersPostAsyncWithHttpInfo (string id, string nk, TeamMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTeamMembersPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTeamMembersPost");

            var localVarPath = "/Customers/{id}/teams/{nk}/teamMembers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTeamMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Counts templateFolders of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 CustomersIdTeamsNkTemplateFoldersCountGet (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = CustomersIdTeamsNkTemplateFoldersCountGetWithHttpInfo(id, nk, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts templateFolders of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > CustomersIdTeamsNkTemplateFoldersCountGetWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersCountGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/templateFolders/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTemplateFoldersCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts templateFolders of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> CustomersIdTeamsNkTemplateFoldersCountGetAsync (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await CustomersIdTeamsNkTemplateFoldersCountGetAsyncWithHttpInfo(id, nk, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts templateFolders of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdTeamsNkTemplateFoldersCountGetAsyncWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersCountGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/templateFolders/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTemplateFoldersCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all templateFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns></returns>
        public void CustomersIdTeamsNkTemplateFoldersDelete (string id, string nk)
        {
             CustomersIdTeamsNkTemplateFoldersDeleteWithHttpInfo(id, nk);
        }

        /// <summary>
        /// Deletes all templateFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsNkTemplateFoldersDeleteWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/templateFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTemplateFoldersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all templateFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsNkTemplateFoldersDeleteAsync (string id, string nk)
        {
             await CustomersIdTeamsNkTemplateFoldersDeleteAsyncWithHttpInfo(id, nk);

        }

        /// <summary>
        /// Deletes all templateFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkTemplateFoldersDeleteAsyncWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/templateFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTemplateFoldersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for templateFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns></returns>
        public void CustomersIdTeamsNkTemplateFoldersFkDelete (string id, string nk, string fk)
        {
             CustomersIdTeamsNkTemplateFoldersFkDeleteWithHttpInfo(id, nk, fk);
        }

        /// <summary>
        /// Delete a related item by id for templateFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsNkTemplateFoldersFkDeleteWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersFkDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/templateFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTemplateFoldersFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for templateFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsNkTemplateFoldersFkDeleteAsync (string id, string nk, string fk)
        {
             await CustomersIdTeamsNkTemplateFoldersFkDeleteAsyncWithHttpInfo(id, nk, fk);

        }

        /// <summary>
        /// Delete a related item by id for templateFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkTemplateFoldersFkDeleteAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersFkDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/templateFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTemplateFoldersFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for templateFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns>TeamTemplateFolder</returns>
        public TeamTemplateFolder CustomersIdTeamsNkTemplateFoldersFkGet (string id, string nk, string fk)
        {
             ApiResponse<TeamTemplateFolder> localVarResponse = CustomersIdTeamsNkTemplateFoldersFkGetWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for templateFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns>ApiResponse of TeamTemplateFolder</returns>
        public ApiResponse< TeamTemplateFolder > CustomersIdTeamsNkTemplateFoldersFkGetWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersFkGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/templateFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTemplateFoldersFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamTemplateFolder)));
            
        }

        /// <summary>
        /// Find a related item by id for templateFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns>Task of TeamTemplateFolder</returns>
        public async System.Threading.Tasks.Task<TeamTemplateFolder> CustomersIdTeamsNkTemplateFoldersFkGetAsync (string id, string nk, string fk)
        {
             ApiResponse<TeamTemplateFolder> localVarResponse = await CustomersIdTeamsNkTemplateFoldersFkGetAsyncWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for templateFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <returns>Task of ApiResponse (TeamTemplateFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamTemplateFolder>> CustomersIdTeamsNkTemplateFoldersFkGetAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersFkGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/templateFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTemplateFoldersFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamTemplateFolder)));
            
        }

        /// <summary>
        /// Update a related item by id for templateFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamTemplateFolder</returns>
        public TeamTemplateFolder CustomersIdTeamsNkTemplateFoldersFkPut (string id, string nk, string fk, TeamTemplateFolder data = null)
        {
             ApiResponse<TeamTemplateFolder> localVarResponse = CustomersIdTeamsNkTemplateFoldersFkPutWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for templateFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamTemplateFolder</returns>
        public ApiResponse< TeamTemplateFolder > CustomersIdTeamsNkTemplateFoldersFkPutWithHttpInfo (string id, string nk, string fk, TeamTemplateFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersFkPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/templateFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTemplateFoldersFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamTemplateFolder)));
            
        }

        /// <summary>
        /// Update a related item by id for templateFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamTemplateFolder</returns>
        public async System.Threading.Tasks.Task<TeamTemplateFolder> CustomersIdTeamsNkTemplateFoldersFkPutAsync (string id, string nk, string fk, TeamTemplateFolder data = null)
        {
             ApiResponse<TeamTemplateFolder> localVarResponse = await CustomersIdTeamsNkTemplateFoldersFkPutAsyncWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for templateFolders. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templateFolders</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamTemplateFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamTemplateFolder>> CustomersIdTeamsNkTemplateFoldersFkPutAsyncWithHttpInfo (string id, string nk, string fk, TeamTemplateFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersFkPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/templateFolders/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTemplateFoldersFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamTemplateFolder)));
            
        }

        /// <summary>
        /// Queries templateFolders of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;TeamTemplateFolder&gt;</returns>
        public List<TeamTemplateFolder> CustomersIdTeamsNkTemplateFoldersGet (string id, string nk, string filter = null)
        {
             ApiResponse<List<TeamTemplateFolder>> localVarResponse = CustomersIdTeamsNkTemplateFoldersGetWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries templateFolders of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamTemplateFolder&gt;</returns>
        public ApiResponse< List<TeamTemplateFolder> > CustomersIdTeamsNkTemplateFoldersGetWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/templateFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTemplateFoldersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TeamTemplateFolder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TeamTemplateFolder>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamTemplateFolder>)));
            
        }

        /// <summary>
        /// Queries templateFolders of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;TeamTemplateFolder&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamTemplateFolder>> CustomersIdTeamsNkTemplateFoldersGetAsync (string id, string nk, string filter = null)
        {
             ApiResponse<List<TeamTemplateFolder>> localVarResponse = await CustomersIdTeamsNkTemplateFoldersGetAsyncWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries templateFolders of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamTemplateFolder&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TeamTemplateFolder>>> CustomersIdTeamsNkTemplateFoldersGetAsyncWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/templateFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTemplateFoldersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TeamTemplateFolder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TeamTemplateFolder>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamTemplateFolder>)));
            
        }

        /// <summary>
        /// Creates a new instance in templateFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamTemplateFolder</returns>
        public TeamTemplateFolder CustomersIdTeamsNkTemplateFoldersPost (string id, string nk, TeamTemplateFolder data = null)
        {
             ApiResponse<TeamTemplateFolder> localVarResponse = CustomersIdTeamsNkTemplateFoldersPostWithHttpInfo(id, nk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in templateFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamTemplateFolder</returns>
        public ApiResponse< TeamTemplateFolder > CustomersIdTeamsNkTemplateFoldersPostWithHttpInfo (string id, string nk, TeamTemplateFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersPost");

            var localVarPath = "/Customers/{id}/teams/{nk}/templateFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTemplateFoldersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamTemplateFolder)));
            
        }

        /// <summary>
        /// Creates a new instance in templateFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamTemplateFolder</returns>
        public async System.Threading.Tasks.Task<TeamTemplateFolder> CustomersIdTeamsNkTemplateFoldersPostAsync (string id, string nk, TeamTemplateFolder data = null)
        {
             ApiResponse<TeamTemplateFolder> localVarResponse = await CustomersIdTeamsNkTemplateFoldersPostAsyncWithHttpInfo(id, nk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in templateFolders of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamTemplateFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamTemplateFolder>> CustomersIdTeamsNkTemplateFoldersPostAsyncWithHttpInfo (string id, string nk, TeamTemplateFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTemplateFoldersPost");

            var localVarPath = "/Customers/{id}/teams/{nk}/templateFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTemplateFoldersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamTemplateFolder)));
            
        }

        /// <summary>
        /// Counts templates of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 CustomersIdTeamsNkTemplatesCountGet (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = CustomersIdTeamsNkTemplatesCountGetWithHttpInfo(id, nk, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts templates of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > CustomersIdTeamsNkTemplatesCountGetWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTemplatesCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTemplatesCountGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/templates/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTemplatesCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts templates of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> CustomersIdTeamsNkTemplatesCountGetAsync (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await CustomersIdTeamsNkTemplatesCountGetAsyncWithHttpInfo(id, nk, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts templates of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdTeamsNkTemplatesCountGetAsyncWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTemplatesCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTemplatesCountGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/templates/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTemplatesCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all templates of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns></returns>
        public void CustomersIdTeamsNkTemplatesDelete (string id, string nk)
        {
             CustomersIdTeamsNkTemplatesDeleteWithHttpInfo(id, nk);
        }

        /// <summary>
        /// Deletes all templates of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsNkTemplatesDeleteWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTemplatesDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTemplatesDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTemplatesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all templates of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsNkTemplatesDeleteAsync (string id, string nk)
        {
             await CustomersIdTeamsNkTemplatesDeleteAsyncWithHttpInfo(id, nk);

        }

        /// <summary>
        /// Deletes all templates of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkTemplatesDeleteAsyncWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTemplatesDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTemplatesDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTemplatesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns></returns>
        public void CustomersIdTeamsNkTemplatesFkDelete (string id, string nk, string fk)
        {
             CustomersIdTeamsNkTemplatesFkDeleteWithHttpInfo(id, nk, fk);
        }

        /// <summary>
        /// Delete a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsNkTemplatesFkDeleteWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTemplatesFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTemplatesFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkTemplatesFkDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/templates/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTemplatesFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsNkTemplatesFkDeleteAsync (string id, string nk, string fk)
        {
             await CustomersIdTeamsNkTemplatesFkDeleteAsyncWithHttpInfo(id, nk, fk);

        }

        /// <summary>
        /// Delete a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkTemplatesFkDeleteAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTemplatesFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTemplatesFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkTemplatesFkDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/templates/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTemplatesFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Template</returns>
        public Template CustomersIdTeamsNkTemplatesFkGet (string id, string nk, string fk)
        {
             ApiResponse<Template> localVarResponse = CustomersIdTeamsNkTemplatesFkGetWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse< Template > CustomersIdTeamsNkTemplatesFkGetWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTemplatesFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTemplatesFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkTemplatesFkGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/templates/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTemplatesFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Find a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> CustomersIdTeamsNkTemplatesFkGetAsync (string id, string nk, string fk)
        {
             ApiResponse<Template> localVarResponse = await CustomersIdTeamsNkTemplatesFkGetAsyncWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template>> CustomersIdTeamsNkTemplatesFkGetAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTemplatesFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTemplatesFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkTemplatesFkGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/templates/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTemplatesFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Update a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Template</returns>
        public Template CustomersIdTeamsNkTemplatesFkPut (string id, string nk, string fk, Template data = null)
        {
             ApiResponse<Template> localVarResponse = CustomersIdTeamsNkTemplatesFkPutWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse< Template > CustomersIdTeamsNkTemplatesFkPutWithHttpInfo (string id, string nk, string fk, Template data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTemplatesFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTemplatesFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkTemplatesFkPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/templates/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTemplatesFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Update a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> CustomersIdTeamsNkTemplatesFkPutAsync (string id, string nk, string fk, Template data = null)
        {
             ApiResponse<Template> localVarResponse = await CustomersIdTeamsNkTemplatesFkPutAsyncWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template>> CustomersIdTeamsNkTemplatesFkPutAsyncWithHttpInfo (string id, string nk, string fk, Template data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTemplatesFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTemplatesFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkTemplatesFkPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/templates/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTemplatesFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Queries templates of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;Template&gt;</returns>
        public List<Template> CustomersIdTeamsNkTemplatesGet (string id, string nk, string filter = null)
        {
             ApiResponse<List<Template>> localVarResponse = CustomersIdTeamsNkTemplatesGetWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries templates of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Template&gt;</returns>
        public ApiResponse< List<Template> > CustomersIdTeamsNkTemplatesGetWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTemplatesGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTemplatesGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTemplatesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Template>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Template>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Template>)));
            
        }

        /// <summary>
        /// Queries templates of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;Template&gt;</returns>
        public async System.Threading.Tasks.Task<List<Template>> CustomersIdTeamsNkTemplatesGetAsync (string id, string nk, string filter = null)
        {
             ApiResponse<List<Template>> localVarResponse = await CustomersIdTeamsNkTemplatesGetAsyncWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries templates of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Template&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Template>>> CustomersIdTeamsNkTemplatesGetAsyncWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTemplatesGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTemplatesGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTemplatesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Template>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Template>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Template>)));
            
        }

        /// <summary>
        /// Creates a new instance in templates of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Template</returns>
        public Template CustomersIdTeamsNkTemplatesPost (string id, string nk, Template data = null)
        {
             ApiResponse<Template> localVarResponse = CustomersIdTeamsNkTemplatesPostWithHttpInfo(id, nk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in templates of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse< Template > CustomersIdTeamsNkTemplatesPostWithHttpInfo (string id, string nk, Template data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTemplatesPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTemplatesPost");

            var localVarPath = "/Customers/{id}/teams/{nk}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTemplatesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Creates a new instance in templates of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> CustomersIdTeamsNkTemplatesPostAsync (string id, string nk, Template data = null)
        {
             ApiResponse<Template> localVarResponse = await CustomersIdTeamsNkTemplatesPostAsyncWithHttpInfo(id, nk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in templates of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template>> CustomersIdTeamsNkTemplatesPostAsyncWithHttpInfo (string id, string nk, Template data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkTemplatesPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkTemplatesPost");

            var localVarPath = "/Customers/{id}/teams/{nk}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkTemplatesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Counts workflows of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 CustomersIdTeamsNkWorkflowsCountGet (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = CustomersIdTeamsNkWorkflowsCountGetWithHttpInfo(id, nk, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts workflows of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > CustomersIdTeamsNkWorkflowsCountGetWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkWorkflowsCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkWorkflowsCountGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/workflows/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkWorkflowsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts workflows of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> CustomersIdTeamsNkWorkflowsCountGetAsync (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await CustomersIdTeamsNkWorkflowsCountGetAsyncWithHttpInfo(id, nk, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts workflows of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CustomersIdTeamsNkWorkflowsCountGetAsyncWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkWorkflowsCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkWorkflowsCountGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/workflows/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkWorkflowsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all workflows of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns></returns>
        public void CustomersIdTeamsNkWorkflowsDelete (string id, string nk)
        {
             CustomersIdTeamsNkWorkflowsDeleteWithHttpInfo(id, nk);
        }

        /// <summary>
        /// Deletes all workflows of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsNkWorkflowsDeleteWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkWorkflowsDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkWorkflowsDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/workflows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkWorkflowsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all workflows of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsNkWorkflowsDeleteAsync (string id, string nk)
        {
             await CustomersIdTeamsNkWorkflowsDeleteAsyncWithHttpInfo(id, nk);

        }

        /// <summary>
        /// Deletes all workflows of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkWorkflowsDeleteAsyncWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkWorkflowsDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkWorkflowsDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/workflows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkWorkflowsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for workflows. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for workflows</param>
        /// <returns></returns>
        public void CustomersIdTeamsNkWorkflowsFkDelete (string id, string nk, string fk)
        {
             CustomersIdTeamsNkWorkflowsFkDeleteWithHttpInfo(id, nk, fk);
        }

        /// <summary>
        /// Delete a related item by id for workflows. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for workflows</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsNkWorkflowsFkDeleteWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkWorkflowsFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkWorkflowsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkWorkflowsFkDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/workflows/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkWorkflowsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for workflows. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for workflows</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsNkWorkflowsFkDeleteAsync (string id, string nk, string fk)
        {
             await CustomersIdTeamsNkWorkflowsFkDeleteAsyncWithHttpInfo(id, nk, fk);

        }

        /// <summary>
        /// Delete a related item by id for workflows. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for workflows</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsNkWorkflowsFkDeleteAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkWorkflowsFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkWorkflowsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkWorkflowsFkDelete");

            var localVarPath = "/Customers/{id}/teams/{nk}/workflows/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkWorkflowsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for workflows. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for workflows</param>
        /// <returns>Workflow</returns>
        public Workflow CustomersIdTeamsNkWorkflowsFkGet (string id, string nk, string fk)
        {
             ApiResponse<Workflow> localVarResponse = CustomersIdTeamsNkWorkflowsFkGetWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for workflows. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for workflows</param>
        /// <returns>ApiResponse of Workflow</returns>
        public ApiResponse< Workflow > CustomersIdTeamsNkWorkflowsFkGetWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkWorkflowsFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkWorkflowsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkWorkflowsFkGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/workflows/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkWorkflowsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Workflow>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Workflow) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Workflow)));
            
        }

        /// <summary>
        /// Find a related item by id for workflows. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for workflows</param>
        /// <returns>Task of Workflow</returns>
        public async System.Threading.Tasks.Task<Workflow> CustomersIdTeamsNkWorkflowsFkGetAsync (string id, string nk, string fk)
        {
             ApiResponse<Workflow> localVarResponse = await CustomersIdTeamsNkWorkflowsFkGetAsyncWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for workflows. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for workflows</param>
        /// <returns>Task of ApiResponse (Workflow)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Workflow>> CustomersIdTeamsNkWorkflowsFkGetAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkWorkflowsFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkWorkflowsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkWorkflowsFkGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/workflows/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkWorkflowsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Workflow>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Workflow) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Workflow)));
            
        }

        /// <summary>
        /// Update a related item by id for workflows. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for workflows</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Workflow</returns>
        public Workflow CustomersIdTeamsNkWorkflowsFkPut (string id, string nk, string fk, Workflow data = null)
        {
             ApiResponse<Workflow> localVarResponse = CustomersIdTeamsNkWorkflowsFkPutWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for workflows. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for workflows</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Workflow</returns>
        public ApiResponse< Workflow > CustomersIdTeamsNkWorkflowsFkPutWithHttpInfo (string id, string nk, string fk, Workflow data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkWorkflowsFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkWorkflowsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkWorkflowsFkPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/workflows/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkWorkflowsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Workflow>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Workflow) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Workflow)));
            
        }

        /// <summary>
        /// Update a related item by id for workflows. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for workflows</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Workflow</returns>
        public async System.Threading.Tasks.Task<Workflow> CustomersIdTeamsNkWorkflowsFkPutAsync (string id, string nk, string fk, Workflow data = null)
        {
             ApiResponse<Workflow> localVarResponse = await CustomersIdTeamsNkWorkflowsFkPutAsyncWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for workflows. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="fk">Foreign key for workflows</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Workflow)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Workflow>> CustomersIdTeamsNkWorkflowsFkPutAsyncWithHttpInfo (string id, string nk, string fk, Workflow data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkWorkflowsFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkWorkflowsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsNkWorkflowsFkPut");

            var localVarPath = "/Customers/{id}/teams/{nk}/workflows/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkWorkflowsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Workflow>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Workflow) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Workflow)));
            
        }

        /// <summary>
        /// Queries workflows of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;Workflow&gt;</returns>
        public List<Workflow> CustomersIdTeamsNkWorkflowsGet (string id, string nk, string filter = null)
        {
             ApiResponse<List<Workflow>> localVarResponse = CustomersIdTeamsNkWorkflowsGetWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries workflows of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Workflow&gt;</returns>
        public ApiResponse< List<Workflow> > CustomersIdTeamsNkWorkflowsGetWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkWorkflowsGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkWorkflowsGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/workflows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkWorkflowsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Workflow>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Workflow>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Workflow>)));
            
        }

        /// <summary>
        /// Queries workflows of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;Workflow&gt;</returns>
        public async System.Threading.Tasks.Task<List<Workflow>> CustomersIdTeamsNkWorkflowsGetAsync (string id, string nk, string filter = null)
        {
             ApiResponse<List<Workflow>> localVarResponse = await CustomersIdTeamsNkWorkflowsGetAsyncWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries workflows of Team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Workflow&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Workflow>>> CustomersIdTeamsNkWorkflowsGetAsyncWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkWorkflowsGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkWorkflowsGet");

            var localVarPath = "/Customers/{id}/teams/{nk}/workflows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkWorkflowsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Workflow>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Workflow>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Workflow>)));
            
        }

        /// <summary>
        /// Creates a new instance in workflows of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Workflow</returns>
        public Workflow CustomersIdTeamsNkWorkflowsPost (string id, string nk, Workflow data = null)
        {
             ApiResponse<Workflow> localVarResponse = CustomersIdTeamsNkWorkflowsPostWithHttpInfo(id, nk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in workflows of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Workflow</returns>
        public ApiResponse< Workflow > CustomersIdTeamsNkWorkflowsPostWithHttpInfo (string id, string nk, Workflow data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkWorkflowsPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkWorkflowsPost");

            var localVarPath = "/Customers/{id}/teams/{nk}/workflows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkWorkflowsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Workflow>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Workflow) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Workflow)));
            
        }

        /// <summary>
        /// Creates a new instance in workflows of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Workflow</returns>
        public async System.Threading.Tasks.Task<Workflow> CustomersIdTeamsNkWorkflowsPostAsync (string id, string nk, Workflow data = null)
        {
             ApiResponse<Workflow> localVarResponse = await CustomersIdTeamsNkWorkflowsPostAsyncWithHttpInfo(id, nk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in workflows of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="nk">Foreign key for teams.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Workflow)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Workflow>> CustomersIdTeamsNkWorkflowsPostAsyncWithHttpInfo (string id, string nk, Workflow data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsNkWorkflowsPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling CustomerApi->CustomersIdTeamsNkWorkflowsPost");

            var localVarPath = "/Customers/{id}/teams/{nk}/workflows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsNkWorkflowsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Workflow>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Workflow) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Workflow)));
            
        }

        /// <summary>
        /// Creates a new instance in teams of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Team</returns>
        public Team CustomersIdTeamsPost (string id, Team data = null)
        {
             ApiResponse<Team> localVarResponse = CustomersIdTeamsPostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in teams of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Team</returns>
        public ApiResponse< Team > CustomersIdTeamsPostWithHttpInfo (string id, Team data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsPost");

            var localVarPath = "/Customers/{id}/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Team) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
            
        }

        /// <summary>
        /// Creates a new instance in teams of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> CustomersIdTeamsPostAsync (string id, Team data = null)
        {
             ApiResponse<Team> localVarResponse = await CustomersIdTeamsPostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in teams of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Team>> CustomersIdTeamsPostAsyncWithHttpInfo (string id, Team data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsPost");

            var localVarPath = "/Customers/{id}/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Team) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
            
        }

        /// <summary>
        /// Remove the teams relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns></returns>
        public void CustomersIdTeamsRelFkDelete (string id, string fk)
        {
             CustomersIdTeamsRelFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Remove the teams relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdTeamsRelFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsRelFkDelete");

            var localVarPath = "/Customers/{id}/teams/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove the teams relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdTeamsRelFkDeleteAsync (string id, string fk)
        {
             await CustomersIdTeamsRelFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Remove the teams relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdTeamsRelFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsRelFkDelete");

            var localVarPath = "/Customers/{id}/teams/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Check the existence of teams relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns>bool?</returns>
        public bool? CustomersIdTeamsRelFkHead (string id, string fk)
        {
             ApiResponse<bool?> localVarResponse = CustomersIdTeamsRelFkHeadWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check the existence of teams relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > CustomersIdTeamsRelFkHeadWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsRelFkHead");

            var localVarPath = "/Customers/{id}/teams/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Check the existence of teams relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> CustomersIdTeamsRelFkHeadAsync (string id, string fk)
        {
             ApiResponse<bool?> localVarResponse = await CustomersIdTeamsRelFkHeadAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check the existence of teams relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> CustomersIdTeamsRelFkHeadAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsRelFkHead");

            var localVarPath = "/Customers/{id}/teams/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Add a related item by id for teams. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamMember</returns>
        public TeamMember CustomersIdTeamsRelFkPut (string id, string fk, TeamMember data = null)
        {
             ApiResponse<TeamMember> localVarResponse = CustomersIdTeamsRelFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a related item by id for teams. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        public ApiResponse< TeamMember > CustomersIdTeamsRelFkPutWithHttpInfo (string id, string fk, TeamMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsRelFkPut");

            var localVarPath = "/Customers/{id}/teams/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Add a related item by id for teams. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamMember</returns>
        public async System.Threading.Tasks.Task<TeamMember> CustomersIdTeamsRelFkPutAsync (string id, string fk, TeamMember data = null)
        {
             ApiResponse<TeamMember> localVarResponse = await CustomersIdTeamsRelFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a related item by id for teams. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="fk">Foreign key for teams</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMember>> CustomersIdTeamsRelFkPutAsyncWithHttpInfo (string id, string fk, TeamMember data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling CustomerApi->CustomersIdTeamsRelFkPut");

            var localVarPath = "/Customers/{id}/teams/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Move authentication to a Team 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <param name="teamId">Team id</param>
        /// <returns>TeamMemberAccessToken</returns>
        public TeamMemberAccessToken CustomersIdTeamsTeamIdChangePost (string id, string id2, string teamId)
        {
             ApiResponse<TeamMemberAccessToken> localVarResponse = CustomersIdTeamsTeamIdChangePostWithHttpInfo(id, id2, teamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Move authentication to a Team 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <param name="teamId">Team id</param>
        /// <returns>ApiResponse of TeamMemberAccessToken</returns>
        public ApiResponse< TeamMemberAccessToken > CustomersIdTeamsTeamIdChangePostWithHttpInfo (string id, string id2, string teamId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsTeamIdChangePost");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling CustomerApi->CustomersIdTeamsTeamIdChangePost");
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling CustomerApi->CustomersIdTeamsTeamIdChangePost");

            var localVarPath = "/Customers/{id}/teams/{teamId}/change";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (teamId != null) localVarPathParams.Add("teamId", Configuration.ApiClient.ParameterToString(teamId)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsTeamIdChangePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMemberAccessToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMemberAccessToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMemberAccessToken)));
            
        }

        /// <summary>
        /// Move authentication to a Team 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <param name="teamId">Team id</param>
        /// <returns>Task of TeamMemberAccessToken</returns>
        public async System.Threading.Tasks.Task<TeamMemberAccessToken> CustomersIdTeamsTeamIdChangePostAsync (string id, string id2, string teamId)
        {
             ApiResponse<TeamMemberAccessToken> localVarResponse = await CustomersIdTeamsTeamIdChangePostAsyncWithHttpInfo(id, id2, teamId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Move authentication to a Team 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <param name="teamId">Team id</param>
        /// <returns>Task of ApiResponse (TeamMemberAccessToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMemberAccessToken>> CustomersIdTeamsTeamIdChangePostAsyncWithHttpInfo (string id, string id2, string teamId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsTeamIdChangePost");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling CustomerApi->CustomersIdTeamsTeamIdChangePost");
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling CustomerApi->CustomersIdTeamsTeamIdChangePost");

            var localVarPath = "/Customers/{id}/teams/{teamId}/change";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (teamId != null) localVarPathParams.Add("teamId", Configuration.ApiClient.ParameterToString(teamId)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsTeamIdChangePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMemberAccessToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMemberAccessToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMemberAccessToken)));
            
        }

        /// <summary>
        /// Move authentication to a Portal 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <param name="teamId">Team id</param>
        /// <param name="portalId">Portal id</param>
        /// <returns>TeamMemberAccessToken</returns>
        public TeamMemberAccessToken CustomersIdTeamsTeamIdPortalsPortalIdChangePost (string id, string id2, string teamId, string portalId)
        {
             ApiResponse<TeamMemberAccessToken> localVarResponse = CustomersIdTeamsTeamIdPortalsPortalIdChangePostWithHttpInfo(id, id2, teamId, portalId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Move authentication to a Portal 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <param name="teamId">Team id</param>
        /// <param name="portalId">Portal id</param>
        /// <returns>ApiResponse of TeamMemberAccessToken</returns>
        public ApiResponse< TeamMemberAccessToken > CustomersIdTeamsTeamIdPortalsPortalIdChangePostWithHttpInfo (string id, string id2, string teamId, string portalId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsTeamIdPortalsPortalIdChangePost");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling CustomerApi->CustomersIdTeamsTeamIdPortalsPortalIdChangePost");
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling CustomerApi->CustomersIdTeamsTeamIdPortalsPortalIdChangePost");
            // verify the required parameter 'portalId' is set
            if (portalId == null)
                throw new ApiException(400, "Missing required parameter 'portalId' when calling CustomerApi->CustomersIdTeamsTeamIdPortalsPortalIdChangePost");

            var localVarPath = "/Customers/{id}/teams/{teamId}/portals/{portalId}/change";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (teamId != null) localVarPathParams.Add("teamId", Configuration.ApiClient.ParameterToString(teamId)); // path parameter
            if (portalId != null) localVarPathParams.Add("portalId", Configuration.ApiClient.ParameterToString(portalId)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsTeamIdPortalsPortalIdChangePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMemberAccessToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMemberAccessToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMemberAccessToken)));
            
        }

        /// <summary>
        /// Move authentication to a Portal 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <param name="teamId">Team id</param>
        /// <param name="portalId">Portal id</param>
        /// <returns>Task of TeamMemberAccessToken</returns>
        public async System.Threading.Tasks.Task<TeamMemberAccessToken> CustomersIdTeamsTeamIdPortalsPortalIdChangePostAsync (string id, string id2, string teamId, string portalId)
        {
             ApiResponse<TeamMemberAccessToken> localVarResponse = await CustomersIdTeamsTeamIdPortalsPortalIdChangePostAsyncWithHttpInfo(id, id2, teamId, portalId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Move authentication to a Portal 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <param name="teamId">Team id</param>
        /// <param name="portalId">Portal id</param>
        /// <returns>Task of ApiResponse (TeamMemberAccessToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMemberAccessToken>> CustomersIdTeamsTeamIdPortalsPortalIdChangePostAsyncWithHttpInfo (string id, string id2, string teamId, string portalId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTeamsTeamIdPortalsPortalIdChangePost");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling CustomerApi->CustomersIdTeamsTeamIdPortalsPortalIdChangePost");
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling CustomerApi->CustomersIdTeamsTeamIdPortalsPortalIdChangePost");
            // verify the required parameter 'portalId' is set
            if (portalId == null)
                throw new ApiException(400, "Missing required parameter 'portalId' when calling CustomerApi->CustomersIdTeamsTeamIdPortalsPortalIdChangePost");

            var localVarPath = "/Customers/{id}/teams/{teamId}/portals/{portalId}/change";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter
            if (teamId != null) localVarPathParams.Add("teamId", Configuration.ApiClient.ParameterToString(teamId)); // path parameter
            if (portalId != null) localVarPathParams.Add("portalId", Configuration.ApiClient.ParameterToString(portalId)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTeamsTeamIdPortalsPortalIdChangePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMemberAccessToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMemberAccessToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMemberAccessToken)));
            
        }

        /// <summary>
        /// Get token info 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <returns>TeamMemberAccessToken</returns>
        public TeamMemberAccessToken CustomersIdTokenGet (string id, string id2)
        {
             ApiResponse<TeamMemberAccessToken> localVarResponse = CustomersIdTokenGetWithHttpInfo(id, id2);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get token info 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <returns>ApiResponse of TeamMemberAccessToken</returns>
        public ApiResponse< TeamMemberAccessToken > CustomersIdTokenGetWithHttpInfo (string id, string id2)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTokenGet");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling CustomerApi->CustomersIdTokenGet");

            var localVarPath = "/Customers/{id}/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTokenGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMemberAccessToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMemberAccessToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMemberAccessToken)));
            
        }

        /// <summary>
        /// Get token info 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <returns>Task of TeamMemberAccessToken</returns>
        public async System.Threading.Tasks.Task<TeamMemberAccessToken> CustomersIdTokenGetAsync (string id, string id2)
        {
             ApiResponse<TeamMemberAccessToken> localVarResponse = await CustomersIdTokenGetAsyncWithHttpInfo(id, id2);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get token info 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <param name="id2">Customer id</param>
        /// <returns>Task of ApiResponse (TeamMemberAccessToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMemberAccessToken>> CustomersIdTokenGetAsyncWithHttpInfo (string id, string id2)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdTokenGet");
            // verify the required parameter 'id2' is set
            if (id2 == null)
                throw new ApiException(400, "Missing required parameter 'id2' when calling CustomerApi->CustomersIdTokenGet");

            var localVarPath = "/Customers/{id}/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (id2 != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id2)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdTokenGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMemberAccessToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMemberAccessToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMemberAccessToken)));
            
        }

        /// <summary>
        /// Trigger user&#39;s identity verification with configured verifyOptions 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns></returns>
        public void CustomersIdVerifyPost (string id)
        {
             CustomersIdVerifyPostWithHttpInfo(id);
        }

        /// <summary>
        /// Trigger user&#39;s identity verification with configured verifyOptions 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersIdVerifyPostWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdVerifyPost");

            var localVarPath = "/Customers/{id}/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdVerifyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Trigger user&#39;s identity verification with configured verifyOptions 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersIdVerifyPostAsync (string id)
        {
             await CustomersIdVerifyPostAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Trigger user&#39;s identity verification with configured verifyOptions 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Customer id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersIdVerifyPostAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->CustomersIdVerifyPost");

            var localVarPath = "/Customers/{id}/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersIdVerifyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Accept invitation with token 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Token describing invitation ticket</param>
        /// <param name="data">Customer data in case new customer (optional)</param>
        /// <returns>InvitationTicket</returns>
        public InvitationTicket CustomersInvitationTicketsTokenAcceptPost (string token, Customer data = null)
        {
             ApiResponse<InvitationTicket> localVarResponse = CustomersInvitationTicketsTokenAcceptPostWithHttpInfo(token, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Accept invitation with token 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Token describing invitation ticket</param>
        /// <param name="data">Customer data in case new customer (optional)</param>
        /// <returns>ApiResponse of InvitationTicket</returns>
        public ApiResponse< InvitationTicket > CustomersInvitationTicketsTokenAcceptPostWithHttpInfo (string token, Customer data = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling CustomerApi->CustomersInvitationTicketsTokenAcceptPost");

            var localVarPath = "/Customers/invitationTickets/{token}/accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (token != null) localVarPathParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersInvitationTicketsTokenAcceptPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationTicket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationTicket) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationTicket)));
            
        }

        /// <summary>
        /// Accept invitation with token 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Token describing invitation ticket</param>
        /// <param name="data">Customer data in case new customer (optional)</param>
        /// <returns>Task of InvitationTicket</returns>
        public async System.Threading.Tasks.Task<InvitationTicket> CustomersInvitationTicketsTokenAcceptPostAsync (string token, Customer data = null)
        {
             ApiResponse<InvitationTicket> localVarResponse = await CustomersInvitationTicketsTokenAcceptPostAsyncWithHttpInfo(token, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Accept invitation with token 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Token describing invitation ticket</param>
        /// <param name="data">Customer data in case new customer (optional)</param>
        /// <returns>Task of ApiResponse (InvitationTicket)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvitationTicket>> CustomersInvitationTicketsTokenAcceptPostAsyncWithHttpInfo (string token, Customer data = null)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling CustomerApi->CustomersInvitationTicketsTokenAcceptPost");

            var localVarPath = "/Customers/invitationTickets/{token}/accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (token != null) localVarPathParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersInvitationTicketsTokenAcceptPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationTicket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationTicket) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationTicket)));
            
        }

        /// <summary>
        /// Get invitation details with token 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Token describing invitation ticket</param>
        /// <returns>InvitationTicket</returns>
        public InvitationTicket CustomersInvitationTicketsTokenGet (string token)
        {
             ApiResponse<InvitationTicket> localVarResponse = CustomersInvitationTicketsTokenGetWithHttpInfo(token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get invitation details with token 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Token describing invitation ticket</param>
        /// <returns>ApiResponse of InvitationTicket</returns>
        public ApiResponse< InvitationTicket > CustomersInvitationTicketsTokenGetWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling CustomerApi->CustomersInvitationTicketsTokenGet");

            var localVarPath = "/Customers/invitationTickets/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (token != null) localVarPathParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersInvitationTicketsTokenGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationTicket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationTicket) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationTicket)));
            
        }

        /// <summary>
        /// Get invitation details with token 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Token describing invitation ticket</param>
        /// <returns>Task of InvitationTicket</returns>
        public async System.Threading.Tasks.Task<InvitationTicket> CustomersInvitationTicketsTokenGetAsync (string token)
        {
             ApiResponse<InvitationTicket> localVarResponse = await CustomersInvitationTicketsTokenGetAsyncWithHttpInfo(token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get invitation details with token 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Token describing invitation ticket</param>
        /// <returns>Task of ApiResponse (InvitationTicket)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvitationTicket>> CustomersInvitationTicketsTokenGetAsyncWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling CustomerApi->CustomersInvitationTicketsTokenGet");

            var localVarPath = "/Customers/invitationTickets/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (token != null) localVarPathParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersInvitationTicketsTokenGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationTicket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationTicket) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationTicket)));
            
        }

        /// <summary>
        /// Login a user with username/email and password. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials"></param>
        /// <param name="include">Related objects to include in the response. See the description of return value for more details. (optional)</param>
        /// <returns>Object</returns>
        public Object CustomersLoginPost (Object credentials, string include = null)
        {
             ApiResponse<Object> localVarResponse = CustomersLoginPostWithHttpInfo(credentials, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Login a user with username/email and password. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials"></param>
        /// <param name="include">Related objects to include in the response. See the description of return value for more details. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CustomersLoginPostWithHttpInfo (Object credentials, string include = null)
        {
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling CustomerApi->CustomersLoginPost");

            var localVarPath = "/Customers/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersLoginPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Login a user with username/email and password. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials"></param>
        /// <param name="include">Related objects to include in the response. See the description of return value for more details. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CustomersLoginPostAsync (Object credentials, string include = null)
        {
             ApiResponse<Object> localVarResponse = await CustomersLoginPostAsyncWithHttpInfo(credentials, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Login a user with username/email and password. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials"></param>
        /// <param name="include">Related objects to include in the response. See the description of return value for more details. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersLoginPostAsyncWithHttpInfo (Object credentials, string include = null)
        {
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling CustomerApi->CustomersLoginPost");

            var localVarPath = "/Customers/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersLoginPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Logout a user with access token. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void CustomersLogoutPost ()
        {
             CustomersLogoutPostWithHttpInfo();
        }

        /// <summary>
        /// Logout a user with access token. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersLogoutPostWithHttpInfo ()
        {

            var localVarPath = "/Customers/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersLogoutPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Logout a user with access token. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersLogoutPostAsync ()
        {
             await CustomersLogoutPostAsyncWithHttpInfo();

        }

        /// <summary>
        /// Logout a user with access token. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersLogoutPostAsyncWithHttpInfo ()
        {

            var localVarPath = "/Customers/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersLogoutPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get token info 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TeamMemberAccessToken</returns>
        public TeamMemberAccessToken CustomersMeTokenGet ()
        {
             ApiResponse<TeamMemberAccessToken> localVarResponse = CustomersMeTokenGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get token info 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TeamMemberAccessToken</returns>
        public ApiResponse< TeamMemberAccessToken > CustomersMeTokenGetWithHttpInfo ()
        {

            var localVarPath = "/Customers/me/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersMeTokenGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMemberAccessToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMemberAccessToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMemberAccessToken)));
            
        }

        /// <summary>
        /// Get token info 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TeamMemberAccessToken</returns>
        public async System.Threading.Tasks.Task<TeamMemberAccessToken> CustomersMeTokenGetAsync ()
        {
             ApiResponse<TeamMemberAccessToken> localVarResponse = await CustomersMeTokenGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get token info 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TeamMemberAccessToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMemberAccessToken>> CustomersMeTokenGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/Customers/me/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersMeTokenGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMemberAccessToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMemberAccessToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMemberAccessToken)));
            
        }

        /// <summary>
        /// Refresh current access token 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken">AccessToken refreshToken</param>
        /// <returns>TeamMemberAccessToken</returns>
        public TeamMemberAccessToken CustomersMeTokenRefreshGet (string refreshToken)
        {
             ApiResponse<TeamMemberAccessToken> localVarResponse = CustomersMeTokenRefreshGetWithHttpInfo(refreshToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh current access token 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken">AccessToken refreshToken</param>
        /// <returns>ApiResponse of TeamMemberAccessToken</returns>
        public ApiResponse< TeamMemberAccessToken > CustomersMeTokenRefreshGetWithHttpInfo (string refreshToken)
        {
            // verify the required parameter 'refreshToken' is set
            if (refreshToken == null)
                throw new ApiException(400, "Missing required parameter 'refreshToken' when calling CustomerApi->CustomersMeTokenRefreshGet");

            var localVarPath = "/Customers/me/token/refresh";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (refreshToken != null) localVarQueryParams.Add("refreshToken", Configuration.ApiClient.ParameterToString(refreshToken)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersMeTokenRefreshGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMemberAccessToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMemberAccessToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMemberAccessToken)));
            
        }

        /// <summary>
        /// Refresh current access token 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken">AccessToken refreshToken</param>
        /// <returns>Task of TeamMemberAccessToken</returns>
        public async System.Threading.Tasks.Task<TeamMemberAccessToken> CustomersMeTokenRefreshGetAsync (string refreshToken)
        {
             ApiResponse<TeamMemberAccessToken> localVarResponse = await CustomersMeTokenRefreshGetAsyncWithHttpInfo(refreshToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Refresh current access token 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken">AccessToken refreshToken</param>
        /// <returns>Task of ApiResponse (TeamMemberAccessToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMemberAccessToken>> CustomersMeTokenRefreshGetAsyncWithHttpInfo (string refreshToken)
        {
            // verify the required parameter 'refreshToken' is set
            if (refreshToken == null)
                throw new ApiException(400, "Missing required parameter 'refreshToken' when calling CustomerApi->CustomersMeTokenRefreshGet");

            var localVarPath = "/Customers/me/token/refresh";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (refreshToken != null) localVarQueryParams.Add("refreshToken", Configuration.ApiClient.ParameterToString(refreshToken)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersMeTokenRefreshGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMemberAccessToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMemberAccessToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMemberAccessToken)));
            
        }

        /// <summary>
        /// Create a new instance of the model and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Customer</returns>
        public Customer CustomersPost (Customer data = null)
        {
             ApiResponse<Customer> localVarResponse = CustomersPostWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new instance of the model and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        public ApiResponse< Customer > CustomersPostWithHttpInfo (Customer data = null)
        {

            var localVarPath = "/Customers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Create a new instance of the model and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> CustomersPostAsync (Customer data = null)
        {
             ApiResponse<Customer> localVarResponse = await CustomersPostAsyncWithHttpInfo(data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new instance of the model and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Customer>> CustomersPostAsyncWithHttpInfo (Customer data = null)
        {

            var localVarPath = "/Customers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Create customer and assign it to a team 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>TeamMember</returns>
        public TeamMember CustomersRegisterPost (Customer data = null)
        {
             ApiResponse<TeamMember> localVarResponse = CustomersRegisterPostWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create customer and assign it to a team 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of TeamMember</returns>
        public ApiResponse< TeamMember > CustomersRegisterPostWithHttpInfo (Customer data = null)
        {

            var localVarPath = "/Customers/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersRegisterPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Create customer and assign it to a team 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of TeamMember</returns>
        public async System.Threading.Tasks.Task<TeamMember> CustomersRegisterPostAsync (Customer data = null)
        {
             ApiResponse<TeamMember> localVarResponse = await CustomersRegisterPostAsyncWithHttpInfo(data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create customer and assign it to a team 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMember>> CustomersRegisterPostAsyncWithHttpInfo (Customer data = null)
        {

            var localVarPath = "/Customers/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersRegisterPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMember) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMember)));
            
        }

        /// <summary>
        /// Reset user&#39;s password via a password-reset token. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newPassword"></param>
        /// <returns></returns>
        public void CustomersResetPasswordPost (string newPassword)
        {
             CustomersResetPasswordPostWithHttpInfo(newPassword);
        }

        /// <summary>
        /// Reset user&#39;s password via a password-reset token. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newPassword"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersResetPasswordPostWithHttpInfo (string newPassword)
        {
            // verify the required parameter 'newPassword' is set
            if (newPassword == null)
                throw new ApiException(400, "Missing required parameter 'newPassword' when calling CustomerApi->CustomersResetPasswordPost");

            var localVarPath = "/Customers/reset-password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (newPassword != null) localVarFormParams.Add("newPassword", Configuration.ApiClient.ParameterToString(newPassword)); // form parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersResetPasswordPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Reset user&#39;s password via a password-reset token. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newPassword"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersResetPasswordPostAsync (string newPassword)
        {
             await CustomersResetPasswordPostAsyncWithHttpInfo(newPassword);

        }

        /// <summary>
        /// Reset user&#39;s password via a password-reset token. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newPassword"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersResetPasswordPostAsyncWithHttpInfo (string newPassword)
        {
            // verify the required parameter 'newPassword' is set
            if (newPassword == null)
                throw new ApiException(400, "Missing required parameter 'newPassword' when calling CustomerApi->CustomersResetPasswordPost");

            var localVarPath = "/Customers/reset-password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (newPassword != null) localVarFormParams.Add("newPassword", Configuration.ApiClient.ParameterToString(newPassword)); // form parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersResetPasswordPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get token info for reset password token 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Reset password access token</param>
        /// <returns>TeamMemberAccessToken</returns>
        public TeamMemberAccessToken CustomersResetPasswordTokenGet (string token)
        {
             ApiResponse<TeamMemberAccessToken> localVarResponse = CustomersResetPasswordTokenGetWithHttpInfo(token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get token info for reset password token 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Reset password access token</param>
        /// <returns>ApiResponse of TeamMemberAccessToken</returns>
        public ApiResponse< TeamMemberAccessToken > CustomersResetPasswordTokenGetWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling CustomerApi->CustomersResetPasswordTokenGet");

            var localVarPath = "/Customers/reset-password/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersResetPasswordTokenGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMemberAccessToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMemberAccessToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMemberAccessToken)));
            
        }

        /// <summary>
        /// Get token info for reset password token 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Reset password access token</param>
        /// <returns>Task of TeamMemberAccessToken</returns>
        public async System.Threading.Tasks.Task<TeamMemberAccessToken> CustomersResetPasswordTokenGetAsync (string token)
        {
             ApiResponse<TeamMemberAccessToken> localVarResponse = await CustomersResetPasswordTokenGetAsyncWithHttpInfo(token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get token info for reset password token 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Reset password access token</param>
        /// <returns>Task of ApiResponse (TeamMemberAccessToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMemberAccessToken>> CustomersResetPasswordTokenGetAsyncWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling CustomerApi->CustomersResetPasswordTokenGet");

            var localVarPath = "/Customers/reset-password/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersResetPasswordTokenGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMemberAccessToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamMemberAccessToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMemberAccessToken)));
            
        }

        /// <summary>
        /// Reset password for a user with email. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"></param>
        /// <returns></returns>
        public void CustomersResetPost (Object options)
        {
             CustomersResetPostWithHttpInfo(options);
        }

        /// <summary>
        /// Reset password for a user with email. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CustomersResetPostWithHttpInfo (Object options)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling CustomerApi->CustomersResetPost");

            var localVarPath = "/Customers/reset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersResetPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Reset password for a user with email. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CustomersResetPostAsync (Object options)
        {
             await CustomersResetPostAsyncWithHttpInfo(options);

        }

        /// <summary>
        /// Reset password for a user with email. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CustomersResetPostAsyncWithHttpInfo (Object options)
        {
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling CustomerApi->CustomersResetPost");

            var localVarPath = "/Customers/reset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomersResetPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
