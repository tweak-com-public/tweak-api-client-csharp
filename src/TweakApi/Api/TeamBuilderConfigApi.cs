/* 
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.8-alpha.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TweakApi.Client;
using TweakApi.Model;

namespace TweakApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeamBuilderConfigApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream TeamBuilderConfigsChangeStreamGet (string options = null);

        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> TeamBuilderConfigsChangeStreamGetWithHttpInfo (string options = null);
        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream TeamBuilderConfigsChangeStreamPost (string options = null);

        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> TeamBuilderConfigsChangeStreamPostWithHttpInfo (string options = null);
        /// <summary>
        /// Count instances of the model matched by where from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 TeamBuilderConfigsCountGet (string where = null);

        /// <summary>
        /// Count instances of the model matched by where from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> TeamBuilderConfigsCountGetWithHttpInfo (string where = null);
        /// <summary>
        /// Find first instance of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>TeamBuilderConfig</returns>
        TeamBuilderConfig TeamBuilderConfigsFindOneGet (string filter = null);

        /// <summary>
        /// Find first instance of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfig</returns>
        ApiResponse<TeamBuilderConfig> TeamBuilderConfigsFindOneGetWithHttpInfo (string filter = null);
        /// <summary>
        /// Find all instances of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>List&lt;TeamBuilderConfig&gt;</returns>
        List<TeamBuilderConfig> TeamBuilderConfigsGet (string filter = null);

        /// <summary>
        /// Find all instances of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamBuilderConfig&gt;</returns>
        ApiResponse<List<TeamBuilderConfig>> TeamBuilderConfigsGetWithHttpInfo (string filter = null);
        /// <summary>
        /// Reset Team keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TeamBuilderConfig</returns>
        TeamBuilderConfig TeamBuilderConfigsGlobalGet ();

        /// <summary>
        /// Reset Team keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TeamBuilderConfig</returns>
        ApiResponse<TeamBuilderConfig> TeamBuilderConfigsGlobalGetWithHttpInfo ();
        /// <summary>
        /// Delete a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Object</returns>
        Object TeamBuilderConfigsIdDelete (string id);

        /// <summary>
        /// Delete a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TeamBuilderConfigsIdDeleteWithHttpInfo (string id);
        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 TeamBuilderConfigsIdExistsGet (string id);

        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> TeamBuilderConfigsIdExistsGetWithHttpInfo (string id);
        /// <summary>
        /// Find a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>TeamBuilderConfig</returns>
        TeamBuilderConfig TeamBuilderConfigsIdGet (string id, string filter = null);

        /// <summary>
        /// Find a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfig</returns>
        ApiResponse<TeamBuilderConfig> TeamBuilderConfigsIdGetWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 TeamBuilderConfigsIdHead (string id);

        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> TeamBuilderConfigsIdHeadWithHttpInfo (string id);
        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>TeamBuilderConfig</returns>
        TeamBuilderConfig TeamBuilderConfigsIdPatch (string id, TeamBuilderConfig data = null);

        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfig</returns>
        ApiResponse<TeamBuilderConfig> TeamBuilderConfigsIdPatchWithHttpInfo (string id, TeamBuilderConfig data = null);
        /// <summary>
        /// Counts portals of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 TeamBuilderConfigsIdPortalsCountGet (string id, string where = null);

        /// <summary>
        /// Counts portals of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> TeamBuilderConfigsIdPortalsCountGetWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all portals of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns></returns>
        void TeamBuilderConfigsIdPortalsDelete (string id);

        /// <summary>
        /// Deletes all portals of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamBuilderConfigsIdPortalsDeleteWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns></returns>
        void TeamBuilderConfigsIdPortalsFkDelete (string id, string fk);

        /// <summary>
        /// Delete a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamBuilderConfigsIdPortalsFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Portal</returns>
        Portal TeamBuilderConfigsIdPortalsFkGet (string id, string fk);

        /// <summary>
        /// Find a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>ApiResponse of Portal</returns>
        ApiResponse<Portal> TeamBuilderConfigsIdPortalsFkGetWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Portal</returns>
        Portal TeamBuilderConfigsIdPortalsFkPut (string id, string fk, Portal data = null);

        /// <summary>
        /// Update a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        ApiResponse<Portal> TeamBuilderConfigsIdPortalsFkPutWithHttpInfo (string id, string fk, Portal data = null);
        /// <summary>
        /// Queries portals of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;Portal&gt;</returns>
        List<Portal> TeamBuilderConfigsIdPortalsGet (string id, string filter = null);

        /// <summary>
        /// Queries portals of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Portal&gt;</returns>
        ApiResponse<List<Portal>> TeamBuilderConfigsIdPortalsGetWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in portals of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Portal</returns>
        Portal TeamBuilderConfigsIdPortalsPost (string id, Portal data = null);

        /// <summary>
        /// Creates a new instance in portals of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        ApiResponse<Portal> TeamBuilderConfigsIdPortalsPostWithHttpInfo (string id, Portal data = null);
        /// <summary>
        /// Counts productGroups of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 TeamBuilderConfigsIdProductGroupsCountGet (string id, string where = null);

        /// <summary>
        /// Counts productGroups of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> TeamBuilderConfigsIdProductGroupsCountGetWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all productGroups of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns></returns>
        void TeamBuilderConfigsIdProductGroupsDelete (string id);

        /// <summary>
        /// Deletes all productGroups of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamBuilderConfigsIdProductGroupsDeleteWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for productGroups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns></returns>
        void TeamBuilderConfigsIdProductGroupsFkDelete (string id, string fk);

        /// <summary>
        /// Delete a related item by id for productGroups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamBuilderConfigsIdProductGroupsFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for productGroups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns>ProductGroup</returns>
        ProductGroup TeamBuilderConfigsIdProductGroupsFkGet (string id, string fk);

        /// <summary>
        /// Find a related item by id for productGroups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns>ApiResponse of ProductGroup</returns>
        ApiResponse<ProductGroup> TeamBuilderConfigsIdProductGroupsFkGetWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for productGroups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductGroup</returns>
        ProductGroup TeamBuilderConfigsIdProductGroupsFkPut (string id, string fk, ProductGroup data = null);

        /// <summary>
        /// Update a related item by id for productGroups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductGroup</returns>
        ApiResponse<ProductGroup> TeamBuilderConfigsIdProductGroupsFkPutWithHttpInfo (string id, string fk, ProductGroup data = null);
        /// <summary>
        /// Queries productGroups of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;ProductGroup&gt;</returns>
        List<ProductGroup> TeamBuilderConfigsIdProductGroupsGet (string id, string filter = null);

        /// <summary>
        /// Queries productGroups of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductGroup&gt;</returns>
        ApiResponse<List<ProductGroup>> TeamBuilderConfigsIdProductGroupsGetWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Counts types of ProductGroup.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 TeamBuilderConfigsIdProductGroupsNkTypesCountGet (string id, string nk, string where = null);

        /// <summary>
        /// Counts types of ProductGroup.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> TeamBuilderConfigsIdProductGroupsNkTypesCountGetWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all types of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <returns></returns>
        void TeamBuilderConfigsIdProductGroupsNkTypesDelete (string id, string nk);

        /// <summary>
        /// Deletes all types of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamBuilderConfigsIdProductGroupsNkTypesDeleteWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="fk">Foreign key for types</param>
        /// <returns></returns>
        void TeamBuilderConfigsIdProductGroupsNkTypesFkDelete (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="fk">Foreign key for types</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamBuilderConfigsIdProductGroupsNkTypesFkDeleteWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="fk">Foreign key for types</param>
        /// <returns>ProductType</returns>
        ProductType TeamBuilderConfigsIdProductGroupsNkTypesFkGet (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="fk">Foreign key for types</param>
        /// <returns>ApiResponse of ProductType</returns>
        ApiResponse<ProductType> TeamBuilderConfigsIdProductGroupsNkTypesFkGetWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="fk">Foreign key for types</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductType</returns>
        ProductType TeamBuilderConfigsIdProductGroupsNkTypesFkPut (string id, string nk, string fk, ProductType data = null);

        /// <summary>
        /// Update a related item by id for types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="fk">Foreign key for types</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductType</returns>
        ApiResponse<ProductType> TeamBuilderConfigsIdProductGroupsNkTypesFkPutWithHttpInfo (string id, string nk, string fk, ProductType data = null);
        /// <summary>
        /// Queries types of ProductGroup.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;ProductType&gt;</returns>
        List<ProductType> TeamBuilderConfigsIdProductGroupsNkTypesGet (string id, string nk, string filter = null);

        /// <summary>
        /// Queries types of ProductGroup.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductType&gt;</returns>
        ApiResponse<List<ProductType>> TeamBuilderConfigsIdProductGroupsNkTypesGetWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in types of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductType</returns>
        ProductType TeamBuilderConfigsIdProductGroupsNkTypesPost (string id, string nk, ProductType data = null);

        /// <summary>
        /// Creates a new instance in types of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductType</returns>
        ApiResponse<ProductType> TeamBuilderConfigsIdProductGroupsNkTypesPostWithHttpInfo (string id, string nk, ProductType data = null);
        /// <summary>
        /// Creates a new instance in productGroups of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductGroup</returns>
        ProductGroup TeamBuilderConfigsIdProductGroupsPost (string id, ProductGroup data = null);

        /// <summary>
        /// Creates a new instance in productGroups of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductGroup</returns>
        ApiResponse<ProductGroup> TeamBuilderConfigsIdProductGroupsPostWithHttpInfo (string id, ProductGroup data = null);
        /// <summary>
        /// Remove the productGroups relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns></returns>
        void TeamBuilderConfigsIdProductGroupsRelFkDelete (string id, string fk);

        /// <summary>
        /// Remove the productGroups relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamBuilderConfigsIdProductGroupsRelFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Check the existence of productGroups relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns>bool?</returns>
        bool? TeamBuilderConfigsIdProductGroupsRelFkHead (string id, string fk);

        /// <summary>
        /// Check the existence of productGroups relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> TeamBuilderConfigsIdProductGroupsRelFkHeadWithHttpInfo (string id, string fk);
        /// <summary>
        /// Add a related item by id for productGroups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamBuilderConfigProductGroup</returns>
        TeamBuilderConfigProductGroup TeamBuilderConfigsIdProductGroupsRelFkPut (string id, string fk, TeamBuilderConfigProductGroup data = null);

        /// <summary>
        /// Add a related item by id for productGroups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfigProductGroup</returns>
        ApiResponse<TeamBuilderConfigProductGroup> TeamBuilderConfigsIdProductGroupsRelFkPutWithHttpInfo (string id, string fk, TeamBuilderConfigProductGroup data = null);
        /// <summary>
        /// Counts productSizeMaterials of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 TeamBuilderConfigsIdProductSizeMaterialsCountGet (string id, string where = null);

        /// <summary>
        /// Counts productSizeMaterials of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> TeamBuilderConfigsIdProductSizeMaterialsCountGetWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all productSizeMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns></returns>
        void TeamBuilderConfigsIdProductSizeMaterialsDelete (string id);

        /// <summary>
        /// Deletes all productSizeMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamBuilderConfigsIdProductSizeMaterialsDeleteWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for productSizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns></returns>
        void TeamBuilderConfigsIdProductSizeMaterialsFkDelete (string id, string fk);

        /// <summary>
        /// Delete a related item by id for productSizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamBuilderConfigsIdProductSizeMaterialsFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for productSizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>ProductSizeMaterial</returns>
        ProductSizeMaterial TeamBuilderConfigsIdProductSizeMaterialsFkGet (string id, string fk);

        /// <summary>
        /// Find a related item by id for productSizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>ApiResponse of ProductSizeMaterial</returns>
        ApiResponse<ProductSizeMaterial> TeamBuilderConfigsIdProductSizeMaterialsFkGetWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for productSizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductSizeMaterial</returns>
        ProductSizeMaterial TeamBuilderConfigsIdProductSizeMaterialsFkPut (string id, string fk, ProductSizeMaterial data = null);

        /// <summary>
        /// Update a related item by id for productSizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductSizeMaterial</returns>
        ApiResponse<ProductSizeMaterial> TeamBuilderConfigsIdProductSizeMaterialsFkPutWithHttpInfo (string id, string fk, ProductSizeMaterial data = null);
        /// <summary>
        /// Queries productSizeMaterials of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;ProductSizeMaterial&gt;</returns>
        List<ProductSizeMaterial> TeamBuilderConfigsIdProductSizeMaterialsGet (string id, string filter = null);

        /// <summary>
        /// Queries productSizeMaterials of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductSizeMaterial&gt;</returns>
        ApiResponse<List<ProductSizeMaterial>> TeamBuilderConfigsIdProductSizeMaterialsGetWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Fetches belongsTo relation material.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ProductMaterial</returns>
        ProductMaterial TeamBuilderConfigsIdProductSizeMaterialsNkMaterialGet (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation material.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of ProductMaterial</returns>
        ApiResponse<ProductMaterial> TeamBuilderConfigsIdProductSizeMaterialsNkMaterialGetWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Fetches belongsTo relation pdfColorProfile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ProductPdfColorProfile</returns>
        ProductPdfColorProfile TeamBuilderConfigsIdProductSizeMaterialsNkPdfColorProfileGet (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation pdfColorProfile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of ProductPdfColorProfile</returns>
        ApiResponse<ProductPdfColorProfile> TeamBuilderConfigsIdProductSizeMaterialsNkPdfColorProfileGetWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Fetches belongsTo relation size.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ProductSize</returns>
        ProductSize TeamBuilderConfigsIdProductSizeMaterialsNkSizeGet (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation size.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of ProductSize</returns>
        ApiResponse<ProductSize> TeamBuilderConfigsIdProductSizeMaterialsNkSizeGetWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Fetches belongsTo relation team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Team</returns>
        Team TeamBuilderConfigsIdProductSizeMaterialsNkTeamGet (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> TeamBuilderConfigsIdProductSizeMaterialsNkTeamGetWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Creates a new instance in productSizeMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductSizeMaterial</returns>
        ProductSizeMaterial TeamBuilderConfigsIdProductSizeMaterialsPost (string id, ProductSizeMaterial data = null);

        /// <summary>
        /// Creates a new instance in productSizeMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductSizeMaterial</returns>
        ApiResponse<ProductSizeMaterial> TeamBuilderConfigsIdProductSizeMaterialsPostWithHttpInfo (string id, ProductSizeMaterial data = null);
        /// <summary>
        /// Counts productSizeMaterialsRel of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 TeamBuilderConfigsIdProductSizeMaterialsRelCountGet (string id, string where = null);

        /// <summary>
        /// Counts productSizeMaterialsRel of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> TeamBuilderConfigsIdProductSizeMaterialsRelCountGetWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all productSizeMaterialsRel of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns></returns>
        void TeamBuilderConfigsIdProductSizeMaterialsRelDelete (string id);

        /// <summary>
        /// Deletes all productSizeMaterialsRel of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamBuilderConfigsIdProductSizeMaterialsRelDeleteWithHttpInfo (string id);
        /// <summary>
        /// Remove the productSizeMaterials relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns></returns>
        void TeamBuilderConfigsIdProductSizeMaterialsRelFkDelete (string id, string fk);

        /// <summary>
        /// Remove the productSizeMaterials relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamBuilderConfigsIdProductSizeMaterialsRelFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Delete a related item by id for productSizeMaterialsRel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterialsRel</param>
        /// <returns></returns>
        void TeamBuilderConfigsIdProductSizeMaterialsRelFkDelete_0 (string id, string fk);

        /// <summary>
        /// Delete a related item by id for productSizeMaterialsRel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterialsRel</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamBuilderConfigsIdProductSizeMaterialsRelFkDelete_0WithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for productSizeMaterialsRel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterialsRel</param>
        /// <returns>TeamBuilderConfigProductSizeMaterial</returns>
        TeamBuilderConfigProductSizeMaterial TeamBuilderConfigsIdProductSizeMaterialsRelFkGet (string id, string fk);

        /// <summary>
        /// Find a related item by id for productSizeMaterialsRel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterialsRel</param>
        /// <returns>ApiResponse of TeamBuilderConfigProductSizeMaterial</returns>
        ApiResponse<TeamBuilderConfigProductSizeMaterial> TeamBuilderConfigsIdProductSizeMaterialsRelFkGetWithHttpInfo (string id, string fk);
        /// <summary>
        /// Check the existence of productSizeMaterials relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>bool?</returns>
        bool? TeamBuilderConfigsIdProductSizeMaterialsRelFkHead (string id, string fk);

        /// <summary>
        /// Check the existence of productSizeMaterials relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> TeamBuilderConfigsIdProductSizeMaterialsRelFkHeadWithHttpInfo (string id, string fk);
        /// <summary>
        /// Add a related item by id for productSizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamBuilderConfigProductSizeMaterial</returns>
        TeamBuilderConfigProductSizeMaterial TeamBuilderConfigsIdProductSizeMaterialsRelFkPut (string id, string fk, TeamBuilderConfigProductSizeMaterial data = null);

        /// <summary>
        /// Add a related item by id for productSizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfigProductSizeMaterial</returns>
        ApiResponse<TeamBuilderConfigProductSizeMaterial> TeamBuilderConfigsIdProductSizeMaterialsRelFkPutWithHttpInfo (string id, string fk, TeamBuilderConfigProductSizeMaterial data = null);
        /// <summary>
        /// Update a related item by id for productSizeMaterialsRel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterialsRel</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamBuilderConfigProductSizeMaterial</returns>
        TeamBuilderConfigProductSizeMaterial TeamBuilderConfigsIdProductSizeMaterialsRelFkPut_0 (string id, string fk, TeamBuilderConfigProductSizeMaterial data = null);

        /// <summary>
        /// Update a related item by id for productSizeMaterialsRel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterialsRel</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfigProductSizeMaterial</returns>
        ApiResponse<TeamBuilderConfigProductSizeMaterial> TeamBuilderConfigsIdProductSizeMaterialsRelFkPut_0WithHttpInfo (string id, string fk, TeamBuilderConfigProductSizeMaterial data = null);
        /// <summary>
        /// Queries productSizeMaterialsRel of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;TeamBuilderConfigProductSizeMaterial&gt;</returns>
        List<TeamBuilderConfigProductSizeMaterial> TeamBuilderConfigsIdProductSizeMaterialsRelGet (string id, string filter = null);

        /// <summary>
        /// Queries productSizeMaterialsRel of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamBuilderConfigProductSizeMaterial&gt;</returns>
        ApiResponse<List<TeamBuilderConfigProductSizeMaterial>> TeamBuilderConfigsIdProductSizeMaterialsRelGetWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Fetches belongsTo relation builderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterialsRel.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>TeamBuilderConfig</returns>
        TeamBuilderConfig TeamBuilderConfigsIdProductSizeMaterialsRelNkBuilderConfigGet (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation builderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterialsRel.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfig</returns>
        ApiResponse<TeamBuilderConfig> TeamBuilderConfigsIdProductSizeMaterialsRelNkBuilderConfigGetWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Fetches belongsTo relation pdfColorProfile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterialsRel.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ProductPdfColorProfile</returns>
        ProductPdfColorProfile TeamBuilderConfigsIdProductSizeMaterialsRelNkPdfColorProfileGet (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation pdfColorProfile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterialsRel.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of ProductPdfColorProfile</returns>
        ApiResponse<ProductPdfColorProfile> TeamBuilderConfigsIdProductSizeMaterialsRelNkPdfColorProfileGetWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Fetches belongsTo relation productSizeMaterial.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterialsRel.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ProductSizeMaterial</returns>
        ProductSizeMaterial TeamBuilderConfigsIdProductSizeMaterialsRelNkProductSizeMaterialGet (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation productSizeMaterial.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterialsRel.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of ProductSizeMaterial</returns>
        ApiResponse<ProductSizeMaterial> TeamBuilderConfigsIdProductSizeMaterialsRelNkProductSizeMaterialGetWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Creates a new instance in productSizeMaterialsRel of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamBuilderConfigProductSizeMaterial</returns>
        TeamBuilderConfigProductSizeMaterial TeamBuilderConfigsIdProductSizeMaterialsRelPost (string id, TeamBuilderConfigProductSizeMaterial data = null);

        /// <summary>
        /// Creates a new instance in productSizeMaterialsRel of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfigProductSizeMaterial</returns>
        ApiResponse<TeamBuilderConfigProductSizeMaterial> TeamBuilderConfigsIdProductSizeMaterialsRelPostWithHttpInfo (string id, TeamBuilderConfigProductSizeMaterial data = null);
        /// <summary>
        /// Counts productSizes of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 TeamBuilderConfigsIdProductSizesCountGet (string id, string where = null);

        /// <summary>
        /// Counts productSizes of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> TeamBuilderConfigsIdProductSizesCountGetWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all productSizes of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns></returns>
        void TeamBuilderConfigsIdProductSizesDelete (string id);

        /// <summary>
        /// Deletes all productSizes of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamBuilderConfigsIdProductSizesDeleteWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for productSizes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns></returns>
        void TeamBuilderConfigsIdProductSizesFkDelete (string id, string fk);

        /// <summary>
        /// Delete a related item by id for productSizes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamBuilderConfigsIdProductSizesFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for productSizes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns>ProductSize</returns>
        ProductSize TeamBuilderConfigsIdProductSizesFkGet (string id, string fk);

        /// <summary>
        /// Find a related item by id for productSizes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns>ApiResponse of ProductSize</returns>
        ApiResponse<ProductSize> TeamBuilderConfigsIdProductSizesFkGetWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for productSizes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductSize</returns>
        ProductSize TeamBuilderConfigsIdProductSizesFkPut (string id, string fk, ProductSize data = null);

        /// <summary>
        /// Update a related item by id for productSizes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductSize</returns>
        ApiResponse<ProductSize> TeamBuilderConfigsIdProductSizesFkPutWithHttpInfo (string id, string fk, ProductSize data = null);
        /// <summary>
        /// Queries productSizes of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;ProductSize&gt;</returns>
        List<ProductSize> TeamBuilderConfigsIdProductSizesGet (string id, string filter = null);

        /// <summary>
        /// Queries productSizes of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductSize&gt;</returns>
        ApiResponse<List<ProductSize>> TeamBuilderConfigsIdProductSizesGetWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Counts materials of ProductSize.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 TeamBuilderConfigsIdProductSizesNkMaterialsCountGet (string id, string nk, string where = null);

        /// <summary>
        /// Counts materials of ProductSize.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> TeamBuilderConfigsIdProductSizesNkMaterialsCountGetWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all materials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <returns></returns>
        void TeamBuilderConfigsIdProductSizesNkMaterialsDelete (string id, string nk);

        /// <summary>
        /// Deletes all materials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamBuilderConfigsIdProductSizesNkMaterialsDeleteWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for materials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns></returns>
        void TeamBuilderConfigsIdProductSizesNkMaterialsFkDelete (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for materials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamBuilderConfigsIdProductSizesNkMaterialsFkDeleteWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for materials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns>ProductMaterial</returns>
        ProductMaterial TeamBuilderConfigsIdProductSizesNkMaterialsFkGet (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for materials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns>ApiResponse of ProductMaterial</returns>
        ApiResponse<ProductMaterial> TeamBuilderConfigsIdProductSizesNkMaterialsFkGetWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for materials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductMaterial</returns>
        ProductMaterial TeamBuilderConfigsIdProductSizesNkMaterialsFkPut (string id, string nk, string fk, ProductMaterial data = null);

        /// <summary>
        /// Update a related item by id for materials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductMaterial</returns>
        ApiResponse<ProductMaterial> TeamBuilderConfigsIdProductSizesNkMaterialsFkPutWithHttpInfo (string id, string nk, string fk, ProductMaterial data = null);
        /// <summary>
        /// Queries materials of ProductSize.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;ProductMaterial&gt;</returns>
        List<ProductMaterial> TeamBuilderConfigsIdProductSizesNkMaterialsGet (string id, string nk, string filter = null);

        /// <summary>
        /// Queries materials of ProductSize.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductMaterial&gt;</returns>
        ApiResponse<List<ProductMaterial>> TeamBuilderConfigsIdProductSizesNkMaterialsGetWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in materials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductMaterial</returns>
        ProductMaterial TeamBuilderConfigsIdProductSizesNkMaterialsPost (string id, string nk, ProductMaterial data = null);

        /// <summary>
        /// Creates a new instance in materials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductMaterial</returns>
        ApiResponse<ProductMaterial> TeamBuilderConfigsIdProductSizesNkMaterialsPostWithHttpInfo (string id, string nk, ProductMaterial data = null);
        /// <summary>
        /// Remove the materials relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns></returns>
        void TeamBuilderConfigsIdProductSizesNkMaterialsRelFkDelete (string id, string nk, string fk);

        /// <summary>
        /// Remove the materials relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamBuilderConfigsIdProductSizesNkMaterialsRelFkDeleteWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Check the existence of materials relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns>bool?</returns>
        bool? TeamBuilderConfigsIdProductSizesNkMaterialsRelFkHead (string id, string nk, string fk);

        /// <summary>
        /// Check the existence of materials relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> TeamBuilderConfigsIdProductSizesNkMaterialsRelFkHeadWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Add a related item by id for materials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductSizeMaterial</returns>
        ProductSizeMaterial TeamBuilderConfigsIdProductSizesNkMaterialsRelFkPut (string id, string nk, string fk, ProductSizeMaterial data = null);

        /// <summary>
        /// Add a related item by id for materials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductSizeMaterial</returns>
        ApiResponse<ProductSizeMaterial> TeamBuilderConfigsIdProductSizesNkMaterialsRelFkPutWithHttpInfo (string id, string nk, string fk, ProductSizeMaterial data = null);
        /// <summary>
        /// Fetches belongsTo relation pdfColorProfile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ProductPdfColorProfile</returns>
        ProductPdfColorProfile TeamBuilderConfigsIdProductSizesNkPdfColorProfileGet (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation pdfColorProfile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of ProductPdfColorProfile</returns>
        ApiResponse<ProductPdfColorProfile> TeamBuilderConfigsIdProductSizesNkPdfColorProfileGetWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Counts products of ProductSize.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 TeamBuilderConfigsIdProductSizesNkProductsCountGet (string id, string nk, string where = null);

        /// <summary>
        /// Counts products of ProductSize.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> TeamBuilderConfigsIdProductSizesNkProductsCountGetWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all products of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <returns></returns>
        void TeamBuilderConfigsIdProductSizesNkProductsDelete (string id, string nk);

        /// <summary>
        /// Deletes all products of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamBuilderConfigsIdProductSizesNkProductsDeleteWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for products.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for products</param>
        /// <returns></returns>
        void TeamBuilderConfigsIdProductSizesNkProductsFkDelete (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for products.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for products</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamBuilderConfigsIdProductSizesNkProductsFkDeleteWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for products.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for products</param>
        /// <returns>Product</returns>
        Product TeamBuilderConfigsIdProductSizesNkProductsFkGet (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for products.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for products</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> TeamBuilderConfigsIdProductSizesNkProductsFkGetWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for products.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for products</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Product</returns>
        Product TeamBuilderConfigsIdProductSizesNkProductsFkPut (string id, string nk, string fk, Product data = null);

        /// <summary>
        /// Update a related item by id for products.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for products</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> TeamBuilderConfigsIdProductSizesNkProductsFkPutWithHttpInfo (string id, string nk, string fk, Product data = null);
        /// <summary>
        /// Queries products of ProductSize.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;Product&gt;</returns>
        List<Product> TeamBuilderConfigsIdProductSizesNkProductsGet (string id, string nk, string filter = null);

        /// <summary>
        /// Queries products of ProductSize.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        ApiResponse<List<Product>> TeamBuilderConfigsIdProductSizesNkProductsGetWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in products of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Product</returns>
        Product TeamBuilderConfigsIdProductSizesNkProductsPost (string id, string nk, Product data = null);

        /// <summary>
        /// Creates a new instance in products of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> TeamBuilderConfigsIdProductSizesNkProductsPostWithHttpInfo (string id, string nk, Product data = null);
        /// <summary>
        /// Counts sizeMaterials of ProductSize.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 TeamBuilderConfigsIdProductSizesNkSizeMaterialsCountGet (string id, string nk, string where = null);

        /// <summary>
        /// Counts sizeMaterials of ProductSize.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> TeamBuilderConfigsIdProductSizesNkSizeMaterialsCountGetWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all sizeMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <returns></returns>
        void TeamBuilderConfigsIdProductSizesNkSizeMaterialsDelete (string id, string nk);

        /// <summary>
        /// Deletes all sizeMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamBuilderConfigsIdProductSizesNkSizeMaterialsDeleteWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for sizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for sizeMaterials</param>
        /// <returns></returns>
        void TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkDelete (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for sizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for sizeMaterials</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkDeleteWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for sizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for sizeMaterials</param>
        /// <returns>ProductSizeMaterial</returns>
        ProductSizeMaterial TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkGet (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for sizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for sizeMaterials</param>
        /// <returns>ApiResponse of ProductSizeMaterial</returns>
        ApiResponse<ProductSizeMaterial> TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkGetWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for sizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for sizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductSizeMaterial</returns>
        ProductSizeMaterial TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkPut (string id, string nk, string fk, ProductSizeMaterial data = null);

        /// <summary>
        /// Update a related item by id for sizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for sizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductSizeMaterial</returns>
        ApiResponse<ProductSizeMaterial> TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkPutWithHttpInfo (string id, string nk, string fk, ProductSizeMaterial data = null);
        /// <summary>
        /// Queries sizeMaterials of ProductSize.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;ProductSizeMaterial&gt;</returns>
        List<ProductSizeMaterial> TeamBuilderConfigsIdProductSizesNkSizeMaterialsGet (string id, string nk, string filter = null);

        /// <summary>
        /// Queries sizeMaterials of ProductSize.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductSizeMaterial&gt;</returns>
        ApiResponse<List<ProductSizeMaterial>> TeamBuilderConfigsIdProductSizesNkSizeMaterialsGetWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in sizeMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductSizeMaterial</returns>
        ProductSizeMaterial TeamBuilderConfigsIdProductSizesNkSizeMaterialsPost (string id, string nk, ProductSizeMaterial data = null);

        /// <summary>
        /// Creates a new instance in sizeMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductSizeMaterial</returns>
        ApiResponse<ProductSizeMaterial> TeamBuilderConfigsIdProductSizesNkSizeMaterialsPostWithHttpInfo (string id, string nk, ProductSizeMaterial data = null);
        /// <summary>
        /// Fetches belongsTo relation type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ProductType</returns>
        ProductType TeamBuilderConfigsIdProductSizesNkTypeGet (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of ProductType</returns>
        ApiResponse<ProductType> TeamBuilderConfigsIdProductSizesNkTypeGetWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Creates a new instance in productSizes of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductSize</returns>
        ProductSize TeamBuilderConfigsIdProductSizesPost (string id, ProductSize data = null);

        /// <summary>
        /// Creates a new instance in productSizes of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductSize</returns>
        ApiResponse<ProductSize> TeamBuilderConfigsIdProductSizesPostWithHttpInfo (string id, ProductSize data = null);
        /// <summary>
        /// Remove the productSizes relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns></returns>
        void TeamBuilderConfigsIdProductSizesRelFkDelete (string id, string fk);

        /// <summary>
        /// Remove the productSizes relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamBuilderConfigsIdProductSizesRelFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Check the existence of productSizes relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns>bool?</returns>
        bool? TeamBuilderConfigsIdProductSizesRelFkHead (string id, string fk);

        /// <summary>
        /// Check the existence of productSizes relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> TeamBuilderConfigsIdProductSizesRelFkHeadWithHttpInfo (string id, string fk);
        /// <summary>
        /// Add a related item by id for productSizes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamBuilderConfigProductSize</returns>
        TeamBuilderConfigProductSize TeamBuilderConfigsIdProductSizesRelFkPut (string id, string fk, TeamBuilderConfigProductSize data = null);

        /// <summary>
        /// Add a related item by id for productSizes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfigProductSize</returns>
        ApiResponse<TeamBuilderConfigProductSize> TeamBuilderConfigsIdProductSizesRelFkPutWithHttpInfo (string id, string fk, TeamBuilderConfigProductSize data = null);
        /// <summary>
        /// Counts productTypes of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 TeamBuilderConfigsIdProductTypesCountGet (string id, string where = null);

        /// <summary>
        /// Counts productTypes of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> TeamBuilderConfigsIdProductTypesCountGetWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all productTypes of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns></returns>
        void TeamBuilderConfigsIdProductTypesDelete (string id);

        /// <summary>
        /// Deletes all productTypes of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamBuilderConfigsIdProductTypesDeleteWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for productTypes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns></returns>
        void TeamBuilderConfigsIdProductTypesFkDelete (string id, string fk);

        /// <summary>
        /// Delete a related item by id for productTypes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamBuilderConfigsIdProductTypesFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for productTypes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns>ProductType</returns>
        ProductType TeamBuilderConfigsIdProductTypesFkGet (string id, string fk);

        /// <summary>
        /// Find a related item by id for productTypes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns>ApiResponse of ProductType</returns>
        ApiResponse<ProductType> TeamBuilderConfigsIdProductTypesFkGetWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for productTypes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductType</returns>
        ProductType TeamBuilderConfigsIdProductTypesFkPut (string id, string fk, ProductType data = null);

        /// <summary>
        /// Update a related item by id for productTypes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductType</returns>
        ApiResponse<ProductType> TeamBuilderConfigsIdProductTypesFkPutWithHttpInfo (string id, string fk, ProductType data = null);
        /// <summary>
        /// Queries productTypes of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;ProductType&gt;</returns>
        List<ProductType> TeamBuilderConfigsIdProductTypesGet (string id, string filter = null);

        /// <summary>
        /// Queries productTypes of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductType&gt;</returns>
        ApiResponse<List<ProductType>> TeamBuilderConfigsIdProductTypesGetWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Fetches belongsTo relation group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ProductGroup</returns>
        ProductGroup TeamBuilderConfigsIdProductTypesNkGroupGet (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of ProductGroup</returns>
        ApiResponse<ProductGroup> TeamBuilderConfigsIdProductTypesNkGroupGetWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Counts sizes of ProductType.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 TeamBuilderConfigsIdProductTypesNkSizesCountGet (string id, string nk, string where = null);

        /// <summary>
        /// Counts sizes of ProductType.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> TeamBuilderConfigsIdProductTypesNkSizesCountGetWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all sizes of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <returns></returns>
        void TeamBuilderConfigsIdProductTypesNkSizesDelete (string id, string nk);

        /// <summary>
        /// Deletes all sizes of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamBuilderConfigsIdProductTypesNkSizesDeleteWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for sizes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="fk">Foreign key for sizes</param>
        /// <returns></returns>
        void TeamBuilderConfigsIdProductTypesNkSizesFkDelete (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for sizes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="fk">Foreign key for sizes</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamBuilderConfigsIdProductTypesNkSizesFkDeleteWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for sizes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="fk">Foreign key for sizes</param>
        /// <returns>ProductSize</returns>
        ProductSize TeamBuilderConfigsIdProductTypesNkSizesFkGet (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for sizes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="fk">Foreign key for sizes</param>
        /// <returns>ApiResponse of ProductSize</returns>
        ApiResponse<ProductSize> TeamBuilderConfigsIdProductTypesNkSizesFkGetWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for sizes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="fk">Foreign key for sizes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductSize</returns>
        ProductSize TeamBuilderConfigsIdProductTypesNkSizesFkPut (string id, string nk, string fk, ProductSize data = null);

        /// <summary>
        /// Update a related item by id for sizes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="fk">Foreign key for sizes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductSize</returns>
        ApiResponse<ProductSize> TeamBuilderConfigsIdProductTypesNkSizesFkPutWithHttpInfo (string id, string nk, string fk, ProductSize data = null);
        /// <summary>
        /// Queries sizes of ProductType.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;ProductSize&gt;</returns>
        List<ProductSize> TeamBuilderConfigsIdProductTypesNkSizesGet (string id, string nk, string filter = null);

        /// <summary>
        /// Queries sizes of ProductType.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductSize&gt;</returns>
        ApiResponse<List<ProductSize>> TeamBuilderConfigsIdProductTypesNkSizesGetWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in sizes of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductSize</returns>
        ProductSize TeamBuilderConfigsIdProductTypesNkSizesPost (string id, string nk, ProductSize data = null);

        /// <summary>
        /// Creates a new instance in sizes of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductSize</returns>
        ApiResponse<ProductSize> TeamBuilderConfigsIdProductTypesNkSizesPostWithHttpInfo (string id, string nk, ProductSize data = null);
        /// <summary>
        /// Creates a new instance in productTypes of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductType</returns>
        ProductType TeamBuilderConfigsIdProductTypesPost (string id, ProductType data = null);

        /// <summary>
        /// Creates a new instance in productTypes of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductType</returns>
        ApiResponse<ProductType> TeamBuilderConfigsIdProductTypesPostWithHttpInfo (string id, ProductType data = null);
        /// <summary>
        /// Remove the productTypes relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns></returns>
        void TeamBuilderConfigsIdProductTypesRelFkDelete (string id, string fk);

        /// <summary>
        /// Remove the productTypes relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamBuilderConfigsIdProductTypesRelFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Check the existence of productTypes relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns>bool?</returns>
        bool? TeamBuilderConfigsIdProductTypesRelFkHead (string id, string fk);

        /// <summary>
        /// Check the existence of productTypes relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> TeamBuilderConfigsIdProductTypesRelFkHeadWithHttpInfo (string id, string fk);
        /// <summary>
        /// Add a related item by id for productTypes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamBuilderConfigProductType</returns>
        TeamBuilderConfigProductType TeamBuilderConfigsIdProductTypesRelFkPut (string id, string fk, TeamBuilderConfigProductType data = null);

        /// <summary>
        /// Add a related item by id for productTypes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfigProductType</returns>
        ApiResponse<TeamBuilderConfigProductType> TeamBuilderConfigsIdProductTypesRelFkPutWithHttpInfo (string id, string fk, TeamBuilderConfigProductType data = null);
        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>TeamBuilderConfig</returns>
        TeamBuilderConfig TeamBuilderConfigsIdPut (string id, TeamBuilderConfig data = null);

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfig</returns>
        ApiResponse<TeamBuilderConfig> TeamBuilderConfigsIdPutWithHttpInfo (string id, TeamBuilderConfig data = null);
        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>TeamBuilderConfig</returns>
        TeamBuilderConfig TeamBuilderConfigsIdReplacePost (string id, TeamBuilderConfig data = null);

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfig</returns>
        ApiResponse<TeamBuilderConfig> TeamBuilderConfigsIdReplacePostWithHttpInfo (string id, TeamBuilderConfig data = null);
        /// <summary>
        /// Fetches belongsTo relation team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Team</returns>
        Team TeamBuilderConfigsIdTeamGet (string id, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> TeamBuilderConfigsIdTeamGetWithHttpInfo (string id, bool? refresh = null);
        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>TeamBuilderConfig</returns>
        TeamBuilderConfig TeamBuilderConfigsPatch (TeamBuilderConfig data = null);

        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfig</returns>
        ApiResponse<TeamBuilderConfig> TeamBuilderConfigsPatchWithHttpInfo (TeamBuilderConfig data = null);
        /// <summary>
        /// Create a new instance of the model and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>TeamBuilderConfig</returns>
        TeamBuilderConfig TeamBuilderConfigsPost (TeamBuilderConfig data = null);

        /// <summary>
        /// Create a new instance of the model and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfig</returns>
        ApiResponse<TeamBuilderConfig> TeamBuilderConfigsPostWithHttpInfo (TeamBuilderConfig data = null);
        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>TeamBuilderConfig</returns>
        TeamBuilderConfig TeamBuilderConfigsPut (TeamBuilderConfig data = null);

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfig</returns>
        ApiResponse<TeamBuilderConfig> TeamBuilderConfigsPutWithHttpInfo (TeamBuilderConfig data = null);
        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>TeamBuilderConfig</returns>
        TeamBuilderConfig TeamBuilderConfigsReplaceOrCreatePost (TeamBuilderConfig data = null);

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfig</returns>
        ApiResponse<TeamBuilderConfig> TeamBuilderConfigsReplaceOrCreatePostWithHttpInfo (TeamBuilderConfig data = null);
        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 TeamBuilderConfigsUpdatePost (string where = null, TeamBuilderConfig data = null);

        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> TeamBuilderConfigsUpdatePostWithHttpInfo (string where = null, TeamBuilderConfig data = null);
        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>TeamBuilderConfig</returns>
        TeamBuilderConfig TeamBuilderConfigsUpsertWithWherePost (string where = null, TeamBuilderConfig data = null);

        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfig</returns>
        ApiResponse<TeamBuilderConfig> TeamBuilderConfigsUpsertWithWherePostWithHttpInfo (string where = null, TeamBuilderConfig data = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> TeamBuilderConfigsChangeStreamGetAsync (string options = null);

        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> TeamBuilderConfigsChangeStreamGetAsyncWithHttpInfo (string options = null);
        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> TeamBuilderConfigsChangeStreamPostAsync (string options = null);

        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> TeamBuilderConfigsChangeStreamPostAsyncWithHttpInfo (string options = null);
        /// <summary>
        /// Count instances of the model matched by where from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> TeamBuilderConfigsCountGetAsync (string where = null);

        /// <summary>
        /// Count instances of the model matched by where from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TeamBuilderConfigsCountGetAsyncWithHttpInfo (string where = null);
        /// <summary>
        /// Find first instance of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of TeamBuilderConfig</returns>
        System.Threading.Tasks.Task<TeamBuilderConfig> TeamBuilderConfigsFindOneGetAsync (string filter = null);

        /// <summary>
        /// Find first instance of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfig>> TeamBuilderConfigsFindOneGetAsyncWithHttpInfo (string filter = null);
        /// <summary>
        /// Find all instances of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of List&lt;TeamBuilderConfig&gt;</returns>
        System.Threading.Tasks.Task<List<TeamBuilderConfig>> TeamBuilderConfigsGetAsync (string filter = null);

        /// <summary>
        /// Find all instances of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamBuilderConfig&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamBuilderConfig>>> TeamBuilderConfigsGetAsyncWithHttpInfo (string filter = null);
        /// <summary>
        /// Reset Team keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TeamBuilderConfig</returns>
        System.Threading.Tasks.Task<TeamBuilderConfig> TeamBuilderConfigsGlobalGetAsync ();

        /// <summary>
        /// Reset Team keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TeamBuilderConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfig>> TeamBuilderConfigsGlobalGetAsyncWithHttpInfo ();
        /// <summary>
        /// Delete a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TeamBuilderConfigsIdDeleteAsync (string id);

        /// <summary>
        /// Delete a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> TeamBuilderConfigsIdExistsGetAsync (string id);

        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> TeamBuilderConfigsIdExistsGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Find a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of TeamBuilderConfig</returns>
        System.Threading.Tasks.Task<TeamBuilderConfig> TeamBuilderConfigsIdGetAsync (string id, string filter = null);

        /// <summary>
        /// Find a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfig>> TeamBuilderConfigsIdGetAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> TeamBuilderConfigsIdHeadAsync (string id);

        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> TeamBuilderConfigsIdHeadAsyncWithHttpInfo (string id);
        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of TeamBuilderConfig</returns>
        System.Threading.Tasks.Task<TeamBuilderConfig> TeamBuilderConfigsIdPatchAsync (string id, TeamBuilderConfig data = null);

        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfig>> TeamBuilderConfigsIdPatchAsyncWithHttpInfo (string id, TeamBuilderConfig data = null);
        /// <summary>
        /// Counts portals of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> TeamBuilderConfigsIdPortalsCountGetAsync (string id, string where = null);

        /// <summary>
        /// Counts portals of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TeamBuilderConfigsIdPortalsCountGetAsyncWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all portals of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamBuilderConfigsIdPortalsDeleteAsync (string id);

        /// <summary>
        /// Deletes all portals of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdPortalsDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamBuilderConfigsIdPortalsFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Delete a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdPortalsFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of Portal</returns>
        System.Threading.Tasks.Task<Portal> TeamBuilderConfigsIdPortalsFkGetAsync (string id, string fk);

        /// <summary>
        /// Find a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        System.Threading.Tasks.Task<ApiResponse<Portal>> TeamBuilderConfigsIdPortalsFkGetAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Portal</returns>
        System.Threading.Tasks.Task<Portal> TeamBuilderConfigsIdPortalsFkPutAsync (string id, string fk, Portal data = null);

        /// <summary>
        /// Update a related item by id for portals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        System.Threading.Tasks.Task<ApiResponse<Portal>> TeamBuilderConfigsIdPortalsFkPutAsyncWithHttpInfo (string id, string fk, Portal data = null);
        /// <summary>
        /// Queries portals of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;Portal&gt;</returns>
        System.Threading.Tasks.Task<List<Portal>> TeamBuilderConfigsIdPortalsGetAsync (string id, string filter = null);

        /// <summary>
        /// Queries portals of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Portal&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Portal>>> TeamBuilderConfigsIdPortalsGetAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in portals of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Portal</returns>
        System.Threading.Tasks.Task<Portal> TeamBuilderConfigsIdPortalsPostAsync (string id, Portal data = null);

        /// <summary>
        /// Creates a new instance in portals of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        System.Threading.Tasks.Task<ApiResponse<Portal>> TeamBuilderConfigsIdPortalsPostAsyncWithHttpInfo (string id, Portal data = null);
        /// <summary>
        /// Counts productGroups of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> TeamBuilderConfigsIdProductGroupsCountGetAsync (string id, string where = null);

        /// <summary>
        /// Counts productGroups of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TeamBuilderConfigsIdProductGroupsCountGetAsyncWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all productGroups of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamBuilderConfigsIdProductGroupsDeleteAsync (string id);

        /// <summary>
        /// Deletes all productGroups of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductGroupsDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for productGroups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamBuilderConfigsIdProductGroupsFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Delete a related item by id for productGroups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductGroupsFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for productGroups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns>Task of ProductGroup</returns>
        System.Threading.Tasks.Task<ProductGroup> TeamBuilderConfigsIdProductGroupsFkGetAsync (string id, string fk);

        /// <summary>
        /// Find a related item by id for productGroups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns>Task of ApiResponse (ProductGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductGroup>> TeamBuilderConfigsIdProductGroupsFkGetAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for productGroups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductGroup</returns>
        System.Threading.Tasks.Task<ProductGroup> TeamBuilderConfigsIdProductGroupsFkPutAsync (string id, string fk, ProductGroup data = null);

        /// <summary>
        /// Update a related item by id for productGroups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductGroup>> TeamBuilderConfigsIdProductGroupsFkPutAsyncWithHttpInfo (string id, string fk, ProductGroup data = null);
        /// <summary>
        /// Queries productGroups of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;ProductGroup&gt;</returns>
        System.Threading.Tasks.Task<List<ProductGroup>> TeamBuilderConfigsIdProductGroupsGetAsync (string id, string filter = null);

        /// <summary>
        /// Queries productGroups of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProductGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductGroup>>> TeamBuilderConfigsIdProductGroupsGetAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Counts types of ProductGroup.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> TeamBuilderConfigsIdProductGroupsNkTypesCountGetAsync (string id, string nk, string where = null);

        /// <summary>
        /// Counts types of ProductGroup.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TeamBuilderConfigsIdProductGroupsNkTypesCountGetAsyncWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all types of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamBuilderConfigsIdProductGroupsNkTypesDeleteAsync (string id, string nk);

        /// <summary>
        /// Deletes all types of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductGroupsNkTypesDeleteAsyncWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="fk">Foreign key for types</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamBuilderConfigsIdProductGroupsNkTypesFkDeleteAsync (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="fk">Foreign key for types</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductGroupsNkTypesFkDeleteAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="fk">Foreign key for types</param>
        /// <returns>Task of ProductType</returns>
        System.Threading.Tasks.Task<ProductType> TeamBuilderConfigsIdProductGroupsNkTypesFkGetAsync (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="fk">Foreign key for types</param>
        /// <returns>Task of ApiResponse (ProductType)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductType>> TeamBuilderConfigsIdProductGroupsNkTypesFkGetAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="fk">Foreign key for types</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductType</returns>
        System.Threading.Tasks.Task<ProductType> TeamBuilderConfigsIdProductGroupsNkTypesFkPutAsync (string id, string nk, string fk, ProductType data = null);

        /// <summary>
        /// Update a related item by id for types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="fk">Foreign key for types</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductType)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductType>> TeamBuilderConfigsIdProductGroupsNkTypesFkPutAsyncWithHttpInfo (string id, string nk, string fk, ProductType data = null);
        /// <summary>
        /// Queries types of ProductGroup.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;ProductType&gt;</returns>
        System.Threading.Tasks.Task<List<ProductType>> TeamBuilderConfigsIdProductGroupsNkTypesGetAsync (string id, string nk, string filter = null);

        /// <summary>
        /// Queries types of ProductGroup.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProductType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductType>>> TeamBuilderConfigsIdProductGroupsNkTypesGetAsyncWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in types of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductType</returns>
        System.Threading.Tasks.Task<ProductType> TeamBuilderConfigsIdProductGroupsNkTypesPostAsync (string id, string nk, ProductType data = null);

        /// <summary>
        /// Creates a new instance in types of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductType)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductType>> TeamBuilderConfigsIdProductGroupsNkTypesPostAsyncWithHttpInfo (string id, string nk, ProductType data = null);
        /// <summary>
        /// Creates a new instance in productGroups of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductGroup</returns>
        System.Threading.Tasks.Task<ProductGroup> TeamBuilderConfigsIdProductGroupsPostAsync (string id, ProductGroup data = null);

        /// <summary>
        /// Creates a new instance in productGroups of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductGroup>> TeamBuilderConfigsIdProductGroupsPostAsyncWithHttpInfo (string id, ProductGroup data = null);
        /// <summary>
        /// Remove the productGroups relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamBuilderConfigsIdProductGroupsRelFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Remove the productGroups relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductGroupsRelFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Check the existence of productGroups relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> TeamBuilderConfigsIdProductGroupsRelFkHeadAsync (string id, string fk);

        /// <summary>
        /// Check the existence of productGroups relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> TeamBuilderConfigsIdProductGroupsRelFkHeadAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Add a related item by id for productGroups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamBuilderConfigProductGroup</returns>
        System.Threading.Tasks.Task<TeamBuilderConfigProductGroup> TeamBuilderConfigsIdProductGroupsRelFkPutAsync (string id, string fk, TeamBuilderConfigProductGroup data = null);

        /// <summary>
        /// Add a related item by id for productGroups.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfigProductGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfigProductGroup>> TeamBuilderConfigsIdProductGroupsRelFkPutAsyncWithHttpInfo (string id, string fk, TeamBuilderConfigProductGroup data = null);
        /// <summary>
        /// Counts productSizeMaterials of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> TeamBuilderConfigsIdProductSizeMaterialsCountGetAsync (string id, string where = null);

        /// <summary>
        /// Counts productSizeMaterials of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TeamBuilderConfigsIdProductSizeMaterialsCountGetAsyncWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all productSizeMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamBuilderConfigsIdProductSizeMaterialsDeleteAsync (string id);

        /// <summary>
        /// Deletes all productSizeMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductSizeMaterialsDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for productSizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamBuilderConfigsIdProductSizeMaterialsFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Delete a related item by id for productSizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductSizeMaterialsFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for productSizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>Task of ProductSizeMaterial</returns>
        System.Threading.Tasks.Task<ProductSizeMaterial> TeamBuilderConfigsIdProductSizeMaterialsFkGetAsync (string id, string fk);

        /// <summary>
        /// Find a related item by id for productSizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>Task of ApiResponse (ProductSizeMaterial)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductSizeMaterial>> TeamBuilderConfigsIdProductSizeMaterialsFkGetAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for productSizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductSizeMaterial</returns>
        System.Threading.Tasks.Task<ProductSizeMaterial> TeamBuilderConfigsIdProductSizeMaterialsFkPutAsync (string id, string fk, ProductSizeMaterial data = null);

        /// <summary>
        /// Update a related item by id for productSizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductSizeMaterial)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductSizeMaterial>> TeamBuilderConfigsIdProductSizeMaterialsFkPutAsyncWithHttpInfo (string id, string fk, ProductSizeMaterial data = null);
        /// <summary>
        /// Queries productSizeMaterials of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;ProductSizeMaterial&gt;</returns>
        System.Threading.Tasks.Task<List<ProductSizeMaterial>> TeamBuilderConfigsIdProductSizeMaterialsGetAsync (string id, string filter = null);

        /// <summary>
        /// Queries productSizeMaterials of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProductSizeMaterial&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductSizeMaterial>>> TeamBuilderConfigsIdProductSizeMaterialsGetAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Fetches belongsTo relation material.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ProductMaterial</returns>
        System.Threading.Tasks.Task<ProductMaterial> TeamBuilderConfigsIdProductSizeMaterialsNkMaterialGetAsync (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation material.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductMaterial)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductMaterial>> TeamBuilderConfigsIdProductSizeMaterialsNkMaterialGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Fetches belongsTo relation pdfColorProfile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ProductPdfColorProfile</returns>
        System.Threading.Tasks.Task<ProductPdfColorProfile> TeamBuilderConfigsIdProductSizeMaterialsNkPdfColorProfileGetAsync (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation pdfColorProfile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductPdfColorProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductPdfColorProfile>> TeamBuilderConfigsIdProductSizeMaterialsNkPdfColorProfileGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Fetches belongsTo relation size.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ProductSize</returns>
        System.Threading.Tasks.Task<ProductSize> TeamBuilderConfigsIdProductSizeMaterialsNkSizeGetAsync (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation size.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductSize)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductSize>> TeamBuilderConfigsIdProductSizeMaterialsNkSizeGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Fetches belongsTo relation team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> TeamBuilderConfigsIdProductSizeMaterialsNkTeamGetAsync (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> TeamBuilderConfigsIdProductSizeMaterialsNkTeamGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Creates a new instance in productSizeMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductSizeMaterial</returns>
        System.Threading.Tasks.Task<ProductSizeMaterial> TeamBuilderConfigsIdProductSizeMaterialsPostAsync (string id, ProductSizeMaterial data = null);

        /// <summary>
        /// Creates a new instance in productSizeMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductSizeMaterial)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductSizeMaterial>> TeamBuilderConfigsIdProductSizeMaterialsPostAsyncWithHttpInfo (string id, ProductSizeMaterial data = null);
        /// <summary>
        /// Counts productSizeMaterialsRel of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> TeamBuilderConfigsIdProductSizeMaterialsRelCountGetAsync (string id, string where = null);

        /// <summary>
        /// Counts productSizeMaterialsRel of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TeamBuilderConfigsIdProductSizeMaterialsRelCountGetAsyncWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all productSizeMaterialsRel of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamBuilderConfigsIdProductSizeMaterialsRelDeleteAsync (string id);

        /// <summary>
        /// Deletes all productSizeMaterialsRel of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductSizeMaterialsRelDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Remove the productSizeMaterials relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamBuilderConfigsIdProductSizeMaterialsRelFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Remove the productSizeMaterials relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductSizeMaterialsRelFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Delete a related item by id for productSizeMaterialsRel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterialsRel</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamBuilderConfigsIdProductSizeMaterialsRelFkDelete_0Async (string id, string fk);

        /// <summary>
        /// Delete a related item by id for productSizeMaterialsRel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterialsRel</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductSizeMaterialsRelFkDelete_0AsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for productSizeMaterialsRel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterialsRel</param>
        /// <returns>Task of TeamBuilderConfigProductSizeMaterial</returns>
        System.Threading.Tasks.Task<TeamBuilderConfigProductSizeMaterial> TeamBuilderConfigsIdProductSizeMaterialsRelFkGetAsync (string id, string fk);

        /// <summary>
        /// Find a related item by id for productSizeMaterialsRel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterialsRel</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfigProductSizeMaterial)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfigProductSizeMaterial>> TeamBuilderConfigsIdProductSizeMaterialsRelFkGetAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Check the existence of productSizeMaterials relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> TeamBuilderConfigsIdProductSizeMaterialsRelFkHeadAsync (string id, string fk);

        /// <summary>
        /// Check the existence of productSizeMaterials relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> TeamBuilderConfigsIdProductSizeMaterialsRelFkHeadAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Add a related item by id for productSizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamBuilderConfigProductSizeMaterial</returns>
        System.Threading.Tasks.Task<TeamBuilderConfigProductSizeMaterial> TeamBuilderConfigsIdProductSizeMaterialsRelFkPutAsync (string id, string fk, TeamBuilderConfigProductSizeMaterial data = null);

        /// <summary>
        /// Add a related item by id for productSizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfigProductSizeMaterial)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfigProductSizeMaterial>> TeamBuilderConfigsIdProductSizeMaterialsRelFkPutAsyncWithHttpInfo (string id, string fk, TeamBuilderConfigProductSizeMaterial data = null);
        /// <summary>
        /// Update a related item by id for productSizeMaterialsRel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterialsRel</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamBuilderConfigProductSizeMaterial</returns>
        System.Threading.Tasks.Task<TeamBuilderConfigProductSizeMaterial> TeamBuilderConfigsIdProductSizeMaterialsRelFkPut_0Async (string id, string fk, TeamBuilderConfigProductSizeMaterial data = null);

        /// <summary>
        /// Update a related item by id for productSizeMaterialsRel.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterialsRel</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfigProductSizeMaterial)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfigProductSizeMaterial>> TeamBuilderConfigsIdProductSizeMaterialsRelFkPut_0AsyncWithHttpInfo (string id, string fk, TeamBuilderConfigProductSizeMaterial data = null);
        /// <summary>
        /// Queries productSizeMaterialsRel of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;TeamBuilderConfigProductSizeMaterial&gt;</returns>
        System.Threading.Tasks.Task<List<TeamBuilderConfigProductSizeMaterial>> TeamBuilderConfigsIdProductSizeMaterialsRelGetAsync (string id, string filter = null);

        /// <summary>
        /// Queries productSizeMaterialsRel of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamBuilderConfigProductSizeMaterial&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamBuilderConfigProductSizeMaterial>>> TeamBuilderConfigsIdProductSizeMaterialsRelGetAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Fetches belongsTo relation builderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterialsRel.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of TeamBuilderConfig</returns>
        System.Threading.Tasks.Task<TeamBuilderConfig> TeamBuilderConfigsIdProductSizeMaterialsRelNkBuilderConfigGetAsync (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation builderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterialsRel.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfig>> TeamBuilderConfigsIdProductSizeMaterialsRelNkBuilderConfigGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Fetches belongsTo relation pdfColorProfile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterialsRel.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ProductPdfColorProfile</returns>
        System.Threading.Tasks.Task<ProductPdfColorProfile> TeamBuilderConfigsIdProductSizeMaterialsRelNkPdfColorProfileGetAsync (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation pdfColorProfile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterialsRel.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductPdfColorProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductPdfColorProfile>> TeamBuilderConfigsIdProductSizeMaterialsRelNkPdfColorProfileGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Fetches belongsTo relation productSizeMaterial.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterialsRel.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ProductSizeMaterial</returns>
        System.Threading.Tasks.Task<ProductSizeMaterial> TeamBuilderConfigsIdProductSizeMaterialsRelNkProductSizeMaterialGetAsync (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation productSizeMaterial.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterialsRel.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductSizeMaterial)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductSizeMaterial>> TeamBuilderConfigsIdProductSizeMaterialsRelNkProductSizeMaterialGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Creates a new instance in productSizeMaterialsRel of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamBuilderConfigProductSizeMaterial</returns>
        System.Threading.Tasks.Task<TeamBuilderConfigProductSizeMaterial> TeamBuilderConfigsIdProductSizeMaterialsRelPostAsync (string id, TeamBuilderConfigProductSizeMaterial data = null);

        /// <summary>
        /// Creates a new instance in productSizeMaterialsRel of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfigProductSizeMaterial)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfigProductSizeMaterial>> TeamBuilderConfigsIdProductSizeMaterialsRelPostAsyncWithHttpInfo (string id, TeamBuilderConfigProductSizeMaterial data = null);
        /// <summary>
        /// Counts productSizes of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> TeamBuilderConfigsIdProductSizesCountGetAsync (string id, string where = null);

        /// <summary>
        /// Counts productSizes of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TeamBuilderConfigsIdProductSizesCountGetAsyncWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all productSizes of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamBuilderConfigsIdProductSizesDeleteAsync (string id);

        /// <summary>
        /// Deletes all productSizes of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductSizesDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for productSizes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamBuilderConfigsIdProductSizesFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Delete a related item by id for productSizes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductSizesFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for productSizes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns>Task of ProductSize</returns>
        System.Threading.Tasks.Task<ProductSize> TeamBuilderConfigsIdProductSizesFkGetAsync (string id, string fk);

        /// <summary>
        /// Find a related item by id for productSizes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns>Task of ApiResponse (ProductSize)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductSize>> TeamBuilderConfigsIdProductSizesFkGetAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for productSizes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductSize</returns>
        System.Threading.Tasks.Task<ProductSize> TeamBuilderConfigsIdProductSizesFkPutAsync (string id, string fk, ProductSize data = null);

        /// <summary>
        /// Update a related item by id for productSizes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductSize)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductSize>> TeamBuilderConfigsIdProductSizesFkPutAsyncWithHttpInfo (string id, string fk, ProductSize data = null);
        /// <summary>
        /// Queries productSizes of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;ProductSize&gt;</returns>
        System.Threading.Tasks.Task<List<ProductSize>> TeamBuilderConfigsIdProductSizesGetAsync (string id, string filter = null);

        /// <summary>
        /// Queries productSizes of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProductSize&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductSize>>> TeamBuilderConfigsIdProductSizesGetAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Counts materials of ProductSize.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> TeamBuilderConfigsIdProductSizesNkMaterialsCountGetAsync (string id, string nk, string where = null);

        /// <summary>
        /// Counts materials of ProductSize.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TeamBuilderConfigsIdProductSizesNkMaterialsCountGetAsyncWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all materials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamBuilderConfigsIdProductSizesNkMaterialsDeleteAsync (string id, string nk);

        /// <summary>
        /// Deletes all materials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductSizesNkMaterialsDeleteAsyncWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for materials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamBuilderConfigsIdProductSizesNkMaterialsFkDeleteAsync (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for materials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductSizesNkMaterialsFkDeleteAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for materials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns>Task of ProductMaterial</returns>
        System.Threading.Tasks.Task<ProductMaterial> TeamBuilderConfigsIdProductSizesNkMaterialsFkGetAsync (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for materials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns>Task of ApiResponse (ProductMaterial)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductMaterial>> TeamBuilderConfigsIdProductSizesNkMaterialsFkGetAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for materials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductMaterial</returns>
        System.Threading.Tasks.Task<ProductMaterial> TeamBuilderConfigsIdProductSizesNkMaterialsFkPutAsync (string id, string nk, string fk, ProductMaterial data = null);

        /// <summary>
        /// Update a related item by id for materials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductMaterial)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductMaterial>> TeamBuilderConfigsIdProductSizesNkMaterialsFkPutAsyncWithHttpInfo (string id, string nk, string fk, ProductMaterial data = null);
        /// <summary>
        /// Queries materials of ProductSize.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;ProductMaterial&gt;</returns>
        System.Threading.Tasks.Task<List<ProductMaterial>> TeamBuilderConfigsIdProductSizesNkMaterialsGetAsync (string id, string nk, string filter = null);

        /// <summary>
        /// Queries materials of ProductSize.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProductMaterial&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductMaterial>>> TeamBuilderConfigsIdProductSizesNkMaterialsGetAsyncWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in materials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductMaterial</returns>
        System.Threading.Tasks.Task<ProductMaterial> TeamBuilderConfigsIdProductSizesNkMaterialsPostAsync (string id, string nk, ProductMaterial data = null);

        /// <summary>
        /// Creates a new instance in materials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductMaterial)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductMaterial>> TeamBuilderConfigsIdProductSizesNkMaterialsPostAsyncWithHttpInfo (string id, string nk, ProductMaterial data = null);
        /// <summary>
        /// Remove the materials relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamBuilderConfigsIdProductSizesNkMaterialsRelFkDeleteAsync (string id, string nk, string fk);

        /// <summary>
        /// Remove the materials relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductSizesNkMaterialsRelFkDeleteAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Check the existence of materials relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> TeamBuilderConfigsIdProductSizesNkMaterialsRelFkHeadAsync (string id, string nk, string fk);

        /// <summary>
        /// Check the existence of materials relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> TeamBuilderConfigsIdProductSizesNkMaterialsRelFkHeadAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Add a related item by id for materials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductSizeMaterial</returns>
        System.Threading.Tasks.Task<ProductSizeMaterial> TeamBuilderConfigsIdProductSizesNkMaterialsRelFkPutAsync (string id, string nk, string fk, ProductSizeMaterial data = null);

        /// <summary>
        /// Add a related item by id for materials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductSizeMaterial)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductSizeMaterial>> TeamBuilderConfigsIdProductSizesNkMaterialsRelFkPutAsyncWithHttpInfo (string id, string nk, string fk, ProductSizeMaterial data = null);
        /// <summary>
        /// Fetches belongsTo relation pdfColorProfile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ProductPdfColorProfile</returns>
        System.Threading.Tasks.Task<ProductPdfColorProfile> TeamBuilderConfigsIdProductSizesNkPdfColorProfileGetAsync (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation pdfColorProfile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductPdfColorProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductPdfColorProfile>> TeamBuilderConfigsIdProductSizesNkPdfColorProfileGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Counts products of ProductSize.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> TeamBuilderConfigsIdProductSizesNkProductsCountGetAsync (string id, string nk, string where = null);

        /// <summary>
        /// Counts products of ProductSize.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TeamBuilderConfigsIdProductSizesNkProductsCountGetAsyncWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all products of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamBuilderConfigsIdProductSizesNkProductsDeleteAsync (string id, string nk);

        /// <summary>
        /// Deletes all products of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductSizesNkProductsDeleteAsyncWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for products.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for products</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamBuilderConfigsIdProductSizesNkProductsFkDeleteAsync (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for products.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for products</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductSizesNkProductsFkDeleteAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for products.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for products</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> TeamBuilderConfigsIdProductSizesNkProductsFkGetAsync (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for products.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for products</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> TeamBuilderConfigsIdProductSizesNkProductsFkGetAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for products.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for products</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> TeamBuilderConfigsIdProductSizesNkProductsFkPutAsync (string id, string nk, string fk, Product data = null);

        /// <summary>
        /// Update a related item by id for products.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for products</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> TeamBuilderConfigsIdProductSizesNkProductsFkPutAsyncWithHttpInfo (string id, string nk, string fk, Product data = null);
        /// <summary>
        /// Queries products of ProductSize.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        System.Threading.Tasks.Task<List<Product>> TeamBuilderConfigsIdProductSizesNkProductsGetAsync (string id, string nk, string filter = null);

        /// <summary>
        /// Queries products of ProductSize.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Product>>> TeamBuilderConfigsIdProductSizesNkProductsGetAsyncWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in products of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> TeamBuilderConfigsIdProductSizesNkProductsPostAsync (string id, string nk, Product data = null);

        /// <summary>
        /// Creates a new instance in products of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> TeamBuilderConfigsIdProductSizesNkProductsPostAsyncWithHttpInfo (string id, string nk, Product data = null);
        /// <summary>
        /// Counts sizeMaterials of ProductSize.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> TeamBuilderConfigsIdProductSizesNkSizeMaterialsCountGetAsync (string id, string nk, string where = null);

        /// <summary>
        /// Counts sizeMaterials of ProductSize.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TeamBuilderConfigsIdProductSizesNkSizeMaterialsCountGetAsyncWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all sizeMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamBuilderConfigsIdProductSizesNkSizeMaterialsDeleteAsync (string id, string nk);

        /// <summary>
        /// Deletes all sizeMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductSizesNkSizeMaterialsDeleteAsyncWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for sizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for sizeMaterials</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkDeleteAsync (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for sizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for sizeMaterials</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkDeleteAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for sizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for sizeMaterials</param>
        /// <returns>Task of ProductSizeMaterial</returns>
        System.Threading.Tasks.Task<ProductSizeMaterial> TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkGetAsync (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for sizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for sizeMaterials</param>
        /// <returns>Task of ApiResponse (ProductSizeMaterial)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductSizeMaterial>> TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkGetAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for sizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for sizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductSizeMaterial</returns>
        System.Threading.Tasks.Task<ProductSizeMaterial> TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkPutAsync (string id, string nk, string fk, ProductSizeMaterial data = null);

        /// <summary>
        /// Update a related item by id for sizeMaterials.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for sizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductSizeMaterial)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductSizeMaterial>> TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkPutAsyncWithHttpInfo (string id, string nk, string fk, ProductSizeMaterial data = null);
        /// <summary>
        /// Queries sizeMaterials of ProductSize.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;ProductSizeMaterial&gt;</returns>
        System.Threading.Tasks.Task<List<ProductSizeMaterial>> TeamBuilderConfigsIdProductSizesNkSizeMaterialsGetAsync (string id, string nk, string filter = null);

        /// <summary>
        /// Queries sizeMaterials of ProductSize.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProductSizeMaterial&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductSizeMaterial>>> TeamBuilderConfigsIdProductSizesNkSizeMaterialsGetAsyncWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in sizeMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductSizeMaterial</returns>
        System.Threading.Tasks.Task<ProductSizeMaterial> TeamBuilderConfigsIdProductSizesNkSizeMaterialsPostAsync (string id, string nk, ProductSizeMaterial data = null);

        /// <summary>
        /// Creates a new instance in sizeMaterials of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductSizeMaterial)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductSizeMaterial>> TeamBuilderConfigsIdProductSizesNkSizeMaterialsPostAsyncWithHttpInfo (string id, string nk, ProductSizeMaterial data = null);
        /// <summary>
        /// Fetches belongsTo relation type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ProductType</returns>
        System.Threading.Tasks.Task<ProductType> TeamBuilderConfigsIdProductSizesNkTypeGetAsync (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductType)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductType>> TeamBuilderConfigsIdProductSizesNkTypeGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Creates a new instance in productSizes of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductSize</returns>
        System.Threading.Tasks.Task<ProductSize> TeamBuilderConfigsIdProductSizesPostAsync (string id, ProductSize data = null);

        /// <summary>
        /// Creates a new instance in productSizes of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductSize)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductSize>> TeamBuilderConfigsIdProductSizesPostAsyncWithHttpInfo (string id, ProductSize data = null);
        /// <summary>
        /// Remove the productSizes relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamBuilderConfigsIdProductSizesRelFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Remove the productSizes relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductSizesRelFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Check the existence of productSizes relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> TeamBuilderConfigsIdProductSizesRelFkHeadAsync (string id, string fk);

        /// <summary>
        /// Check the existence of productSizes relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> TeamBuilderConfigsIdProductSizesRelFkHeadAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Add a related item by id for productSizes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamBuilderConfigProductSize</returns>
        System.Threading.Tasks.Task<TeamBuilderConfigProductSize> TeamBuilderConfigsIdProductSizesRelFkPutAsync (string id, string fk, TeamBuilderConfigProductSize data = null);

        /// <summary>
        /// Add a related item by id for productSizes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfigProductSize)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfigProductSize>> TeamBuilderConfigsIdProductSizesRelFkPutAsyncWithHttpInfo (string id, string fk, TeamBuilderConfigProductSize data = null);
        /// <summary>
        /// Counts productTypes of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> TeamBuilderConfigsIdProductTypesCountGetAsync (string id, string where = null);

        /// <summary>
        /// Counts productTypes of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TeamBuilderConfigsIdProductTypesCountGetAsyncWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all productTypes of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamBuilderConfigsIdProductTypesDeleteAsync (string id);

        /// <summary>
        /// Deletes all productTypes of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductTypesDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for productTypes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamBuilderConfigsIdProductTypesFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Delete a related item by id for productTypes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductTypesFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for productTypes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns>Task of ProductType</returns>
        System.Threading.Tasks.Task<ProductType> TeamBuilderConfigsIdProductTypesFkGetAsync (string id, string fk);

        /// <summary>
        /// Find a related item by id for productTypes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns>Task of ApiResponse (ProductType)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductType>> TeamBuilderConfigsIdProductTypesFkGetAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for productTypes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductType</returns>
        System.Threading.Tasks.Task<ProductType> TeamBuilderConfigsIdProductTypesFkPutAsync (string id, string fk, ProductType data = null);

        /// <summary>
        /// Update a related item by id for productTypes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductType)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductType>> TeamBuilderConfigsIdProductTypesFkPutAsyncWithHttpInfo (string id, string fk, ProductType data = null);
        /// <summary>
        /// Queries productTypes of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;ProductType&gt;</returns>
        System.Threading.Tasks.Task<List<ProductType>> TeamBuilderConfigsIdProductTypesGetAsync (string id, string filter = null);

        /// <summary>
        /// Queries productTypes of TeamBuilderConfig.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProductType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductType>>> TeamBuilderConfigsIdProductTypesGetAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Fetches belongsTo relation group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ProductGroup</returns>
        System.Threading.Tasks.Task<ProductGroup> TeamBuilderConfigsIdProductTypesNkGroupGetAsync (string id, string nk, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductGroup>> TeamBuilderConfigsIdProductTypesNkGroupGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null);
        /// <summary>
        /// Counts sizes of ProductType.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> TeamBuilderConfigsIdProductTypesNkSizesCountGetAsync (string id, string nk, string where = null);

        /// <summary>
        /// Counts sizes of ProductType.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TeamBuilderConfigsIdProductTypesNkSizesCountGetAsyncWithHttpInfo (string id, string nk, string where = null);
        /// <summary>
        /// Deletes all sizes of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamBuilderConfigsIdProductTypesNkSizesDeleteAsync (string id, string nk);

        /// <summary>
        /// Deletes all sizes of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductTypesNkSizesDeleteAsyncWithHttpInfo (string id, string nk);
        /// <summary>
        /// Delete a related item by id for sizes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="fk">Foreign key for sizes</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamBuilderConfigsIdProductTypesNkSizesFkDeleteAsync (string id, string nk, string fk);

        /// <summary>
        /// Delete a related item by id for sizes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="fk">Foreign key for sizes</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductTypesNkSizesFkDeleteAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Find a related item by id for sizes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="fk">Foreign key for sizes</param>
        /// <returns>Task of ProductSize</returns>
        System.Threading.Tasks.Task<ProductSize> TeamBuilderConfigsIdProductTypesNkSizesFkGetAsync (string id, string nk, string fk);

        /// <summary>
        /// Find a related item by id for sizes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="fk">Foreign key for sizes</param>
        /// <returns>Task of ApiResponse (ProductSize)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductSize>> TeamBuilderConfigsIdProductTypesNkSizesFkGetAsyncWithHttpInfo (string id, string nk, string fk);
        /// <summary>
        /// Update a related item by id for sizes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="fk">Foreign key for sizes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductSize</returns>
        System.Threading.Tasks.Task<ProductSize> TeamBuilderConfigsIdProductTypesNkSizesFkPutAsync (string id, string nk, string fk, ProductSize data = null);

        /// <summary>
        /// Update a related item by id for sizes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="fk">Foreign key for sizes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductSize)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductSize>> TeamBuilderConfigsIdProductTypesNkSizesFkPutAsyncWithHttpInfo (string id, string nk, string fk, ProductSize data = null);
        /// <summary>
        /// Queries sizes of ProductType.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;ProductSize&gt;</returns>
        System.Threading.Tasks.Task<List<ProductSize>> TeamBuilderConfigsIdProductTypesNkSizesGetAsync (string id, string nk, string filter = null);

        /// <summary>
        /// Queries sizes of ProductType.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProductSize&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProductSize>>> TeamBuilderConfigsIdProductTypesNkSizesGetAsyncWithHttpInfo (string id, string nk, string filter = null);
        /// <summary>
        /// Creates a new instance in sizes of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductSize</returns>
        System.Threading.Tasks.Task<ProductSize> TeamBuilderConfigsIdProductTypesNkSizesPostAsync (string id, string nk, ProductSize data = null);

        /// <summary>
        /// Creates a new instance in sizes of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductSize)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductSize>> TeamBuilderConfigsIdProductTypesNkSizesPostAsyncWithHttpInfo (string id, string nk, ProductSize data = null);
        /// <summary>
        /// Creates a new instance in productTypes of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductType</returns>
        System.Threading.Tasks.Task<ProductType> TeamBuilderConfigsIdProductTypesPostAsync (string id, ProductType data = null);

        /// <summary>
        /// Creates a new instance in productTypes of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductType)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductType>> TeamBuilderConfigsIdProductTypesPostAsyncWithHttpInfo (string id, ProductType data = null);
        /// <summary>
        /// Remove the productTypes relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamBuilderConfigsIdProductTypesRelFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Remove the productTypes relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductTypesRelFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Check the existence of productTypes relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> TeamBuilderConfigsIdProductTypesRelFkHeadAsync (string id, string fk);

        /// <summary>
        /// Check the existence of productTypes relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> TeamBuilderConfigsIdProductTypesRelFkHeadAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Add a related item by id for productTypes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamBuilderConfigProductType</returns>
        System.Threading.Tasks.Task<TeamBuilderConfigProductType> TeamBuilderConfigsIdProductTypesRelFkPutAsync (string id, string fk, TeamBuilderConfigProductType data = null);

        /// <summary>
        /// Add a related item by id for productTypes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfigProductType)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfigProductType>> TeamBuilderConfigsIdProductTypesRelFkPutAsyncWithHttpInfo (string id, string fk, TeamBuilderConfigProductType data = null);
        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of TeamBuilderConfig</returns>
        System.Threading.Tasks.Task<TeamBuilderConfig> TeamBuilderConfigsIdPutAsync (string id, TeamBuilderConfig data = null);

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfig>> TeamBuilderConfigsIdPutAsyncWithHttpInfo (string id, TeamBuilderConfig data = null);
        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of TeamBuilderConfig</returns>
        System.Threading.Tasks.Task<TeamBuilderConfig> TeamBuilderConfigsIdReplacePostAsync (string id, TeamBuilderConfig data = null);

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfig>> TeamBuilderConfigsIdReplacePostAsyncWithHttpInfo (string id, TeamBuilderConfig data = null);
        /// <summary>
        /// Fetches belongsTo relation team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> TeamBuilderConfigsIdTeamGetAsync (string id, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> TeamBuilderConfigsIdTeamGetAsyncWithHttpInfo (string id, bool? refresh = null);
        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of TeamBuilderConfig</returns>
        System.Threading.Tasks.Task<TeamBuilderConfig> TeamBuilderConfigsPatchAsync (TeamBuilderConfig data = null);

        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfig>> TeamBuilderConfigsPatchAsyncWithHttpInfo (TeamBuilderConfig data = null);
        /// <summary>
        /// Create a new instance of the model and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of TeamBuilderConfig</returns>
        System.Threading.Tasks.Task<TeamBuilderConfig> TeamBuilderConfigsPostAsync (TeamBuilderConfig data = null);

        /// <summary>
        /// Create a new instance of the model and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfig>> TeamBuilderConfigsPostAsyncWithHttpInfo (TeamBuilderConfig data = null);
        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of TeamBuilderConfig</returns>
        System.Threading.Tasks.Task<TeamBuilderConfig> TeamBuilderConfigsPutAsync (TeamBuilderConfig data = null);

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfig>> TeamBuilderConfigsPutAsyncWithHttpInfo (TeamBuilderConfig data = null);
        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of TeamBuilderConfig</returns>
        System.Threading.Tasks.Task<TeamBuilderConfig> TeamBuilderConfigsReplaceOrCreatePostAsync (TeamBuilderConfig data = null);

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfig>> TeamBuilderConfigsReplaceOrCreatePostAsyncWithHttpInfo (TeamBuilderConfig data = null);
        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> TeamBuilderConfigsUpdatePostAsync (string where = null, TeamBuilderConfig data = null);

        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> TeamBuilderConfigsUpdatePostAsyncWithHttpInfo (string where = null, TeamBuilderConfig data = null);
        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of TeamBuilderConfig</returns>
        System.Threading.Tasks.Task<TeamBuilderConfig> TeamBuilderConfigsUpsertWithWherePostAsync (string where = null, TeamBuilderConfig data = null);

        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfig>> TeamBuilderConfigsUpsertWithWherePostAsyncWithHttpInfo (string where = null, TeamBuilderConfig data = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TeamBuilderConfigApi : ITeamBuilderConfigApi
    {
        private TweakApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamBuilderConfigApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TeamBuilderConfigApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = TweakApi.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamBuilderConfigApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TeamBuilderConfigApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TweakApi.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TweakApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream TeamBuilderConfigsChangeStreamGet (string options = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = TeamBuilderConfigsChangeStreamGetWithHttpInfo(options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > TeamBuilderConfigsChangeStreamGetWithHttpInfo (string options = null)
        {

            var localVarPath = "/TeamBuilderConfigs/change-stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsChangeStreamGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> TeamBuilderConfigsChangeStreamGetAsync (string options = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await TeamBuilderConfigsChangeStreamGetAsyncWithHttpInfo(options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> TeamBuilderConfigsChangeStreamGetAsyncWithHttpInfo (string options = null)
        {

            var localVarPath = "/TeamBuilderConfigs/change-stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsChangeStreamGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream TeamBuilderConfigsChangeStreamPost (string options = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = TeamBuilderConfigsChangeStreamPostWithHttpInfo(options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > TeamBuilderConfigsChangeStreamPostWithHttpInfo (string options = null)
        {

            var localVarPath = "/TeamBuilderConfigs/change-stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarFormParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // form parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsChangeStreamPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> TeamBuilderConfigsChangeStreamPostAsync (string options = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await TeamBuilderConfigsChangeStreamPostAsyncWithHttpInfo(options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> TeamBuilderConfigsChangeStreamPostAsyncWithHttpInfo (string options = null)
        {

            var localVarPath = "/TeamBuilderConfigs/change-stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarFormParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // form parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsChangeStreamPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Count instances of the model matched by where from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 TeamBuilderConfigsCountGet (string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = TeamBuilderConfigsCountGetWithHttpInfo(where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Count instances of the model matched by where from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > TeamBuilderConfigsCountGetWithHttpInfo (string where = null)
        {

            var localVarPath = "/TeamBuilderConfigs/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Count instances of the model matched by where from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> TeamBuilderConfigsCountGetAsync (string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await TeamBuilderConfigsCountGetAsyncWithHttpInfo(where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Count instances of the model matched by where from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TeamBuilderConfigsCountGetAsyncWithHttpInfo (string where = null)
        {

            var localVarPath = "/TeamBuilderConfigs/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Find first instance of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>TeamBuilderConfig</returns>
        public TeamBuilderConfig TeamBuilderConfigsFindOneGet (string filter = null)
        {
             ApiResponse<TeamBuilderConfig> localVarResponse = TeamBuilderConfigsFindOneGetWithHttpInfo(filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find first instance of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfig</returns>
        public ApiResponse< TeamBuilderConfig > TeamBuilderConfigsFindOneGetWithHttpInfo (string filter = null)
        {

            var localVarPath = "/TeamBuilderConfigs/findOne";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsFindOneGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfig)));
            
        }

        /// <summary>
        /// Find first instance of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of TeamBuilderConfig</returns>
        public async System.Threading.Tasks.Task<TeamBuilderConfig> TeamBuilderConfigsFindOneGetAsync (string filter = null)
        {
             ApiResponse<TeamBuilderConfig> localVarResponse = await TeamBuilderConfigsFindOneGetAsyncWithHttpInfo(filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find first instance of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfig>> TeamBuilderConfigsFindOneGetAsyncWithHttpInfo (string filter = null)
        {

            var localVarPath = "/TeamBuilderConfigs/findOne";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsFindOneGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfig)));
            
        }

        /// <summary>
        /// Find all instances of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>List&lt;TeamBuilderConfig&gt;</returns>
        public List<TeamBuilderConfig> TeamBuilderConfigsGet (string filter = null)
        {
             ApiResponse<List<TeamBuilderConfig>> localVarResponse = TeamBuilderConfigsGetWithHttpInfo(filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find all instances of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamBuilderConfig&gt;</returns>
        public ApiResponse< List<TeamBuilderConfig> > TeamBuilderConfigsGetWithHttpInfo (string filter = null)
        {

            var localVarPath = "/TeamBuilderConfigs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TeamBuilderConfig>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TeamBuilderConfig>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamBuilderConfig>)));
            
        }

        /// <summary>
        /// Find all instances of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of List&lt;TeamBuilderConfig&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamBuilderConfig>> TeamBuilderConfigsGetAsync (string filter = null)
        {
             ApiResponse<List<TeamBuilderConfig>> localVarResponse = await TeamBuilderConfigsGetAsyncWithHttpInfo(filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find all instances of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamBuilderConfig&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TeamBuilderConfig>>> TeamBuilderConfigsGetAsyncWithHttpInfo (string filter = null)
        {

            var localVarPath = "/TeamBuilderConfigs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TeamBuilderConfig>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TeamBuilderConfig>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamBuilderConfig>)));
            
        }

        /// <summary>
        /// Reset Team keys 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TeamBuilderConfig</returns>
        public TeamBuilderConfig TeamBuilderConfigsGlobalGet ()
        {
             ApiResponse<TeamBuilderConfig> localVarResponse = TeamBuilderConfigsGlobalGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reset Team keys 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TeamBuilderConfig</returns>
        public ApiResponse< TeamBuilderConfig > TeamBuilderConfigsGlobalGetWithHttpInfo ()
        {

            var localVarPath = "/TeamBuilderConfigs/global";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsGlobalGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfig)));
            
        }

        /// <summary>
        /// Reset Team keys 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TeamBuilderConfig</returns>
        public async System.Threading.Tasks.Task<TeamBuilderConfig> TeamBuilderConfigsGlobalGetAsync ()
        {
             ApiResponse<TeamBuilderConfig> localVarResponse = await TeamBuilderConfigsGlobalGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reset Team keys 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TeamBuilderConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfig>> TeamBuilderConfigsGlobalGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/TeamBuilderConfigs/global";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsGlobalGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfig)));
            
        }

        /// <summary>
        /// Delete a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Object</returns>
        public Object TeamBuilderConfigsIdDelete (string id)
        {
             ApiResponse<Object> localVarResponse = TeamBuilderConfigsIdDeleteWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > TeamBuilderConfigsIdDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Delete a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TeamBuilderConfigsIdDeleteAsync (string id)
        {
             ApiResponse<Object> localVarResponse = await TeamBuilderConfigsIdDeleteAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 TeamBuilderConfigsIdExistsGet (string id)
        {
             ApiResponse<InlineResponse2002> localVarResponse = TeamBuilderConfigsIdExistsGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > TeamBuilderConfigsIdExistsGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdExistsGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/exists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdExistsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
            
        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> TeamBuilderConfigsIdExistsGetAsync (string id)
        {
             ApiResponse<InlineResponse2002> localVarResponse = await TeamBuilderConfigsIdExistsGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> TeamBuilderConfigsIdExistsGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdExistsGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/exists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdExistsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
            
        }

        /// <summary>
        /// Find a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>TeamBuilderConfig</returns>
        public TeamBuilderConfig TeamBuilderConfigsIdGet (string id, string filter = null)
        {
             ApiResponse<TeamBuilderConfig> localVarResponse = TeamBuilderConfigsIdGetWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfig</returns>
        public ApiResponse< TeamBuilderConfig > TeamBuilderConfigsIdGetWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdGet");

            var localVarPath = "/TeamBuilderConfigs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfig)));
            
        }

        /// <summary>
        /// Find a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of TeamBuilderConfig</returns>
        public async System.Threading.Tasks.Task<TeamBuilderConfig> TeamBuilderConfigsIdGetAsync (string id, string filter = null)
        {
             ApiResponse<TeamBuilderConfig> localVarResponse = await TeamBuilderConfigsIdGetAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfig>> TeamBuilderConfigsIdGetAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdGet");

            var localVarPath = "/TeamBuilderConfigs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfig)));
            
        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 TeamBuilderConfigsIdHead (string id)
        {
             ApiResponse<InlineResponse2002> localVarResponse = TeamBuilderConfigsIdHeadWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > TeamBuilderConfigsIdHeadWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdHead");

            var localVarPath = "/TeamBuilderConfigs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
            
        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> TeamBuilderConfigsIdHeadAsync (string id)
        {
             ApiResponse<InlineResponse2002> localVarResponse = await TeamBuilderConfigsIdHeadAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> TeamBuilderConfigsIdHeadAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdHead");

            var localVarPath = "/TeamBuilderConfigs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
            
        }

        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>TeamBuilderConfig</returns>
        public TeamBuilderConfig TeamBuilderConfigsIdPatch (string id, TeamBuilderConfig data = null)
        {
             ApiResponse<TeamBuilderConfig> localVarResponse = TeamBuilderConfigsIdPatchWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfig</returns>
        public ApiResponse< TeamBuilderConfig > TeamBuilderConfigsIdPatchWithHttpInfo (string id, TeamBuilderConfig data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdPatch");

            var localVarPath = "/TeamBuilderConfigs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfig)));
            
        }

        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of TeamBuilderConfig</returns>
        public async System.Threading.Tasks.Task<TeamBuilderConfig> TeamBuilderConfigsIdPatchAsync (string id, TeamBuilderConfig data = null)
        {
             ApiResponse<TeamBuilderConfig> localVarResponse = await TeamBuilderConfigsIdPatchAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfig>> TeamBuilderConfigsIdPatchAsyncWithHttpInfo (string id, TeamBuilderConfig data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdPatch");

            var localVarPath = "/TeamBuilderConfigs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfig)));
            
        }

        /// <summary>
        /// Counts portals of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 TeamBuilderConfigsIdPortalsCountGet (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = TeamBuilderConfigsIdPortalsCountGetWithHttpInfo(id, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts portals of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > TeamBuilderConfigsIdPortalsCountGetWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdPortalsCountGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/portals/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdPortalsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts portals of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> TeamBuilderConfigsIdPortalsCountGetAsync (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await TeamBuilderConfigsIdPortalsCountGetAsyncWithHttpInfo(id, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts portals of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TeamBuilderConfigsIdPortalsCountGetAsyncWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdPortalsCountGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/portals/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdPortalsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all portals of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns></returns>
        public void TeamBuilderConfigsIdPortalsDelete (string id)
        {
             TeamBuilderConfigsIdPortalsDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes all portals of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TeamBuilderConfigsIdPortalsDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdPortalsDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/portals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdPortalsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all portals of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamBuilderConfigsIdPortalsDeleteAsync (string id)
        {
             await TeamBuilderConfigsIdPortalsDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes all portals of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdPortalsDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdPortalsDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/portals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdPortalsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns></returns>
        public void TeamBuilderConfigsIdPortalsFkDelete (string id, string fk)
        {
             TeamBuilderConfigsIdPortalsFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Delete a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TeamBuilderConfigsIdPortalsFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdPortalsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdPortalsFkDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/portals/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdPortalsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamBuilderConfigsIdPortalsFkDeleteAsync (string id, string fk)
        {
             await TeamBuilderConfigsIdPortalsFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Delete a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdPortalsFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdPortalsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdPortalsFkDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/portals/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdPortalsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Portal</returns>
        public Portal TeamBuilderConfigsIdPortalsFkGet (string id, string fk)
        {
             ApiResponse<Portal> localVarResponse = TeamBuilderConfigsIdPortalsFkGetWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>ApiResponse of Portal</returns>
        public ApiResponse< Portal > TeamBuilderConfigsIdPortalsFkGetWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdPortalsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdPortalsFkGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/portals/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdPortalsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Find a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of Portal</returns>
        public async System.Threading.Tasks.Task<Portal> TeamBuilderConfigsIdPortalsFkGetAsync (string id, string fk)
        {
             ApiResponse<Portal> localVarResponse = await TeamBuilderConfigsIdPortalsFkGetAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Portal>> TeamBuilderConfigsIdPortalsFkGetAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdPortalsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdPortalsFkGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/portals/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdPortalsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Update a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Portal</returns>
        public Portal TeamBuilderConfigsIdPortalsFkPut (string id, string fk, Portal data = null)
        {
             ApiResponse<Portal> localVarResponse = TeamBuilderConfigsIdPortalsFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        public ApiResponse< Portal > TeamBuilderConfigsIdPortalsFkPutWithHttpInfo (string id, string fk, Portal data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdPortalsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdPortalsFkPut");

            var localVarPath = "/TeamBuilderConfigs/{id}/portals/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdPortalsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Update a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Portal</returns>
        public async System.Threading.Tasks.Task<Portal> TeamBuilderConfigsIdPortalsFkPutAsync (string id, string fk, Portal data = null)
        {
             ApiResponse<Portal> localVarResponse = await TeamBuilderConfigsIdPortalsFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for portals. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for portals</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Portal>> TeamBuilderConfigsIdPortalsFkPutAsyncWithHttpInfo (string id, string fk, Portal data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdPortalsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdPortalsFkPut");

            var localVarPath = "/TeamBuilderConfigs/{id}/portals/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdPortalsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Queries portals of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;Portal&gt;</returns>
        public List<Portal> TeamBuilderConfigsIdPortalsGet (string id, string filter = null)
        {
             ApiResponse<List<Portal>> localVarResponse = TeamBuilderConfigsIdPortalsGetWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries portals of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Portal&gt;</returns>
        public ApiResponse< List<Portal> > TeamBuilderConfigsIdPortalsGetWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdPortalsGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/portals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdPortalsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Portal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Portal>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Portal>)));
            
        }

        /// <summary>
        /// Queries portals of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;Portal&gt;</returns>
        public async System.Threading.Tasks.Task<List<Portal>> TeamBuilderConfigsIdPortalsGetAsync (string id, string filter = null)
        {
             ApiResponse<List<Portal>> localVarResponse = await TeamBuilderConfigsIdPortalsGetAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries portals of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Portal&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Portal>>> TeamBuilderConfigsIdPortalsGetAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdPortalsGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/portals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdPortalsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Portal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Portal>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Portal>)));
            
        }

        /// <summary>
        /// Creates a new instance in portals of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Portal</returns>
        public Portal TeamBuilderConfigsIdPortalsPost (string id, Portal data = null)
        {
             ApiResponse<Portal> localVarResponse = TeamBuilderConfigsIdPortalsPostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in portals of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        public ApiResponse< Portal > TeamBuilderConfigsIdPortalsPostWithHttpInfo (string id, Portal data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdPortalsPost");

            var localVarPath = "/TeamBuilderConfigs/{id}/portals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdPortalsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Creates a new instance in portals of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Portal</returns>
        public async System.Threading.Tasks.Task<Portal> TeamBuilderConfigsIdPortalsPostAsync (string id, Portal data = null)
        {
             ApiResponse<Portal> localVarResponse = await TeamBuilderConfigsIdPortalsPostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in portals of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Portal>> TeamBuilderConfigsIdPortalsPostAsyncWithHttpInfo (string id, Portal data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdPortalsPost");

            var localVarPath = "/TeamBuilderConfigs/{id}/portals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdPortalsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Counts productGroups of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 TeamBuilderConfigsIdProductGroupsCountGet (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = TeamBuilderConfigsIdProductGroupsCountGetWithHttpInfo(id, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts productGroups of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > TeamBuilderConfigsIdProductGroupsCountGetWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsCountGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts productGroups of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> TeamBuilderConfigsIdProductGroupsCountGetAsync (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await TeamBuilderConfigsIdProductGroupsCountGetAsyncWithHttpInfo(id, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts productGroups of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TeamBuilderConfigsIdProductGroupsCountGetAsyncWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsCountGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all productGroups of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns></returns>
        public void TeamBuilderConfigsIdProductGroupsDelete (string id)
        {
             TeamBuilderConfigsIdProductGroupsDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes all productGroups of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TeamBuilderConfigsIdProductGroupsDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all productGroups of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamBuilderConfigsIdProductGroupsDeleteAsync (string id)
        {
             await TeamBuilderConfigsIdProductGroupsDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes all productGroups of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductGroupsDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for productGroups. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns></returns>
        public void TeamBuilderConfigsIdProductGroupsFkDelete (string id, string fk)
        {
             TeamBuilderConfigsIdProductGroupsFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Delete a related item by id for productGroups. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TeamBuilderConfigsIdProductGroupsFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsFkDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for productGroups. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamBuilderConfigsIdProductGroupsFkDeleteAsync (string id, string fk)
        {
             await TeamBuilderConfigsIdProductGroupsFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Delete a related item by id for productGroups. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductGroupsFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsFkDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for productGroups. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns>ProductGroup</returns>
        public ProductGroup TeamBuilderConfigsIdProductGroupsFkGet (string id, string fk)
        {
             ApiResponse<ProductGroup> localVarResponse = TeamBuilderConfigsIdProductGroupsFkGetWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for productGroups. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns>ApiResponse of ProductGroup</returns>
        public ApiResponse< ProductGroup > TeamBuilderConfigsIdProductGroupsFkGetWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsFkGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductGroup) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductGroup)));
            
        }

        /// <summary>
        /// Find a related item by id for productGroups. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns>Task of ProductGroup</returns>
        public async System.Threading.Tasks.Task<ProductGroup> TeamBuilderConfigsIdProductGroupsFkGetAsync (string id, string fk)
        {
             ApiResponse<ProductGroup> localVarResponse = await TeamBuilderConfigsIdProductGroupsFkGetAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for productGroups. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns>Task of ApiResponse (ProductGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductGroup>> TeamBuilderConfigsIdProductGroupsFkGetAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsFkGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductGroup) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductGroup)));
            
        }

        /// <summary>
        /// Update a related item by id for productGroups. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductGroup</returns>
        public ProductGroup TeamBuilderConfigsIdProductGroupsFkPut (string id, string fk, ProductGroup data = null)
        {
             ApiResponse<ProductGroup> localVarResponse = TeamBuilderConfigsIdProductGroupsFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for productGroups. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductGroup</returns>
        public ApiResponse< ProductGroup > TeamBuilderConfigsIdProductGroupsFkPutWithHttpInfo (string id, string fk, ProductGroup data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsFkPut");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductGroup) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductGroup)));
            
        }

        /// <summary>
        /// Update a related item by id for productGroups. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductGroup</returns>
        public async System.Threading.Tasks.Task<ProductGroup> TeamBuilderConfigsIdProductGroupsFkPutAsync (string id, string fk, ProductGroup data = null)
        {
             ApiResponse<ProductGroup> localVarResponse = await TeamBuilderConfigsIdProductGroupsFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for productGroups. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductGroup>> TeamBuilderConfigsIdProductGroupsFkPutAsyncWithHttpInfo (string id, string fk, ProductGroup data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsFkPut");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductGroup) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductGroup)));
            
        }

        /// <summary>
        /// Queries productGroups of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;ProductGroup&gt;</returns>
        public List<ProductGroup> TeamBuilderConfigsIdProductGroupsGet (string id, string filter = null)
        {
             ApiResponse<List<ProductGroup>> localVarResponse = TeamBuilderConfigsIdProductGroupsGetWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries productGroups of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductGroup&gt;</returns>
        public ApiResponse< List<ProductGroup> > TeamBuilderConfigsIdProductGroupsGetWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductGroup>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductGroup>)));
            
        }

        /// <summary>
        /// Queries productGroups of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;ProductGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductGroup>> TeamBuilderConfigsIdProductGroupsGetAsync (string id, string filter = null)
        {
             ApiResponse<List<ProductGroup>> localVarResponse = await TeamBuilderConfigsIdProductGroupsGetAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries productGroups of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProductGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductGroup>>> TeamBuilderConfigsIdProductGroupsGetAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductGroup>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductGroup>)));
            
        }

        /// <summary>
        /// Counts types of ProductGroup. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 TeamBuilderConfigsIdProductGroupsNkTypesCountGet (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = TeamBuilderConfigsIdProductGroupsNkTypesCountGetWithHttpInfo(id, nk, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts types of ProductGroup. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > TeamBuilderConfigsIdProductGroupsNkTypesCountGetWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesCountGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups/{nk}/types/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsNkTypesCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts types of ProductGroup. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> TeamBuilderConfigsIdProductGroupsNkTypesCountGetAsync (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await TeamBuilderConfigsIdProductGroupsNkTypesCountGetAsyncWithHttpInfo(id, nk, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts types of ProductGroup. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TeamBuilderConfigsIdProductGroupsNkTypesCountGetAsyncWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesCountGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups/{nk}/types/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsNkTypesCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all types of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <returns></returns>
        public void TeamBuilderConfigsIdProductGroupsNkTypesDelete (string id, string nk)
        {
             TeamBuilderConfigsIdProductGroupsNkTypesDeleteWithHttpInfo(id, nk);
        }

        /// <summary>
        /// Deletes all types of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TeamBuilderConfigsIdProductGroupsNkTypesDeleteWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups/{nk}/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsNkTypesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all types of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamBuilderConfigsIdProductGroupsNkTypesDeleteAsync (string id, string nk)
        {
             await TeamBuilderConfigsIdProductGroupsNkTypesDeleteAsyncWithHttpInfo(id, nk);

        }

        /// <summary>
        /// Deletes all types of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductGroupsNkTypesDeleteAsyncWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups/{nk}/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsNkTypesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for types. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="fk">Foreign key for types</param>
        /// <returns></returns>
        public void TeamBuilderConfigsIdProductGroupsNkTypesFkDelete (string id, string nk, string fk)
        {
             TeamBuilderConfigsIdProductGroupsNkTypesFkDeleteWithHttpInfo(id, nk, fk);
        }

        /// <summary>
        /// Delete a related item by id for types. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="fk">Foreign key for types</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TeamBuilderConfigsIdProductGroupsNkTypesFkDeleteWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesFkDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups/{nk}/types/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsNkTypesFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for types. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="fk">Foreign key for types</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamBuilderConfigsIdProductGroupsNkTypesFkDeleteAsync (string id, string nk, string fk)
        {
             await TeamBuilderConfigsIdProductGroupsNkTypesFkDeleteAsyncWithHttpInfo(id, nk, fk);

        }

        /// <summary>
        /// Delete a related item by id for types. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="fk">Foreign key for types</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductGroupsNkTypesFkDeleteAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesFkDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups/{nk}/types/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsNkTypesFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for types. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="fk">Foreign key for types</param>
        /// <returns>ProductType</returns>
        public ProductType TeamBuilderConfigsIdProductGroupsNkTypesFkGet (string id, string nk, string fk)
        {
             ApiResponse<ProductType> localVarResponse = TeamBuilderConfigsIdProductGroupsNkTypesFkGetWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for types. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="fk">Foreign key for types</param>
        /// <returns>ApiResponse of ProductType</returns>
        public ApiResponse< ProductType > TeamBuilderConfigsIdProductGroupsNkTypesFkGetWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesFkGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups/{nk}/types/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsNkTypesFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductType)));
            
        }

        /// <summary>
        /// Find a related item by id for types. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="fk">Foreign key for types</param>
        /// <returns>Task of ProductType</returns>
        public async System.Threading.Tasks.Task<ProductType> TeamBuilderConfigsIdProductGroupsNkTypesFkGetAsync (string id, string nk, string fk)
        {
             ApiResponse<ProductType> localVarResponse = await TeamBuilderConfigsIdProductGroupsNkTypesFkGetAsyncWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for types. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="fk">Foreign key for types</param>
        /// <returns>Task of ApiResponse (ProductType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductType>> TeamBuilderConfigsIdProductGroupsNkTypesFkGetAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesFkGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups/{nk}/types/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsNkTypesFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductType)));
            
        }

        /// <summary>
        /// Update a related item by id for types. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="fk">Foreign key for types</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductType</returns>
        public ProductType TeamBuilderConfigsIdProductGroupsNkTypesFkPut (string id, string nk, string fk, ProductType data = null)
        {
             ApiResponse<ProductType> localVarResponse = TeamBuilderConfigsIdProductGroupsNkTypesFkPutWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for types. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="fk">Foreign key for types</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductType</returns>
        public ApiResponse< ProductType > TeamBuilderConfigsIdProductGroupsNkTypesFkPutWithHttpInfo (string id, string nk, string fk, ProductType data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesFkPut");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups/{nk}/types/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsNkTypesFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductType)));
            
        }

        /// <summary>
        /// Update a related item by id for types. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="fk">Foreign key for types</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductType</returns>
        public async System.Threading.Tasks.Task<ProductType> TeamBuilderConfigsIdProductGroupsNkTypesFkPutAsync (string id, string nk, string fk, ProductType data = null)
        {
             ApiResponse<ProductType> localVarResponse = await TeamBuilderConfigsIdProductGroupsNkTypesFkPutAsyncWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for types. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="fk">Foreign key for types</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductType>> TeamBuilderConfigsIdProductGroupsNkTypesFkPutAsyncWithHttpInfo (string id, string nk, string fk, ProductType data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesFkPut");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups/{nk}/types/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsNkTypesFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductType)));
            
        }

        /// <summary>
        /// Queries types of ProductGroup. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;ProductType&gt;</returns>
        public List<ProductType> TeamBuilderConfigsIdProductGroupsNkTypesGet (string id, string nk, string filter = null)
        {
             ApiResponse<List<ProductType>> localVarResponse = TeamBuilderConfigsIdProductGroupsNkTypesGetWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries types of ProductGroup. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductType&gt;</returns>
        public ApiResponse< List<ProductType> > TeamBuilderConfigsIdProductGroupsNkTypesGetWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups/{nk}/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsNkTypesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductType>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductType>)));
            
        }

        /// <summary>
        /// Queries types of ProductGroup. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;ProductType&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductType>> TeamBuilderConfigsIdProductGroupsNkTypesGetAsync (string id, string nk, string filter = null)
        {
             ApiResponse<List<ProductType>> localVarResponse = await TeamBuilderConfigsIdProductGroupsNkTypesGetAsyncWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries types of ProductGroup. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProductType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductType>>> TeamBuilderConfigsIdProductGroupsNkTypesGetAsyncWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups/{nk}/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsNkTypesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductType>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductType>)));
            
        }

        /// <summary>
        /// Creates a new instance in types of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductType</returns>
        public ProductType TeamBuilderConfigsIdProductGroupsNkTypesPost (string id, string nk, ProductType data = null)
        {
             ApiResponse<ProductType> localVarResponse = TeamBuilderConfigsIdProductGroupsNkTypesPostWithHttpInfo(id, nk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in types of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductType</returns>
        public ApiResponse< ProductType > TeamBuilderConfigsIdProductGroupsNkTypesPostWithHttpInfo (string id, string nk, ProductType data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesPost");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups/{nk}/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsNkTypesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductType)));
            
        }

        /// <summary>
        /// Creates a new instance in types of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductType</returns>
        public async System.Threading.Tasks.Task<ProductType> TeamBuilderConfigsIdProductGroupsNkTypesPostAsync (string id, string nk, ProductType data = null)
        {
             ApiResponse<ProductType> localVarResponse = await TeamBuilderConfigsIdProductGroupsNkTypesPostAsyncWithHttpInfo(id, nk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in types of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productGroups.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductType>> TeamBuilderConfigsIdProductGroupsNkTypesPostAsyncWithHttpInfo (string id, string nk, ProductType data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsNkTypesPost");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups/{nk}/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsNkTypesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductType)));
            
        }

        /// <summary>
        /// Creates a new instance in productGroups of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductGroup</returns>
        public ProductGroup TeamBuilderConfigsIdProductGroupsPost (string id, ProductGroup data = null)
        {
             ApiResponse<ProductGroup> localVarResponse = TeamBuilderConfigsIdProductGroupsPostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in productGroups of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductGroup</returns>
        public ApiResponse< ProductGroup > TeamBuilderConfigsIdProductGroupsPostWithHttpInfo (string id, ProductGroup data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsPost");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductGroup) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductGroup)));
            
        }

        /// <summary>
        /// Creates a new instance in productGroups of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductGroup</returns>
        public async System.Threading.Tasks.Task<ProductGroup> TeamBuilderConfigsIdProductGroupsPostAsync (string id, ProductGroup data = null)
        {
             ApiResponse<ProductGroup> localVarResponse = await TeamBuilderConfigsIdProductGroupsPostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in productGroups of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductGroup>> TeamBuilderConfigsIdProductGroupsPostAsyncWithHttpInfo (string id, ProductGroup data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsPost");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductGroup) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductGroup)));
            
        }

        /// <summary>
        /// Remove the productGroups relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns></returns>
        public void TeamBuilderConfigsIdProductGroupsRelFkDelete (string id, string fk)
        {
             TeamBuilderConfigsIdProductGroupsRelFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Remove the productGroups relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TeamBuilderConfigsIdProductGroupsRelFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsRelFkDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove the productGroups relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamBuilderConfigsIdProductGroupsRelFkDeleteAsync (string id, string fk)
        {
             await TeamBuilderConfigsIdProductGroupsRelFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Remove the productGroups relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductGroupsRelFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsRelFkDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Check the existence of productGroups relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns>bool?</returns>
        public bool? TeamBuilderConfigsIdProductGroupsRelFkHead (string id, string fk)
        {
             ApiResponse<bool?> localVarResponse = TeamBuilderConfigsIdProductGroupsRelFkHeadWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check the existence of productGroups relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > TeamBuilderConfigsIdProductGroupsRelFkHeadWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsRelFkHead");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Check the existence of productGroups relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> TeamBuilderConfigsIdProductGroupsRelFkHeadAsync (string id, string fk)
        {
             ApiResponse<bool?> localVarResponse = await TeamBuilderConfigsIdProductGroupsRelFkHeadAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check the existence of productGroups relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> TeamBuilderConfigsIdProductGroupsRelFkHeadAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsRelFkHead");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Add a related item by id for productGroups. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamBuilderConfigProductGroup</returns>
        public TeamBuilderConfigProductGroup TeamBuilderConfigsIdProductGroupsRelFkPut (string id, string fk, TeamBuilderConfigProductGroup data = null)
        {
             ApiResponse<TeamBuilderConfigProductGroup> localVarResponse = TeamBuilderConfigsIdProductGroupsRelFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a related item by id for productGroups. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfigProductGroup</returns>
        public ApiResponse< TeamBuilderConfigProductGroup > TeamBuilderConfigsIdProductGroupsRelFkPutWithHttpInfo (string id, string fk, TeamBuilderConfigProductGroup data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsRelFkPut");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfigProductGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfigProductGroup) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfigProductGroup)));
            
        }

        /// <summary>
        /// Add a related item by id for productGroups. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamBuilderConfigProductGroup</returns>
        public async System.Threading.Tasks.Task<TeamBuilderConfigProductGroup> TeamBuilderConfigsIdProductGroupsRelFkPutAsync (string id, string fk, TeamBuilderConfigProductGroup data = null)
        {
             ApiResponse<TeamBuilderConfigProductGroup> localVarResponse = await TeamBuilderConfigsIdProductGroupsRelFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a related item by id for productGroups. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productGroups</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfigProductGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfigProductGroup>> TeamBuilderConfigsIdProductGroupsRelFkPutAsyncWithHttpInfo (string id, string fk, TeamBuilderConfigProductGroup data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductGroupsRelFkPut");

            var localVarPath = "/TeamBuilderConfigs/{id}/productGroups/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductGroupsRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfigProductGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfigProductGroup) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfigProductGroup)));
            
        }

        /// <summary>
        /// Counts productSizeMaterials of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 TeamBuilderConfigsIdProductSizeMaterialsCountGet (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = TeamBuilderConfigsIdProductSizeMaterialsCountGetWithHttpInfo(id, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts productSizeMaterials of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > TeamBuilderConfigsIdProductSizeMaterialsCountGetWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsCountGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterials/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts productSizeMaterials of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> TeamBuilderConfigsIdProductSizeMaterialsCountGetAsync (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await TeamBuilderConfigsIdProductSizeMaterialsCountGetAsyncWithHttpInfo(id, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts productSizeMaterials of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TeamBuilderConfigsIdProductSizeMaterialsCountGetAsyncWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsCountGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterials/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all productSizeMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns></returns>
        public void TeamBuilderConfigsIdProductSizeMaterialsDelete (string id)
        {
             TeamBuilderConfigsIdProductSizeMaterialsDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes all productSizeMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TeamBuilderConfigsIdProductSizeMaterialsDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all productSizeMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamBuilderConfigsIdProductSizeMaterialsDeleteAsync (string id)
        {
             await TeamBuilderConfigsIdProductSizeMaterialsDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes all productSizeMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductSizeMaterialsDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for productSizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns></returns>
        public void TeamBuilderConfigsIdProductSizeMaterialsFkDelete (string id, string fk)
        {
             TeamBuilderConfigsIdProductSizeMaterialsFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Delete a related item by id for productSizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TeamBuilderConfigsIdProductSizeMaterialsFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsFkDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterials/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for productSizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamBuilderConfigsIdProductSizeMaterialsFkDeleteAsync (string id, string fk)
        {
             await TeamBuilderConfigsIdProductSizeMaterialsFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Delete a related item by id for productSizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductSizeMaterialsFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsFkDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterials/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for productSizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>ProductSizeMaterial</returns>
        public ProductSizeMaterial TeamBuilderConfigsIdProductSizeMaterialsFkGet (string id, string fk)
        {
             ApiResponse<ProductSizeMaterial> localVarResponse = TeamBuilderConfigsIdProductSizeMaterialsFkGetWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for productSizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>ApiResponse of ProductSizeMaterial</returns>
        public ApiResponse< ProductSizeMaterial > TeamBuilderConfigsIdProductSizeMaterialsFkGetWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsFkGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterials/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSizeMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSizeMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSizeMaterial)));
            
        }

        /// <summary>
        /// Find a related item by id for productSizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>Task of ProductSizeMaterial</returns>
        public async System.Threading.Tasks.Task<ProductSizeMaterial> TeamBuilderConfigsIdProductSizeMaterialsFkGetAsync (string id, string fk)
        {
             ApiResponse<ProductSizeMaterial> localVarResponse = await TeamBuilderConfigsIdProductSizeMaterialsFkGetAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for productSizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>Task of ApiResponse (ProductSizeMaterial)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductSizeMaterial>> TeamBuilderConfigsIdProductSizeMaterialsFkGetAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsFkGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterials/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSizeMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSizeMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSizeMaterial)));
            
        }

        /// <summary>
        /// Update a related item by id for productSizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductSizeMaterial</returns>
        public ProductSizeMaterial TeamBuilderConfigsIdProductSizeMaterialsFkPut (string id, string fk, ProductSizeMaterial data = null)
        {
             ApiResponse<ProductSizeMaterial> localVarResponse = TeamBuilderConfigsIdProductSizeMaterialsFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for productSizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductSizeMaterial</returns>
        public ApiResponse< ProductSizeMaterial > TeamBuilderConfigsIdProductSizeMaterialsFkPutWithHttpInfo (string id, string fk, ProductSizeMaterial data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsFkPut");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterials/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSizeMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSizeMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSizeMaterial)));
            
        }

        /// <summary>
        /// Update a related item by id for productSizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductSizeMaterial</returns>
        public async System.Threading.Tasks.Task<ProductSizeMaterial> TeamBuilderConfigsIdProductSizeMaterialsFkPutAsync (string id, string fk, ProductSizeMaterial data = null)
        {
             ApiResponse<ProductSizeMaterial> localVarResponse = await TeamBuilderConfigsIdProductSizeMaterialsFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for productSizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductSizeMaterial)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductSizeMaterial>> TeamBuilderConfigsIdProductSizeMaterialsFkPutAsyncWithHttpInfo (string id, string fk, ProductSizeMaterial data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsFkPut");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterials/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSizeMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSizeMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSizeMaterial)));
            
        }

        /// <summary>
        /// Queries productSizeMaterials of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;ProductSizeMaterial&gt;</returns>
        public List<ProductSizeMaterial> TeamBuilderConfigsIdProductSizeMaterialsGet (string id, string filter = null)
        {
             ApiResponse<List<ProductSizeMaterial>> localVarResponse = TeamBuilderConfigsIdProductSizeMaterialsGetWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries productSizeMaterials of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductSizeMaterial&gt;</returns>
        public ApiResponse< List<ProductSizeMaterial> > TeamBuilderConfigsIdProductSizeMaterialsGetWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductSizeMaterial>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductSizeMaterial>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductSizeMaterial>)));
            
        }

        /// <summary>
        /// Queries productSizeMaterials of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;ProductSizeMaterial&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductSizeMaterial>> TeamBuilderConfigsIdProductSizeMaterialsGetAsync (string id, string filter = null)
        {
             ApiResponse<List<ProductSizeMaterial>> localVarResponse = await TeamBuilderConfigsIdProductSizeMaterialsGetAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries productSizeMaterials of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProductSizeMaterial&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductSizeMaterial>>> TeamBuilderConfigsIdProductSizeMaterialsGetAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductSizeMaterial>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductSizeMaterial>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductSizeMaterial>)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation material. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ProductMaterial</returns>
        public ProductMaterial TeamBuilderConfigsIdProductSizeMaterialsNkMaterialGet (string id, string nk, bool? refresh = null)
        {
             ApiResponse<ProductMaterial> localVarResponse = TeamBuilderConfigsIdProductSizeMaterialsNkMaterialGetWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches belongsTo relation material. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of ProductMaterial</returns>
        public ApiResponse< ProductMaterial > TeamBuilderConfigsIdProductSizeMaterialsNkMaterialGetWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsNkMaterialGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsNkMaterialGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterials/{nk}/material";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsNkMaterialGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductMaterial)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation material. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ProductMaterial</returns>
        public async System.Threading.Tasks.Task<ProductMaterial> TeamBuilderConfigsIdProductSizeMaterialsNkMaterialGetAsync (string id, string nk, bool? refresh = null)
        {
             ApiResponse<ProductMaterial> localVarResponse = await TeamBuilderConfigsIdProductSizeMaterialsNkMaterialGetAsyncWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches belongsTo relation material. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductMaterial)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductMaterial>> TeamBuilderConfigsIdProductSizeMaterialsNkMaterialGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsNkMaterialGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsNkMaterialGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterials/{nk}/material";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsNkMaterialGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductMaterial)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation pdfColorProfile. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ProductPdfColorProfile</returns>
        public ProductPdfColorProfile TeamBuilderConfigsIdProductSizeMaterialsNkPdfColorProfileGet (string id, string nk, bool? refresh = null)
        {
             ApiResponse<ProductPdfColorProfile> localVarResponse = TeamBuilderConfigsIdProductSizeMaterialsNkPdfColorProfileGetWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches belongsTo relation pdfColorProfile. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of ProductPdfColorProfile</returns>
        public ApiResponse< ProductPdfColorProfile > TeamBuilderConfigsIdProductSizeMaterialsNkPdfColorProfileGetWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsNkPdfColorProfileGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsNkPdfColorProfileGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterials/{nk}/pdfColorProfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsNkPdfColorProfileGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductPdfColorProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductPdfColorProfile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductPdfColorProfile)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation pdfColorProfile. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ProductPdfColorProfile</returns>
        public async System.Threading.Tasks.Task<ProductPdfColorProfile> TeamBuilderConfigsIdProductSizeMaterialsNkPdfColorProfileGetAsync (string id, string nk, bool? refresh = null)
        {
             ApiResponse<ProductPdfColorProfile> localVarResponse = await TeamBuilderConfigsIdProductSizeMaterialsNkPdfColorProfileGetAsyncWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches belongsTo relation pdfColorProfile. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductPdfColorProfile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductPdfColorProfile>> TeamBuilderConfigsIdProductSizeMaterialsNkPdfColorProfileGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsNkPdfColorProfileGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsNkPdfColorProfileGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterials/{nk}/pdfColorProfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsNkPdfColorProfileGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductPdfColorProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductPdfColorProfile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductPdfColorProfile)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation size. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ProductSize</returns>
        public ProductSize TeamBuilderConfigsIdProductSizeMaterialsNkSizeGet (string id, string nk, bool? refresh = null)
        {
             ApiResponse<ProductSize> localVarResponse = TeamBuilderConfigsIdProductSizeMaterialsNkSizeGetWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches belongsTo relation size. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of ProductSize</returns>
        public ApiResponse< ProductSize > TeamBuilderConfigsIdProductSizeMaterialsNkSizeGetWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsNkSizeGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsNkSizeGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterials/{nk}/size";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsNkSizeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSize>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSize) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSize)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation size. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ProductSize</returns>
        public async System.Threading.Tasks.Task<ProductSize> TeamBuilderConfigsIdProductSizeMaterialsNkSizeGetAsync (string id, string nk, bool? refresh = null)
        {
             ApiResponse<ProductSize> localVarResponse = await TeamBuilderConfigsIdProductSizeMaterialsNkSizeGetAsyncWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches belongsTo relation size. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductSize)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductSize>> TeamBuilderConfigsIdProductSizeMaterialsNkSizeGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsNkSizeGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsNkSizeGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterials/{nk}/size";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsNkSizeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSize>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSize) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSize)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Team</returns>
        public Team TeamBuilderConfigsIdProductSizeMaterialsNkTeamGet (string id, string nk, bool? refresh = null)
        {
             ApiResponse<Team> localVarResponse = TeamBuilderConfigsIdProductSizeMaterialsNkTeamGetWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches belongsTo relation team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of Team</returns>
        public ApiResponse< Team > TeamBuilderConfigsIdProductSizeMaterialsNkTeamGetWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsNkTeamGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsNkTeamGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterials/{nk}/team";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsNkTeamGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Team) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> TeamBuilderConfigsIdProductSizeMaterialsNkTeamGetAsync (string id, string nk, bool? refresh = null)
        {
             ApiResponse<Team> localVarResponse = await TeamBuilderConfigsIdProductSizeMaterialsNkTeamGetAsyncWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches belongsTo relation team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterials.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Team>> TeamBuilderConfigsIdProductSizeMaterialsNkTeamGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsNkTeamGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsNkTeamGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterials/{nk}/team";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsNkTeamGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Team) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
            
        }

        /// <summary>
        /// Creates a new instance in productSizeMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductSizeMaterial</returns>
        public ProductSizeMaterial TeamBuilderConfigsIdProductSizeMaterialsPost (string id, ProductSizeMaterial data = null)
        {
             ApiResponse<ProductSizeMaterial> localVarResponse = TeamBuilderConfigsIdProductSizeMaterialsPostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in productSizeMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductSizeMaterial</returns>
        public ApiResponse< ProductSizeMaterial > TeamBuilderConfigsIdProductSizeMaterialsPostWithHttpInfo (string id, ProductSizeMaterial data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsPost");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSizeMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSizeMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSizeMaterial)));
            
        }

        /// <summary>
        /// Creates a new instance in productSizeMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductSizeMaterial</returns>
        public async System.Threading.Tasks.Task<ProductSizeMaterial> TeamBuilderConfigsIdProductSizeMaterialsPostAsync (string id, ProductSizeMaterial data = null)
        {
             ApiResponse<ProductSizeMaterial> localVarResponse = await TeamBuilderConfigsIdProductSizeMaterialsPostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in productSizeMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductSizeMaterial)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductSizeMaterial>> TeamBuilderConfigsIdProductSizeMaterialsPostAsyncWithHttpInfo (string id, ProductSizeMaterial data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsPost");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSizeMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSizeMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSizeMaterial)));
            
        }

        /// <summary>
        /// Counts productSizeMaterialsRel of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 TeamBuilderConfigsIdProductSizeMaterialsRelCountGet (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = TeamBuilderConfigsIdProductSizeMaterialsRelCountGetWithHttpInfo(id, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts productSizeMaterialsRel of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > TeamBuilderConfigsIdProductSizeMaterialsRelCountGetWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelCountGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterialsRel/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsRelCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts productSizeMaterialsRel of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> TeamBuilderConfigsIdProductSizeMaterialsRelCountGetAsync (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await TeamBuilderConfigsIdProductSizeMaterialsRelCountGetAsyncWithHttpInfo(id, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts productSizeMaterialsRel of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TeamBuilderConfigsIdProductSizeMaterialsRelCountGetAsyncWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelCountGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterialsRel/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsRelCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all productSizeMaterialsRel of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns></returns>
        public void TeamBuilderConfigsIdProductSizeMaterialsRelDelete (string id)
        {
             TeamBuilderConfigsIdProductSizeMaterialsRelDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes all productSizeMaterialsRel of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TeamBuilderConfigsIdProductSizeMaterialsRelDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterialsRel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsRelDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all productSizeMaterialsRel of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamBuilderConfigsIdProductSizeMaterialsRelDeleteAsync (string id)
        {
             await TeamBuilderConfigsIdProductSizeMaterialsRelDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes all productSizeMaterialsRel of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductSizeMaterialsRelDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterialsRel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsRelDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove the productSizeMaterials relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns></returns>
        public void TeamBuilderConfigsIdProductSizeMaterialsRelFkDelete (string id, string fk)
        {
             TeamBuilderConfigsIdProductSizeMaterialsRelFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Remove the productSizeMaterials relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TeamBuilderConfigsIdProductSizeMaterialsRelFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelFkDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterials/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove the productSizeMaterials relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamBuilderConfigsIdProductSizeMaterialsRelFkDeleteAsync (string id, string fk)
        {
             await TeamBuilderConfigsIdProductSizeMaterialsRelFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Remove the productSizeMaterials relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductSizeMaterialsRelFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelFkDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterials/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for productSizeMaterialsRel. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterialsRel</param>
        /// <returns></returns>
        public void TeamBuilderConfigsIdProductSizeMaterialsRelFkDelete_0 (string id, string fk)
        {
             TeamBuilderConfigsIdProductSizeMaterialsRelFkDelete_0WithHttpInfo(id, fk);
        }

        /// <summary>
        /// Delete a related item by id for productSizeMaterialsRel. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterialsRel</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TeamBuilderConfigsIdProductSizeMaterialsRelFkDelete_0WithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelFkDelete_0");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelFkDelete_0");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterialsRel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsRelFkDelete_0", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for productSizeMaterialsRel. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterialsRel</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamBuilderConfigsIdProductSizeMaterialsRelFkDelete_0Async (string id, string fk)
        {
             await TeamBuilderConfigsIdProductSizeMaterialsRelFkDelete_0AsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Delete a related item by id for productSizeMaterialsRel. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterialsRel</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductSizeMaterialsRelFkDelete_0AsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelFkDelete_0");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelFkDelete_0");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterialsRel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsRelFkDelete_0", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for productSizeMaterialsRel. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterialsRel</param>
        /// <returns>TeamBuilderConfigProductSizeMaterial</returns>
        public TeamBuilderConfigProductSizeMaterial TeamBuilderConfigsIdProductSizeMaterialsRelFkGet (string id, string fk)
        {
             ApiResponse<TeamBuilderConfigProductSizeMaterial> localVarResponse = TeamBuilderConfigsIdProductSizeMaterialsRelFkGetWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for productSizeMaterialsRel. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterialsRel</param>
        /// <returns>ApiResponse of TeamBuilderConfigProductSizeMaterial</returns>
        public ApiResponse< TeamBuilderConfigProductSizeMaterial > TeamBuilderConfigsIdProductSizeMaterialsRelFkGetWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelFkGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterialsRel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsRelFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfigProductSizeMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfigProductSizeMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfigProductSizeMaterial)));
            
        }

        /// <summary>
        /// Find a related item by id for productSizeMaterialsRel. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterialsRel</param>
        /// <returns>Task of TeamBuilderConfigProductSizeMaterial</returns>
        public async System.Threading.Tasks.Task<TeamBuilderConfigProductSizeMaterial> TeamBuilderConfigsIdProductSizeMaterialsRelFkGetAsync (string id, string fk)
        {
             ApiResponse<TeamBuilderConfigProductSizeMaterial> localVarResponse = await TeamBuilderConfigsIdProductSizeMaterialsRelFkGetAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for productSizeMaterialsRel. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterialsRel</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfigProductSizeMaterial)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfigProductSizeMaterial>> TeamBuilderConfigsIdProductSizeMaterialsRelFkGetAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelFkGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterialsRel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsRelFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfigProductSizeMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfigProductSizeMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfigProductSizeMaterial)));
            
        }

        /// <summary>
        /// Check the existence of productSizeMaterials relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>bool?</returns>
        public bool? TeamBuilderConfigsIdProductSizeMaterialsRelFkHead (string id, string fk)
        {
             ApiResponse<bool?> localVarResponse = TeamBuilderConfigsIdProductSizeMaterialsRelFkHeadWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check the existence of productSizeMaterials relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > TeamBuilderConfigsIdProductSizeMaterialsRelFkHeadWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelFkHead");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterials/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Check the existence of productSizeMaterials relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> TeamBuilderConfigsIdProductSizeMaterialsRelFkHeadAsync (string id, string fk)
        {
             ApiResponse<bool?> localVarResponse = await TeamBuilderConfigsIdProductSizeMaterialsRelFkHeadAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check the existence of productSizeMaterials relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> TeamBuilderConfigsIdProductSizeMaterialsRelFkHeadAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelFkHead");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterials/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Add a related item by id for productSizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamBuilderConfigProductSizeMaterial</returns>
        public TeamBuilderConfigProductSizeMaterial TeamBuilderConfigsIdProductSizeMaterialsRelFkPut (string id, string fk, TeamBuilderConfigProductSizeMaterial data = null)
        {
             ApiResponse<TeamBuilderConfigProductSizeMaterial> localVarResponse = TeamBuilderConfigsIdProductSizeMaterialsRelFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a related item by id for productSizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfigProductSizeMaterial</returns>
        public ApiResponse< TeamBuilderConfigProductSizeMaterial > TeamBuilderConfigsIdProductSizeMaterialsRelFkPutWithHttpInfo (string id, string fk, TeamBuilderConfigProductSizeMaterial data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelFkPut");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterials/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfigProductSizeMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfigProductSizeMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfigProductSizeMaterial)));
            
        }

        /// <summary>
        /// Add a related item by id for productSizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamBuilderConfigProductSizeMaterial</returns>
        public async System.Threading.Tasks.Task<TeamBuilderConfigProductSizeMaterial> TeamBuilderConfigsIdProductSizeMaterialsRelFkPutAsync (string id, string fk, TeamBuilderConfigProductSizeMaterial data = null)
        {
             ApiResponse<TeamBuilderConfigProductSizeMaterial> localVarResponse = await TeamBuilderConfigsIdProductSizeMaterialsRelFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a related item by id for productSizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfigProductSizeMaterial)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfigProductSizeMaterial>> TeamBuilderConfigsIdProductSizeMaterialsRelFkPutAsyncWithHttpInfo (string id, string fk, TeamBuilderConfigProductSizeMaterial data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelFkPut");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterials/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfigProductSizeMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfigProductSizeMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfigProductSizeMaterial)));
            
        }

        /// <summary>
        /// Update a related item by id for productSizeMaterialsRel. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterialsRel</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamBuilderConfigProductSizeMaterial</returns>
        public TeamBuilderConfigProductSizeMaterial TeamBuilderConfigsIdProductSizeMaterialsRelFkPut_0 (string id, string fk, TeamBuilderConfigProductSizeMaterial data = null)
        {
             ApiResponse<TeamBuilderConfigProductSizeMaterial> localVarResponse = TeamBuilderConfigsIdProductSizeMaterialsRelFkPut_0WithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for productSizeMaterialsRel. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterialsRel</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfigProductSizeMaterial</returns>
        public ApiResponse< TeamBuilderConfigProductSizeMaterial > TeamBuilderConfigsIdProductSizeMaterialsRelFkPut_0WithHttpInfo (string id, string fk, TeamBuilderConfigProductSizeMaterial data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelFkPut_0");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelFkPut_0");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterialsRel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsRelFkPut_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfigProductSizeMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfigProductSizeMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfigProductSizeMaterial)));
            
        }

        /// <summary>
        /// Update a related item by id for productSizeMaterialsRel. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterialsRel</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamBuilderConfigProductSizeMaterial</returns>
        public async System.Threading.Tasks.Task<TeamBuilderConfigProductSizeMaterial> TeamBuilderConfigsIdProductSizeMaterialsRelFkPut_0Async (string id, string fk, TeamBuilderConfigProductSizeMaterial data = null)
        {
             ApiResponse<TeamBuilderConfigProductSizeMaterial> localVarResponse = await TeamBuilderConfigsIdProductSizeMaterialsRelFkPut_0AsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for productSizeMaterialsRel. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizeMaterialsRel</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfigProductSizeMaterial)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfigProductSizeMaterial>> TeamBuilderConfigsIdProductSizeMaterialsRelFkPut_0AsyncWithHttpInfo (string id, string fk, TeamBuilderConfigProductSizeMaterial data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelFkPut_0");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelFkPut_0");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterialsRel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsRelFkPut_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfigProductSizeMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfigProductSizeMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfigProductSizeMaterial)));
            
        }

        /// <summary>
        /// Queries productSizeMaterialsRel of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;TeamBuilderConfigProductSizeMaterial&gt;</returns>
        public List<TeamBuilderConfigProductSizeMaterial> TeamBuilderConfigsIdProductSizeMaterialsRelGet (string id, string filter = null)
        {
             ApiResponse<List<TeamBuilderConfigProductSizeMaterial>> localVarResponse = TeamBuilderConfigsIdProductSizeMaterialsRelGetWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries productSizeMaterialsRel of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;TeamBuilderConfigProductSizeMaterial&gt;</returns>
        public ApiResponse< List<TeamBuilderConfigProductSizeMaterial> > TeamBuilderConfigsIdProductSizeMaterialsRelGetWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterialsRel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsRelGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TeamBuilderConfigProductSizeMaterial>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TeamBuilderConfigProductSizeMaterial>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamBuilderConfigProductSizeMaterial>)));
            
        }

        /// <summary>
        /// Queries productSizeMaterialsRel of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;TeamBuilderConfigProductSizeMaterial&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamBuilderConfigProductSizeMaterial>> TeamBuilderConfigsIdProductSizeMaterialsRelGetAsync (string id, string filter = null)
        {
             ApiResponse<List<TeamBuilderConfigProductSizeMaterial>> localVarResponse = await TeamBuilderConfigsIdProductSizeMaterialsRelGetAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries productSizeMaterialsRel of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamBuilderConfigProductSizeMaterial&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TeamBuilderConfigProductSizeMaterial>>> TeamBuilderConfigsIdProductSizeMaterialsRelGetAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterialsRel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsRelGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TeamBuilderConfigProductSizeMaterial>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TeamBuilderConfigProductSizeMaterial>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TeamBuilderConfigProductSizeMaterial>)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation builderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterialsRel.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>TeamBuilderConfig</returns>
        public TeamBuilderConfig TeamBuilderConfigsIdProductSizeMaterialsRelNkBuilderConfigGet (string id, string nk, bool? refresh = null)
        {
             ApiResponse<TeamBuilderConfig> localVarResponse = TeamBuilderConfigsIdProductSizeMaterialsRelNkBuilderConfigGetWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches belongsTo relation builderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterialsRel.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfig</returns>
        public ApiResponse< TeamBuilderConfig > TeamBuilderConfigsIdProductSizeMaterialsRelNkBuilderConfigGetWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelNkBuilderConfigGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelNkBuilderConfigGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterialsRel/{nk}/builderConfig";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsRelNkBuilderConfigGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfig)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation builderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterialsRel.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of TeamBuilderConfig</returns>
        public async System.Threading.Tasks.Task<TeamBuilderConfig> TeamBuilderConfigsIdProductSizeMaterialsRelNkBuilderConfigGetAsync (string id, string nk, bool? refresh = null)
        {
             ApiResponse<TeamBuilderConfig> localVarResponse = await TeamBuilderConfigsIdProductSizeMaterialsRelNkBuilderConfigGetAsyncWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches belongsTo relation builderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterialsRel.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfig>> TeamBuilderConfigsIdProductSizeMaterialsRelNkBuilderConfigGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelNkBuilderConfigGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelNkBuilderConfigGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterialsRel/{nk}/builderConfig";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsRelNkBuilderConfigGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfig)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation pdfColorProfile. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterialsRel.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ProductPdfColorProfile</returns>
        public ProductPdfColorProfile TeamBuilderConfigsIdProductSizeMaterialsRelNkPdfColorProfileGet (string id, string nk, bool? refresh = null)
        {
             ApiResponse<ProductPdfColorProfile> localVarResponse = TeamBuilderConfigsIdProductSizeMaterialsRelNkPdfColorProfileGetWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches belongsTo relation pdfColorProfile. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterialsRel.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of ProductPdfColorProfile</returns>
        public ApiResponse< ProductPdfColorProfile > TeamBuilderConfigsIdProductSizeMaterialsRelNkPdfColorProfileGetWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelNkPdfColorProfileGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelNkPdfColorProfileGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterialsRel/{nk}/pdfColorProfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsRelNkPdfColorProfileGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductPdfColorProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductPdfColorProfile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductPdfColorProfile)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation pdfColorProfile. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterialsRel.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ProductPdfColorProfile</returns>
        public async System.Threading.Tasks.Task<ProductPdfColorProfile> TeamBuilderConfigsIdProductSizeMaterialsRelNkPdfColorProfileGetAsync (string id, string nk, bool? refresh = null)
        {
             ApiResponse<ProductPdfColorProfile> localVarResponse = await TeamBuilderConfigsIdProductSizeMaterialsRelNkPdfColorProfileGetAsyncWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches belongsTo relation pdfColorProfile. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterialsRel.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductPdfColorProfile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductPdfColorProfile>> TeamBuilderConfigsIdProductSizeMaterialsRelNkPdfColorProfileGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelNkPdfColorProfileGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelNkPdfColorProfileGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterialsRel/{nk}/pdfColorProfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsRelNkPdfColorProfileGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductPdfColorProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductPdfColorProfile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductPdfColorProfile)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation productSizeMaterial. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterialsRel.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ProductSizeMaterial</returns>
        public ProductSizeMaterial TeamBuilderConfigsIdProductSizeMaterialsRelNkProductSizeMaterialGet (string id, string nk, bool? refresh = null)
        {
             ApiResponse<ProductSizeMaterial> localVarResponse = TeamBuilderConfigsIdProductSizeMaterialsRelNkProductSizeMaterialGetWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches belongsTo relation productSizeMaterial. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterialsRel.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of ProductSizeMaterial</returns>
        public ApiResponse< ProductSizeMaterial > TeamBuilderConfigsIdProductSizeMaterialsRelNkProductSizeMaterialGetWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelNkProductSizeMaterialGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelNkProductSizeMaterialGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterialsRel/{nk}/productSizeMaterial";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsRelNkProductSizeMaterialGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSizeMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSizeMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSizeMaterial)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation productSizeMaterial. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterialsRel.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ProductSizeMaterial</returns>
        public async System.Threading.Tasks.Task<ProductSizeMaterial> TeamBuilderConfigsIdProductSizeMaterialsRelNkProductSizeMaterialGetAsync (string id, string nk, bool? refresh = null)
        {
             ApiResponse<ProductSizeMaterial> localVarResponse = await TeamBuilderConfigsIdProductSizeMaterialsRelNkProductSizeMaterialGetAsyncWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches belongsTo relation productSizeMaterial. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizeMaterialsRel.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductSizeMaterial)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductSizeMaterial>> TeamBuilderConfigsIdProductSizeMaterialsRelNkProductSizeMaterialGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelNkProductSizeMaterialGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelNkProductSizeMaterialGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterialsRel/{nk}/productSizeMaterial";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsRelNkProductSizeMaterialGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSizeMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSizeMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSizeMaterial)));
            
        }

        /// <summary>
        /// Creates a new instance in productSizeMaterialsRel of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamBuilderConfigProductSizeMaterial</returns>
        public TeamBuilderConfigProductSizeMaterial TeamBuilderConfigsIdProductSizeMaterialsRelPost (string id, TeamBuilderConfigProductSizeMaterial data = null)
        {
             ApiResponse<TeamBuilderConfigProductSizeMaterial> localVarResponse = TeamBuilderConfigsIdProductSizeMaterialsRelPostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in productSizeMaterialsRel of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfigProductSizeMaterial</returns>
        public ApiResponse< TeamBuilderConfigProductSizeMaterial > TeamBuilderConfigsIdProductSizeMaterialsRelPostWithHttpInfo (string id, TeamBuilderConfigProductSizeMaterial data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelPost");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterialsRel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsRelPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfigProductSizeMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfigProductSizeMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfigProductSizeMaterial)));
            
        }

        /// <summary>
        /// Creates a new instance in productSizeMaterialsRel of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamBuilderConfigProductSizeMaterial</returns>
        public async System.Threading.Tasks.Task<TeamBuilderConfigProductSizeMaterial> TeamBuilderConfigsIdProductSizeMaterialsRelPostAsync (string id, TeamBuilderConfigProductSizeMaterial data = null)
        {
             ApiResponse<TeamBuilderConfigProductSizeMaterial> localVarResponse = await TeamBuilderConfigsIdProductSizeMaterialsRelPostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in productSizeMaterialsRel of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfigProductSizeMaterial)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfigProductSizeMaterial>> TeamBuilderConfigsIdProductSizeMaterialsRelPostAsyncWithHttpInfo (string id, TeamBuilderConfigProductSizeMaterial data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizeMaterialsRelPost");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizeMaterialsRel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizeMaterialsRelPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfigProductSizeMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfigProductSizeMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfigProductSizeMaterial)));
            
        }

        /// <summary>
        /// Counts productSizes of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 TeamBuilderConfigsIdProductSizesCountGet (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = TeamBuilderConfigsIdProductSizesCountGetWithHttpInfo(id, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts productSizes of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > TeamBuilderConfigsIdProductSizesCountGetWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesCountGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts productSizes of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> TeamBuilderConfigsIdProductSizesCountGetAsync (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await TeamBuilderConfigsIdProductSizesCountGetAsyncWithHttpInfo(id, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts productSizes of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TeamBuilderConfigsIdProductSizesCountGetAsyncWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesCountGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all productSizes of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns></returns>
        public void TeamBuilderConfigsIdProductSizesDelete (string id)
        {
             TeamBuilderConfigsIdProductSizesDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes all productSizes of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TeamBuilderConfigsIdProductSizesDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all productSizes of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamBuilderConfigsIdProductSizesDeleteAsync (string id)
        {
             await TeamBuilderConfigsIdProductSizesDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes all productSizes of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductSizesDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for productSizes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns></returns>
        public void TeamBuilderConfigsIdProductSizesFkDelete (string id, string fk)
        {
             TeamBuilderConfigsIdProductSizesFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Delete a related item by id for productSizes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TeamBuilderConfigsIdProductSizesFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesFkDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for productSizes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamBuilderConfigsIdProductSizesFkDeleteAsync (string id, string fk)
        {
             await TeamBuilderConfigsIdProductSizesFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Delete a related item by id for productSizes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductSizesFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesFkDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for productSizes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns>ProductSize</returns>
        public ProductSize TeamBuilderConfigsIdProductSizesFkGet (string id, string fk)
        {
             ApiResponse<ProductSize> localVarResponse = TeamBuilderConfigsIdProductSizesFkGetWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for productSizes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns>ApiResponse of ProductSize</returns>
        public ApiResponse< ProductSize > TeamBuilderConfigsIdProductSizesFkGetWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesFkGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSize>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSize) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSize)));
            
        }

        /// <summary>
        /// Find a related item by id for productSizes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns>Task of ProductSize</returns>
        public async System.Threading.Tasks.Task<ProductSize> TeamBuilderConfigsIdProductSizesFkGetAsync (string id, string fk)
        {
             ApiResponse<ProductSize> localVarResponse = await TeamBuilderConfigsIdProductSizesFkGetAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for productSizes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns>Task of ApiResponse (ProductSize)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductSize>> TeamBuilderConfigsIdProductSizesFkGetAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesFkGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSize>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSize) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSize)));
            
        }

        /// <summary>
        /// Update a related item by id for productSizes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductSize</returns>
        public ProductSize TeamBuilderConfigsIdProductSizesFkPut (string id, string fk, ProductSize data = null)
        {
             ApiResponse<ProductSize> localVarResponse = TeamBuilderConfigsIdProductSizesFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for productSizes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductSize</returns>
        public ApiResponse< ProductSize > TeamBuilderConfigsIdProductSizesFkPutWithHttpInfo (string id, string fk, ProductSize data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesFkPut");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSize>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSize) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSize)));
            
        }

        /// <summary>
        /// Update a related item by id for productSizes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductSize</returns>
        public async System.Threading.Tasks.Task<ProductSize> TeamBuilderConfigsIdProductSizesFkPutAsync (string id, string fk, ProductSize data = null)
        {
             ApiResponse<ProductSize> localVarResponse = await TeamBuilderConfigsIdProductSizesFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for productSizes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductSize)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductSize>> TeamBuilderConfigsIdProductSizesFkPutAsyncWithHttpInfo (string id, string fk, ProductSize data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesFkPut");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSize>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSize) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSize)));
            
        }

        /// <summary>
        /// Queries productSizes of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;ProductSize&gt;</returns>
        public List<ProductSize> TeamBuilderConfigsIdProductSizesGet (string id, string filter = null)
        {
             ApiResponse<List<ProductSize>> localVarResponse = TeamBuilderConfigsIdProductSizesGetWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries productSizes of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductSize&gt;</returns>
        public ApiResponse< List<ProductSize> > TeamBuilderConfigsIdProductSizesGetWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductSize>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductSize>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductSize>)));
            
        }

        /// <summary>
        /// Queries productSizes of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;ProductSize&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductSize>> TeamBuilderConfigsIdProductSizesGetAsync (string id, string filter = null)
        {
             ApiResponse<List<ProductSize>> localVarResponse = await TeamBuilderConfigsIdProductSizesGetAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries productSizes of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProductSize&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductSize>>> TeamBuilderConfigsIdProductSizesGetAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductSize>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductSize>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductSize>)));
            
        }

        /// <summary>
        /// Counts materials of ProductSize. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 TeamBuilderConfigsIdProductSizesNkMaterialsCountGet (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = TeamBuilderConfigsIdProductSizesNkMaterialsCountGetWithHttpInfo(id, nk, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts materials of ProductSize. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > TeamBuilderConfigsIdProductSizesNkMaterialsCountGetWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsCountGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/materials/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkMaterialsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts materials of ProductSize. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> TeamBuilderConfigsIdProductSizesNkMaterialsCountGetAsync (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await TeamBuilderConfigsIdProductSizesNkMaterialsCountGetAsyncWithHttpInfo(id, nk, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts materials of ProductSize. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TeamBuilderConfigsIdProductSizesNkMaterialsCountGetAsyncWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsCountGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/materials/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkMaterialsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all materials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <returns></returns>
        public void TeamBuilderConfigsIdProductSizesNkMaterialsDelete (string id, string nk)
        {
             TeamBuilderConfigsIdProductSizesNkMaterialsDeleteWithHttpInfo(id, nk);
        }

        /// <summary>
        /// Deletes all materials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TeamBuilderConfigsIdProductSizesNkMaterialsDeleteWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/materials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkMaterialsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all materials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamBuilderConfigsIdProductSizesNkMaterialsDeleteAsync (string id, string nk)
        {
             await TeamBuilderConfigsIdProductSizesNkMaterialsDeleteAsyncWithHttpInfo(id, nk);

        }

        /// <summary>
        /// Deletes all materials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductSizesNkMaterialsDeleteAsyncWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/materials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkMaterialsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for materials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns></returns>
        public void TeamBuilderConfigsIdProductSizesNkMaterialsFkDelete (string id, string nk, string fk)
        {
             TeamBuilderConfigsIdProductSizesNkMaterialsFkDeleteWithHttpInfo(id, nk, fk);
        }

        /// <summary>
        /// Delete a related item by id for materials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TeamBuilderConfigsIdProductSizesNkMaterialsFkDeleteWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsFkDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/materials/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkMaterialsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for materials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamBuilderConfigsIdProductSizesNkMaterialsFkDeleteAsync (string id, string nk, string fk)
        {
             await TeamBuilderConfigsIdProductSizesNkMaterialsFkDeleteAsyncWithHttpInfo(id, nk, fk);

        }

        /// <summary>
        /// Delete a related item by id for materials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductSizesNkMaterialsFkDeleteAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsFkDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/materials/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkMaterialsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for materials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns>ProductMaterial</returns>
        public ProductMaterial TeamBuilderConfigsIdProductSizesNkMaterialsFkGet (string id, string nk, string fk)
        {
             ApiResponse<ProductMaterial> localVarResponse = TeamBuilderConfigsIdProductSizesNkMaterialsFkGetWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for materials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns>ApiResponse of ProductMaterial</returns>
        public ApiResponse< ProductMaterial > TeamBuilderConfigsIdProductSizesNkMaterialsFkGetWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsFkGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/materials/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkMaterialsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductMaterial)));
            
        }

        /// <summary>
        /// Find a related item by id for materials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns>Task of ProductMaterial</returns>
        public async System.Threading.Tasks.Task<ProductMaterial> TeamBuilderConfigsIdProductSizesNkMaterialsFkGetAsync (string id, string nk, string fk)
        {
             ApiResponse<ProductMaterial> localVarResponse = await TeamBuilderConfigsIdProductSizesNkMaterialsFkGetAsyncWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for materials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns>Task of ApiResponse (ProductMaterial)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductMaterial>> TeamBuilderConfigsIdProductSizesNkMaterialsFkGetAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsFkGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/materials/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkMaterialsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductMaterial)));
            
        }

        /// <summary>
        /// Update a related item by id for materials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductMaterial</returns>
        public ProductMaterial TeamBuilderConfigsIdProductSizesNkMaterialsFkPut (string id, string nk, string fk, ProductMaterial data = null)
        {
             ApiResponse<ProductMaterial> localVarResponse = TeamBuilderConfigsIdProductSizesNkMaterialsFkPutWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for materials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductMaterial</returns>
        public ApiResponse< ProductMaterial > TeamBuilderConfigsIdProductSizesNkMaterialsFkPutWithHttpInfo (string id, string nk, string fk, ProductMaterial data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsFkPut");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/materials/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkMaterialsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductMaterial)));
            
        }

        /// <summary>
        /// Update a related item by id for materials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductMaterial</returns>
        public async System.Threading.Tasks.Task<ProductMaterial> TeamBuilderConfigsIdProductSizesNkMaterialsFkPutAsync (string id, string nk, string fk, ProductMaterial data = null)
        {
             ApiResponse<ProductMaterial> localVarResponse = await TeamBuilderConfigsIdProductSizesNkMaterialsFkPutAsyncWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for materials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductMaterial)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductMaterial>> TeamBuilderConfigsIdProductSizesNkMaterialsFkPutAsyncWithHttpInfo (string id, string nk, string fk, ProductMaterial data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsFkPut");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/materials/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkMaterialsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductMaterial)));
            
        }

        /// <summary>
        /// Queries materials of ProductSize. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;ProductMaterial&gt;</returns>
        public List<ProductMaterial> TeamBuilderConfigsIdProductSizesNkMaterialsGet (string id, string nk, string filter = null)
        {
             ApiResponse<List<ProductMaterial>> localVarResponse = TeamBuilderConfigsIdProductSizesNkMaterialsGetWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries materials of ProductSize. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductMaterial&gt;</returns>
        public ApiResponse< List<ProductMaterial> > TeamBuilderConfigsIdProductSizesNkMaterialsGetWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/materials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkMaterialsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductMaterial>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductMaterial>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductMaterial>)));
            
        }

        /// <summary>
        /// Queries materials of ProductSize. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;ProductMaterial&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductMaterial>> TeamBuilderConfigsIdProductSizesNkMaterialsGetAsync (string id, string nk, string filter = null)
        {
             ApiResponse<List<ProductMaterial>> localVarResponse = await TeamBuilderConfigsIdProductSizesNkMaterialsGetAsyncWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries materials of ProductSize. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProductMaterial&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductMaterial>>> TeamBuilderConfigsIdProductSizesNkMaterialsGetAsyncWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/materials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkMaterialsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductMaterial>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductMaterial>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductMaterial>)));
            
        }

        /// <summary>
        /// Creates a new instance in materials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductMaterial</returns>
        public ProductMaterial TeamBuilderConfigsIdProductSizesNkMaterialsPost (string id, string nk, ProductMaterial data = null)
        {
             ApiResponse<ProductMaterial> localVarResponse = TeamBuilderConfigsIdProductSizesNkMaterialsPostWithHttpInfo(id, nk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in materials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductMaterial</returns>
        public ApiResponse< ProductMaterial > TeamBuilderConfigsIdProductSizesNkMaterialsPostWithHttpInfo (string id, string nk, ProductMaterial data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsPost");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/materials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkMaterialsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductMaterial)));
            
        }

        /// <summary>
        /// Creates a new instance in materials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductMaterial</returns>
        public async System.Threading.Tasks.Task<ProductMaterial> TeamBuilderConfigsIdProductSizesNkMaterialsPostAsync (string id, string nk, ProductMaterial data = null)
        {
             ApiResponse<ProductMaterial> localVarResponse = await TeamBuilderConfigsIdProductSizesNkMaterialsPostAsyncWithHttpInfo(id, nk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in materials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductMaterial)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductMaterial>> TeamBuilderConfigsIdProductSizesNkMaterialsPostAsyncWithHttpInfo (string id, string nk, ProductMaterial data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsPost");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/materials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkMaterialsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductMaterial)));
            
        }

        /// <summary>
        /// Remove the materials relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns></returns>
        public void TeamBuilderConfigsIdProductSizesNkMaterialsRelFkDelete (string id, string nk, string fk)
        {
             TeamBuilderConfigsIdProductSizesNkMaterialsRelFkDeleteWithHttpInfo(id, nk, fk);
        }

        /// <summary>
        /// Remove the materials relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TeamBuilderConfigsIdProductSizesNkMaterialsRelFkDeleteWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsRelFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsRelFkDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/materials/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkMaterialsRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove the materials relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamBuilderConfigsIdProductSizesNkMaterialsRelFkDeleteAsync (string id, string nk, string fk)
        {
             await TeamBuilderConfigsIdProductSizesNkMaterialsRelFkDeleteAsyncWithHttpInfo(id, nk, fk);

        }

        /// <summary>
        /// Remove the materials relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductSizesNkMaterialsRelFkDeleteAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsRelFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsRelFkDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/materials/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkMaterialsRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Check the existence of materials relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns>bool?</returns>
        public bool? TeamBuilderConfigsIdProductSizesNkMaterialsRelFkHead (string id, string nk, string fk)
        {
             ApiResponse<bool?> localVarResponse = TeamBuilderConfigsIdProductSizesNkMaterialsRelFkHeadWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check the existence of materials relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > TeamBuilderConfigsIdProductSizesNkMaterialsRelFkHeadWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsRelFkHead");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsRelFkHead");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/materials/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkMaterialsRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Check the existence of materials relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> TeamBuilderConfigsIdProductSizesNkMaterialsRelFkHeadAsync (string id, string nk, string fk)
        {
             ApiResponse<bool?> localVarResponse = await TeamBuilderConfigsIdProductSizesNkMaterialsRelFkHeadAsyncWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check the existence of materials relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> TeamBuilderConfigsIdProductSizesNkMaterialsRelFkHeadAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsRelFkHead");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsRelFkHead");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/materials/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkMaterialsRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Add a related item by id for materials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductSizeMaterial</returns>
        public ProductSizeMaterial TeamBuilderConfigsIdProductSizesNkMaterialsRelFkPut (string id, string nk, string fk, ProductSizeMaterial data = null)
        {
             ApiResponse<ProductSizeMaterial> localVarResponse = TeamBuilderConfigsIdProductSizesNkMaterialsRelFkPutWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a related item by id for materials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductSizeMaterial</returns>
        public ApiResponse< ProductSizeMaterial > TeamBuilderConfigsIdProductSizesNkMaterialsRelFkPutWithHttpInfo (string id, string nk, string fk, ProductSizeMaterial data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsRelFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsRelFkPut");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/materials/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkMaterialsRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSizeMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSizeMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSizeMaterial)));
            
        }

        /// <summary>
        /// Add a related item by id for materials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductSizeMaterial</returns>
        public async System.Threading.Tasks.Task<ProductSizeMaterial> TeamBuilderConfigsIdProductSizesNkMaterialsRelFkPutAsync (string id, string nk, string fk, ProductSizeMaterial data = null)
        {
             ApiResponse<ProductSizeMaterial> localVarResponse = await TeamBuilderConfigsIdProductSizesNkMaterialsRelFkPutAsyncWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a related item by id for materials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for materials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductSizeMaterial)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductSizeMaterial>> TeamBuilderConfigsIdProductSizesNkMaterialsRelFkPutAsyncWithHttpInfo (string id, string nk, string fk, ProductSizeMaterial data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsRelFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkMaterialsRelFkPut");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/materials/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkMaterialsRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSizeMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSizeMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSizeMaterial)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation pdfColorProfile. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ProductPdfColorProfile</returns>
        public ProductPdfColorProfile TeamBuilderConfigsIdProductSizesNkPdfColorProfileGet (string id, string nk, bool? refresh = null)
        {
             ApiResponse<ProductPdfColorProfile> localVarResponse = TeamBuilderConfigsIdProductSizesNkPdfColorProfileGetWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches belongsTo relation pdfColorProfile. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of ProductPdfColorProfile</returns>
        public ApiResponse< ProductPdfColorProfile > TeamBuilderConfigsIdProductSizesNkPdfColorProfileGetWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkPdfColorProfileGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkPdfColorProfileGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/pdfColorProfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkPdfColorProfileGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductPdfColorProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductPdfColorProfile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductPdfColorProfile)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation pdfColorProfile. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ProductPdfColorProfile</returns>
        public async System.Threading.Tasks.Task<ProductPdfColorProfile> TeamBuilderConfigsIdProductSizesNkPdfColorProfileGetAsync (string id, string nk, bool? refresh = null)
        {
             ApiResponse<ProductPdfColorProfile> localVarResponse = await TeamBuilderConfigsIdProductSizesNkPdfColorProfileGetAsyncWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches belongsTo relation pdfColorProfile. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductPdfColorProfile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductPdfColorProfile>> TeamBuilderConfigsIdProductSizesNkPdfColorProfileGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkPdfColorProfileGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkPdfColorProfileGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/pdfColorProfile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkPdfColorProfileGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductPdfColorProfile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductPdfColorProfile) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductPdfColorProfile)));
            
        }

        /// <summary>
        /// Counts products of ProductSize. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 TeamBuilderConfigsIdProductSizesNkProductsCountGet (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = TeamBuilderConfigsIdProductSizesNkProductsCountGetWithHttpInfo(id, nk, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts products of ProductSize. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > TeamBuilderConfigsIdProductSizesNkProductsCountGetWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsCountGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/products/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkProductsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts products of ProductSize. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> TeamBuilderConfigsIdProductSizesNkProductsCountGetAsync (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await TeamBuilderConfigsIdProductSizesNkProductsCountGetAsyncWithHttpInfo(id, nk, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts products of ProductSize. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TeamBuilderConfigsIdProductSizesNkProductsCountGetAsyncWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsCountGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/products/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkProductsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all products of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <returns></returns>
        public void TeamBuilderConfigsIdProductSizesNkProductsDelete (string id, string nk)
        {
             TeamBuilderConfigsIdProductSizesNkProductsDeleteWithHttpInfo(id, nk);
        }

        /// <summary>
        /// Deletes all products of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TeamBuilderConfigsIdProductSizesNkProductsDeleteWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkProductsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all products of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamBuilderConfigsIdProductSizesNkProductsDeleteAsync (string id, string nk)
        {
             await TeamBuilderConfigsIdProductSizesNkProductsDeleteAsyncWithHttpInfo(id, nk);

        }

        /// <summary>
        /// Deletes all products of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductSizesNkProductsDeleteAsyncWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkProductsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for products. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for products</param>
        /// <returns></returns>
        public void TeamBuilderConfigsIdProductSizesNkProductsFkDelete (string id, string nk, string fk)
        {
             TeamBuilderConfigsIdProductSizesNkProductsFkDeleteWithHttpInfo(id, nk, fk);
        }

        /// <summary>
        /// Delete a related item by id for products. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for products</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TeamBuilderConfigsIdProductSizesNkProductsFkDeleteWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsFkDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/products/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkProductsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for products. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for products</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamBuilderConfigsIdProductSizesNkProductsFkDeleteAsync (string id, string nk, string fk)
        {
             await TeamBuilderConfigsIdProductSizesNkProductsFkDeleteAsyncWithHttpInfo(id, nk, fk);

        }

        /// <summary>
        /// Delete a related item by id for products. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for products</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductSizesNkProductsFkDeleteAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsFkDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/products/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkProductsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for products. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for products</param>
        /// <returns>Product</returns>
        public Product TeamBuilderConfigsIdProductSizesNkProductsFkGet (string id, string nk, string fk)
        {
             ApiResponse<Product> localVarResponse = TeamBuilderConfigsIdProductSizesNkProductsFkGetWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for products. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for products</param>
        /// <returns>ApiResponse of Product</returns>
        public ApiResponse< Product > TeamBuilderConfigsIdProductSizesNkProductsFkGetWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsFkGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/products/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkProductsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
            
        }

        /// <summary>
        /// Find a related item by id for products. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for products</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> TeamBuilderConfigsIdProductSizesNkProductsFkGetAsync (string id, string nk, string fk)
        {
             ApiResponse<Product> localVarResponse = await TeamBuilderConfigsIdProductSizesNkProductsFkGetAsyncWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for products. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for products</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Product>> TeamBuilderConfigsIdProductSizesNkProductsFkGetAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsFkGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/products/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkProductsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
            
        }

        /// <summary>
        /// Update a related item by id for products. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for products</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Product</returns>
        public Product TeamBuilderConfigsIdProductSizesNkProductsFkPut (string id, string nk, string fk, Product data = null)
        {
             ApiResponse<Product> localVarResponse = TeamBuilderConfigsIdProductSizesNkProductsFkPutWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for products. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for products</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Product</returns>
        public ApiResponse< Product > TeamBuilderConfigsIdProductSizesNkProductsFkPutWithHttpInfo (string id, string nk, string fk, Product data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsFkPut");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/products/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkProductsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
            
        }

        /// <summary>
        /// Update a related item by id for products. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for products</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> TeamBuilderConfigsIdProductSizesNkProductsFkPutAsync (string id, string nk, string fk, Product data = null)
        {
             ApiResponse<Product> localVarResponse = await TeamBuilderConfigsIdProductSizesNkProductsFkPutAsyncWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for products. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for products</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Product>> TeamBuilderConfigsIdProductSizesNkProductsFkPutAsyncWithHttpInfo (string id, string nk, string fk, Product data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsFkPut");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/products/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkProductsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
            
        }

        /// <summary>
        /// Queries products of ProductSize. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;Product&gt;</returns>
        public List<Product> TeamBuilderConfigsIdProductSizesNkProductsGet (string id, string nk, string filter = null)
        {
             ApiResponse<List<Product>> localVarResponse = TeamBuilderConfigsIdProductSizesNkProductsGetWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries products of ProductSize. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Product&gt;</returns>
        public ApiResponse< List<Product> > TeamBuilderConfigsIdProductSizesNkProductsGetWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkProductsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Product>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
            
        }

        /// <summary>
        /// Queries products of ProductSize. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;Product&gt;</returns>
        public async System.Threading.Tasks.Task<List<Product>> TeamBuilderConfigsIdProductSizesNkProductsGetAsync (string id, string nk, string filter = null)
        {
             ApiResponse<List<Product>> localVarResponse = await TeamBuilderConfigsIdProductSizesNkProductsGetAsyncWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries products of ProductSize. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Product&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Product>>> TeamBuilderConfigsIdProductSizesNkProductsGetAsyncWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkProductsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Product>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Product>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Product>)));
            
        }

        /// <summary>
        /// Creates a new instance in products of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Product</returns>
        public Product TeamBuilderConfigsIdProductSizesNkProductsPost (string id, string nk, Product data = null)
        {
             ApiResponse<Product> localVarResponse = TeamBuilderConfigsIdProductSizesNkProductsPostWithHttpInfo(id, nk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in products of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Product</returns>
        public ApiResponse< Product > TeamBuilderConfigsIdProductSizesNkProductsPostWithHttpInfo (string id, string nk, Product data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsPost");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkProductsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
            
        }

        /// <summary>
        /// Creates a new instance in products of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> TeamBuilderConfigsIdProductSizesNkProductsPostAsync (string id, string nk, Product data = null)
        {
             ApiResponse<Product> localVarResponse = await TeamBuilderConfigsIdProductSizesNkProductsPostAsyncWithHttpInfo(id, nk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in products of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Product>> TeamBuilderConfigsIdProductSizesNkProductsPostAsyncWithHttpInfo (string id, string nk, Product data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkProductsPost");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkProductsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
            
        }

        /// <summary>
        /// Counts sizeMaterials of ProductSize. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 TeamBuilderConfigsIdProductSizesNkSizeMaterialsCountGet (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = TeamBuilderConfigsIdProductSizesNkSizeMaterialsCountGetWithHttpInfo(id, nk, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts sizeMaterials of ProductSize. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > TeamBuilderConfigsIdProductSizesNkSizeMaterialsCountGetWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsCountGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/sizeMaterials/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkSizeMaterialsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts sizeMaterials of ProductSize. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> TeamBuilderConfigsIdProductSizesNkSizeMaterialsCountGetAsync (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await TeamBuilderConfigsIdProductSizesNkSizeMaterialsCountGetAsyncWithHttpInfo(id, nk, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts sizeMaterials of ProductSize. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TeamBuilderConfigsIdProductSizesNkSizeMaterialsCountGetAsyncWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsCountGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/sizeMaterials/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkSizeMaterialsCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all sizeMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <returns></returns>
        public void TeamBuilderConfigsIdProductSizesNkSizeMaterialsDelete (string id, string nk)
        {
             TeamBuilderConfigsIdProductSizesNkSizeMaterialsDeleteWithHttpInfo(id, nk);
        }

        /// <summary>
        /// Deletes all sizeMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TeamBuilderConfigsIdProductSizesNkSizeMaterialsDeleteWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/sizeMaterials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkSizeMaterialsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all sizeMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamBuilderConfigsIdProductSizesNkSizeMaterialsDeleteAsync (string id, string nk)
        {
             await TeamBuilderConfigsIdProductSizesNkSizeMaterialsDeleteAsyncWithHttpInfo(id, nk);

        }

        /// <summary>
        /// Deletes all sizeMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductSizesNkSizeMaterialsDeleteAsyncWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/sizeMaterials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkSizeMaterialsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for sizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for sizeMaterials</param>
        /// <returns></returns>
        public void TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkDelete (string id, string nk, string fk)
        {
             TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkDeleteWithHttpInfo(id, nk, fk);
        }

        /// <summary>
        /// Delete a related item by id for sizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for sizeMaterials</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkDeleteWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/sizeMaterials/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for sizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for sizeMaterials</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkDeleteAsync (string id, string nk, string fk)
        {
             await TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkDeleteAsyncWithHttpInfo(id, nk, fk);

        }

        /// <summary>
        /// Delete a related item by id for sizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for sizeMaterials</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkDeleteAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/sizeMaterials/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for sizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for sizeMaterials</param>
        /// <returns>ProductSizeMaterial</returns>
        public ProductSizeMaterial TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkGet (string id, string nk, string fk)
        {
             ApiResponse<ProductSizeMaterial> localVarResponse = TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkGetWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for sizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for sizeMaterials</param>
        /// <returns>ApiResponse of ProductSizeMaterial</returns>
        public ApiResponse< ProductSizeMaterial > TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkGetWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/sizeMaterials/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSizeMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSizeMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSizeMaterial)));
            
        }

        /// <summary>
        /// Find a related item by id for sizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for sizeMaterials</param>
        /// <returns>Task of ProductSizeMaterial</returns>
        public async System.Threading.Tasks.Task<ProductSizeMaterial> TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkGetAsync (string id, string nk, string fk)
        {
             ApiResponse<ProductSizeMaterial> localVarResponse = await TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkGetAsyncWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for sizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for sizeMaterials</param>
        /// <returns>Task of ApiResponse (ProductSizeMaterial)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductSizeMaterial>> TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkGetAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/sizeMaterials/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSizeMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSizeMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSizeMaterial)));
            
        }

        /// <summary>
        /// Update a related item by id for sizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for sizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductSizeMaterial</returns>
        public ProductSizeMaterial TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkPut (string id, string nk, string fk, ProductSizeMaterial data = null)
        {
             ApiResponse<ProductSizeMaterial> localVarResponse = TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkPutWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for sizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for sizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductSizeMaterial</returns>
        public ApiResponse< ProductSizeMaterial > TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkPutWithHttpInfo (string id, string nk, string fk, ProductSizeMaterial data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkPut");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/sizeMaterials/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSizeMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSizeMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSizeMaterial)));
            
        }

        /// <summary>
        /// Update a related item by id for sizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for sizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductSizeMaterial</returns>
        public async System.Threading.Tasks.Task<ProductSizeMaterial> TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkPutAsync (string id, string nk, string fk, ProductSizeMaterial data = null)
        {
             ApiResponse<ProductSizeMaterial> localVarResponse = await TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkPutAsyncWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for sizeMaterials. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="fk">Foreign key for sizeMaterials</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductSizeMaterial)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductSizeMaterial>> TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkPutAsyncWithHttpInfo (string id, string nk, string fk, ProductSizeMaterial data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkPut");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/sizeMaterials/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkSizeMaterialsFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSizeMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSizeMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSizeMaterial)));
            
        }

        /// <summary>
        /// Queries sizeMaterials of ProductSize. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;ProductSizeMaterial&gt;</returns>
        public List<ProductSizeMaterial> TeamBuilderConfigsIdProductSizesNkSizeMaterialsGet (string id, string nk, string filter = null)
        {
             ApiResponse<List<ProductSizeMaterial>> localVarResponse = TeamBuilderConfigsIdProductSizesNkSizeMaterialsGetWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries sizeMaterials of ProductSize. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductSizeMaterial&gt;</returns>
        public ApiResponse< List<ProductSizeMaterial> > TeamBuilderConfigsIdProductSizesNkSizeMaterialsGetWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/sizeMaterials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkSizeMaterialsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductSizeMaterial>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductSizeMaterial>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductSizeMaterial>)));
            
        }

        /// <summary>
        /// Queries sizeMaterials of ProductSize. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;ProductSizeMaterial&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductSizeMaterial>> TeamBuilderConfigsIdProductSizesNkSizeMaterialsGetAsync (string id, string nk, string filter = null)
        {
             ApiResponse<List<ProductSizeMaterial>> localVarResponse = await TeamBuilderConfigsIdProductSizesNkSizeMaterialsGetAsyncWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries sizeMaterials of ProductSize. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProductSizeMaterial&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductSizeMaterial>>> TeamBuilderConfigsIdProductSizesNkSizeMaterialsGetAsyncWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/sizeMaterials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkSizeMaterialsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductSizeMaterial>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductSizeMaterial>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductSizeMaterial>)));
            
        }

        /// <summary>
        /// Creates a new instance in sizeMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductSizeMaterial</returns>
        public ProductSizeMaterial TeamBuilderConfigsIdProductSizesNkSizeMaterialsPost (string id, string nk, ProductSizeMaterial data = null)
        {
             ApiResponse<ProductSizeMaterial> localVarResponse = TeamBuilderConfigsIdProductSizesNkSizeMaterialsPostWithHttpInfo(id, nk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in sizeMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductSizeMaterial</returns>
        public ApiResponse< ProductSizeMaterial > TeamBuilderConfigsIdProductSizesNkSizeMaterialsPostWithHttpInfo (string id, string nk, ProductSizeMaterial data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsPost");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/sizeMaterials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkSizeMaterialsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSizeMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSizeMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSizeMaterial)));
            
        }

        /// <summary>
        /// Creates a new instance in sizeMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductSizeMaterial</returns>
        public async System.Threading.Tasks.Task<ProductSizeMaterial> TeamBuilderConfigsIdProductSizesNkSizeMaterialsPostAsync (string id, string nk, ProductSizeMaterial data = null)
        {
             ApiResponse<ProductSizeMaterial> localVarResponse = await TeamBuilderConfigsIdProductSizesNkSizeMaterialsPostAsyncWithHttpInfo(id, nk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in sizeMaterials of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductSizeMaterial)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductSizeMaterial>> TeamBuilderConfigsIdProductSizesNkSizeMaterialsPostAsyncWithHttpInfo (string id, string nk, ProductSizeMaterial data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkSizeMaterialsPost");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/sizeMaterials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkSizeMaterialsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSizeMaterial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSizeMaterial) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSizeMaterial)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation type. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ProductType</returns>
        public ProductType TeamBuilderConfigsIdProductSizesNkTypeGet (string id, string nk, bool? refresh = null)
        {
             ApiResponse<ProductType> localVarResponse = TeamBuilderConfigsIdProductSizesNkTypeGetWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches belongsTo relation type. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of ProductType</returns>
        public ApiResponse< ProductType > TeamBuilderConfigsIdProductSizesNkTypeGetWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkTypeGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkTypeGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductType)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation type. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ProductType</returns>
        public async System.Threading.Tasks.Task<ProductType> TeamBuilderConfigsIdProductSizesNkTypeGetAsync (string id, string nk, bool? refresh = null)
        {
             ApiResponse<ProductType> localVarResponse = await TeamBuilderConfigsIdProductSizesNkTypeGetAsyncWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches belongsTo relation type. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productSizes.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductType>> TeamBuilderConfigsIdProductSizesNkTypeGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkTypeGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesNkTypeGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/{nk}/type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesNkTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductType)));
            
        }

        /// <summary>
        /// Creates a new instance in productSizes of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductSize</returns>
        public ProductSize TeamBuilderConfigsIdProductSizesPost (string id, ProductSize data = null)
        {
             ApiResponse<ProductSize> localVarResponse = TeamBuilderConfigsIdProductSizesPostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in productSizes of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductSize</returns>
        public ApiResponse< ProductSize > TeamBuilderConfigsIdProductSizesPostWithHttpInfo (string id, ProductSize data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesPost");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSize>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSize) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSize)));
            
        }

        /// <summary>
        /// Creates a new instance in productSizes of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductSize</returns>
        public async System.Threading.Tasks.Task<ProductSize> TeamBuilderConfigsIdProductSizesPostAsync (string id, ProductSize data = null)
        {
             ApiResponse<ProductSize> localVarResponse = await TeamBuilderConfigsIdProductSizesPostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in productSizes of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductSize)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductSize>> TeamBuilderConfigsIdProductSizesPostAsyncWithHttpInfo (string id, ProductSize data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesPost");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSize>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSize) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSize)));
            
        }

        /// <summary>
        /// Remove the productSizes relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns></returns>
        public void TeamBuilderConfigsIdProductSizesRelFkDelete (string id, string fk)
        {
             TeamBuilderConfigsIdProductSizesRelFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Remove the productSizes relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TeamBuilderConfigsIdProductSizesRelFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesRelFkDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove the productSizes relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamBuilderConfigsIdProductSizesRelFkDeleteAsync (string id, string fk)
        {
             await TeamBuilderConfigsIdProductSizesRelFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Remove the productSizes relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductSizesRelFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesRelFkDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Check the existence of productSizes relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns>bool?</returns>
        public bool? TeamBuilderConfigsIdProductSizesRelFkHead (string id, string fk)
        {
             ApiResponse<bool?> localVarResponse = TeamBuilderConfigsIdProductSizesRelFkHeadWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check the existence of productSizes relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > TeamBuilderConfigsIdProductSizesRelFkHeadWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesRelFkHead");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Check the existence of productSizes relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> TeamBuilderConfigsIdProductSizesRelFkHeadAsync (string id, string fk)
        {
             ApiResponse<bool?> localVarResponse = await TeamBuilderConfigsIdProductSizesRelFkHeadAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check the existence of productSizes relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> TeamBuilderConfigsIdProductSizesRelFkHeadAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesRelFkHead");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Add a related item by id for productSizes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamBuilderConfigProductSize</returns>
        public TeamBuilderConfigProductSize TeamBuilderConfigsIdProductSizesRelFkPut (string id, string fk, TeamBuilderConfigProductSize data = null)
        {
             ApiResponse<TeamBuilderConfigProductSize> localVarResponse = TeamBuilderConfigsIdProductSizesRelFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a related item by id for productSizes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfigProductSize</returns>
        public ApiResponse< TeamBuilderConfigProductSize > TeamBuilderConfigsIdProductSizesRelFkPutWithHttpInfo (string id, string fk, TeamBuilderConfigProductSize data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesRelFkPut");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfigProductSize>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfigProductSize) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfigProductSize)));
            
        }

        /// <summary>
        /// Add a related item by id for productSizes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamBuilderConfigProductSize</returns>
        public async System.Threading.Tasks.Task<TeamBuilderConfigProductSize> TeamBuilderConfigsIdProductSizesRelFkPutAsync (string id, string fk, TeamBuilderConfigProductSize data = null)
        {
             ApiResponse<TeamBuilderConfigProductSize> localVarResponse = await TeamBuilderConfigsIdProductSizesRelFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a related item by id for productSizes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productSizes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfigProductSize)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfigProductSize>> TeamBuilderConfigsIdProductSizesRelFkPutAsyncWithHttpInfo (string id, string fk, TeamBuilderConfigProductSize data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductSizesRelFkPut");

            var localVarPath = "/TeamBuilderConfigs/{id}/productSizes/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductSizesRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfigProductSize>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfigProductSize) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfigProductSize)));
            
        }

        /// <summary>
        /// Counts productTypes of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 TeamBuilderConfigsIdProductTypesCountGet (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = TeamBuilderConfigsIdProductTypesCountGetWithHttpInfo(id, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts productTypes of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > TeamBuilderConfigsIdProductTypesCountGetWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesCountGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts productTypes of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> TeamBuilderConfigsIdProductTypesCountGetAsync (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await TeamBuilderConfigsIdProductTypesCountGetAsyncWithHttpInfo(id, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts productTypes of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TeamBuilderConfigsIdProductTypesCountGetAsyncWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesCountGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all productTypes of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns></returns>
        public void TeamBuilderConfigsIdProductTypesDelete (string id)
        {
             TeamBuilderConfigsIdProductTypesDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes all productTypes of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TeamBuilderConfigsIdProductTypesDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all productTypes of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamBuilderConfigsIdProductTypesDeleteAsync (string id)
        {
             await TeamBuilderConfigsIdProductTypesDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes all productTypes of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductTypesDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for productTypes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns></returns>
        public void TeamBuilderConfigsIdProductTypesFkDelete (string id, string fk)
        {
             TeamBuilderConfigsIdProductTypesFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Delete a related item by id for productTypes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TeamBuilderConfigsIdProductTypesFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesFkDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for productTypes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamBuilderConfigsIdProductTypesFkDeleteAsync (string id, string fk)
        {
             await TeamBuilderConfigsIdProductTypesFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Delete a related item by id for productTypes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductTypesFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesFkDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for productTypes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns>ProductType</returns>
        public ProductType TeamBuilderConfigsIdProductTypesFkGet (string id, string fk)
        {
             ApiResponse<ProductType> localVarResponse = TeamBuilderConfigsIdProductTypesFkGetWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for productTypes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns>ApiResponse of ProductType</returns>
        public ApiResponse< ProductType > TeamBuilderConfigsIdProductTypesFkGetWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesFkGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductType)));
            
        }

        /// <summary>
        /// Find a related item by id for productTypes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns>Task of ProductType</returns>
        public async System.Threading.Tasks.Task<ProductType> TeamBuilderConfigsIdProductTypesFkGetAsync (string id, string fk)
        {
             ApiResponse<ProductType> localVarResponse = await TeamBuilderConfigsIdProductTypesFkGetAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for productTypes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns>Task of ApiResponse (ProductType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductType>> TeamBuilderConfigsIdProductTypesFkGetAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesFkGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductType)));
            
        }

        /// <summary>
        /// Update a related item by id for productTypes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductType</returns>
        public ProductType TeamBuilderConfigsIdProductTypesFkPut (string id, string fk, ProductType data = null)
        {
             ApiResponse<ProductType> localVarResponse = TeamBuilderConfigsIdProductTypesFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for productTypes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductType</returns>
        public ApiResponse< ProductType > TeamBuilderConfigsIdProductTypesFkPutWithHttpInfo (string id, string fk, ProductType data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesFkPut");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductType)));
            
        }

        /// <summary>
        /// Update a related item by id for productTypes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductType</returns>
        public async System.Threading.Tasks.Task<ProductType> TeamBuilderConfigsIdProductTypesFkPutAsync (string id, string fk, ProductType data = null)
        {
             ApiResponse<ProductType> localVarResponse = await TeamBuilderConfigsIdProductTypesFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for productTypes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductType>> TeamBuilderConfigsIdProductTypesFkPutAsyncWithHttpInfo (string id, string fk, ProductType data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesFkPut");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductType)));
            
        }

        /// <summary>
        /// Queries productTypes of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;ProductType&gt;</returns>
        public List<ProductType> TeamBuilderConfigsIdProductTypesGet (string id, string filter = null)
        {
             ApiResponse<List<ProductType>> localVarResponse = TeamBuilderConfigsIdProductTypesGetWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries productTypes of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductType&gt;</returns>
        public ApiResponse< List<ProductType> > TeamBuilderConfigsIdProductTypesGetWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductType>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductType>)));
            
        }

        /// <summary>
        /// Queries productTypes of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;ProductType&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductType>> TeamBuilderConfigsIdProductTypesGetAsync (string id, string filter = null)
        {
             ApiResponse<List<ProductType>> localVarResponse = await TeamBuilderConfigsIdProductTypesGetAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries productTypes of TeamBuilderConfig. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProductType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductType>>> TeamBuilderConfigsIdProductTypesGetAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductType>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductType>)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation group. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ProductGroup</returns>
        public ProductGroup TeamBuilderConfigsIdProductTypesNkGroupGet (string id, string nk, bool? refresh = null)
        {
             ApiResponse<ProductGroup> localVarResponse = TeamBuilderConfigsIdProductTypesNkGroupGetWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches belongsTo relation group. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of ProductGroup</returns>
        public ApiResponse< ProductGroup > TeamBuilderConfigsIdProductTypesNkGroupGetWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkGroupGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkGroupGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes/{nk}/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesNkGroupGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductGroup) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductGroup)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation group. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ProductGroup</returns>
        public async System.Threading.Tasks.Task<ProductGroup> TeamBuilderConfigsIdProductTypesNkGroupGetAsync (string id, string nk, bool? refresh = null)
        {
             ApiResponse<ProductGroup> localVarResponse = await TeamBuilderConfigsIdProductTypesNkGroupGetAsyncWithHttpInfo(id, nk, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches belongsTo relation group. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductGroup>> TeamBuilderConfigsIdProductTypesNkGroupGetAsyncWithHttpInfo (string id, string nk, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkGroupGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkGroupGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes/{nk}/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesNkGroupGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductGroup) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductGroup)));
            
        }

        /// <summary>
        /// Counts sizes of ProductType. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 TeamBuilderConfigsIdProductTypesNkSizesCountGet (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = TeamBuilderConfigsIdProductTypesNkSizesCountGetWithHttpInfo(id, nk, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts sizes of ProductType. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > TeamBuilderConfigsIdProductTypesNkSizesCountGetWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesCountGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes/{nk}/sizes/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesNkSizesCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts sizes of ProductType. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> TeamBuilderConfigsIdProductTypesNkSizesCountGetAsync (string id, string nk, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await TeamBuilderConfigsIdProductTypesNkSizesCountGetAsyncWithHttpInfo(id, nk, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts sizes of ProductType. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> TeamBuilderConfigsIdProductTypesNkSizesCountGetAsyncWithHttpInfo (string id, string nk, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesCountGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesCountGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes/{nk}/sizes/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesNkSizesCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all sizes of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <returns></returns>
        public void TeamBuilderConfigsIdProductTypesNkSizesDelete (string id, string nk)
        {
             TeamBuilderConfigsIdProductTypesNkSizesDeleteWithHttpInfo(id, nk);
        }

        /// <summary>
        /// Deletes all sizes of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TeamBuilderConfigsIdProductTypesNkSizesDeleteWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes/{nk}/sizes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesNkSizesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all sizes of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamBuilderConfigsIdProductTypesNkSizesDeleteAsync (string id, string nk)
        {
             await TeamBuilderConfigsIdProductTypesNkSizesDeleteAsyncWithHttpInfo(id, nk);

        }

        /// <summary>
        /// Deletes all sizes of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductTypesNkSizesDeleteAsyncWithHttpInfo (string id, string nk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes/{nk}/sizes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesNkSizesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for sizes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="fk">Foreign key for sizes</param>
        /// <returns></returns>
        public void TeamBuilderConfigsIdProductTypesNkSizesFkDelete (string id, string nk, string fk)
        {
             TeamBuilderConfigsIdProductTypesNkSizesFkDeleteWithHttpInfo(id, nk, fk);
        }

        /// <summary>
        /// Delete a related item by id for sizes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="fk">Foreign key for sizes</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TeamBuilderConfigsIdProductTypesNkSizesFkDeleteWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesFkDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes/{nk}/sizes/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesNkSizesFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for sizes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="fk">Foreign key for sizes</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamBuilderConfigsIdProductTypesNkSizesFkDeleteAsync (string id, string nk, string fk)
        {
             await TeamBuilderConfigsIdProductTypesNkSizesFkDeleteAsyncWithHttpInfo(id, nk, fk);

        }

        /// <summary>
        /// Delete a related item by id for sizes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="fk">Foreign key for sizes</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductTypesNkSizesFkDeleteAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesFkDelete");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesFkDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes/{nk}/sizes/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesNkSizesFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for sizes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="fk">Foreign key for sizes</param>
        /// <returns>ProductSize</returns>
        public ProductSize TeamBuilderConfigsIdProductTypesNkSizesFkGet (string id, string nk, string fk)
        {
             ApiResponse<ProductSize> localVarResponse = TeamBuilderConfigsIdProductTypesNkSizesFkGetWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for sizes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="fk">Foreign key for sizes</param>
        /// <returns>ApiResponse of ProductSize</returns>
        public ApiResponse< ProductSize > TeamBuilderConfigsIdProductTypesNkSizesFkGetWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesFkGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes/{nk}/sizes/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesNkSizesFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSize>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSize) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSize)));
            
        }

        /// <summary>
        /// Find a related item by id for sizes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="fk">Foreign key for sizes</param>
        /// <returns>Task of ProductSize</returns>
        public async System.Threading.Tasks.Task<ProductSize> TeamBuilderConfigsIdProductTypesNkSizesFkGetAsync (string id, string nk, string fk)
        {
             ApiResponse<ProductSize> localVarResponse = await TeamBuilderConfigsIdProductTypesNkSizesFkGetAsyncWithHttpInfo(id, nk, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for sizes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="fk">Foreign key for sizes</param>
        /// <returns>Task of ApiResponse (ProductSize)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductSize>> TeamBuilderConfigsIdProductTypesNkSizesFkGetAsyncWithHttpInfo (string id, string nk, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesFkGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesFkGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes/{nk}/sizes/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesNkSizesFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSize>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSize) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSize)));
            
        }

        /// <summary>
        /// Update a related item by id for sizes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="fk">Foreign key for sizes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductSize</returns>
        public ProductSize TeamBuilderConfigsIdProductTypesNkSizesFkPut (string id, string nk, string fk, ProductSize data = null)
        {
             ApiResponse<ProductSize> localVarResponse = TeamBuilderConfigsIdProductTypesNkSizesFkPutWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for sizes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="fk">Foreign key for sizes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductSize</returns>
        public ApiResponse< ProductSize > TeamBuilderConfigsIdProductTypesNkSizesFkPutWithHttpInfo (string id, string nk, string fk, ProductSize data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesFkPut");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes/{nk}/sizes/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesNkSizesFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSize>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSize) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSize)));
            
        }

        /// <summary>
        /// Update a related item by id for sizes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="fk">Foreign key for sizes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductSize</returns>
        public async System.Threading.Tasks.Task<ProductSize> TeamBuilderConfigsIdProductTypesNkSizesFkPutAsync (string id, string nk, string fk, ProductSize data = null)
        {
             ApiResponse<ProductSize> localVarResponse = await TeamBuilderConfigsIdProductTypesNkSizesFkPutAsyncWithHttpInfo(id, nk, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for sizes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="fk">Foreign key for sizes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductSize)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductSize>> TeamBuilderConfigsIdProductTypesNkSizesFkPutAsyncWithHttpInfo (string id, string nk, string fk, ProductSize data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesFkPut");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesFkPut");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes/{nk}/sizes/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesNkSizesFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSize>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSize) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSize)));
            
        }

        /// <summary>
        /// Queries sizes of ProductType. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;ProductSize&gt;</returns>
        public List<ProductSize> TeamBuilderConfigsIdProductTypesNkSizesGet (string id, string nk, string filter = null)
        {
             ApiResponse<List<ProductSize>> localVarResponse = TeamBuilderConfigsIdProductTypesNkSizesGetWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries sizes of ProductType. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProductSize&gt;</returns>
        public ApiResponse< List<ProductSize> > TeamBuilderConfigsIdProductTypesNkSizesGetWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes/{nk}/sizes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesNkSizesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductSize>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductSize>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductSize>)));
            
        }

        /// <summary>
        /// Queries sizes of ProductType. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;ProductSize&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProductSize>> TeamBuilderConfigsIdProductTypesNkSizesGetAsync (string id, string nk, string filter = null)
        {
             ApiResponse<List<ProductSize>> localVarResponse = await TeamBuilderConfigsIdProductTypesNkSizesGetAsyncWithHttpInfo(id, nk, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries sizes of ProductType. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProductSize&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProductSize>>> TeamBuilderConfigsIdProductTypesNkSizesGetAsyncWithHttpInfo (string id, string nk, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesGet");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes/{nk}/sizes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesNkSizesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProductSize>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProductSize>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProductSize>)));
            
        }

        /// <summary>
        /// Creates a new instance in sizes of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductSize</returns>
        public ProductSize TeamBuilderConfigsIdProductTypesNkSizesPost (string id, string nk, ProductSize data = null)
        {
             ApiResponse<ProductSize> localVarResponse = TeamBuilderConfigsIdProductTypesNkSizesPostWithHttpInfo(id, nk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in sizes of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductSize</returns>
        public ApiResponse< ProductSize > TeamBuilderConfigsIdProductTypesNkSizesPostWithHttpInfo (string id, string nk, ProductSize data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesPost");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes/{nk}/sizes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesNkSizesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSize>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSize) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSize)));
            
        }

        /// <summary>
        /// Creates a new instance in sizes of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductSize</returns>
        public async System.Threading.Tasks.Task<ProductSize> TeamBuilderConfigsIdProductTypesNkSizesPostAsync (string id, string nk, ProductSize data = null)
        {
             ApiResponse<ProductSize> localVarResponse = await TeamBuilderConfigsIdProductTypesNkSizesPostAsyncWithHttpInfo(id, nk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in sizes of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="nk">Foreign key for productTypes.</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductSize)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductSize>> TeamBuilderConfigsIdProductTypesNkSizesPostAsyncWithHttpInfo (string id, string nk, ProductSize data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesPost");
            // verify the required parameter 'nk' is set
            if (nk == null)
                throw new ApiException(400, "Missing required parameter 'nk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesNkSizesPost");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes/{nk}/sizes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nk != null) localVarPathParams.Add("nk", Configuration.ApiClient.ParameterToString(nk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesNkSizesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSize>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSize) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSize)));
            
        }

        /// <summary>
        /// Creates a new instance in productTypes of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ProductType</returns>
        public ProductType TeamBuilderConfigsIdProductTypesPost (string id, ProductType data = null)
        {
             ApiResponse<ProductType> localVarResponse = TeamBuilderConfigsIdProductTypesPostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in productTypes of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of ProductType</returns>
        public ApiResponse< ProductType > TeamBuilderConfigsIdProductTypesPostWithHttpInfo (string id, ProductType data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesPost");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductType)));
            
        }

        /// <summary>
        /// Creates a new instance in productTypes of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ProductType</returns>
        public async System.Threading.Tasks.Task<ProductType> TeamBuilderConfigsIdProductTypesPostAsync (string id, ProductType data = null)
        {
             ApiResponse<ProductType> localVarResponse = await TeamBuilderConfigsIdProductTypesPostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in productTypes of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductType>> TeamBuilderConfigsIdProductTypesPostAsyncWithHttpInfo (string id, ProductType data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesPost");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductType)));
            
        }

        /// <summary>
        /// Remove the productTypes relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns></returns>
        public void TeamBuilderConfigsIdProductTypesRelFkDelete (string id, string fk)
        {
             TeamBuilderConfigsIdProductTypesRelFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Remove the productTypes relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TeamBuilderConfigsIdProductTypesRelFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesRelFkDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove the productTypes relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamBuilderConfigsIdProductTypesRelFkDeleteAsync (string id, string fk)
        {
             await TeamBuilderConfigsIdProductTypesRelFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Remove the productTypes relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TeamBuilderConfigsIdProductTypesRelFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesRelFkDelete");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Check the existence of productTypes relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns>bool?</returns>
        public bool? TeamBuilderConfigsIdProductTypesRelFkHead (string id, string fk)
        {
             ApiResponse<bool?> localVarResponse = TeamBuilderConfigsIdProductTypesRelFkHeadWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check the existence of productTypes relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > TeamBuilderConfigsIdProductTypesRelFkHeadWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesRelFkHead");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Check the existence of productTypes relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> TeamBuilderConfigsIdProductTypesRelFkHeadAsync (string id, string fk)
        {
             ApiResponse<bool?> localVarResponse = await TeamBuilderConfigsIdProductTypesRelFkHeadAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check the existence of productTypes relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> TeamBuilderConfigsIdProductTypesRelFkHeadAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesRelFkHead");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Add a related item by id for productTypes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>TeamBuilderConfigProductType</returns>
        public TeamBuilderConfigProductType TeamBuilderConfigsIdProductTypesRelFkPut (string id, string fk, TeamBuilderConfigProductType data = null)
        {
             ApiResponse<TeamBuilderConfigProductType> localVarResponse = TeamBuilderConfigsIdProductTypesRelFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a related item by id for productTypes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfigProductType</returns>
        public ApiResponse< TeamBuilderConfigProductType > TeamBuilderConfigsIdProductTypesRelFkPutWithHttpInfo (string id, string fk, TeamBuilderConfigProductType data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesRelFkPut");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfigProductType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfigProductType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfigProductType)));
            
        }

        /// <summary>
        /// Add a related item by id for productTypes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of TeamBuilderConfigProductType</returns>
        public async System.Threading.Tasks.Task<TeamBuilderConfigProductType> TeamBuilderConfigsIdProductTypesRelFkPutAsync (string id, string fk, TeamBuilderConfigProductType data = null)
        {
             ApiResponse<TeamBuilderConfigProductType> localVarResponse = await TeamBuilderConfigsIdProductTypesRelFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a related item by id for productTypes. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="fk">Foreign key for productTypes</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfigProductType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfigProductType>> TeamBuilderConfigsIdProductTypesRelFkPutAsyncWithHttpInfo (string id, string fk, TeamBuilderConfigProductType data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdProductTypesRelFkPut");

            var localVarPath = "/TeamBuilderConfigs/{id}/productTypes/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdProductTypesRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfigProductType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfigProductType) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfigProductType)));
            
        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>TeamBuilderConfig</returns>
        public TeamBuilderConfig TeamBuilderConfigsIdPut (string id, TeamBuilderConfig data = null)
        {
             ApiResponse<TeamBuilderConfig> localVarResponse = TeamBuilderConfigsIdPutWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfig</returns>
        public ApiResponse< TeamBuilderConfig > TeamBuilderConfigsIdPutWithHttpInfo (string id, TeamBuilderConfig data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdPut");

            var localVarPath = "/TeamBuilderConfigs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfig)));
            
        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of TeamBuilderConfig</returns>
        public async System.Threading.Tasks.Task<TeamBuilderConfig> TeamBuilderConfigsIdPutAsync (string id, TeamBuilderConfig data = null)
        {
             ApiResponse<TeamBuilderConfig> localVarResponse = await TeamBuilderConfigsIdPutAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfig>> TeamBuilderConfigsIdPutAsyncWithHttpInfo (string id, TeamBuilderConfig data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdPut");

            var localVarPath = "/TeamBuilderConfigs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfig)));
            
        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>TeamBuilderConfig</returns>
        public TeamBuilderConfig TeamBuilderConfigsIdReplacePost (string id, TeamBuilderConfig data = null)
        {
             ApiResponse<TeamBuilderConfig> localVarResponse = TeamBuilderConfigsIdReplacePostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfig</returns>
        public ApiResponse< TeamBuilderConfig > TeamBuilderConfigsIdReplacePostWithHttpInfo (string id, TeamBuilderConfig data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdReplacePost");

            var localVarPath = "/TeamBuilderConfigs/{id}/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdReplacePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfig)));
            
        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of TeamBuilderConfig</returns>
        public async System.Threading.Tasks.Task<TeamBuilderConfig> TeamBuilderConfigsIdReplacePostAsync (string id, TeamBuilderConfig data = null)
        {
             ApiResponse<TeamBuilderConfig> localVarResponse = await TeamBuilderConfigsIdReplacePostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfig>> TeamBuilderConfigsIdReplacePostAsyncWithHttpInfo (string id, TeamBuilderConfig data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdReplacePost");

            var localVarPath = "/TeamBuilderConfigs/{id}/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdReplacePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfig)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Team</returns>
        public Team TeamBuilderConfigsIdTeamGet (string id, bool? refresh = null)
        {
             ApiResponse<Team> localVarResponse = TeamBuilderConfigsIdTeamGetWithHttpInfo(id, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches belongsTo relation team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of Team</returns>
        public ApiResponse< Team > TeamBuilderConfigsIdTeamGetWithHttpInfo (string id, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdTeamGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/team";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdTeamGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Team) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> TeamBuilderConfigsIdTeamGetAsync (string id, bool? refresh = null)
        {
             ApiResponse<Team> localVarResponse = await TeamBuilderConfigsIdTeamGetAsyncWithHttpInfo(id, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches belongsTo relation team. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">TeamBuilderConfig id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Team>> TeamBuilderConfigsIdTeamGetAsyncWithHttpInfo (string id, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeamBuilderConfigApi->TeamBuilderConfigsIdTeamGet");

            var localVarPath = "/TeamBuilderConfigs/{id}/team";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsIdTeamGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Team) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
            
        }

        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>TeamBuilderConfig</returns>
        public TeamBuilderConfig TeamBuilderConfigsPatch (TeamBuilderConfig data = null)
        {
             ApiResponse<TeamBuilderConfig> localVarResponse = TeamBuilderConfigsPatchWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfig</returns>
        public ApiResponse< TeamBuilderConfig > TeamBuilderConfigsPatchWithHttpInfo (TeamBuilderConfig data = null)
        {

            var localVarPath = "/TeamBuilderConfigs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfig)));
            
        }

        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of TeamBuilderConfig</returns>
        public async System.Threading.Tasks.Task<TeamBuilderConfig> TeamBuilderConfigsPatchAsync (TeamBuilderConfig data = null)
        {
             ApiResponse<TeamBuilderConfig> localVarResponse = await TeamBuilderConfigsPatchAsyncWithHttpInfo(data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfig>> TeamBuilderConfigsPatchAsyncWithHttpInfo (TeamBuilderConfig data = null)
        {

            var localVarPath = "/TeamBuilderConfigs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfig)));
            
        }

        /// <summary>
        /// Create a new instance of the model and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>TeamBuilderConfig</returns>
        public TeamBuilderConfig TeamBuilderConfigsPost (TeamBuilderConfig data = null)
        {
             ApiResponse<TeamBuilderConfig> localVarResponse = TeamBuilderConfigsPostWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new instance of the model and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfig</returns>
        public ApiResponse< TeamBuilderConfig > TeamBuilderConfigsPostWithHttpInfo (TeamBuilderConfig data = null)
        {

            var localVarPath = "/TeamBuilderConfigs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfig)));
            
        }

        /// <summary>
        /// Create a new instance of the model and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of TeamBuilderConfig</returns>
        public async System.Threading.Tasks.Task<TeamBuilderConfig> TeamBuilderConfigsPostAsync (TeamBuilderConfig data = null)
        {
             ApiResponse<TeamBuilderConfig> localVarResponse = await TeamBuilderConfigsPostAsyncWithHttpInfo(data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new instance of the model and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfig>> TeamBuilderConfigsPostAsyncWithHttpInfo (TeamBuilderConfig data = null)
        {

            var localVarPath = "/TeamBuilderConfigs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfig)));
            
        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>TeamBuilderConfig</returns>
        public TeamBuilderConfig TeamBuilderConfigsPut (TeamBuilderConfig data = null)
        {
             ApiResponse<TeamBuilderConfig> localVarResponse = TeamBuilderConfigsPutWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfig</returns>
        public ApiResponse< TeamBuilderConfig > TeamBuilderConfigsPutWithHttpInfo (TeamBuilderConfig data = null)
        {

            var localVarPath = "/TeamBuilderConfigs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfig)));
            
        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of TeamBuilderConfig</returns>
        public async System.Threading.Tasks.Task<TeamBuilderConfig> TeamBuilderConfigsPutAsync (TeamBuilderConfig data = null)
        {
             ApiResponse<TeamBuilderConfig> localVarResponse = await TeamBuilderConfigsPutAsyncWithHttpInfo(data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfig>> TeamBuilderConfigsPutAsyncWithHttpInfo (TeamBuilderConfig data = null)
        {

            var localVarPath = "/TeamBuilderConfigs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfig)));
            
        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>TeamBuilderConfig</returns>
        public TeamBuilderConfig TeamBuilderConfigsReplaceOrCreatePost (TeamBuilderConfig data = null)
        {
             ApiResponse<TeamBuilderConfig> localVarResponse = TeamBuilderConfigsReplaceOrCreatePostWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfig</returns>
        public ApiResponse< TeamBuilderConfig > TeamBuilderConfigsReplaceOrCreatePostWithHttpInfo (TeamBuilderConfig data = null)
        {

            var localVarPath = "/TeamBuilderConfigs/replaceOrCreate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsReplaceOrCreatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfig)));
            
        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of TeamBuilderConfig</returns>
        public async System.Threading.Tasks.Task<TeamBuilderConfig> TeamBuilderConfigsReplaceOrCreatePostAsync (TeamBuilderConfig data = null)
        {
             ApiResponse<TeamBuilderConfig> localVarResponse = await TeamBuilderConfigsReplaceOrCreatePostAsyncWithHttpInfo(data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfig>> TeamBuilderConfigsReplaceOrCreatePostAsyncWithHttpInfo (TeamBuilderConfig data = null)
        {

            var localVarPath = "/TeamBuilderConfigs/replaceOrCreate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsReplaceOrCreatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfig)));
            
        }

        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 TeamBuilderConfigsUpdatePost (string where = null, TeamBuilderConfig data = null)
        {
             ApiResponse<InlineResponse2003> localVarResponse = TeamBuilderConfigsUpdatePostWithHttpInfo(where, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > TeamBuilderConfigsUpdatePostWithHttpInfo (string where = null, TeamBuilderConfig data = null)
        {

            var localVarPath = "/TeamBuilderConfigs/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsUpdatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> TeamBuilderConfigsUpdatePostAsync (string where = null, TeamBuilderConfig data = null)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await TeamBuilderConfigsUpdatePostAsyncWithHttpInfo(where, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> TeamBuilderConfigsUpdatePostAsyncWithHttpInfo (string where = null, TeamBuilderConfig data = null)
        {

            var localVarPath = "/TeamBuilderConfigs/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsUpdatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>TeamBuilderConfig</returns>
        public TeamBuilderConfig TeamBuilderConfigsUpsertWithWherePost (string where = null, TeamBuilderConfig data = null)
        {
             ApiResponse<TeamBuilderConfig> localVarResponse = TeamBuilderConfigsUpsertWithWherePostWithHttpInfo(where, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>ApiResponse of TeamBuilderConfig</returns>
        public ApiResponse< TeamBuilderConfig > TeamBuilderConfigsUpsertWithWherePostWithHttpInfo (string where = null, TeamBuilderConfig data = null)
        {

            var localVarPath = "/TeamBuilderConfigs/upsertWithWhere";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsUpsertWithWherePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfig)));
            
        }

        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of TeamBuilderConfig</returns>
        public async System.Threading.Tasks.Task<TeamBuilderConfig> TeamBuilderConfigsUpsertWithWherePostAsync (string where = null, TeamBuilderConfig data = null)
        {
             ApiResponse<TeamBuilderConfig> localVarResponse = await TeamBuilderConfigsUpsertWithWherePostAsyncWithHttpInfo(where, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of ApiResponse (TeamBuilderConfig)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamBuilderConfig>> TeamBuilderConfigsUpsertWithWherePostAsyncWithHttpInfo (string where = null, TeamBuilderConfig data = null)
        {

            var localVarPath = "/TeamBuilderConfigs/upsertWithWhere";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeamBuilderConfigsUpsertWithWherePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamBuilderConfig>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamBuilderConfig) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamBuilderConfig)));
            
        }

    }
}
