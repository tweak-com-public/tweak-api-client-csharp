/* 
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.7-alpha.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TweakApi.Client;
using TweakApi.Model;

namespace TweakApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPortalTemplateFolderApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream PortalTemplateFoldersChangeStreamGet (string options = null);

        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> PortalTemplateFoldersChangeStreamGetWithHttpInfo (string options = null);
        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream PortalTemplateFoldersChangeStreamPost (string options = null);

        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> PortalTemplateFoldersChangeStreamPostWithHttpInfo (string options = null);
        /// <summary>
        /// Count instances of the model matched by where from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 PortalTemplateFoldersCountGet (string where = null);

        /// <summary>
        /// Count instances of the model matched by where from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> PortalTemplateFoldersCountGetWithHttpInfo (string where = null);
        /// <summary>
        /// Find first instance of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        PortalTemplateFolder PortalTemplateFoldersFindOneGet (string filter = null);

        /// <summary>
        /// Find first instance of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        ApiResponse<PortalTemplateFolder> PortalTemplateFoldersFindOneGetWithHttpInfo (string filter = null);
        /// <summary>
        /// Find all instances of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>List&lt;PortalTemplateFolder&gt;</returns>
        List<PortalTemplateFolder> PortalTemplateFoldersGet (string filter = null);

        /// <summary>
        /// Find all instances of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of List&lt;PortalTemplateFolder&gt;</returns>
        ApiResponse<List<PortalTemplateFolder>> PortalTemplateFoldersGetWithHttpInfo (string filter = null);
        /// <summary>
        /// Counts children of PortalTemplateFolder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 PortalTemplateFoldersIdChildrenCountGet (string id, string where = null);

        /// <summary>
        /// Counts children of PortalTemplateFolder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> PortalTemplateFoldersIdChildrenCountGetWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all children of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <returns></returns>
        void PortalTemplateFoldersIdChildrenDelete (string id);

        /// <summary>
        /// Deletes all children of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalTemplateFoldersIdChildrenDeleteWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for children.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for children</param>
        /// <returns></returns>
        void PortalTemplateFoldersIdChildrenFkDelete (string id, string fk);

        /// <summary>
        /// Delete a related item by id for children.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for children</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalTemplateFoldersIdChildrenFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for children.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for children</param>
        /// <returns>PortalTemplateFolder</returns>
        PortalTemplateFolder PortalTemplateFoldersIdChildrenFkGet (string id, string fk);

        /// <summary>
        /// Find a related item by id for children.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for children</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        ApiResponse<PortalTemplateFolder> PortalTemplateFoldersIdChildrenFkGetWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for children.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for children</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        PortalTemplateFolder PortalTemplateFoldersIdChildrenFkPut (string id, string fk, PortalTemplateFolder data = null);

        /// <summary>
        /// Update a related item by id for children.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for children</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        ApiResponse<PortalTemplateFolder> PortalTemplateFoldersIdChildrenFkPutWithHttpInfo (string id, string fk, PortalTemplateFolder data = null);
        /// <summary>
        /// Queries children of PortalTemplateFolder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;PortalTemplateFolder&gt;</returns>
        List<PortalTemplateFolder> PortalTemplateFoldersIdChildrenGet (string id, string filter = null);

        /// <summary>
        /// Queries children of PortalTemplateFolder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;PortalTemplateFolder&gt;</returns>
        ApiResponse<List<PortalTemplateFolder>> PortalTemplateFoldersIdChildrenGetWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in children of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        PortalTemplateFolder PortalTemplateFoldersIdChildrenPost (string id, PortalTemplateFolder data = null);

        /// <summary>
        /// Creates a new instance in children of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        ApiResponse<PortalTemplateFolder> PortalTemplateFoldersIdChildrenPostWithHttpInfo (string id, PortalTemplateFolder data = null);
        /// <summary>
        /// Delete a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Object</returns>
        Object PortalTemplateFoldersIdDelete (string id);

        /// <summary>
        /// Delete a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PortalTemplateFoldersIdDeleteWithHttpInfo (string id);
        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 PortalTemplateFoldersIdExistsGet (string id);

        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> PortalTemplateFoldersIdExistsGetWithHttpInfo (string id);
        /// <summary>
        /// Find a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        PortalTemplateFolder PortalTemplateFoldersIdGet (string id, string filter = null);

        /// <summary>
        /// Find a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        ApiResponse<PortalTemplateFolder> PortalTemplateFoldersIdGetWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 PortalTemplateFoldersIdHead (string id);

        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> PortalTemplateFoldersIdHeadWithHttpInfo (string id);
        /// <summary>
        /// Fetches belongsTo relation parent.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        PortalTemplateFolder PortalTemplateFoldersIdParentGet (string id, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation parent.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        ApiResponse<PortalTemplateFolder> PortalTemplateFoldersIdParentGetWithHttpInfo (string id, bool? refresh = null);
        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        PortalTemplateFolder PortalTemplateFoldersIdPatch (string id, PortalTemplateFolder data = null);

        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        ApiResponse<PortalTemplateFolder> PortalTemplateFoldersIdPatchWithHttpInfo (string id, PortalTemplateFolder data = null);
        /// <summary>
        /// Fetches belongsTo relation portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Portal</returns>
        Portal PortalTemplateFoldersIdPortalGet (string id, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        ApiResponse<Portal> PortalTemplateFoldersIdPortalGetWithHttpInfo (string id, bool? refresh = null);
        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        PortalTemplateFolder PortalTemplateFoldersIdPut (string id, PortalTemplateFolder data = null);

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        ApiResponse<PortalTemplateFolder> PortalTemplateFoldersIdPutWithHttpInfo (string id, PortalTemplateFolder data = null);
        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        PortalTemplateFolder PortalTemplateFoldersIdReplacePost (string id, PortalTemplateFolder data = null);

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        ApiResponse<PortalTemplateFolder> PortalTemplateFoldersIdReplacePostWithHttpInfo (string id, PortalTemplateFolder data = null);
        /// <summary>
        /// Counts templates of PortalTemplateFolder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 PortalTemplateFoldersIdTemplatesCountGet (string id, string where = null);

        /// <summary>
        /// Counts templates of PortalTemplateFolder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> PortalTemplateFoldersIdTemplatesCountGetWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all templates of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <returns></returns>
        void PortalTemplateFoldersIdTemplatesDelete (string id);

        /// <summary>
        /// Deletes all templates of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalTemplateFoldersIdTemplatesDeleteWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns></returns>
        void PortalTemplateFoldersIdTemplatesFkDelete (string id, string fk);

        /// <summary>
        /// Delete a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalTemplateFoldersIdTemplatesFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Template</returns>
        Template PortalTemplateFoldersIdTemplatesFkGet (string id, string fk);

        /// <summary>
        /// Find a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> PortalTemplateFoldersIdTemplatesFkGetWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Template</returns>
        Template PortalTemplateFoldersIdTemplatesFkPut (string id, string fk, Template data = null);

        /// <summary>
        /// Update a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> PortalTemplateFoldersIdTemplatesFkPutWithHttpInfo (string id, string fk, Template data = null);
        /// <summary>
        /// Queries templates of PortalTemplateFolder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;Template&gt;</returns>
        List<Template> PortalTemplateFoldersIdTemplatesGet (string id, string filter = null);

        /// <summary>
        /// Queries templates of PortalTemplateFolder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Template&gt;</returns>
        ApiResponse<List<Template>> PortalTemplateFoldersIdTemplatesGetWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in templates of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Template</returns>
        Template PortalTemplateFoldersIdTemplatesPost (string id, Template data = null);

        /// <summary>
        /// Creates a new instance in templates of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> PortalTemplateFoldersIdTemplatesPostWithHttpInfo (string id, Template data = null);
        /// <summary>
        /// Remove the templates relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns></returns>
        void PortalTemplateFoldersIdTemplatesRelFkDelete (string id, string fk);

        /// <summary>
        /// Remove the templates relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PortalTemplateFoldersIdTemplatesRelFkDeleteWithHttpInfo (string id, string fk);
        /// <summary>
        /// Check the existence of templates relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>bool?</returns>
        bool? PortalTemplateFoldersIdTemplatesRelFkHead (string id, string fk);

        /// <summary>
        /// Check the existence of templates relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> PortalTemplateFoldersIdTemplatesRelFkHeadWithHttpInfo (string id, string fk);
        /// <summary>
        /// Add a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalTemplate</returns>
        PortalTemplate PortalTemplateFoldersIdTemplatesRelFkPut (string id, string fk, PortalTemplate data = null);

        /// <summary>
        /// Add a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalTemplate</returns>
        ApiResponse<PortalTemplate> PortalTemplateFoldersIdTemplatesRelFkPutWithHttpInfo (string id, string fk, PortalTemplate data = null);
        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        PortalTemplateFolder PortalTemplateFoldersPatch (PortalTemplateFolder data = null);

        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        ApiResponse<PortalTemplateFolder> PortalTemplateFoldersPatchWithHttpInfo (PortalTemplateFolder data = null);
        /// <summary>
        /// Create a new instance of the model and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        PortalTemplateFolder PortalTemplateFoldersPost (PortalTemplateFolder data = null);

        /// <summary>
        /// Create a new instance of the model and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        ApiResponse<PortalTemplateFolder> PortalTemplateFoldersPostWithHttpInfo (PortalTemplateFolder data = null);
        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        PortalTemplateFolder PortalTemplateFoldersPut (PortalTemplateFolder data = null);

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        ApiResponse<PortalTemplateFolder> PortalTemplateFoldersPutWithHttpInfo (PortalTemplateFolder data = null);
        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        PortalTemplateFolder PortalTemplateFoldersReplaceOrCreatePost (PortalTemplateFolder data = null);

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        ApiResponse<PortalTemplateFolder> PortalTemplateFoldersReplaceOrCreatePostWithHttpInfo (PortalTemplateFolder data = null);
        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 PortalTemplateFoldersUpdatePost (string where = null, PortalTemplateFolder data = null);

        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> PortalTemplateFoldersUpdatePostWithHttpInfo (string where = null, PortalTemplateFolder data = null);
        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        PortalTemplateFolder PortalTemplateFoldersUpsertWithWherePost (string where = null, PortalTemplateFolder data = null);

        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        ApiResponse<PortalTemplateFolder> PortalTemplateFoldersUpsertWithWherePostWithHttpInfo (string where = null, PortalTemplateFolder data = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> PortalTemplateFoldersChangeStreamGetAsync (string options = null);

        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PortalTemplateFoldersChangeStreamGetAsyncWithHttpInfo (string options = null);
        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> PortalTemplateFoldersChangeStreamPostAsync (string options = null);

        /// <summary>
        /// Create a change stream.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PortalTemplateFoldersChangeStreamPostAsyncWithHttpInfo (string options = null);
        /// <summary>
        /// Count instances of the model matched by where from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> PortalTemplateFoldersCountGetAsync (string where = null);

        /// <summary>
        /// Count instances of the model matched by where from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> PortalTemplateFoldersCountGetAsyncWithHttpInfo (string where = null);
        /// <summary>
        /// Find first instance of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        System.Threading.Tasks.Task<PortalTemplateFolder> PortalTemplateFoldersFindOneGetAsync (string filter = null);

        /// <summary>
        /// Find first instance of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalTemplateFoldersFindOneGetAsyncWithHttpInfo (string filter = null);
        /// <summary>
        /// Find all instances of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of List&lt;PortalTemplateFolder&gt;</returns>
        System.Threading.Tasks.Task<List<PortalTemplateFolder>> PortalTemplateFoldersGetAsync (string filter = null);

        /// <summary>
        /// Find all instances of the model matched by filter from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PortalTemplateFolder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PortalTemplateFolder>>> PortalTemplateFoldersGetAsyncWithHttpInfo (string filter = null);
        /// <summary>
        /// Counts children of PortalTemplateFolder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> PortalTemplateFoldersIdChildrenCountGetAsync (string id, string where = null);

        /// <summary>
        /// Counts children of PortalTemplateFolder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> PortalTemplateFoldersIdChildrenCountGetAsyncWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all children of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalTemplateFoldersIdChildrenDeleteAsync (string id);

        /// <summary>
        /// Deletes all children of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalTemplateFoldersIdChildrenDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for children.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for children</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalTemplateFoldersIdChildrenFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Delete a related item by id for children.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for children</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalTemplateFoldersIdChildrenFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for children.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for children</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        System.Threading.Tasks.Task<PortalTemplateFolder> PortalTemplateFoldersIdChildrenFkGetAsync (string id, string fk);

        /// <summary>
        /// Find a related item by id for children.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for children</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalTemplateFoldersIdChildrenFkGetAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for children.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for children</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        System.Threading.Tasks.Task<PortalTemplateFolder> PortalTemplateFoldersIdChildrenFkPutAsync (string id, string fk, PortalTemplateFolder data = null);

        /// <summary>
        /// Update a related item by id for children.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for children</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalTemplateFoldersIdChildrenFkPutAsyncWithHttpInfo (string id, string fk, PortalTemplateFolder data = null);
        /// <summary>
        /// Queries children of PortalTemplateFolder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;PortalTemplateFolder&gt;</returns>
        System.Threading.Tasks.Task<List<PortalTemplateFolder>> PortalTemplateFoldersIdChildrenGetAsync (string id, string filter = null);

        /// <summary>
        /// Queries children of PortalTemplateFolder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PortalTemplateFolder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PortalTemplateFolder>>> PortalTemplateFoldersIdChildrenGetAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in children of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        System.Threading.Tasks.Task<PortalTemplateFolder> PortalTemplateFoldersIdChildrenPostAsync (string id, PortalTemplateFolder data = null);

        /// <summary>
        /// Creates a new instance in children of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalTemplateFoldersIdChildrenPostAsyncWithHttpInfo (string id, PortalTemplateFolder data = null);
        /// <summary>
        /// Delete a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PortalTemplateFoldersIdDeleteAsync (string id);

        /// <summary>
        /// Delete a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalTemplateFoldersIdDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> PortalTemplateFoldersIdExistsGetAsync (string id);

        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> PortalTemplateFoldersIdExistsGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Find a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        System.Threading.Tasks.Task<PortalTemplateFolder> PortalTemplateFoldersIdGetAsync (string id, string filter = null);

        /// <summary>
        /// Find a model instance by {{id}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalTemplateFoldersIdGetAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> PortalTemplateFoldersIdHeadAsync (string id);

        /// <summary>
        /// Check whether a model instance exists in the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> PortalTemplateFoldersIdHeadAsyncWithHttpInfo (string id);
        /// <summary>
        /// Fetches belongsTo relation parent.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        System.Threading.Tasks.Task<PortalTemplateFolder> PortalTemplateFoldersIdParentGetAsync (string id, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation parent.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalTemplateFoldersIdParentGetAsyncWithHttpInfo (string id, bool? refresh = null);
        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        System.Threading.Tasks.Task<PortalTemplateFolder> PortalTemplateFoldersIdPatchAsync (string id, PortalTemplateFolder data = null);

        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalTemplateFoldersIdPatchAsyncWithHttpInfo (string id, PortalTemplateFolder data = null);
        /// <summary>
        /// Fetches belongsTo relation portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of Portal</returns>
        System.Threading.Tasks.Task<Portal> PortalTemplateFoldersIdPortalGetAsync (string id, bool? refresh = null);

        /// <summary>
        /// Fetches belongsTo relation portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        System.Threading.Tasks.Task<ApiResponse<Portal>> PortalTemplateFoldersIdPortalGetAsyncWithHttpInfo (string id, bool? refresh = null);
        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        System.Threading.Tasks.Task<PortalTemplateFolder> PortalTemplateFoldersIdPutAsync (string id, PortalTemplateFolder data = null);

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalTemplateFoldersIdPutAsyncWithHttpInfo (string id, PortalTemplateFolder data = null);
        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        System.Threading.Tasks.Task<PortalTemplateFolder> PortalTemplateFoldersIdReplacePostAsync (string id, PortalTemplateFolder data = null);

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalTemplateFoldersIdReplacePostAsyncWithHttpInfo (string id, PortalTemplateFolder data = null);
        /// <summary>
        /// Counts templates of PortalTemplateFolder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> PortalTemplateFoldersIdTemplatesCountGetAsync (string id, string where = null);

        /// <summary>
        /// Counts templates of PortalTemplateFolder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> PortalTemplateFoldersIdTemplatesCountGetAsyncWithHttpInfo (string id, string where = null);
        /// <summary>
        /// Deletes all templates of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalTemplateFoldersIdTemplatesDeleteAsync (string id);

        /// <summary>
        /// Deletes all templates of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalTemplateFoldersIdTemplatesDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalTemplateFoldersIdTemplatesFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Delete a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalTemplateFoldersIdTemplatesFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Find a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> PortalTemplateFoldersIdTemplatesFkGetAsync (string id, string fk);

        /// <summary>
        /// Find a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> PortalTemplateFoldersIdTemplatesFkGetAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Update a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> PortalTemplateFoldersIdTemplatesFkPutAsync (string id, string fk, Template data = null);

        /// <summary>
        /// Update a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> PortalTemplateFoldersIdTemplatesFkPutAsyncWithHttpInfo (string id, string fk, Template data = null);
        /// <summary>
        /// Queries templates of PortalTemplateFolder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;Template&gt;</returns>
        System.Threading.Tasks.Task<List<Template>> PortalTemplateFoldersIdTemplatesGetAsync (string id, string filter = null);

        /// <summary>
        /// Queries templates of PortalTemplateFolder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Template&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Template>>> PortalTemplateFoldersIdTemplatesGetAsyncWithHttpInfo (string id, string filter = null);
        /// <summary>
        /// Creates a new instance in templates of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> PortalTemplateFoldersIdTemplatesPostAsync (string id, Template data = null);

        /// <summary>
        /// Creates a new instance in templates of this model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> PortalTemplateFoldersIdTemplatesPostAsyncWithHttpInfo (string id, Template data = null);
        /// <summary>
        /// Remove the templates relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PortalTemplateFoldersIdTemplatesRelFkDeleteAsync (string id, string fk);

        /// <summary>
        /// Remove the templates relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PortalTemplateFoldersIdTemplatesRelFkDeleteAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Check the existence of templates relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> PortalTemplateFoldersIdTemplatesRelFkHeadAsync (string id, string fk);

        /// <summary>
        /// Check the existence of templates relation to an item by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> PortalTemplateFoldersIdTemplatesRelFkHeadAsyncWithHttpInfo (string id, string fk);
        /// <summary>
        /// Add a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalTemplate</returns>
        System.Threading.Tasks.Task<PortalTemplate> PortalTemplateFoldersIdTemplatesRelFkPutAsync (string id, string fk, PortalTemplate data = null);

        /// <summary>
        /// Add a related item by id for templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalTemplate>> PortalTemplateFoldersIdTemplatesRelFkPutAsyncWithHttpInfo (string id, string fk, PortalTemplate data = null);
        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        System.Threading.Tasks.Task<PortalTemplateFolder> PortalTemplateFoldersPatchAsync (PortalTemplateFolder data = null);

        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalTemplateFoldersPatchAsyncWithHttpInfo (PortalTemplateFolder data = null);
        /// <summary>
        /// Create a new instance of the model and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        System.Threading.Tasks.Task<PortalTemplateFolder> PortalTemplateFoldersPostAsync (PortalTemplateFolder data = null);

        /// <summary>
        /// Create a new instance of the model and persist it into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalTemplateFoldersPostAsyncWithHttpInfo (PortalTemplateFolder data = null);
        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        System.Threading.Tasks.Task<PortalTemplateFolder> PortalTemplateFoldersPutAsync (PortalTemplateFolder data = null);

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalTemplateFoldersPutAsyncWithHttpInfo (PortalTemplateFolder data = null);
        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        System.Threading.Tasks.Task<PortalTemplateFolder> PortalTemplateFoldersReplaceOrCreatePostAsync (PortalTemplateFolder data = null);

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalTemplateFoldersReplaceOrCreatePostAsyncWithHttpInfo (PortalTemplateFolder data = null);
        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> PortalTemplateFoldersUpdatePostAsync (string where = null, PortalTemplateFolder data = null);

        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> PortalTemplateFoldersUpdatePostAsyncWithHttpInfo (string where = null, PortalTemplateFolder data = null);
        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        System.Threading.Tasks.Task<PortalTemplateFolder> PortalTemplateFoldersUpsertWithWherePostAsync (string where = null, PortalTemplateFolder data = null);

        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalTemplateFoldersUpsertWithWherePostAsyncWithHttpInfo (string where = null, PortalTemplateFolder data = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PortalTemplateFolderApi : IPortalTemplateFolderApi
    {
        private TweakApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PortalTemplateFolderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PortalTemplateFolderApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = TweakApi.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PortalTemplateFolderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PortalTemplateFolderApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TweakApi.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TweakApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream PortalTemplateFoldersChangeStreamGet (string options = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = PortalTemplateFoldersChangeStreamGetWithHttpInfo(options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > PortalTemplateFoldersChangeStreamGetWithHttpInfo (string options = null)
        {

            var localVarPath = "/PortalTemplateFolders/change-stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersChangeStreamGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> PortalTemplateFoldersChangeStreamGetAsync (string options = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await PortalTemplateFoldersChangeStreamGetAsyncWithHttpInfo(options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PortalTemplateFoldersChangeStreamGetAsyncWithHttpInfo (string options = null)
        {

            var localVarPath = "/PortalTemplateFolders/change-stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarQueryParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersChangeStreamGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream PortalTemplateFoldersChangeStreamPost (string options = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = PortalTemplateFoldersChangeStreamPostWithHttpInfo(options);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > PortalTemplateFoldersChangeStreamPostWithHttpInfo (string options = null)
        {

            var localVarPath = "/PortalTemplateFolders/change-stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarFormParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // form parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersChangeStreamPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> PortalTemplateFoldersChangeStreamPostAsync (string options = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await PortalTemplateFoldersChangeStreamPostAsyncWithHttpInfo(options);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a change stream. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="options"> (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PortalTemplateFoldersChangeStreamPostAsyncWithHttpInfo (string options = null)
        {

            var localVarPath = "/PortalTemplateFolders/change-stream";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (options != null) localVarFormParams.Add("options", Configuration.ApiClient.ParameterToString(options)); // form parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersChangeStreamPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
            
        }

        /// <summary>
        /// Count instances of the model matched by where from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 PortalTemplateFoldersCountGet (string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = PortalTemplateFoldersCountGetWithHttpInfo(where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Count instances of the model matched by where from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > PortalTemplateFoldersCountGetWithHttpInfo (string where = null)
        {

            var localVarPath = "/PortalTemplateFolders/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Count instances of the model matched by where from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> PortalTemplateFoldersCountGetAsync (string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await PortalTemplateFoldersCountGetAsyncWithHttpInfo(where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Count instances of the model matched by where from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> PortalTemplateFoldersCountGetAsyncWithHttpInfo (string where = null)
        {

            var localVarPath = "/PortalTemplateFolders/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Find first instance of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        public PortalTemplateFolder PortalTemplateFoldersFindOneGet (string filter = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = PortalTemplateFoldersFindOneGetWithHttpInfo(filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find first instance of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        public ApiResponse< PortalTemplateFolder > PortalTemplateFoldersFindOneGetWithHttpInfo (string filter = null)
        {

            var localVarPath = "/PortalTemplateFolders/findOne";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersFindOneGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Find first instance of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        public async System.Threading.Tasks.Task<PortalTemplateFolder> PortalTemplateFoldersFindOneGetAsync (string filter = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = await PortalTemplateFoldersFindOneGetAsyncWithHttpInfo(filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find first instance of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalTemplateFoldersFindOneGetAsyncWithHttpInfo (string filter = null)
        {

            var localVarPath = "/PortalTemplateFolders/findOne";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersFindOneGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Find all instances of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>List&lt;PortalTemplateFolder&gt;</returns>
        public List<PortalTemplateFolder> PortalTemplateFoldersGet (string filter = null)
        {
             ApiResponse<List<PortalTemplateFolder>> localVarResponse = PortalTemplateFoldersGetWithHttpInfo(filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find all instances of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of List&lt;PortalTemplateFolder&gt;</returns>
        public ApiResponse< List<PortalTemplateFolder> > PortalTemplateFoldersGetWithHttpInfo (string filter = null)
        {

            var localVarPath = "/PortalTemplateFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PortalTemplateFolder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PortalTemplateFolder>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PortalTemplateFolder>)));
            
        }

        /// <summary>
        /// Find all instances of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of List&lt;PortalTemplateFolder&gt;</returns>
        public async System.Threading.Tasks.Task<List<PortalTemplateFolder>> PortalTemplateFoldersGetAsync (string filter = null)
        {
             ApiResponse<List<PortalTemplateFolder>> localVarResponse = await PortalTemplateFoldersGetAsyncWithHttpInfo(filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find all instances of the model matched by filter from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PortalTemplateFolder&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PortalTemplateFolder>>> PortalTemplateFoldersGetAsyncWithHttpInfo (string filter = null)
        {

            var localVarPath = "/PortalTemplateFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PortalTemplateFolder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PortalTemplateFolder>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PortalTemplateFolder>)));
            
        }

        /// <summary>
        /// Counts children of PortalTemplateFolder. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 PortalTemplateFoldersIdChildrenCountGet (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = PortalTemplateFoldersIdChildrenCountGetWithHttpInfo(id, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts children of PortalTemplateFolder. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > PortalTemplateFoldersIdChildrenCountGetWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdChildrenCountGet");

            var localVarPath = "/PortalTemplateFolders/{id}/children/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdChildrenCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts children of PortalTemplateFolder. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> PortalTemplateFoldersIdChildrenCountGetAsync (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await PortalTemplateFoldersIdChildrenCountGetAsyncWithHttpInfo(id, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts children of PortalTemplateFolder. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> PortalTemplateFoldersIdChildrenCountGetAsyncWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdChildrenCountGet");

            var localVarPath = "/PortalTemplateFolders/{id}/children/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdChildrenCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all children of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <returns></returns>
        public void PortalTemplateFoldersIdChildrenDelete (string id)
        {
             PortalTemplateFoldersIdChildrenDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes all children of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalTemplateFoldersIdChildrenDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdChildrenDelete");

            var localVarPath = "/PortalTemplateFolders/{id}/children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdChildrenDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all children of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalTemplateFoldersIdChildrenDeleteAsync (string id)
        {
             await PortalTemplateFoldersIdChildrenDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes all children of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalTemplateFoldersIdChildrenDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdChildrenDelete");

            var localVarPath = "/PortalTemplateFolders/{id}/children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdChildrenDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for children. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for children</param>
        /// <returns></returns>
        public void PortalTemplateFoldersIdChildrenFkDelete (string id, string fk)
        {
             PortalTemplateFoldersIdChildrenFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Delete a related item by id for children. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for children</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalTemplateFoldersIdChildrenFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdChildrenFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdChildrenFkDelete");

            var localVarPath = "/PortalTemplateFolders/{id}/children/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdChildrenFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for children. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for children</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalTemplateFoldersIdChildrenFkDeleteAsync (string id, string fk)
        {
             await PortalTemplateFoldersIdChildrenFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Delete a related item by id for children. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for children</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalTemplateFoldersIdChildrenFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdChildrenFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdChildrenFkDelete");

            var localVarPath = "/PortalTemplateFolders/{id}/children/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdChildrenFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for children. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for children</param>
        /// <returns>PortalTemplateFolder</returns>
        public PortalTemplateFolder PortalTemplateFoldersIdChildrenFkGet (string id, string fk)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = PortalTemplateFoldersIdChildrenFkGetWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for children. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for children</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        public ApiResponse< PortalTemplateFolder > PortalTemplateFoldersIdChildrenFkGetWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdChildrenFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdChildrenFkGet");

            var localVarPath = "/PortalTemplateFolders/{id}/children/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdChildrenFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Find a related item by id for children. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for children</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        public async System.Threading.Tasks.Task<PortalTemplateFolder> PortalTemplateFoldersIdChildrenFkGetAsync (string id, string fk)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = await PortalTemplateFoldersIdChildrenFkGetAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for children. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for children</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalTemplateFoldersIdChildrenFkGetAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdChildrenFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdChildrenFkGet");

            var localVarPath = "/PortalTemplateFolders/{id}/children/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdChildrenFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Update a related item by id for children. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for children</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        public PortalTemplateFolder PortalTemplateFoldersIdChildrenFkPut (string id, string fk, PortalTemplateFolder data = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = PortalTemplateFoldersIdChildrenFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for children. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for children</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        public ApiResponse< PortalTemplateFolder > PortalTemplateFoldersIdChildrenFkPutWithHttpInfo (string id, string fk, PortalTemplateFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdChildrenFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdChildrenFkPut");

            var localVarPath = "/PortalTemplateFolders/{id}/children/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdChildrenFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Update a related item by id for children. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for children</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        public async System.Threading.Tasks.Task<PortalTemplateFolder> PortalTemplateFoldersIdChildrenFkPutAsync (string id, string fk, PortalTemplateFolder data = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = await PortalTemplateFoldersIdChildrenFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for children. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for children</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalTemplateFoldersIdChildrenFkPutAsyncWithHttpInfo (string id, string fk, PortalTemplateFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdChildrenFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdChildrenFkPut");

            var localVarPath = "/PortalTemplateFolders/{id}/children/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdChildrenFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Queries children of PortalTemplateFolder. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;PortalTemplateFolder&gt;</returns>
        public List<PortalTemplateFolder> PortalTemplateFoldersIdChildrenGet (string id, string filter = null)
        {
             ApiResponse<List<PortalTemplateFolder>> localVarResponse = PortalTemplateFoldersIdChildrenGetWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries children of PortalTemplateFolder. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;PortalTemplateFolder&gt;</returns>
        public ApiResponse< List<PortalTemplateFolder> > PortalTemplateFoldersIdChildrenGetWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdChildrenGet");

            var localVarPath = "/PortalTemplateFolders/{id}/children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdChildrenGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PortalTemplateFolder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PortalTemplateFolder>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PortalTemplateFolder>)));
            
        }

        /// <summary>
        /// Queries children of PortalTemplateFolder. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;PortalTemplateFolder&gt;</returns>
        public async System.Threading.Tasks.Task<List<PortalTemplateFolder>> PortalTemplateFoldersIdChildrenGetAsync (string id, string filter = null)
        {
             ApiResponse<List<PortalTemplateFolder>> localVarResponse = await PortalTemplateFoldersIdChildrenGetAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries children of PortalTemplateFolder. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PortalTemplateFolder&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PortalTemplateFolder>>> PortalTemplateFoldersIdChildrenGetAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdChildrenGet");

            var localVarPath = "/PortalTemplateFolders/{id}/children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdChildrenGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PortalTemplateFolder>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PortalTemplateFolder>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PortalTemplateFolder>)));
            
        }

        /// <summary>
        /// Creates a new instance in children of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        public PortalTemplateFolder PortalTemplateFoldersIdChildrenPost (string id, PortalTemplateFolder data = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = PortalTemplateFoldersIdChildrenPostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in children of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        public ApiResponse< PortalTemplateFolder > PortalTemplateFoldersIdChildrenPostWithHttpInfo (string id, PortalTemplateFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdChildrenPost");

            var localVarPath = "/PortalTemplateFolders/{id}/children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdChildrenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Creates a new instance in children of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        public async System.Threading.Tasks.Task<PortalTemplateFolder> PortalTemplateFoldersIdChildrenPostAsync (string id, PortalTemplateFolder data = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = await PortalTemplateFoldersIdChildrenPostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in children of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalTemplateFoldersIdChildrenPostAsyncWithHttpInfo (string id, PortalTemplateFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdChildrenPost");

            var localVarPath = "/PortalTemplateFolders/{id}/children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdChildrenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Delete a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Object</returns>
        public Object PortalTemplateFoldersIdDelete (string id)
        {
             ApiResponse<Object> localVarResponse = PortalTemplateFoldersIdDeleteWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > PortalTemplateFoldersIdDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdDelete");

            var localVarPath = "/PortalTemplateFolders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Delete a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PortalTemplateFoldersIdDeleteAsync (string id)
        {
             ApiResponse<Object> localVarResponse = await PortalTemplateFoldersIdDeleteAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalTemplateFoldersIdDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdDelete");

            var localVarPath = "/PortalTemplateFolders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 PortalTemplateFoldersIdExistsGet (string id)
        {
             ApiResponse<InlineResponse2002> localVarResponse = PortalTemplateFoldersIdExistsGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > PortalTemplateFoldersIdExistsGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdExistsGet");

            var localVarPath = "/PortalTemplateFolders/{id}/exists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdExistsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
            
        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> PortalTemplateFoldersIdExistsGetAsync (string id)
        {
             ApiResponse<InlineResponse2002> localVarResponse = await PortalTemplateFoldersIdExistsGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> PortalTemplateFoldersIdExistsGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdExistsGet");

            var localVarPath = "/PortalTemplateFolders/{id}/exists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdExistsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
            
        }

        /// <summary>
        /// Find a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        public PortalTemplateFolder PortalTemplateFoldersIdGet (string id, string filter = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = PortalTemplateFoldersIdGetWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        public ApiResponse< PortalTemplateFolder > PortalTemplateFoldersIdGetWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdGet");

            var localVarPath = "/PortalTemplateFolders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Find a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        public async System.Threading.Tasks.Task<PortalTemplateFolder> PortalTemplateFoldersIdGetAsync (string id, string filter = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = await PortalTemplateFoldersIdGetAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a model instance by {{id}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="filter">Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalTemplateFoldersIdGetAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdGet");

            var localVarPath = "/PortalTemplateFolders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 PortalTemplateFoldersIdHead (string id)
        {
             ApiResponse<InlineResponse2002> localVarResponse = PortalTemplateFoldersIdHeadWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > PortalTemplateFoldersIdHeadWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdHead");

            var localVarPath = "/PortalTemplateFolders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
            
        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> PortalTemplateFoldersIdHeadAsync (string id)
        {
             ApiResponse<InlineResponse2002> localVarResponse = await PortalTemplateFoldersIdHeadAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check whether a model instance exists in the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> PortalTemplateFoldersIdHeadAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdHead");

            var localVarPath = "/PortalTemplateFolders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation parent. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        public PortalTemplateFolder PortalTemplateFoldersIdParentGet (string id, bool? refresh = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = PortalTemplateFoldersIdParentGetWithHttpInfo(id, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches belongsTo relation parent. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        public ApiResponse< PortalTemplateFolder > PortalTemplateFoldersIdParentGetWithHttpInfo (string id, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdParentGet");

            var localVarPath = "/PortalTemplateFolders/{id}/parent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdParentGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation parent. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        public async System.Threading.Tasks.Task<PortalTemplateFolder> PortalTemplateFoldersIdParentGetAsync (string id, bool? refresh = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = await PortalTemplateFoldersIdParentGetAsyncWithHttpInfo(id, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches belongsTo relation parent. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalTemplateFoldersIdParentGetAsyncWithHttpInfo (string id, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdParentGet");

            var localVarPath = "/PortalTemplateFolders/{id}/parent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdParentGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        public PortalTemplateFolder PortalTemplateFoldersIdPatch (string id, PortalTemplateFolder data = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = PortalTemplateFoldersIdPatchWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        public ApiResponse< PortalTemplateFolder > PortalTemplateFoldersIdPatchWithHttpInfo (string id, PortalTemplateFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdPatch");

            var localVarPath = "/PortalTemplateFolders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        public async System.Threading.Tasks.Task<PortalTemplateFolder> PortalTemplateFoldersIdPatchAsync (string id, PortalTemplateFolder data = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = await PortalTemplateFoldersIdPatchAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Patch attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalTemplateFoldersIdPatchAsyncWithHttpInfo (string id, PortalTemplateFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdPatch");

            var localVarPath = "/PortalTemplateFolders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Portal</returns>
        public Portal PortalTemplateFoldersIdPortalGet (string id, bool? refresh = null)
        {
             ApiResponse<Portal> localVarResponse = PortalTemplateFoldersIdPortalGetWithHttpInfo(id, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches belongsTo relation portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>ApiResponse of Portal</returns>
        public ApiResponse< Portal > PortalTemplateFoldersIdPortalGetWithHttpInfo (string id, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdPortalGet");

            var localVarPath = "/PortalTemplateFolders/{id}/portal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdPortalGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Fetches belongsTo relation portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of Portal</returns>
        public async System.Threading.Tasks.Task<Portal> PortalTemplateFoldersIdPortalGetAsync (string id, bool? refresh = null)
        {
             ApiResponse<Portal> localVarResponse = await PortalTemplateFoldersIdPortalGetAsyncWithHttpInfo(id, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches belongsTo relation portal. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="refresh"> (optional)</param>
        /// <returns>Task of ApiResponse (Portal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Portal>> PortalTemplateFoldersIdPortalGetAsyncWithHttpInfo (string id, bool? refresh = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdPortalGet");

            var localVarPath = "/PortalTemplateFolders/{id}/portal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdPortalGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portal)));
            
        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        public PortalTemplateFolder PortalTemplateFoldersIdPut (string id, PortalTemplateFolder data = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = PortalTemplateFoldersIdPutWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        public ApiResponse< PortalTemplateFolder > PortalTemplateFoldersIdPutWithHttpInfo (string id, PortalTemplateFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdPut");

            var localVarPath = "/PortalTemplateFolders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        public async System.Threading.Tasks.Task<PortalTemplateFolder> PortalTemplateFoldersIdPutAsync (string id, PortalTemplateFolder data = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = await PortalTemplateFoldersIdPutAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalTemplateFoldersIdPutAsyncWithHttpInfo (string id, PortalTemplateFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdPut");

            var localVarPath = "/PortalTemplateFolders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        public PortalTemplateFolder PortalTemplateFoldersIdReplacePost (string id, PortalTemplateFolder data = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = PortalTemplateFoldersIdReplacePostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        public ApiResponse< PortalTemplateFolder > PortalTemplateFoldersIdReplacePostWithHttpInfo (string id, PortalTemplateFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdReplacePost");

            var localVarPath = "/PortalTemplateFolders/{id}/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdReplacePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        public async System.Threading.Tasks.Task<PortalTemplateFolder> PortalTemplateFoldersIdReplacePostAsync (string id, PortalTemplateFolder data = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = await PortalTemplateFoldersIdReplacePostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace attributes for a model instance and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Model id</param>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalTemplateFoldersIdReplacePostAsyncWithHttpInfo (string id, PortalTemplateFolder data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdReplacePost");

            var localVarPath = "/PortalTemplateFolders/{id}/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdReplacePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Counts templates of PortalTemplateFolder. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 PortalTemplateFoldersIdTemplatesCountGet (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = PortalTemplateFoldersIdTemplatesCountGetWithHttpInfo(id, where);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Counts templates of PortalTemplateFolder. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > PortalTemplateFoldersIdTemplatesCountGetWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesCountGet");

            var localVarPath = "/PortalTemplateFolders/{id}/templates/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdTemplatesCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Counts templates of PortalTemplateFolder. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> PortalTemplateFoldersIdTemplatesCountGetAsync (string id, string where = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await PortalTemplateFoldersIdTemplatesCountGetAsyncWithHttpInfo(id, where);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Counts templates of PortalTemplateFolder. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> PortalTemplateFoldersIdTemplatesCountGetAsyncWithHttpInfo (string id, string where = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesCountGet");

            var localVarPath = "/PortalTemplateFolders/{id}/templates/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdTemplatesCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
            
        }

        /// <summary>
        /// Deletes all templates of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <returns></returns>
        public void PortalTemplateFoldersIdTemplatesDelete (string id)
        {
             PortalTemplateFoldersIdTemplatesDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes all templates of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalTemplateFoldersIdTemplatesDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesDelete");

            var localVarPath = "/PortalTemplateFolders/{id}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdTemplatesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes all templates of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalTemplateFoldersIdTemplatesDeleteAsync (string id)
        {
             await PortalTemplateFoldersIdTemplatesDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes all templates of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalTemplateFoldersIdTemplatesDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesDelete");

            var localVarPath = "/PortalTemplateFolders/{id}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdTemplatesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns></returns>
        public void PortalTemplateFoldersIdTemplatesFkDelete (string id, string fk)
        {
             PortalTemplateFoldersIdTemplatesFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Delete a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalTemplateFoldersIdTemplatesFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesFkDelete");

            var localVarPath = "/PortalTemplateFolders/{id}/templates/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdTemplatesFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalTemplateFoldersIdTemplatesFkDeleteAsync (string id, string fk)
        {
             await PortalTemplateFoldersIdTemplatesFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Delete a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalTemplateFoldersIdTemplatesFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesFkDelete");

            var localVarPath = "/PortalTemplateFolders/{id}/templates/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdTemplatesFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Find a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Template</returns>
        public Template PortalTemplateFoldersIdTemplatesFkGet (string id, string fk)
        {
             ApiResponse<Template> localVarResponse = PortalTemplateFoldersIdTemplatesFkGetWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse< Template > PortalTemplateFoldersIdTemplatesFkGetWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesFkGet");

            var localVarPath = "/PortalTemplateFolders/{id}/templates/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdTemplatesFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Find a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> PortalTemplateFoldersIdTemplatesFkGetAsync (string id, string fk)
        {
             ApiResponse<Template> localVarResponse = await PortalTemplateFoldersIdTemplatesFkGetAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template>> PortalTemplateFoldersIdTemplatesFkGetAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesFkGet");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesFkGet");

            var localVarPath = "/PortalTemplateFolders/{id}/templates/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdTemplatesFkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Update a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Template</returns>
        public Template PortalTemplateFoldersIdTemplatesFkPut (string id, string fk, Template data = null)
        {
             ApiResponse<Template> localVarResponse = PortalTemplateFoldersIdTemplatesFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse< Template > PortalTemplateFoldersIdTemplatesFkPutWithHttpInfo (string id, string fk, Template data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesFkPut");

            var localVarPath = "/PortalTemplateFolders/{id}/templates/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdTemplatesFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Update a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> PortalTemplateFoldersIdTemplatesFkPutAsync (string id, string fk, Template data = null)
        {
             ApiResponse<Template> localVarResponse = await PortalTemplateFoldersIdTemplatesFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template>> PortalTemplateFoldersIdTemplatesFkPutAsyncWithHttpInfo (string id, string fk, Template data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesFkPut");

            var localVarPath = "/PortalTemplateFolders/{id}/templates/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdTemplatesFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Queries templates of PortalTemplateFolder. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;Template&gt;</returns>
        public List<Template> PortalTemplateFoldersIdTemplatesGet (string id, string filter = null)
        {
             ApiResponse<List<Template>> localVarResponse = PortalTemplateFoldersIdTemplatesGetWithHttpInfo(id, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries templates of PortalTemplateFolder. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Template&gt;</returns>
        public ApiResponse< List<Template> > PortalTemplateFoldersIdTemplatesGetWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesGet");

            var localVarPath = "/PortalTemplateFolders/{id}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdTemplatesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Template>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Template>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Template>)));
            
        }

        /// <summary>
        /// Queries templates of PortalTemplateFolder. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;Template&gt;</returns>
        public async System.Threading.Tasks.Task<List<Template>> PortalTemplateFoldersIdTemplatesGetAsync (string id, string filter = null)
        {
             ApiResponse<List<Template>> localVarResponse = await PortalTemplateFoldersIdTemplatesGetAsyncWithHttpInfo(id, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries templates of PortalTemplateFolder. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Template&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Template>>> PortalTemplateFoldersIdTemplatesGetAsyncWithHttpInfo (string id, string filter = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesGet");

            var localVarPath = "/PortalTemplateFolders/{id}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdTemplatesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Template>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Template>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Template>)));
            
        }

        /// <summary>
        /// Creates a new instance in templates of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Template</returns>
        public Template PortalTemplateFoldersIdTemplatesPost (string id, Template data = null)
        {
             ApiResponse<Template> localVarResponse = PortalTemplateFoldersIdTemplatesPostWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new instance in templates of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of Template</returns>
        public ApiResponse< Template > PortalTemplateFoldersIdTemplatesPostWithHttpInfo (string id, Template data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesPost");

            var localVarPath = "/PortalTemplateFolders/{id}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdTemplatesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Creates a new instance in templates of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> PortalTemplateFoldersIdTemplatesPostAsync (string id, Template data = null)
        {
             ApiResponse<Template> localVarResponse = await PortalTemplateFoldersIdTemplatesPostAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new instance in templates of this model. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Template>> PortalTemplateFoldersIdTemplatesPostAsyncWithHttpInfo (string id, Template data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesPost");

            var localVarPath = "/PortalTemplateFolders/{id}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdTemplatesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Template>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Template) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Template)));
            
        }

        /// <summary>
        /// Remove the templates relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns></returns>
        public void PortalTemplateFoldersIdTemplatesRelFkDelete (string id, string fk)
        {
             PortalTemplateFoldersIdTemplatesRelFkDeleteWithHttpInfo(id, fk);
        }

        /// <summary>
        /// Remove the templates relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PortalTemplateFoldersIdTemplatesRelFkDeleteWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesRelFkDelete");

            var localVarPath = "/PortalTemplateFolders/{id}/templates/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdTemplatesRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove the templates relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PortalTemplateFoldersIdTemplatesRelFkDeleteAsync (string id, string fk)
        {
             await PortalTemplateFoldersIdTemplatesRelFkDeleteAsyncWithHttpInfo(id, fk);

        }

        /// <summary>
        /// Remove the templates relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PortalTemplateFoldersIdTemplatesRelFkDeleteAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesRelFkDelete");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesRelFkDelete");

            var localVarPath = "/PortalTemplateFolders/{id}/templates/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdTemplatesRelFkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Check the existence of templates relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>bool?</returns>
        public bool? PortalTemplateFoldersIdTemplatesRelFkHead (string id, string fk)
        {
             ApiResponse<bool?> localVarResponse = PortalTemplateFoldersIdTemplatesRelFkHeadWithHttpInfo(id, fk);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check the existence of templates relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > PortalTemplateFoldersIdTemplatesRelFkHeadWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesRelFkHead");

            var localVarPath = "/PortalTemplateFolders/{id}/templates/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdTemplatesRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Check the existence of templates relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> PortalTemplateFoldersIdTemplatesRelFkHeadAsync (string id, string fk)
        {
             ApiResponse<bool?> localVarResponse = await PortalTemplateFoldersIdTemplatesRelFkHeadAsyncWithHttpInfo(id, fk);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check the existence of templates relation to an item by id. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> PortalTemplateFoldersIdTemplatesRelFkHeadAsyncWithHttpInfo (string id, string fk)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesRelFkHead");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesRelFkHead");

            var localVarPath = "/PortalTemplateFolders/{id}/templates/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.HEAD, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdTemplatesRelFkHead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Add a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>PortalTemplate</returns>
        public PortalTemplate PortalTemplateFoldersIdTemplatesRelFkPut (string id, string fk, PortalTemplate data = null)
        {
             ApiResponse<PortalTemplate> localVarResponse = PortalTemplateFoldersIdTemplatesRelFkPutWithHttpInfo(id, fk, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>ApiResponse of PortalTemplate</returns>
        public ApiResponse< PortalTemplate > PortalTemplateFoldersIdTemplatesRelFkPutWithHttpInfo (string id, string fk, PortalTemplate data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesRelFkPut");

            var localVarPath = "/PortalTemplateFolders/{id}/templates/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdTemplatesRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplate)));
            
        }

        /// <summary>
        /// Add a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of PortalTemplate</returns>
        public async System.Threading.Tasks.Task<PortalTemplate> PortalTemplateFoldersIdTemplatesRelFkPutAsync (string id, string fk, PortalTemplate data = null)
        {
             ApiResponse<PortalTemplate> localVarResponse = await PortalTemplateFoldersIdTemplatesRelFkPutAsyncWithHttpInfo(id, fk, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a related item by id for templates. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">PortalTemplateFolder id</param>
        /// <param name="fk">Foreign key for templates</param>
        /// <param name="data"> (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalTemplate>> PortalTemplateFoldersIdTemplatesRelFkPutAsyncWithHttpInfo (string id, string fk, PortalTemplate data = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesRelFkPut");
            // verify the required parameter 'fk' is set
            if (fk == null)
                throw new ApiException(400, "Missing required parameter 'fk' when calling PortalTemplateFolderApi->PortalTemplateFoldersIdTemplatesRelFkPut");

            var localVarPath = "/PortalTemplateFolders/{id}/templates/rel/{fk}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fk != null) localVarPathParams.Add("fk", Configuration.ApiClient.ParameterToString(fk)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersIdTemplatesRelFkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplate)));
            
        }

        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        public PortalTemplateFolder PortalTemplateFoldersPatch (PortalTemplateFolder data = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = PortalTemplateFoldersPatchWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        public ApiResponse< PortalTemplateFolder > PortalTemplateFoldersPatchWithHttpInfo (PortalTemplateFolder data = null)
        {

            var localVarPath = "/PortalTemplateFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        public async System.Threading.Tasks.Task<PortalTemplateFolder> PortalTemplateFoldersPatchAsync (PortalTemplateFolder data = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = await PortalTemplateFoldersPatchAsyncWithHttpInfo(data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Patch an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalTemplateFoldersPatchAsyncWithHttpInfo (PortalTemplateFolder data = null)
        {

            var localVarPath = "/PortalTemplateFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Create a new instance of the model and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        public PortalTemplateFolder PortalTemplateFoldersPost (PortalTemplateFolder data = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = PortalTemplateFoldersPostWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new instance of the model and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        public ApiResponse< PortalTemplateFolder > PortalTemplateFoldersPostWithHttpInfo (PortalTemplateFolder data = null)
        {

            var localVarPath = "/PortalTemplateFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Create a new instance of the model and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        public async System.Threading.Tasks.Task<PortalTemplateFolder> PortalTemplateFoldersPostAsync (PortalTemplateFolder data = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = await PortalTemplateFoldersPostAsyncWithHttpInfo(data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new instance of the model and persist it into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalTemplateFoldersPostAsyncWithHttpInfo (PortalTemplateFolder data = null)
        {

            var localVarPath = "/PortalTemplateFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        public PortalTemplateFolder PortalTemplateFoldersPut (PortalTemplateFolder data = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = PortalTemplateFoldersPutWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        public ApiResponse< PortalTemplateFolder > PortalTemplateFoldersPutWithHttpInfo (PortalTemplateFolder data = null)
        {

            var localVarPath = "/PortalTemplateFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        public async System.Threading.Tasks.Task<PortalTemplateFolder> PortalTemplateFoldersPutAsync (PortalTemplateFolder data = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = await PortalTemplateFoldersPutAsyncWithHttpInfo(data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalTemplateFoldersPutAsyncWithHttpInfo (PortalTemplateFolder data = null)
        {

            var localVarPath = "/PortalTemplateFolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        public PortalTemplateFolder PortalTemplateFoldersReplaceOrCreatePost (PortalTemplateFolder data = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = PortalTemplateFoldersReplaceOrCreatePostWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        public ApiResponse< PortalTemplateFolder > PortalTemplateFoldersReplaceOrCreatePostWithHttpInfo (PortalTemplateFolder data = null)
        {

            var localVarPath = "/PortalTemplateFolders/replaceOrCreate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersReplaceOrCreatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        public async System.Threading.Tasks.Task<PortalTemplateFolder> PortalTemplateFoldersReplaceOrCreatePostAsync (PortalTemplateFolder data = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = await PortalTemplateFoldersReplaceOrCreatePostAsyncWithHttpInfo(data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace an existing model instance or insert a new one into the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data">Model instance data (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalTemplateFoldersReplaceOrCreatePostAsyncWithHttpInfo (PortalTemplateFolder data = null)
        {

            var localVarPath = "/PortalTemplateFolders/replaceOrCreate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersReplaceOrCreatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 PortalTemplateFoldersUpdatePost (string where = null, PortalTemplateFolder data = null)
        {
             ApiResponse<InlineResponse2003> localVarResponse = PortalTemplateFoldersUpdatePostWithHttpInfo(where, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > PortalTemplateFoldersUpdatePostWithHttpInfo (string where = null, PortalTemplateFolder data = null)
        {

            var localVarPath = "/PortalTemplateFolders/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersUpdatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> PortalTemplateFoldersUpdatePostAsync (string where = null, PortalTemplateFolder data = null)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await PortalTemplateFoldersUpdatePostAsyncWithHttpInfo(where, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update instances of the model matched by {{where}} from the data source. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> PortalTemplateFoldersUpdatePostAsyncWithHttpInfo (string where = null, PortalTemplateFolder data = null)
        {

            var localVarPath = "/PortalTemplateFolders/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersUpdatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>PortalTemplateFolder</returns>
        public PortalTemplateFolder PortalTemplateFoldersUpsertWithWherePost (string where = null, PortalTemplateFolder data = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = PortalTemplateFoldersUpsertWithWherePostWithHttpInfo(where, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>ApiResponse of PortalTemplateFolder</returns>
        public ApiResponse< PortalTemplateFolder > PortalTemplateFoldersUpsertWithWherePostWithHttpInfo (string where = null, PortalTemplateFolder data = null)
        {

            var localVarPath = "/PortalTemplateFolders/upsertWithWhere";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersUpsertWithWherePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of PortalTemplateFolder</returns>
        public async System.Threading.Tasks.Task<PortalTemplateFolder> PortalTemplateFoldersUpsertWithWherePostAsync (string where = null, PortalTemplateFolder data = null)
        {
             ApiResponse<PortalTemplateFolder> localVarResponse = await PortalTemplateFoldersUpsertWithWherePostAsyncWithHttpInfo(where, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an existing model instance or insert a new one into the data source based on the where criteria. 
        /// </summary>
        /// <exception cref="TweakApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="where">Criteria to match model instances (optional)</param>
        /// <param name="data">An object of model property name/value pairs (optional)</param>
        /// <returns>Task of ApiResponse (PortalTemplateFolder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortalTemplateFolder>> PortalTemplateFoldersUpsertWithWherePostAsyncWithHttpInfo (string where = null, PortalTemplateFolder data = null)
        {

            var localVarPath = "/PortalTemplateFolders/upsertWithWhere";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (where != null) localVarQueryParams.Add("where", Configuration.ApiClient.ParameterToString(where)); // query parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (access_token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams["access_token"] = Configuration.GetApiKeyWithPrefix("access_token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalTemplateFoldersUpsertWithWherePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortalTemplateFolder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortalTemplateFolder) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortalTemplateFolder)));
            
        }

    }
}
