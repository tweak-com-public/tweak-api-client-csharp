/* 
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.8-alpha.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace TweakApi.Model
{
    /// <summary>
    /// Portal
    /// </summary>
    [DataContract]
    public partial class Portal :  IEquatable<Portal>
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Private for "private"
            /// </summary>
            [EnumMember(Value = "private")]
            Private,
            
            /// <summary>
            /// Enum Public for "public"
            /// </summary>
            [EnumMember(Value = "public")]
            Public
        }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LanguageEnum
        {
            
            /// <summary>
            /// Enum SqAL for "sq_AL"
            /// </summary>
            [EnumMember(Value = "sq_AL")]
            SqAL,
            
            /// <summary>
            /// Enum Sq for "sq"
            /// </summary>
            [EnumMember(Value = "sq")]
            Sq,
            
            /// <summary>
            /// Enum ArDZ for "ar_DZ"
            /// </summary>
            [EnumMember(Value = "ar_DZ")]
            ArDZ,
            
            /// <summary>
            /// Enum ArBH for "ar_BH"
            /// </summary>
            [EnumMember(Value = "ar_BH")]
            ArBH,
            
            /// <summary>
            /// Enum ArEG for "ar_EG"
            /// </summary>
            [EnumMember(Value = "ar_EG")]
            ArEG,
            
            /// <summary>
            /// Enum ArIQ for "ar_IQ"
            /// </summary>
            [EnumMember(Value = "ar_IQ")]
            ArIQ,
            
            /// <summary>
            /// Enum ArJO for "ar_JO"
            /// </summary>
            [EnumMember(Value = "ar_JO")]
            ArJO,
            
            /// <summary>
            /// Enum ArKW for "ar_KW"
            /// </summary>
            [EnumMember(Value = "ar_KW")]
            ArKW,
            
            /// <summary>
            /// Enum ArLB for "ar_LB"
            /// </summary>
            [EnumMember(Value = "ar_LB")]
            ArLB,
            
            /// <summary>
            /// Enum ArLY for "ar_LY"
            /// </summary>
            [EnumMember(Value = "ar_LY")]
            ArLY,
            
            /// <summary>
            /// Enum ArMA for "ar_MA"
            /// </summary>
            [EnumMember(Value = "ar_MA")]
            ArMA,
            
            /// <summary>
            /// Enum ArOM for "ar_OM"
            /// </summary>
            [EnumMember(Value = "ar_OM")]
            ArOM,
            
            /// <summary>
            /// Enum ArQA for "ar_QA"
            /// </summary>
            [EnumMember(Value = "ar_QA")]
            ArQA,
            
            /// <summary>
            /// Enum ArSA for "ar_SA"
            /// </summary>
            [EnumMember(Value = "ar_SA")]
            ArSA,
            
            /// <summary>
            /// Enum ArSD for "ar_SD"
            /// </summary>
            [EnumMember(Value = "ar_SD")]
            ArSD,
            
            /// <summary>
            /// Enum ArSY for "ar_SY"
            /// </summary>
            [EnumMember(Value = "ar_SY")]
            ArSY,
            
            /// <summary>
            /// Enum ArTN for "ar_TN"
            /// </summary>
            [EnumMember(Value = "ar_TN")]
            ArTN,
            
            /// <summary>
            /// Enum ArAE for "ar_AE"
            /// </summary>
            [EnumMember(Value = "ar_AE")]
            ArAE,
            
            /// <summary>
            /// Enum ArYE for "ar_YE"
            /// </summary>
            [EnumMember(Value = "ar_YE")]
            ArYE,
            
            /// <summary>
            /// Enum Ar for "ar"
            /// </summary>
            [EnumMember(Value = "ar")]
            Ar,
            
            /// <summary>
            /// Enum BeBY for "be_BY"
            /// </summary>
            [EnumMember(Value = "be_BY")]
            BeBY,
            
            /// <summary>
            /// Enum Be for "be"
            /// </summary>
            [EnumMember(Value = "be")]
            Be,
            
            /// <summary>
            /// Enum BgBG for "bg_BG"
            /// </summary>
            [EnumMember(Value = "bg_BG")]
            BgBG,
            
            /// <summary>
            /// Enum Bg for "bg"
            /// </summary>
            [EnumMember(Value = "bg")]
            Bg,
            
            /// <summary>
            /// Enum CaES for "ca_ES"
            /// </summary>
            [EnumMember(Value = "ca_ES")]
            CaES,
            
            /// <summary>
            /// Enum Ca for "ca"
            /// </summary>
            [EnumMember(Value = "ca")]
            Ca,
            
            /// <summary>
            /// Enum ZhCN for "zh_CN"
            /// </summary>
            [EnumMember(Value = "zh_CN")]
            ZhCN,
            
            /// <summary>
            /// Enum ZhHK for "zh_HK"
            /// </summary>
            [EnumMember(Value = "zh_HK")]
            ZhHK,
            
            /// <summary>
            /// Enum ZhSG for "zh_SG"
            /// </summary>
            [EnumMember(Value = "zh_SG")]
            ZhSG,
            
            /// <summary>
            /// Enum ZhTW for "zh_TW"
            /// </summary>
            [EnumMember(Value = "zh_TW")]
            ZhTW,
            
            /// <summary>
            /// Enum Zh for "zh"
            /// </summary>
            [EnumMember(Value = "zh")]
            Zh,
            
            /// <summary>
            /// Enum HrHR for "hr_HR"
            /// </summary>
            [EnumMember(Value = "hr_HR")]
            HrHR,
            
            /// <summary>
            /// Enum Hr for "hr"
            /// </summary>
            [EnumMember(Value = "hr")]
            Hr,
            
            /// <summary>
            /// Enum CsCZ for "cs_CZ"
            /// </summary>
            [EnumMember(Value = "cs_CZ")]
            CsCZ,
            
            /// <summary>
            /// Enum Cs for "cs"
            /// </summary>
            [EnumMember(Value = "cs")]
            Cs,
            
            /// <summary>
            /// Enum DaDK for "da_DK"
            /// </summary>
            [EnumMember(Value = "da_DK")]
            DaDK,
            
            /// <summary>
            /// Enum Da for "da"
            /// </summary>
            [EnumMember(Value = "da")]
            Da,
            
            /// <summary>
            /// Enum NlBE for "nl_BE"
            /// </summary>
            [EnumMember(Value = "nl_BE")]
            NlBE,
            
            /// <summary>
            /// Enum NlNL for "nl_NL"
            /// </summary>
            [EnumMember(Value = "nl_NL")]
            NlNL,
            
            /// <summary>
            /// Enum Nl for "nl"
            /// </summary>
            [EnumMember(Value = "nl")]
            Nl,
            
            /// <summary>
            /// Enum EnAU for "en_AU"
            /// </summary>
            [EnumMember(Value = "en_AU")]
            EnAU,
            
            /// <summary>
            /// Enum EnCA for "en_CA"
            /// </summary>
            [EnumMember(Value = "en_CA")]
            EnCA,
            
            /// <summary>
            /// Enum EnIN for "en_IN"
            /// </summary>
            [EnumMember(Value = "en_IN")]
            EnIN,
            
            /// <summary>
            /// Enum EnIE for "en_IE"
            /// </summary>
            [EnumMember(Value = "en_IE")]
            EnIE,
            
            /// <summary>
            /// Enum EnMT for "en_MT"
            /// </summary>
            [EnumMember(Value = "en_MT")]
            EnMT,
            
            /// <summary>
            /// Enum EnNZ for "en_NZ"
            /// </summary>
            [EnumMember(Value = "en_NZ")]
            EnNZ,
            
            /// <summary>
            /// Enum EnPH for "en_PH"
            /// </summary>
            [EnumMember(Value = "en_PH")]
            EnPH,
            
            /// <summary>
            /// Enum EnSG for "en_SG"
            /// </summary>
            [EnumMember(Value = "en_SG")]
            EnSG,
            
            /// <summary>
            /// Enum EnZA for "en_ZA"
            /// </summary>
            [EnumMember(Value = "en_ZA")]
            EnZA,
            
            /// <summary>
            /// Enum EnGB for "en_GB"
            /// </summary>
            [EnumMember(Value = "en_GB")]
            EnGB,
            
            /// <summary>
            /// Enum EnUS for "en_US"
            /// </summary>
            [EnumMember(Value = "en_US")]
            EnUS,
            
            /// <summary>
            /// Enum En for "en"
            /// </summary>
            [EnumMember(Value = "en")]
            En,
            
            /// <summary>
            /// Enum EtEE for "et_EE"
            /// </summary>
            [EnumMember(Value = "et_EE")]
            EtEE,
            
            /// <summary>
            /// Enum Et for "et"
            /// </summary>
            [EnumMember(Value = "et")]
            Et,
            
            /// <summary>
            /// Enum FiFI for "fi_FI"
            /// </summary>
            [EnumMember(Value = "fi_FI")]
            FiFI,
            
            /// <summary>
            /// Enum Fi for "fi"
            /// </summary>
            [EnumMember(Value = "fi")]
            Fi,
            
            /// <summary>
            /// Enum FrBE for "fr_BE"
            /// </summary>
            [EnumMember(Value = "fr_BE")]
            FrBE,
            
            /// <summary>
            /// Enum FrCA for "fr_CA"
            /// </summary>
            [EnumMember(Value = "fr_CA")]
            FrCA,
            
            /// <summary>
            /// Enum FrFR for "fr_FR"
            /// </summary>
            [EnumMember(Value = "fr_FR")]
            FrFR,
            
            /// <summary>
            /// Enum FrLU for "fr_LU"
            /// </summary>
            [EnumMember(Value = "fr_LU")]
            FrLU,
            
            /// <summary>
            /// Enum FrCH for "fr_CH"
            /// </summary>
            [EnumMember(Value = "fr_CH")]
            FrCH,
            
            /// <summary>
            /// Enum Fr for "fr"
            /// </summary>
            [EnumMember(Value = "fr")]
            Fr,
            
            /// <summary>
            /// Enum DeAT for "de_AT"
            /// </summary>
            [EnumMember(Value = "de_AT")]
            DeAT,
            
            /// <summary>
            /// Enum DeDE for "de_DE"
            /// </summary>
            [EnumMember(Value = "de_DE")]
            DeDE,
            
            /// <summary>
            /// Enum DeLU for "de_LU"
            /// </summary>
            [EnumMember(Value = "de_LU")]
            DeLU,
            
            /// <summary>
            /// Enum DeCH for "de_CH"
            /// </summary>
            [EnumMember(Value = "de_CH")]
            DeCH,
            
            /// <summary>
            /// Enum De for "de"
            /// </summary>
            [EnumMember(Value = "de")]
            De,
            
            /// <summary>
            /// Enum ElCY for "el_CY"
            /// </summary>
            [EnumMember(Value = "el_CY")]
            ElCY,
            
            /// <summary>
            /// Enum ElGR for "el_GR"
            /// </summary>
            [EnumMember(Value = "el_GR")]
            ElGR,
            
            /// <summary>
            /// Enum El for "el"
            /// </summary>
            [EnumMember(Value = "el")]
            El,
            
            /// <summary>
            /// Enum IwIL for "iw_IL"
            /// </summary>
            [EnumMember(Value = "iw_IL")]
            IwIL,
            
            /// <summary>
            /// Enum Iw for "iw"
            /// </summary>
            [EnumMember(Value = "iw")]
            Iw,
            
            /// <summary>
            /// Enum HiIN for "hi_IN"
            /// </summary>
            [EnumMember(Value = "hi_IN")]
            HiIN,
            
            /// <summary>
            /// Enum HuHU for "hu_HU"
            /// </summary>
            [EnumMember(Value = "hu_HU")]
            HuHU,
            
            /// <summary>
            /// Enum Hu for "hu"
            /// </summary>
            [EnumMember(Value = "hu")]
            Hu,
            
            /// <summary>
            /// Enum IsIS for "is_IS"
            /// </summary>
            [EnumMember(Value = "is_IS")]
            IsIS,
            
            /// <summary>
            /// Enum Is for "is"
            /// </summary>
            [EnumMember(Value = "is")]
            Is,
            
            /// <summary>
            /// Enum InID for "in_ID"
            /// </summary>
            [EnumMember(Value = "in_ID")]
            InID,
            
            /// <summary>
            /// Enum In for "in"
            /// </summary>
            [EnumMember(Value = "in")]
            In,
            
            /// <summary>
            /// Enum GaIE for "ga_IE"
            /// </summary>
            [EnumMember(Value = "ga_IE")]
            GaIE,
            
            /// <summary>
            /// Enum Ga for "ga"
            /// </summary>
            [EnumMember(Value = "ga")]
            Ga,
            
            /// <summary>
            /// Enum ItIT for "it_IT"
            /// </summary>
            [EnumMember(Value = "it_IT")]
            ItIT,
            
            /// <summary>
            /// Enum ItCH for "it_CH"
            /// </summary>
            [EnumMember(Value = "it_CH")]
            ItCH,
            
            /// <summary>
            /// Enum It for "it"
            /// </summary>
            [EnumMember(Value = "it")]
            It,
            
            /// <summary>
            /// Enum JaJP for "ja_JP"
            /// </summary>
            [EnumMember(Value = "ja_JP")]
            JaJP,
            
            /// <summary>
            /// Enum JaJPJP for "ja_JP_JP"
            /// </summary>
            [EnumMember(Value = "ja_JP_JP")]
            JaJPJP,
            
            /// <summary>
            /// Enum Ja for "ja"
            /// </summary>
            [EnumMember(Value = "ja")]
            Ja,
            
            /// <summary>
            /// Enum KoKR for "ko_KR"
            /// </summary>
            [EnumMember(Value = "ko_KR")]
            KoKR,
            
            /// <summary>
            /// Enum Ko for "ko"
            /// </summary>
            [EnumMember(Value = "ko")]
            Ko,
            
            /// <summary>
            /// Enum LvLV for "lv_LV"
            /// </summary>
            [EnumMember(Value = "lv_LV")]
            LvLV,
            
            /// <summary>
            /// Enum Lv for "lv"
            /// </summary>
            [EnumMember(Value = "lv")]
            Lv,
            
            /// <summary>
            /// Enum LtLT for "lt_LT"
            /// </summary>
            [EnumMember(Value = "lt_LT")]
            LtLT,
            
            /// <summary>
            /// Enum Lt for "lt"
            /// </summary>
            [EnumMember(Value = "lt")]
            Lt,
            
            /// <summary>
            /// Enum MkMK for "mk_MK"
            /// </summary>
            [EnumMember(Value = "mk_MK")]
            MkMK,
            
            /// <summary>
            /// Enum Mk for "mk"
            /// </summary>
            [EnumMember(Value = "mk")]
            Mk,
            
            /// <summary>
            /// Enum MsMY for "ms_MY"
            /// </summary>
            [EnumMember(Value = "ms_MY")]
            MsMY,
            
            /// <summary>
            /// Enum Ms for "ms"
            /// </summary>
            [EnumMember(Value = "ms")]
            Ms,
            
            /// <summary>
            /// Enum MtMT for "mt_MT"
            /// </summary>
            [EnumMember(Value = "mt_MT")]
            MtMT,
            
            /// <summary>
            /// Enum Mt for "mt"
            /// </summary>
            [EnumMember(Value = "mt")]
            Mt,
            
            /// <summary>
            /// Enum NoNO for "no_NO"
            /// </summary>
            [EnumMember(Value = "no_NO")]
            NoNO,
            
            /// <summary>
            /// Enum NoNONY for "no_NO_NY"
            /// </summary>
            [EnumMember(Value = "no_NO_NY")]
            NoNONY,
            
            /// <summary>
            /// Enum No for "no"
            /// </summary>
            [EnumMember(Value = "no")]
            No,
            
            /// <summary>
            /// Enum PlPL for "pl_PL"
            /// </summary>
            [EnumMember(Value = "pl_PL")]
            PlPL,
            
            /// <summary>
            /// Enum Pl for "pl"
            /// </summary>
            [EnumMember(Value = "pl")]
            Pl,
            
            /// <summary>
            /// Enum PtBR for "pt_BR"
            /// </summary>
            [EnumMember(Value = "pt_BR")]
            PtBR,
            
            /// <summary>
            /// Enum PtPT for "pt_PT"
            /// </summary>
            [EnumMember(Value = "pt_PT")]
            PtPT,
            
            /// <summary>
            /// Enum Pt for "pt"
            /// </summary>
            [EnumMember(Value = "pt")]
            Pt,
            
            /// <summary>
            /// Enum RoRO for "ro_RO"
            /// </summary>
            [EnumMember(Value = "ro_RO")]
            RoRO,
            
            /// <summary>
            /// Enum Ro for "ro"
            /// </summary>
            [EnumMember(Value = "ro")]
            Ro,
            
            /// <summary>
            /// Enum RuRU for "ru_RU"
            /// </summary>
            [EnumMember(Value = "ru_RU")]
            RuRU,
            
            /// <summary>
            /// Enum Ru for "ru"
            /// </summary>
            [EnumMember(Value = "ru")]
            Ru,
            
            /// <summary>
            /// Enum SrBA for "sr_BA"
            /// </summary>
            [EnumMember(Value = "sr_BA")]
            SrBA,
            
            /// <summary>
            /// Enum SrME for "sr_ME"
            /// </summary>
            [EnumMember(Value = "sr_ME")]
            SrME,
            
            /// <summary>
            /// Enum SrCS for "sr_CS"
            /// </summary>
            [EnumMember(Value = "sr_CS")]
            SrCS,
            
            /// <summary>
            /// Enum SrRS for "sr_RS"
            /// </summary>
            [EnumMember(Value = "sr_RS")]
            SrRS,
            
            /// <summary>
            /// Enum Sr for "sr"
            /// </summary>
            [EnumMember(Value = "sr")]
            Sr,
            
            /// <summary>
            /// Enum SkSK for "sk_SK"
            /// </summary>
            [EnumMember(Value = "sk_SK")]
            SkSK,
            
            /// <summary>
            /// Enum Sk for "sk"
            /// </summary>
            [EnumMember(Value = "sk")]
            Sk,
            
            /// <summary>
            /// Enum SlSI for "sl_SI"
            /// </summary>
            [EnumMember(Value = "sl_SI")]
            SlSI,
            
            /// <summary>
            /// Enum Sl for "sl"
            /// </summary>
            [EnumMember(Value = "sl")]
            Sl,
            
            /// <summary>
            /// Enum EsAR for "es_AR"
            /// </summary>
            [EnumMember(Value = "es_AR")]
            EsAR,
            
            /// <summary>
            /// Enum EsBO for "es_BO"
            /// </summary>
            [EnumMember(Value = "es_BO")]
            EsBO,
            
            /// <summary>
            /// Enum EsCL for "es_CL"
            /// </summary>
            [EnumMember(Value = "es_CL")]
            EsCL,
            
            /// <summary>
            /// Enum EsCO for "es_CO"
            /// </summary>
            [EnumMember(Value = "es_CO")]
            EsCO,
            
            /// <summary>
            /// Enum EsCR for "es_CR"
            /// </summary>
            [EnumMember(Value = "es_CR")]
            EsCR,
            
            /// <summary>
            /// Enum EsDO for "es_DO"
            /// </summary>
            [EnumMember(Value = "es_DO")]
            EsDO,
            
            /// <summary>
            /// Enum EsEC for "es_EC"
            /// </summary>
            [EnumMember(Value = "es_EC")]
            EsEC,
            
            /// <summary>
            /// Enum EsSV for "es_SV"
            /// </summary>
            [EnumMember(Value = "es_SV")]
            EsSV,
            
            /// <summary>
            /// Enum EsGT for "es_GT"
            /// </summary>
            [EnumMember(Value = "es_GT")]
            EsGT,
            
            /// <summary>
            /// Enum EsHN for "es_HN"
            /// </summary>
            [EnumMember(Value = "es_HN")]
            EsHN,
            
            /// <summary>
            /// Enum EsMX for "es_MX"
            /// </summary>
            [EnumMember(Value = "es_MX")]
            EsMX,
            
            /// <summary>
            /// Enum EsNI for "es_NI"
            /// </summary>
            [EnumMember(Value = "es_NI")]
            EsNI,
            
            /// <summary>
            /// Enum EsPA for "es_PA"
            /// </summary>
            [EnumMember(Value = "es_PA")]
            EsPA,
            
            /// <summary>
            /// Enum EsPY for "es_PY"
            /// </summary>
            [EnumMember(Value = "es_PY")]
            EsPY,
            
            /// <summary>
            /// Enum EsPE for "es_PE"
            /// </summary>
            [EnumMember(Value = "es_PE")]
            EsPE,
            
            /// <summary>
            /// Enum EsPR for "es_PR"
            /// </summary>
            [EnumMember(Value = "es_PR")]
            EsPR,
            
            /// <summary>
            /// Enum EsES for "es_ES"
            /// </summary>
            [EnumMember(Value = "es_ES")]
            EsES,
            
            /// <summary>
            /// Enum EsUS for "es_US"
            /// </summary>
            [EnumMember(Value = "es_US")]
            EsUS,
            
            /// <summary>
            /// Enum EsUY for "es_UY"
            /// </summary>
            [EnumMember(Value = "es_UY")]
            EsUY,
            
            /// <summary>
            /// Enum EsVE for "es_VE"
            /// </summary>
            [EnumMember(Value = "es_VE")]
            EsVE,
            
            /// <summary>
            /// Enum Es for "es"
            /// </summary>
            [EnumMember(Value = "es")]
            Es,
            
            /// <summary>
            /// Enum SvSE for "sv_SE"
            /// </summary>
            [EnumMember(Value = "sv_SE")]
            SvSE,
            
            /// <summary>
            /// Enum Sv for "sv"
            /// </summary>
            [EnumMember(Value = "sv")]
            Sv,
            
            /// <summary>
            /// Enum ThTH for "th_TH"
            /// </summary>
            [EnumMember(Value = "th_TH")]
            ThTH,
            
            /// <summary>
            /// Enum ThTHTH for "th_TH_TH"
            /// </summary>
            [EnumMember(Value = "th_TH_TH")]
            ThTHTH,
            
            /// <summary>
            /// Enum Th for "th"
            /// </summary>
            [EnumMember(Value = "th")]
            Th,
            
            /// <summary>
            /// Enum TrTR for "tr_TR"
            /// </summary>
            [EnumMember(Value = "tr_TR")]
            TrTR,
            
            /// <summary>
            /// Enum Tr for "tr"
            /// </summary>
            [EnumMember(Value = "tr")]
            Tr,
            
            /// <summary>
            /// Enum UkUA for "uk_UA"
            /// </summary>
            [EnumMember(Value = "uk_UA")]
            UkUA,
            
            /// <summary>
            /// Enum Uk for "uk"
            /// </summary>
            [EnumMember(Value = "uk")]
            Uk,
            
            /// <summary>
            /// Enum ViVN for "vi_VN"
            /// </summary>
            [EnumMember(Value = "vi_VN")]
            ViVN,
            
            /// <summary>
            /// Enum Vi for "vi"
            /// </summary>
            [EnumMember(Value = "vi")]
            Vi
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public LanguageEnum? Language { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Portal" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Portal() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Portal" /> class.
        /// </summary>
        /// <param name="Name">Name (required).</param>
        /// <param name="Logo">Logo.</param>
        /// <param name="Status">Status.</param>
        /// <param name="Language">Language.</param>
        /// <param name="Created">Created.</param>
        /// <param name="Modified">Modified.</param>
        /// <param name="Id">Id.</param>
        /// <param name="TeamId">TeamId.</param>
        /// <param name="DefaultBuilderConfigId">DefaultBuilderConfigId.</param>
        /// <param name="DefaultBuilderConfig">DefaultBuilderConfig.</param>
        /// <param name="Templates">Templates.</param>
        /// <param name="TemplateRels">TemplateRels.</param>
        /// <param name="Members">Members.</param>
        /// <param name="PortalMembers">PortalMembers.</param>
        /// <param name="Team">Team.</param>
        /// <param name="Designs">Designs.</param>
        /// <param name="TemplateFolders">TemplateFolders.</param>
        /// <param name="DesignFolders">DesignFolders.</param>
        /// <param name="ImageFolders">ImageFolders.</param>
        /// <param name="Permission">Permission.</param>
        public Portal(string Name = null, CloudinaryImage Logo = null, StatusEnum? Status = null, LanguageEnum? Language = null, DateTime? Created = null, DateTime? Modified = null, string Id = null, string TeamId = null, string DefaultBuilderConfigId = null, TeamBuilderConfig DefaultBuilderConfig = null, List<Template> Templates = null, List<PortalTemplate> TemplateRels = null, List<TeamMember> Members = null, List<PortalMember> PortalMembers = null, Team Team = null, List<Design> Designs = null, List<PortalTemplateFolder> TemplateFolders = null, List<DesignFolder> DesignFolders = null, List<ImageFolder> ImageFolders = null, PortalPermissionSet Permission = null)
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for Portal and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.Logo = Logo;
            this.Status = Status;
            this.Language = Language;
            this.Created = Created;
            this.Modified = Modified;
            this.Id = Id;
            this.TeamId = TeamId;
            this.DefaultBuilderConfigId = DefaultBuilderConfigId;
            this.DefaultBuilderConfig = DefaultBuilderConfig;
            this.Templates = Templates;
            this.TemplateRels = TemplateRels;
            this.Members = Members;
            this.PortalMembers = PortalMembers;
            this.Team = Team;
            this.Designs = Designs;
            this.TemplateFolders = TemplateFolders;
            this.DesignFolders = DesignFolders;
            this.ImageFolders = ImageFolders;
            this.Permission = Permission;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Logo
        /// </summary>
        [DataMember(Name="logo", EmitDefaultValue=false)]
        public CloudinaryImage Logo { get; set; }
        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }
        /// <summary>
        /// Gets or Sets Modified
        /// </summary>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public DateTime? Modified { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets TeamId
        /// </summary>
        [DataMember(Name="teamId", EmitDefaultValue=false)]
        public string TeamId { get; set; }
        /// <summary>
        /// Gets or Sets DefaultBuilderConfigId
        /// </summary>
        [DataMember(Name="defaultBuilderConfigId", EmitDefaultValue=false)]
        public string DefaultBuilderConfigId { get; set; }
        /// <summary>
        /// Gets or Sets DefaultBuilderConfig
        /// </summary>
        [DataMember(Name="defaultBuilderConfig", EmitDefaultValue=false)]
        public TeamBuilderConfig DefaultBuilderConfig { get; set; }
        /// <summary>
        /// Gets or Sets Templates
        /// </summary>
        [DataMember(Name="templates", EmitDefaultValue=false)]
        public List<Template> Templates { get; set; }
        /// <summary>
        /// Gets or Sets TemplateRels
        /// </summary>
        [DataMember(Name="templateRels", EmitDefaultValue=false)]
        public List<PortalTemplate> TemplateRels { get; set; }
        /// <summary>
        /// Gets or Sets Members
        /// </summary>
        [DataMember(Name="members", EmitDefaultValue=false)]
        public List<TeamMember> Members { get; set; }
        /// <summary>
        /// Gets or Sets PortalMembers
        /// </summary>
        [DataMember(Name="portalMembers", EmitDefaultValue=false)]
        public List<PortalMember> PortalMembers { get; set; }
        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [DataMember(Name="team", EmitDefaultValue=false)]
        public Team Team { get; set; }
        /// <summary>
        /// Gets or Sets Designs
        /// </summary>
        [DataMember(Name="designs", EmitDefaultValue=false)]
        public List<Design> Designs { get; set; }
        /// <summary>
        /// Gets or Sets TemplateFolders
        /// </summary>
        [DataMember(Name="templateFolders", EmitDefaultValue=false)]
        public List<PortalTemplateFolder> TemplateFolders { get; set; }
        /// <summary>
        /// Gets or Sets DesignFolders
        /// </summary>
        [DataMember(Name="designFolders", EmitDefaultValue=false)]
        public List<DesignFolder> DesignFolders { get; set; }
        /// <summary>
        /// Gets or Sets ImageFolders
        /// </summary>
        [DataMember(Name="imageFolders", EmitDefaultValue=false)]
        public List<ImageFolder> ImageFolders { get; set; }
        /// <summary>
        /// Gets or Sets Permission
        /// </summary>
        [DataMember(Name="permission", EmitDefaultValue=false)]
        public PortalPermissionSet Permission { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Portal {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  DefaultBuilderConfigId: ").Append(DefaultBuilderConfigId).Append("\n");
            sb.Append("  DefaultBuilderConfig: ").Append(DefaultBuilderConfig).Append("\n");
            sb.Append("  Templates: ").Append(Templates).Append("\n");
            sb.Append("  TemplateRels: ").Append(TemplateRels).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("  PortalMembers: ").Append(PortalMembers).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  Designs: ").Append(Designs).Append("\n");
            sb.Append("  TemplateFolders: ").Append(TemplateFolders).Append("\n");
            sb.Append("  DesignFolders: ").Append(DesignFolders).Append("\n");
            sb.Append("  ImageFolders: ").Append(ImageFolders).Append("\n");
            sb.Append("  Permission: ").Append(Permission).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Portal);
        }

        /// <summary>
        /// Returns true if Portal instances are equal
        /// </summary>
        /// <param name="other">Instance of Portal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Portal other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Logo == other.Logo ||
                    this.Logo != null &&
                    this.Logo.Equals(other.Logo)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Language == other.Language ||
                    this.Language != null &&
                    this.Language.Equals(other.Language)
                ) && 
                (
                    this.Created == other.Created ||
                    this.Created != null &&
                    this.Created.Equals(other.Created)
                ) && 
                (
                    this.Modified == other.Modified ||
                    this.Modified != null &&
                    this.Modified.Equals(other.Modified)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.TeamId == other.TeamId ||
                    this.TeamId != null &&
                    this.TeamId.Equals(other.TeamId)
                ) && 
                (
                    this.DefaultBuilderConfigId == other.DefaultBuilderConfigId ||
                    this.DefaultBuilderConfigId != null &&
                    this.DefaultBuilderConfigId.Equals(other.DefaultBuilderConfigId)
                ) && 
                (
                    this.DefaultBuilderConfig == other.DefaultBuilderConfig ||
                    this.DefaultBuilderConfig != null &&
                    this.DefaultBuilderConfig.Equals(other.DefaultBuilderConfig)
                ) && 
                (
                    this.Templates == other.Templates ||
                    this.Templates != null &&
                    this.Templates.SequenceEqual(other.Templates)
                ) && 
                (
                    this.TemplateRels == other.TemplateRels ||
                    this.TemplateRels != null &&
                    this.TemplateRels.SequenceEqual(other.TemplateRels)
                ) && 
                (
                    this.Members == other.Members ||
                    this.Members != null &&
                    this.Members.SequenceEqual(other.Members)
                ) && 
                (
                    this.PortalMembers == other.PortalMembers ||
                    this.PortalMembers != null &&
                    this.PortalMembers.SequenceEqual(other.PortalMembers)
                ) && 
                (
                    this.Team == other.Team ||
                    this.Team != null &&
                    this.Team.Equals(other.Team)
                ) && 
                (
                    this.Designs == other.Designs ||
                    this.Designs != null &&
                    this.Designs.SequenceEqual(other.Designs)
                ) && 
                (
                    this.TemplateFolders == other.TemplateFolders ||
                    this.TemplateFolders != null &&
                    this.TemplateFolders.SequenceEqual(other.TemplateFolders)
                ) && 
                (
                    this.DesignFolders == other.DesignFolders ||
                    this.DesignFolders != null &&
                    this.DesignFolders.SequenceEqual(other.DesignFolders)
                ) && 
                (
                    this.ImageFolders == other.ImageFolders ||
                    this.ImageFolders != null &&
                    this.ImageFolders.SequenceEqual(other.ImageFolders)
                ) && 
                (
                    this.Permission == other.Permission ||
                    this.Permission != null &&
                    this.Permission.Equals(other.Permission)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Logo != null)
                    hash = hash * 59 + this.Logo.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Language != null)
                    hash = hash * 59 + this.Language.GetHashCode();
                if (this.Created != null)
                    hash = hash * 59 + this.Created.GetHashCode();
                if (this.Modified != null)
                    hash = hash * 59 + this.Modified.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.TeamId != null)
                    hash = hash * 59 + this.TeamId.GetHashCode();
                if (this.DefaultBuilderConfigId != null)
                    hash = hash * 59 + this.DefaultBuilderConfigId.GetHashCode();
                if (this.DefaultBuilderConfig != null)
                    hash = hash * 59 + this.DefaultBuilderConfig.GetHashCode();
                if (this.Templates != null)
                    hash = hash * 59 + this.Templates.GetHashCode();
                if (this.TemplateRels != null)
                    hash = hash * 59 + this.TemplateRels.GetHashCode();
                if (this.Members != null)
                    hash = hash * 59 + this.Members.GetHashCode();
                if (this.PortalMembers != null)
                    hash = hash * 59 + this.PortalMembers.GetHashCode();
                if (this.Team != null)
                    hash = hash * 59 + this.Team.GetHashCode();
                if (this.Designs != null)
                    hash = hash * 59 + this.Designs.GetHashCode();
                if (this.TemplateFolders != null)
                    hash = hash * 59 + this.TemplateFolders.GetHashCode();
                if (this.DesignFolders != null)
                    hash = hash * 59 + this.DesignFolders.GetHashCode();
                if (this.ImageFolders != null)
                    hash = hash * 59 + this.ImageFolders.GetHashCode();
                if (this.Permission != null)
                    hash = hash * 59 + this.Permission.GetHashCode();
                return hash;
            }
        }
    }

}
