/* 
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.8-alpha.13
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace TweakApi.Model
{
    /// <summary>
    /// BillingSourceReceiver
    /// </summary>
    [DataContract]
    public partial class BillingSourceReceiver :  IEquatable<BillingSourceReceiver>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BillingSourceReceiver" /> class.
        /// </summary>
        /// <param name="Address">Address.</param>
        /// <param name="AmountCharged">AmountCharged.</param>
        /// <param name="AmountReceived">AmountReceived.</param>
        /// <param name="AmountReturned">AmountReturned.</param>
        /// <param name="RefundAttributesMethod">RefundAttributesMethod.</param>
        /// <param name="RefundAttributesStatus">RefundAttributesStatus.</param>
        /// <param name="Id">Id.</param>
        public BillingSourceReceiver(string Address = null, double? AmountCharged = null, double? AmountReceived = null, double? AmountReturned = null, string RefundAttributesMethod = null, string RefundAttributesStatus = null, string Id = null)
        {
            this.Address = Address;
            this.AmountCharged = AmountCharged;
            this.AmountReceived = AmountReceived;
            this.AmountReturned = AmountReturned;
            this.RefundAttributesMethod = RefundAttributesMethod;
            this.RefundAttributesStatus = RefundAttributesStatus;
            this.Id = Id;
        }
        
        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }
        /// <summary>
        /// Gets or Sets AmountCharged
        /// </summary>
        [DataMember(Name="amountCharged", EmitDefaultValue=false)]
        public double? AmountCharged { get; set; }
        /// <summary>
        /// Gets or Sets AmountReceived
        /// </summary>
        [DataMember(Name="amountReceived", EmitDefaultValue=false)]
        public double? AmountReceived { get; set; }
        /// <summary>
        /// Gets or Sets AmountReturned
        /// </summary>
        [DataMember(Name="amountReturned", EmitDefaultValue=false)]
        public double? AmountReturned { get; set; }
        /// <summary>
        /// Gets or Sets RefundAttributesMethod
        /// </summary>
        [DataMember(Name="refundAttributesMethod", EmitDefaultValue=false)]
        public string RefundAttributesMethod { get; set; }
        /// <summary>
        /// Gets or Sets RefundAttributesStatus
        /// </summary>
        [DataMember(Name="refundAttributesStatus", EmitDefaultValue=false)]
        public string RefundAttributesStatus { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillingSourceReceiver {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  AmountCharged: ").Append(AmountCharged).Append("\n");
            sb.Append("  AmountReceived: ").Append(AmountReceived).Append("\n");
            sb.Append("  AmountReturned: ").Append(AmountReturned).Append("\n");
            sb.Append("  RefundAttributesMethod: ").Append(RefundAttributesMethod).Append("\n");
            sb.Append("  RefundAttributesStatus: ").Append(RefundAttributesStatus).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BillingSourceReceiver);
        }

        /// <summary>
        /// Returns true if BillingSourceReceiver instances are equal
        /// </summary>
        /// <param name="other">Instance of BillingSourceReceiver to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillingSourceReceiver other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Address == other.Address ||
                    this.Address != null &&
                    this.Address.Equals(other.Address)
                ) && 
                (
                    this.AmountCharged == other.AmountCharged ||
                    this.AmountCharged != null &&
                    this.AmountCharged.Equals(other.AmountCharged)
                ) && 
                (
                    this.AmountReceived == other.AmountReceived ||
                    this.AmountReceived != null &&
                    this.AmountReceived.Equals(other.AmountReceived)
                ) && 
                (
                    this.AmountReturned == other.AmountReturned ||
                    this.AmountReturned != null &&
                    this.AmountReturned.Equals(other.AmountReturned)
                ) && 
                (
                    this.RefundAttributesMethod == other.RefundAttributesMethod ||
                    this.RefundAttributesMethod != null &&
                    this.RefundAttributesMethod.Equals(other.RefundAttributesMethod)
                ) && 
                (
                    this.RefundAttributesStatus == other.RefundAttributesStatus ||
                    this.RefundAttributesStatus != null &&
                    this.RefundAttributesStatus.Equals(other.RefundAttributesStatus)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Address != null)
                    hash = hash * 59 + this.Address.GetHashCode();
                if (this.AmountCharged != null)
                    hash = hash * 59 + this.AmountCharged.GetHashCode();
                if (this.AmountReceived != null)
                    hash = hash * 59 + this.AmountReceived.GetHashCode();
                if (this.AmountReturned != null)
                    hash = hash * 59 + this.AmountReturned.GetHashCode();
                if (this.RefundAttributesMethod != null)
                    hash = hash * 59 + this.RefundAttributesMethod.GetHashCode();
                if (this.RefundAttributesStatus != null)
                    hash = hash * 59 + this.RefundAttributesStatus.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                return hash;
            }
        }
    }

}
