/* 
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.8-alpha.13
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace TweakApi.Model
{
    /// <summary>
    /// DynamicData
    /// </summary>
    [DataContract]
    public partial class DynamicData :  IEquatable<DynamicData>
    {
        /// <summary>
        /// Gets or Sets DataSource
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DataSourceEnum
        {
            
            /// <summary>
            /// Enum Tweakdb for "tweak-db"
            /// </summary>
            [EnumMember(Value = "tweak-db")]
            Tweakdb,
            
            /// <summary>
            /// Enum Soap for "soap"
            /// </summary>
            [EnumMember(Value = "soap")]
            Soap,
            
            /// <summary>
            /// Enum Rest for "rest"
            /// </summary>
            [EnumMember(Value = "rest")]
            Rest,
            
            /// <summary>
            /// Enum Mysql for "mysql"
            /// </summary>
            [EnumMember(Value = "mysql")]
            Mysql,
            
            /// <summary>
            /// Enum Mssql for "mssql"
            /// </summary>
            [EnumMember(Value = "mssql")]
            Mssql,
            
            /// <summary>
            /// Enum Postgresql for "postgresql"
            /// </summary>
            [EnumMember(Value = "postgresql")]
            Postgresql,
            
            /// <summary>
            /// Enum Mongo for "mongo"
            /// </summary>
            [EnumMember(Value = "mongo")]
            Mongo,
            
            /// <summary>
            /// Enum Oracle for "oracle"
            /// </summary>
            [EnumMember(Value = "oracle")]
            Oracle
        }

        /// <summary>
        /// Gets or Sets DataSource
        /// </summary>
        [DataMember(Name="dataSource", EmitDefaultValue=false)]
        public DataSourceEnum? DataSource { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DynamicData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DynamicData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DynamicData" /> class.
        /// </summary>
        /// <param name="Name">Name (required).</param>
        /// <param name="PropertiesOrder">PropertiesOrder.</param>
        /// <param name="Properties">Properties.</param>
        /// <param name="Relations">Relations.</param>
        /// <param name="Validations">Validations.</param>
        /// <param name="DataSource">DataSource.</param>
        /// <param name="OperationSoap">OperationSoap.</param>
        /// <param name="Created">Created.</param>
        /// <param name="Modified">Modified.</param>
        /// <param name="RecordCount">RecordCount (default to 0.0).</param>
        /// <param name="Id">Id.</param>
        /// <param name="DataSourceSoapId">DataSourceSoapId.</param>
        /// <param name="DataSourceRestId">DataSourceRestId.</param>
        /// <param name="DataSourceMySqlId">DataSourceMySqlId.</param>
        /// <param name="DataSourceMsSqlId">DataSourceMsSqlId.</param>
        /// <param name="DataSourcePostgreSqlId">DataSourcePostgreSqlId.</param>
        /// <param name="DataSourceMongoId">DataSourceMongoId.</param>
        /// <param name="DataSourceOracleId">DataSourceOracleId.</param>
        /// <param name="TeamId">TeamId.</param>
        /// <param name="Team">Team.</param>
        /// <param name="Designs">Designs.</param>
        /// <param name="DataSourceSoap">DataSourceSoap.</param>
        /// <param name="DataSourceRest">DataSourceRest.</param>
        /// <param name="DataSourceMySql">DataSourceMySql.</param>
        /// <param name="DataSourceMsSql">DataSourceMsSql.</param>
        /// <param name="DataSourcePostgreSql">DataSourcePostgreSql.</param>
        /// <param name="DataSourceMongo">DataSourceMongo.</param>
        /// <param name="DataSourceOracle">DataSourceOracle.</param>
        public DynamicData(string Name = null, List<string> PropertiesOrder = null, Object Properties = null, Object Relations = null, Object Validations = null, DataSourceEnum? DataSource = null, DynamicDataOperationSoap OperationSoap = null, DateTime? Created = null, DateTime? Modified = null, double? RecordCount = null, string Id = null, string DataSourceSoapId = null, string DataSourceRestId = null, string DataSourceMySqlId = null, string DataSourceMsSqlId = null, string DataSourcePostgreSqlId = null, string DataSourceMongoId = null, string DataSourceOracleId = null, string TeamId = null, Team Team = null, List<Design> Designs = null, DataSourceSoap DataSourceSoap = null, DataSourceRest DataSourceRest = null, DataSourceMySql DataSourceMySql = null, DataSourceMsSql DataSourceMsSql = null, DataSourcePostgreSql DataSourcePostgreSql = null, DataSourceMongo DataSourceMongo = null, DataSourceOracle DataSourceOracle = null)
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for DynamicData and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.PropertiesOrder = PropertiesOrder;
            this.Properties = Properties;
            this.Relations = Relations;
            this.Validations = Validations;
            this.DataSource = DataSource;
            this.OperationSoap = OperationSoap;
            this.Created = Created;
            this.Modified = Modified;
            // use default value if no "RecordCount" provided
            if (RecordCount == null)
            {
                this.RecordCount = 0.0;
            }
            else
            {
                this.RecordCount = RecordCount;
            }
            this.Id = Id;
            this.DataSourceSoapId = DataSourceSoapId;
            this.DataSourceRestId = DataSourceRestId;
            this.DataSourceMySqlId = DataSourceMySqlId;
            this.DataSourceMsSqlId = DataSourceMsSqlId;
            this.DataSourcePostgreSqlId = DataSourcePostgreSqlId;
            this.DataSourceMongoId = DataSourceMongoId;
            this.DataSourceOracleId = DataSourceOracleId;
            this.TeamId = TeamId;
            this.Team = Team;
            this.Designs = Designs;
            this.DataSourceSoap = DataSourceSoap;
            this.DataSourceRest = DataSourceRest;
            this.DataSourceMySql = DataSourceMySql;
            this.DataSourceMsSql = DataSourceMsSql;
            this.DataSourcePostgreSql = DataSourcePostgreSql;
            this.DataSourceMongo = DataSourceMongo;
            this.DataSourceOracle = DataSourceOracle;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets PropertiesOrder
        /// </summary>
        [DataMember(Name="propertiesOrder", EmitDefaultValue=false)]
        public List<string> PropertiesOrder { get; set; }
        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public Object Properties { get; set; }
        /// <summary>
        /// Gets or Sets Relations
        /// </summary>
        [DataMember(Name="relations", EmitDefaultValue=false)]
        public Object Relations { get; set; }
        /// <summary>
        /// Gets or Sets Validations
        /// </summary>
        [DataMember(Name="validations", EmitDefaultValue=false)]
        public Object Validations { get; set; }
        /// <summary>
        /// Gets or Sets OperationSoap
        /// </summary>
        [DataMember(Name="operationSoap", EmitDefaultValue=false)]
        public DynamicDataOperationSoap OperationSoap { get; set; }
        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }
        /// <summary>
        /// Gets or Sets Modified
        /// </summary>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public DateTime? Modified { get; set; }
        /// <summary>
        /// Gets or Sets RecordCount
        /// </summary>
        [DataMember(Name="recordCount", EmitDefaultValue=false)]
        public double? RecordCount { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets DataSourceSoapId
        /// </summary>
        [DataMember(Name="dataSourceSoapId", EmitDefaultValue=false)]
        public string DataSourceSoapId { get; set; }
        /// <summary>
        /// Gets or Sets DataSourceRestId
        /// </summary>
        [DataMember(Name="dataSourceRestId", EmitDefaultValue=false)]
        public string DataSourceRestId { get; set; }
        /// <summary>
        /// Gets or Sets DataSourceMySqlId
        /// </summary>
        [DataMember(Name="dataSourceMySqlId", EmitDefaultValue=false)]
        public string DataSourceMySqlId { get; set; }
        /// <summary>
        /// Gets or Sets DataSourceMsSqlId
        /// </summary>
        [DataMember(Name="dataSourceMsSqlId", EmitDefaultValue=false)]
        public string DataSourceMsSqlId { get; set; }
        /// <summary>
        /// Gets or Sets DataSourcePostgreSqlId
        /// </summary>
        [DataMember(Name="dataSourcePostgreSqlId", EmitDefaultValue=false)]
        public string DataSourcePostgreSqlId { get; set; }
        /// <summary>
        /// Gets or Sets DataSourceMongoId
        /// </summary>
        [DataMember(Name="dataSourceMongoId", EmitDefaultValue=false)]
        public string DataSourceMongoId { get; set; }
        /// <summary>
        /// Gets or Sets DataSourceOracleId
        /// </summary>
        [DataMember(Name="dataSourceOracleId", EmitDefaultValue=false)]
        public string DataSourceOracleId { get; set; }
        /// <summary>
        /// Gets or Sets TeamId
        /// </summary>
        [DataMember(Name="teamId", EmitDefaultValue=false)]
        public string TeamId { get; set; }
        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [DataMember(Name="team", EmitDefaultValue=false)]
        public Team Team { get; set; }
        /// <summary>
        /// Gets or Sets Designs
        /// </summary>
        [DataMember(Name="designs", EmitDefaultValue=false)]
        public List<Design> Designs { get; set; }
        /// <summary>
        /// Gets or Sets DataSourceSoap
        /// </summary>
        [DataMember(Name="dataSourceSoap", EmitDefaultValue=false)]
        public DataSourceSoap DataSourceSoap { get; set; }
        /// <summary>
        /// Gets or Sets DataSourceRest
        /// </summary>
        [DataMember(Name="dataSourceRest", EmitDefaultValue=false)]
        public DataSourceRest DataSourceRest { get; set; }
        /// <summary>
        /// Gets or Sets DataSourceMySql
        /// </summary>
        [DataMember(Name="dataSourceMySql", EmitDefaultValue=false)]
        public DataSourceMySql DataSourceMySql { get; set; }
        /// <summary>
        /// Gets or Sets DataSourceMsSql
        /// </summary>
        [DataMember(Name="dataSourceMsSql", EmitDefaultValue=false)]
        public DataSourceMsSql DataSourceMsSql { get; set; }
        /// <summary>
        /// Gets or Sets DataSourcePostgreSql
        /// </summary>
        [DataMember(Name="dataSourcePostgreSql", EmitDefaultValue=false)]
        public DataSourcePostgreSql DataSourcePostgreSql { get; set; }
        /// <summary>
        /// Gets or Sets DataSourceMongo
        /// </summary>
        [DataMember(Name="dataSourceMongo", EmitDefaultValue=false)]
        public DataSourceMongo DataSourceMongo { get; set; }
        /// <summary>
        /// Gets or Sets DataSourceOracle
        /// </summary>
        [DataMember(Name="dataSourceOracle", EmitDefaultValue=false)]
        public DataSourceOracle DataSourceOracle { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DynamicData {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PropertiesOrder: ").Append(PropertiesOrder).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Relations: ").Append(Relations).Append("\n");
            sb.Append("  Validations: ").Append(Validations).Append("\n");
            sb.Append("  DataSource: ").Append(DataSource).Append("\n");
            sb.Append("  OperationSoap: ").Append(OperationSoap).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  RecordCount: ").Append(RecordCount).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DataSourceSoapId: ").Append(DataSourceSoapId).Append("\n");
            sb.Append("  DataSourceRestId: ").Append(DataSourceRestId).Append("\n");
            sb.Append("  DataSourceMySqlId: ").Append(DataSourceMySqlId).Append("\n");
            sb.Append("  DataSourceMsSqlId: ").Append(DataSourceMsSqlId).Append("\n");
            sb.Append("  DataSourcePostgreSqlId: ").Append(DataSourcePostgreSqlId).Append("\n");
            sb.Append("  DataSourceMongoId: ").Append(DataSourceMongoId).Append("\n");
            sb.Append("  DataSourceOracleId: ").Append(DataSourceOracleId).Append("\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  Designs: ").Append(Designs).Append("\n");
            sb.Append("  DataSourceSoap: ").Append(DataSourceSoap).Append("\n");
            sb.Append("  DataSourceRest: ").Append(DataSourceRest).Append("\n");
            sb.Append("  DataSourceMySql: ").Append(DataSourceMySql).Append("\n");
            sb.Append("  DataSourceMsSql: ").Append(DataSourceMsSql).Append("\n");
            sb.Append("  DataSourcePostgreSql: ").Append(DataSourcePostgreSql).Append("\n");
            sb.Append("  DataSourceMongo: ").Append(DataSourceMongo).Append("\n");
            sb.Append("  DataSourceOracle: ").Append(DataSourceOracle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DynamicData);
        }

        /// <summary>
        /// Returns true if DynamicData instances are equal
        /// </summary>
        /// <param name="other">Instance of DynamicData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DynamicData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.PropertiesOrder == other.PropertiesOrder ||
                    this.PropertiesOrder != null &&
                    this.PropertiesOrder.SequenceEqual(other.PropertiesOrder)
                ) && 
                (
                    this.Properties == other.Properties ||
                    this.Properties != null &&
                    this.Properties.Equals(other.Properties)
                ) && 
                (
                    this.Relations == other.Relations ||
                    this.Relations != null &&
                    this.Relations.Equals(other.Relations)
                ) && 
                (
                    this.Validations == other.Validations ||
                    this.Validations != null &&
                    this.Validations.Equals(other.Validations)
                ) && 
                (
                    this.DataSource == other.DataSource ||
                    this.DataSource != null &&
                    this.DataSource.Equals(other.DataSource)
                ) && 
                (
                    this.OperationSoap == other.OperationSoap ||
                    this.OperationSoap != null &&
                    this.OperationSoap.Equals(other.OperationSoap)
                ) && 
                (
                    this.Created == other.Created ||
                    this.Created != null &&
                    this.Created.Equals(other.Created)
                ) && 
                (
                    this.Modified == other.Modified ||
                    this.Modified != null &&
                    this.Modified.Equals(other.Modified)
                ) && 
                (
                    this.RecordCount == other.RecordCount ||
                    this.RecordCount != null &&
                    this.RecordCount.Equals(other.RecordCount)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.DataSourceSoapId == other.DataSourceSoapId ||
                    this.DataSourceSoapId != null &&
                    this.DataSourceSoapId.Equals(other.DataSourceSoapId)
                ) && 
                (
                    this.DataSourceRestId == other.DataSourceRestId ||
                    this.DataSourceRestId != null &&
                    this.DataSourceRestId.Equals(other.DataSourceRestId)
                ) && 
                (
                    this.DataSourceMySqlId == other.DataSourceMySqlId ||
                    this.DataSourceMySqlId != null &&
                    this.DataSourceMySqlId.Equals(other.DataSourceMySqlId)
                ) && 
                (
                    this.DataSourceMsSqlId == other.DataSourceMsSqlId ||
                    this.DataSourceMsSqlId != null &&
                    this.DataSourceMsSqlId.Equals(other.DataSourceMsSqlId)
                ) && 
                (
                    this.DataSourcePostgreSqlId == other.DataSourcePostgreSqlId ||
                    this.DataSourcePostgreSqlId != null &&
                    this.DataSourcePostgreSqlId.Equals(other.DataSourcePostgreSqlId)
                ) && 
                (
                    this.DataSourceMongoId == other.DataSourceMongoId ||
                    this.DataSourceMongoId != null &&
                    this.DataSourceMongoId.Equals(other.DataSourceMongoId)
                ) && 
                (
                    this.DataSourceOracleId == other.DataSourceOracleId ||
                    this.DataSourceOracleId != null &&
                    this.DataSourceOracleId.Equals(other.DataSourceOracleId)
                ) && 
                (
                    this.TeamId == other.TeamId ||
                    this.TeamId != null &&
                    this.TeamId.Equals(other.TeamId)
                ) && 
                (
                    this.Team == other.Team ||
                    this.Team != null &&
                    this.Team.Equals(other.Team)
                ) && 
                (
                    this.Designs == other.Designs ||
                    this.Designs != null &&
                    this.Designs.SequenceEqual(other.Designs)
                ) && 
                (
                    this.DataSourceSoap == other.DataSourceSoap ||
                    this.DataSourceSoap != null &&
                    this.DataSourceSoap.Equals(other.DataSourceSoap)
                ) && 
                (
                    this.DataSourceRest == other.DataSourceRest ||
                    this.DataSourceRest != null &&
                    this.DataSourceRest.Equals(other.DataSourceRest)
                ) && 
                (
                    this.DataSourceMySql == other.DataSourceMySql ||
                    this.DataSourceMySql != null &&
                    this.DataSourceMySql.Equals(other.DataSourceMySql)
                ) && 
                (
                    this.DataSourceMsSql == other.DataSourceMsSql ||
                    this.DataSourceMsSql != null &&
                    this.DataSourceMsSql.Equals(other.DataSourceMsSql)
                ) && 
                (
                    this.DataSourcePostgreSql == other.DataSourcePostgreSql ||
                    this.DataSourcePostgreSql != null &&
                    this.DataSourcePostgreSql.Equals(other.DataSourcePostgreSql)
                ) && 
                (
                    this.DataSourceMongo == other.DataSourceMongo ||
                    this.DataSourceMongo != null &&
                    this.DataSourceMongo.Equals(other.DataSourceMongo)
                ) && 
                (
                    this.DataSourceOracle == other.DataSourceOracle ||
                    this.DataSourceOracle != null &&
                    this.DataSourceOracle.Equals(other.DataSourceOracle)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.PropertiesOrder != null)
                    hash = hash * 59 + this.PropertiesOrder.GetHashCode();
                if (this.Properties != null)
                    hash = hash * 59 + this.Properties.GetHashCode();
                if (this.Relations != null)
                    hash = hash * 59 + this.Relations.GetHashCode();
                if (this.Validations != null)
                    hash = hash * 59 + this.Validations.GetHashCode();
                if (this.DataSource != null)
                    hash = hash * 59 + this.DataSource.GetHashCode();
                if (this.OperationSoap != null)
                    hash = hash * 59 + this.OperationSoap.GetHashCode();
                if (this.Created != null)
                    hash = hash * 59 + this.Created.GetHashCode();
                if (this.Modified != null)
                    hash = hash * 59 + this.Modified.GetHashCode();
                if (this.RecordCount != null)
                    hash = hash * 59 + this.RecordCount.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.DataSourceSoapId != null)
                    hash = hash * 59 + this.DataSourceSoapId.GetHashCode();
                if (this.DataSourceRestId != null)
                    hash = hash * 59 + this.DataSourceRestId.GetHashCode();
                if (this.DataSourceMySqlId != null)
                    hash = hash * 59 + this.DataSourceMySqlId.GetHashCode();
                if (this.DataSourceMsSqlId != null)
                    hash = hash * 59 + this.DataSourceMsSqlId.GetHashCode();
                if (this.DataSourcePostgreSqlId != null)
                    hash = hash * 59 + this.DataSourcePostgreSqlId.GetHashCode();
                if (this.DataSourceMongoId != null)
                    hash = hash * 59 + this.DataSourceMongoId.GetHashCode();
                if (this.DataSourceOracleId != null)
                    hash = hash * 59 + this.DataSourceOracleId.GetHashCode();
                if (this.TeamId != null)
                    hash = hash * 59 + this.TeamId.GetHashCode();
                if (this.Team != null)
                    hash = hash * 59 + this.Team.GetHashCode();
                if (this.Designs != null)
                    hash = hash * 59 + this.Designs.GetHashCode();
                if (this.DataSourceSoap != null)
                    hash = hash * 59 + this.DataSourceSoap.GetHashCode();
                if (this.DataSourceRest != null)
                    hash = hash * 59 + this.DataSourceRest.GetHashCode();
                if (this.DataSourceMySql != null)
                    hash = hash * 59 + this.DataSourceMySql.GetHashCode();
                if (this.DataSourceMsSql != null)
                    hash = hash * 59 + this.DataSourceMsSql.GetHashCode();
                if (this.DataSourcePostgreSql != null)
                    hash = hash * 59 + this.DataSourcePostgreSql.GetHashCode();
                if (this.DataSourceMongo != null)
                    hash = hash * 59 + this.DataSourceMongo.GetHashCode();
                if (this.DataSourceOracle != null)
                    hash = hash * 59 + this.DataSourceOracle.GetHashCode();
                return hash;
            }
        }
    }

}
