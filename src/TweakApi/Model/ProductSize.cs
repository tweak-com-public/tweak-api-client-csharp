/* 
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.7-alpha.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace TweakApi.Model
{
    /// <summary>
    /// ProductSize
    /// </summary>
    [DataContract]
    public partial class ProductSize :  IEquatable<ProductSize>
    {
        /// <summary>
        /// Gets or Sets FoldingType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FoldingTypeEnum
        {
            
            /// <summary>
            /// Enum None for "none"
            /// </summary>
            [EnumMember(Value = "none")]
            None,
            
            /// <summary>
            /// Enum Accordianleft for "accordian-left"
            /// </summary>
            [EnumMember(Value = "accordian-left")]
            Accordianleft,
            
            /// <summary>
            /// Enum Accordianright for "accordian-right"
            /// </summary>
            [EnumMember(Value = "accordian-right")]
            Accordianright,
            
            /// <summary>
            /// Enum Accordion for "accordion"
            /// </summary>
            [EnumMember(Value = "accordion")]
            Accordion,
            
            /// <summary>
            /// Enum Letterleft for "letter-left"
            /// </summary>
            [EnumMember(Value = "letter-left")]
            Letterleft,
            
            /// <summary>
            /// Enum Letterright for "letter-right"
            /// </summary>
            [EnumMember(Value = "letter-right")]
            Letterright,
            
            /// <summary>
            /// Enum Rollover for "rollover"
            /// </summary>
            [EnumMember(Value = "rollover")]
            Rollover
        }

        /// <summary>
        /// Gets or Sets FoldingMethod
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FoldingMethodEnum
        {
            
            /// <summary>
            /// Enum None for "none"
            /// </summary>
            [EnumMember(Value = "none")]
            None,
            
            /// <summary>
            /// Enum Fold for "fold"
            /// </summary>
            [EnumMember(Value = "fold")]
            Fold,
            
            /// <summary>
            /// Enum Crease for "crease"
            /// </summary>
            [EnumMember(Value = "crease")]
            Crease,
            
            /// <summary>
            /// Enum Prefolded for "prefolded"
            /// </summary>
            [EnumMember(Value = "prefolded")]
            Prefolded
        }

        /// <summary>
        /// Gets or Sets BindingType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BindingTypeEnum
        {
            
            /// <summary>
            /// Enum None for "none"
            /// </summary>
            [EnumMember(Value = "none")]
            None,
            
            /// <summary>
            /// Enum Saddlestitched for "saddle-stitched"
            /// </summary>
            [EnumMember(Value = "saddle-stitched")]
            Saddlestitched,
            
            /// <summary>
            /// Enum Perfect for "perfect"
            /// </summary>
            [EnumMember(Value = "perfect")]
            Perfect,
            
            /// <summary>
            /// Enum Sectionsewn for "section-sewn"
            /// </summary>
            [EnumMember(Value = "section-sewn")]
            Sectionsewn,
            
            /// <summary>
            /// Enum Wiro for "wiro"
            /// </summary>
            [EnumMember(Value = "wiro")]
            Wiro,
            
            /// <summary>
            /// Enum Casedinwiro for "cased-in-wiro"
            /// </summary>
            [EnumMember(Value = "cased-in-wiro")]
            Casedinwiro,
            
            /// <summary>
            /// Enum Pamphletstitched for "pamphlet-stitched"
            /// </summary>
            [EnumMember(Value = "pamphlet-stitched")]
            Pamphletstitched,
            
            /// <summary>
            /// Enum Coptic for "coptic"
            /// </summary>
            [EnumMember(Value = "coptic")]
            Coptic,
            
            /// <summary>
            /// Enum Japanese for "japanese"
            /// </summary>
            [EnumMember(Value = "japanese")]
            Japanese,
            
            /// <summary>
            /// Enum Screwpost for "screw-post"
            /// </summary>
            [EnumMember(Value = "screw-post")]
            Screwpost
        }

        /// <summary>
        /// Gets or Sets PrintProfile
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PrintProfileEnum
        {
            
            /// <summary>
            /// Enum PDFX1A for "PDFX1A"
            /// </summary>
            [EnumMember(Value = "PDFX1A")]
            PDFX1A,
            
            /// <summary>
            /// Enum PDFX3A for "PDFX3A"
            /// </summary>
            [EnumMember(Value = "PDFX3A")]
            PDFX3A
        }

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UnitEnum
        {
            
            /// <summary>
            /// Enum Mm for "mm"
            /// </summary>
            [EnumMember(Value = "mm")]
            Mm,
            
            /// <summary>
            /// Enum Inch for "inch"
            /// </summary>
            [EnumMember(Value = "inch")]
            Inch
        }

        /// <summary>
        /// Gets or Sets Shape
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShapeEnum
        {
            
            /// <summary>
            /// Enum Rect for "rect"
            /// </summary>
            [EnumMember(Value = "rect")]
            Rect,
            
            /// <summary>
            /// Enum Square for "square"
            /// </summary>
            [EnumMember(Value = "square")]
            Square,
            
            /// <summary>
            /// Enum Rectroudedcorners for "rect-rouded-corners"
            /// </summary>
            [EnumMember(Value = "rect-rouded-corners")]
            Rectroudedcorners,
            
            /// <summary>
            /// Enum Squareroudedcorners for "square-rouded-corners"
            /// </summary>
            [EnumMember(Value = "square-rouded-corners")]
            Squareroudedcorners,
            
            /// <summary>
            /// Enum Oval for "oval"
            /// </summary>
            [EnumMember(Value = "oval")]
            Oval,
            
            /// <summary>
            /// Enum Circle for "circle"
            /// </summary>
            [EnumMember(Value = "circle")]
            Circle
        }

        /// <summary>
        /// Gets or Sets Orientation
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrientationEnum
        {
            
            /// <summary>
            /// Enum None for "none"
            /// </summary>
            [EnumMember(Value = "none")]
            None,
            
            /// <summary>
            /// Enum Landscape for "landscape"
            /// </summary>
            [EnumMember(Value = "landscape")]
            Landscape,
            
            /// <summary>
            /// Enum Portrait for "portrait"
            /// </summary>
            [EnumMember(Value = "portrait")]
            Portrait
        }

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FormatEnum
        {
            
            /// <summary>
            /// Enum Eu for "eu"
            /// </summary>
            [EnumMember(Value = "eu")]
            Eu,
            
            /// <summary>
            /// Enum Us for "us"
            /// </summary>
            [EnumMember(Value = "us")]
            Us
        }

        /// <summary>
        /// Gets or Sets EnvelopeWindow
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EnvelopeWindowEnum
        {
            
            /// <summary>
            /// Enum None for "none"
            /// </summary>
            [EnumMember(Value = "none")]
            None,
            
            /// <summary>
            /// Enum Left for "left"
            /// </summary>
            [EnumMember(Value = "left")]
            Left,
            
            /// <summary>
            /// Enum Right for "right"
            /// </summary>
            [EnumMember(Value = "right")]
            Right
        }

        /// <summary>
        /// Gets or Sets FoldingType
        /// </summary>
        [DataMember(Name="foldingType", EmitDefaultValue=false)]
        public FoldingTypeEnum? FoldingType { get; set; }
        /// <summary>
        /// Gets or Sets FoldingMethod
        /// </summary>
        [DataMember(Name="foldingMethod", EmitDefaultValue=false)]
        public FoldingMethodEnum? FoldingMethod { get; set; }
        /// <summary>
        /// Gets or Sets BindingType
        /// </summary>
        [DataMember(Name="bindingType", EmitDefaultValue=false)]
        public BindingTypeEnum? BindingType { get; set; }
        /// <summary>
        /// Gets or Sets PrintProfile
        /// </summary>
        [DataMember(Name="printProfile", EmitDefaultValue=false)]
        public PrintProfileEnum? PrintProfile { get; set; }
        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public UnitEnum? Unit { get; set; }
        /// <summary>
        /// Gets or Sets Shape
        /// </summary>
        [DataMember(Name="shape", EmitDefaultValue=false)]
        public ShapeEnum? Shape { get; set; }
        /// <summary>
        /// Gets or Sets Orientation
        /// </summary>
        [DataMember(Name="orientation", EmitDefaultValue=false)]
        public OrientationEnum? Orientation { get; set; }
        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public FormatEnum? Format { get; set; }
        /// <summary>
        /// Gets or Sets EnvelopeWindow
        /// </summary>
        [DataMember(Name="envelopeWindow", EmitDefaultValue=false)]
        public EnvelopeWindowEnum? EnvelopeWindow { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductSize" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductSize() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductSize" /> class.
        /// </summary>
        /// <param name="Name">Name (required).</param>
        /// <param name="Code">Code (required).</param>
        /// <param name="LegacyCode">LegacyCode.</param>
        /// <param name="Thumbnail">Thumbnail.</param>
        /// <param name="FoldingType">FoldingType.</param>
        /// <param name="FoldingMethod">FoldingMethod.</param>
        /// <param name="BindingType">BindingType.</param>
        /// <param name="DoubleSided">DoubleSided (default to false).</param>
        /// <param name="DieCut">DieCut (default to false).</param>
        /// <param name="UnfoldedSize">UnfoldedSize.</param>
        /// <param name="FoldedSize">FoldedSize.</param>
        /// <param name="PdfSize">PdfSize.</param>
        /// <param name="PdfPageCount">PdfPageCount (default to 1.0).</param>
        /// <param name="PdfDpi">PdfDpi (default to 300.0).</param>
        /// <param name="PdfOutputScale">PdfOutputScale (default to 100.0).</param>
        /// <param name="PrintProfile">PrintProfile.</param>
        /// <param name="CustomerSize">CustomerSize.</param>
        /// <param name="CustomerPageCount">CustomerPageCount (default to 1.0).</param>
        /// <param name="MaxBleed">MaxBleed.</param>
        /// <param name="DefaultBleed">DefaultBleed.</param>
        /// <param name="SafeArea">SafeArea.</param>
        /// <param name="Unit">Unit.</param>
        /// <param name="Frame">Frame (default to 0.0).</param>
        /// <param name="Shape">Shape.</param>
        /// <param name="Orientation">Orientation.</param>
        /// <param name="Format">Format (required).</param>
        /// <param name="EnvelopeWindow">EnvelopeWindow.</param>
        /// <param name="CanvasImageCount">CanvasImageCount (default to 0.0).</param>
        /// <param name="Options">Options (default to &quot;none&quot;).</param>
        /// <param name="DisplayType">DisplayType (default to &quot;none&quot;).</param>
        /// <param name="Created">Created.</param>
        /// <param name="Modified">Modified.</param>
        /// <param name="Id">Id.</param>
        /// <param name="PdfColorProfileId">PdfColorProfileId.</param>
        /// <param name="TypeId">TypeId.</param>
        /// <param name="Type">Type.</param>
        /// <param name="Materials">Materials.</param>
        /// <param name="SizeMaterials">SizeMaterials.</param>
        /// <param name="Products">Products.</param>
        /// <param name="PdfColorProfile">PdfColorProfile.</param>
        public ProductSize(string Name = null, string Code = null, string LegacyCode = null, CloudinaryImage Thumbnail = null, FoldingTypeEnum? FoldingType = null, FoldingMethodEnum? FoldingMethod = null, BindingTypeEnum? BindingType = null, bool? DoubleSided = null, bool? DieCut = null, Dimensions UnfoldedSize = null, Dimensions FoldedSize = null, Dimensions PdfSize = null, double? PdfPageCount = null, double? PdfDpi = null, double? PdfOutputScale = null, PrintProfileEnum? PrintProfile = null, Dimensions CustomerSize = null, double? CustomerPageCount = null, Bounds MaxBleed = null, Bounds DefaultBleed = null, Bounds SafeArea = null, UnitEnum? Unit = null, double? Frame = null, ShapeEnum? Shape = null, OrientationEnum? Orientation = null, FormatEnum? Format = null, EnvelopeWindowEnum? EnvelopeWindow = null, double? CanvasImageCount = null, string Options = null, string DisplayType = null, DateTime? Created = null, DateTime? Modified = null, string Id = null, string PdfColorProfileId = null, string TypeId = null, ProductType Type = null, List<ProductMaterial> Materials = null, List<ProductSizeMaterial> SizeMaterials = null, List<Product> Products = null, ProductPdfColorProfile PdfColorProfile = null)
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for ProductSize and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Code" is required (not null)
            if (Code == null)
            {
                throw new InvalidDataException("Code is a required property for ProductSize and cannot be null");
            }
            else
            {
                this.Code = Code;
            }
            // to ensure "Format" is required (not null)
            if (Format == null)
            {
                throw new InvalidDataException("Format is a required property for ProductSize and cannot be null");
            }
            else
            {
                this.Format = Format;
            }
            this.LegacyCode = LegacyCode;
            this.Thumbnail = Thumbnail;
            this.FoldingType = FoldingType;
            this.FoldingMethod = FoldingMethod;
            this.BindingType = BindingType;
            // use default value if no "DoubleSided" provided
            if (DoubleSided == null)
            {
                this.DoubleSided = false;
            }
            else
            {
                this.DoubleSided = DoubleSided;
            }
            // use default value if no "DieCut" provided
            if (DieCut == null)
            {
                this.DieCut = false;
            }
            else
            {
                this.DieCut = DieCut;
            }
            this.UnfoldedSize = UnfoldedSize;
            this.FoldedSize = FoldedSize;
            this.PdfSize = PdfSize;
            // use default value if no "PdfPageCount" provided
            if (PdfPageCount == null)
            {
                this.PdfPageCount = 1.0;
            }
            else
            {
                this.PdfPageCount = PdfPageCount;
            }
            // use default value if no "PdfDpi" provided
            if (PdfDpi == null)
            {
                this.PdfDpi = 300.0;
            }
            else
            {
                this.PdfDpi = PdfDpi;
            }
            // use default value if no "PdfOutputScale" provided
            if (PdfOutputScale == null)
            {
                this.PdfOutputScale = 100.0;
            }
            else
            {
                this.PdfOutputScale = PdfOutputScale;
            }
            this.PrintProfile = PrintProfile;
            this.CustomerSize = CustomerSize;
            // use default value if no "CustomerPageCount" provided
            if (CustomerPageCount == null)
            {
                this.CustomerPageCount = 1.0;
            }
            else
            {
                this.CustomerPageCount = CustomerPageCount;
            }
            this.MaxBleed = MaxBleed;
            this.DefaultBleed = DefaultBleed;
            this.SafeArea = SafeArea;
            this.Unit = Unit;
            // use default value if no "Frame" provided
            if (Frame == null)
            {
                this.Frame = 0.0;
            }
            else
            {
                this.Frame = Frame;
            }
            this.Shape = Shape;
            this.Orientation = Orientation;
            this.EnvelopeWindow = EnvelopeWindow;
            // use default value if no "CanvasImageCount" provided
            if (CanvasImageCount == null)
            {
                this.CanvasImageCount = 0.0;
            }
            else
            {
                this.CanvasImageCount = CanvasImageCount;
            }
            // use default value if no "Options" provided
            if (Options == null)
            {
                this.Options = "none";
            }
            else
            {
                this.Options = Options;
            }
            // use default value if no "DisplayType" provided
            if (DisplayType == null)
            {
                this.DisplayType = "none";
            }
            else
            {
                this.DisplayType = DisplayType;
            }
            this.Created = Created;
            this.Modified = Modified;
            this.Id = Id;
            this.PdfColorProfileId = PdfColorProfileId;
            this.TypeId = TypeId;
            this.Type = Type;
            this.Materials = Materials;
            this.SizeMaterials = SizeMaterials;
            this.Products = Products;
            this.PdfColorProfile = PdfColorProfile;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }
        /// <summary>
        /// Gets or Sets LegacyCode
        /// </summary>
        [DataMember(Name="legacyCode", EmitDefaultValue=false)]
        public string LegacyCode { get; set; }
        /// <summary>
        /// Gets or Sets Thumbnail
        /// </summary>
        [DataMember(Name="thumbnail", EmitDefaultValue=false)]
        public CloudinaryImage Thumbnail { get; set; }
        /// <summary>
        /// Gets or Sets DoubleSided
        /// </summary>
        [DataMember(Name="doubleSided", EmitDefaultValue=false)]
        public bool? DoubleSided { get; set; }
        /// <summary>
        /// Gets or Sets DieCut
        /// </summary>
        [DataMember(Name="dieCut", EmitDefaultValue=false)]
        public bool? DieCut { get; set; }
        /// <summary>
        /// Gets or Sets UnfoldedSize
        /// </summary>
        [DataMember(Name="unfoldedSize", EmitDefaultValue=false)]
        public Dimensions UnfoldedSize { get; set; }
        /// <summary>
        /// Gets or Sets FoldedSize
        /// </summary>
        [DataMember(Name="foldedSize", EmitDefaultValue=false)]
        public Dimensions FoldedSize { get; set; }
        /// <summary>
        /// Gets or Sets PdfSize
        /// </summary>
        [DataMember(Name="pdfSize", EmitDefaultValue=false)]
        public Dimensions PdfSize { get; set; }
        /// <summary>
        /// Gets or Sets PdfPageCount
        /// </summary>
        [DataMember(Name="pdfPageCount", EmitDefaultValue=false)]
        public double? PdfPageCount { get; set; }
        /// <summary>
        /// Gets or Sets PdfDpi
        /// </summary>
        [DataMember(Name="pdfDpi", EmitDefaultValue=false)]
        public double? PdfDpi { get; set; }
        /// <summary>
        /// Gets or Sets PdfOutputScale
        /// </summary>
        [DataMember(Name="pdfOutputScale", EmitDefaultValue=false)]
        public double? PdfOutputScale { get; set; }
        /// <summary>
        /// Gets or Sets CustomerSize
        /// </summary>
        [DataMember(Name="customerSize", EmitDefaultValue=false)]
        public Dimensions CustomerSize { get; set; }
        /// <summary>
        /// Gets or Sets CustomerPageCount
        /// </summary>
        [DataMember(Name="customerPageCount", EmitDefaultValue=false)]
        public double? CustomerPageCount { get; set; }
        /// <summary>
        /// Gets or Sets MaxBleed
        /// </summary>
        [DataMember(Name="maxBleed", EmitDefaultValue=false)]
        public Bounds MaxBleed { get; set; }
        /// <summary>
        /// Gets or Sets DefaultBleed
        /// </summary>
        [DataMember(Name="defaultBleed", EmitDefaultValue=false)]
        public Bounds DefaultBleed { get; set; }
        /// <summary>
        /// Gets or Sets SafeArea
        /// </summary>
        [DataMember(Name="safeArea", EmitDefaultValue=false)]
        public Bounds SafeArea { get; set; }
        /// <summary>
        /// Gets or Sets Frame
        /// </summary>
        [DataMember(Name="frame", EmitDefaultValue=false)]
        public double? Frame { get; set; }
        /// <summary>
        /// Gets or Sets CanvasImageCount
        /// </summary>
        [DataMember(Name="canvasImageCount", EmitDefaultValue=false)]
        public double? CanvasImageCount { get; set; }
        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public string Options { get; set; }
        /// <summary>
        /// Gets or Sets DisplayType
        /// </summary>
        [DataMember(Name="displayType", EmitDefaultValue=false)]
        public string DisplayType { get; set; }
        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }
        /// <summary>
        /// Gets or Sets Modified
        /// </summary>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public DateTime? Modified { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets PdfColorProfileId
        /// </summary>
        [DataMember(Name="pdfColorProfileId", EmitDefaultValue=false)]
        public string PdfColorProfileId { get; set; }
        /// <summary>
        /// Gets or Sets TypeId
        /// </summary>
        [DataMember(Name="typeId", EmitDefaultValue=false)]
        public string TypeId { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public ProductType Type { get; set; }
        /// <summary>
        /// Gets or Sets Materials
        /// </summary>
        [DataMember(Name="materials", EmitDefaultValue=false)]
        public List<ProductMaterial> Materials { get; set; }
        /// <summary>
        /// Gets or Sets SizeMaterials
        /// </summary>
        [DataMember(Name="sizeMaterials", EmitDefaultValue=false)]
        public List<ProductSizeMaterial> SizeMaterials { get; set; }
        /// <summary>
        /// Gets or Sets Products
        /// </summary>
        [DataMember(Name="products", EmitDefaultValue=false)]
        public List<Product> Products { get; set; }
        /// <summary>
        /// Gets or Sets PdfColorProfile
        /// </summary>
        [DataMember(Name="pdfColorProfile", EmitDefaultValue=false)]
        public ProductPdfColorProfile PdfColorProfile { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductSize {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  LegacyCode: ").Append(LegacyCode).Append("\n");
            sb.Append("  Thumbnail: ").Append(Thumbnail).Append("\n");
            sb.Append("  FoldingType: ").Append(FoldingType).Append("\n");
            sb.Append("  FoldingMethod: ").Append(FoldingMethod).Append("\n");
            sb.Append("  BindingType: ").Append(BindingType).Append("\n");
            sb.Append("  DoubleSided: ").Append(DoubleSided).Append("\n");
            sb.Append("  DieCut: ").Append(DieCut).Append("\n");
            sb.Append("  UnfoldedSize: ").Append(UnfoldedSize).Append("\n");
            sb.Append("  FoldedSize: ").Append(FoldedSize).Append("\n");
            sb.Append("  PdfSize: ").Append(PdfSize).Append("\n");
            sb.Append("  PdfPageCount: ").Append(PdfPageCount).Append("\n");
            sb.Append("  PdfDpi: ").Append(PdfDpi).Append("\n");
            sb.Append("  PdfOutputScale: ").Append(PdfOutputScale).Append("\n");
            sb.Append("  PrintProfile: ").Append(PrintProfile).Append("\n");
            sb.Append("  CustomerSize: ").Append(CustomerSize).Append("\n");
            sb.Append("  CustomerPageCount: ").Append(CustomerPageCount).Append("\n");
            sb.Append("  MaxBleed: ").Append(MaxBleed).Append("\n");
            sb.Append("  DefaultBleed: ").Append(DefaultBleed).Append("\n");
            sb.Append("  SafeArea: ").Append(SafeArea).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Frame: ").Append(Frame).Append("\n");
            sb.Append("  Shape: ").Append(Shape).Append("\n");
            sb.Append("  Orientation: ").Append(Orientation).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  EnvelopeWindow: ").Append(EnvelopeWindow).Append("\n");
            sb.Append("  CanvasImageCount: ").Append(CanvasImageCount).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  DisplayType: ").Append(DisplayType).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PdfColorProfileId: ").Append(PdfColorProfileId).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Materials: ").Append(Materials).Append("\n");
            sb.Append("  SizeMaterials: ").Append(SizeMaterials).Append("\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("  PdfColorProfile: ").Append(PdfColorProfile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ProductSize);
        }

        /// <summary>
        /// Returns true if ProductSize instances are equal
        /// </summary>
        /// <param name="other">Instance of ProductSize to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductSize other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                ) && 
                (
                    this.LegacyCode == other.LegacyCode ||
                    this.LegacyCode != null &&
                    this.LegacyCode.Equals(other.LegacyCode)
                ) && 
                (
                    this.Thumbnail == other.Thumbnail ||
                    this.Thumbnail != null &&
                    this.Thumbnail.Equals(other.Thumbnail)
                ) && 
                (
                    this.FoldingType == other.FoldingType ||
                    this.FoldingType != null &&
                    this.FoldingType.Equals(other.FoldingType)
                ) && 
                (
                    this.FoldingMethod == other.FoldingMethod ||
                    this.FoldingMethod != null &&
                    this.FoldingMethod.Equals(other.FoldingMethod)
                ) && 
                (
                    this.BindingType == other.BindingType ||
                    this.BindingType != null &&
                    this.BindingType.Equals(other.BindingType)
                ) && 
                (
                    this.DoubleSided == other.DoubleSided ||
                    this.DoubleSided != null &&
                    this.DoubleSided.Equals(other.DoubleSided)
                ) && 
                (
                    this.DieCut == other.DieCut ||
                    this.DieCut != null &&
                    this.DieCut.Equals(other.DieCut)
                ) && 
                (
                    this.UnfoldedSize == other.UnfoldedSize ||
                    this.UnfoldedSize != null &&
                    this.UnfoldedSize.Equals(other.UnfoldedSize)
                ) && 
                (
                    this.FoldedSize == other.FoldedSize ||
                    this.FoldedSize != null &&
                    this.FoldedSize.Equals(other.FoldedSize)
                ) && 
                (
                    this.PdfSize == other.PdfSize ||
                    this.PdfSize != null &&
                    this.PdfSize.Equals(other.PdfSize)
                ) && 
                (
                    this.PdfPageCount == other.PdfPageCount ||
                    this.PdfPageCount != null &&
                    this.PdfPageCount.Equals(other.PdfPageCount)
                ) && 
                (
                    this.PdfDpi == other.PdfDpi ||
                    this.PdfDpi != null &&
                    this.PdfDpi.Equals(other.PdfDpi)
                ) && 
                (
                    this.PdfOutputScale == other.PdfOutputScale ||
                    this.PdfOutputScale != null &&
                    this.PdfOutputScale.Equals(other.PdfOutputScale)
                ) && 
                (
                    this.PrintProfile == other.PrintProfile ||
                    this.PrintProfile != null &&
                    this.PrintProfile.Equals(other.PrintProfile)
                ) && 
                (
                    this.CustomerSize == other.CustomerSize ||
                    this.CustomerSize != null &&
                    this.CustomerSize.Equals(other.CustomerSize)
                ) && 
                (
                    this.CustomerPageCount == other.CustomerPageCount ||
                    this.CustomerPageCount != null &&
                    this.CustomerPageCount.Equals(other.CustomerPageCount)
                ) && 
                (
                    this.MaxBleed == other.MaxBleed ||
                    this.MaxBleed != null &&
                    this.MaxBleed.Equals(other.MaxBleed)
                ) && 
                (
                    this.DefaultBleed == other.DefaultBleed ||
                    this.DefaultBleed != null &&
                    this.DefaultBleed.Equals(other.DefaultBleed)
                ) && 
                (
                    this.SafeArea == other.SafeArea ||
                    this.SafeArea != null &&
                    this.SafeArea.Equals(other.SafeArea)
                ) && 
                (
                    this.Unit == other.Unit ||
                    this.Unit != null &&
                    this.Unit.Equals(other.Unit)
                ) && 
                (
                    this.Frame == other.Frame ||
                    this.Frame != null &&
                    this.Frame.Equals(other.Frame)
                ) && 
                (
                    this.Shape == other.Shape ||
                    this.Shape != null &&
                    this.Shape.Equals(other.Shape)
                ) && 
                (
                    this.Orientation == other.Orientation ||
                    this.Orientation != null &&
                    this.Orientation.Equals(other.Orientation)
                ) && 
                (
                    this.Format == other.Format ||
                    this.Format != null &&
                    this.Format.Equals(other.Format)
                ) && 
                (
                    this.EnvelopeWindow == other.EnvelopeWindow ||
                    this.EnvelopeWindow != null &&
                    this.EnvelopeWindow.Equals(other.EnvelopeWindow)
                ) && 
                (
                    this.CanvasImageCount == other.CanvasImageCount ||
                    this.CanvasImageCount != null &&
                    this.CanvasImageCount.Equals(other.CanvasImageCount)
                ) && 
                (
                    this.Options == other.Options ||
                    this.Options != null &&
                    this.Options.Equals(other.Options)
                ) && 
                (
                    this.DisplayType == other.DisplayType ||
                    this.DisplayType != null &&
                    this.DisplayType.Equals(other.DisplayType)
                ) && 
                (
                    this.Created == other.Created ||
                    this.Created != null &&
                    this.Created.Equals(other.Created)
                ) && 
                (
                    this.Modified == other.Modified ||
                    this.Modified != null &&
                    this.Modified.Equals(other.Modified)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.PdfColorProfileId == other.PdfColorProfileId ||
                    this.PdfColorProfileId != null &&
                    this.PdfColorProfileId.Equals(other.PdfColorProfileId)
                ) && 
                (
                    this.TypeId == other.TypeId ||
                    this.TypeId != null &&
                    this.TypeId.Equals(other.TypeId)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Materials == other.Materials ||
                    this.Materials != null &&
                    this.Materials.SequenceEqual(other.Materials)
                ) && 
                (
                    this.SizeMaterials == other.SizeMaterials ||
                    this.SizeMaterials != null &&
                    this.SizeMaterials.SequenceEqual(other.SizeMaterials)
                ) && 
                (
                    this.Products == other.Products ||
                    this.Products != null &&
                    this.Products.SequenceEqual(other.Products)
                ) && 
                (
                    this.PdfColorProfile == other.PdfColorProfile ||
                    this.PdfColorProfile != null &&
                    this.PdfColorProfile.Equals(other.PdfColorProfile)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Code != null)
                    hash = hash * 59 + this.Code.GetHashCode();
                if (this.LegacyCode != null)
                    hash = hash * 59 + this.LegacyCode.GetHashCode();
                if (this.Thumbnail != null)
                    hash = hash * 59 + this.Thumbnail.GetHashCode();
                if (this.FoldingType != null)
                    hash = hash * 59 + this.FoldingType.GetHashCode();
                if (this.FoldingMethod != null)
                    hash = hash * 59 + this.FoldingMethod.GetHashCode();
                if (this.BindingType != null)
                    hash = hash * 59 + this.BindingType.GetHashCode();
                if (this.DoubleSided != null)
                    hash = hash * 59 + this.DoubleSided.GetHashCode();
                if (this.DieCut != null)
                    hash = hash * 59 + this.DieCut.GetHashCode();
                if (this.UnfoldedSize != null)
                    hash = hash * 59 + this.UnfoldedSize.GetHashCode();
                if (this.FoldedSize != null)
                    hash = hash * 59 + this.FoldedSize.GetHashCode();
                if (this.PdfSize != null)
                    hash = hash * 59 + this.PdfSize.GetHashCode();
                if (this.PdfPageCount != null)
                    hash = hash * 59 + this.PdfPageCount.GetHashCode();
                if (this.PdfDpi != null)
                    hash = hash * 59 + this.PdfDpi.GetHashCode();
                if (this.PdfOutputScale != null)
                    hash = hash * 59 + this.PdfOutputScale.GetHashCode();
                if (this.PrintProfile != null)
                    hash = hash * 59 + this.PrintProfile.GetHashCode();
                if (this.CustomerSize != null)
                    hash = hash * 59 + this.CustomerSize.GetHashCode();
                if (this.CustomerPageCount != null)
                    hash = hash * 59 + this.CustomerPageCount.GetHashCode();
                if (this.MaxBleed != null)
                    hash = hash * 59 + this.MaxBleed.GetHashCode();
                if (this.DefaultBleed != null)
                    hash = hash * 59 + this.DefaultBleed.GetHashCode();
                if (this.SafeArea != null)
                    hash = hash * 59 + this.SafeArea.GetHashCode();
                if (this.Unit != null)
                    hash = hash * 59 + this.Unit.GetHashCode();
                if (this.Frame != null)
                    hash = hash * 59 + this.Frame.GetHashCode();
                if (this.Shape != null)
                    hash = hash * 59 + this.Shape.GetHashCode();
                if (this.Orientation != null)
                    hash = hash * 59 + this.Orientation.GetHashCode();
                if (this.Format != null)
                    hash = hash * 59 + this.Format.GetHashCode();
                if (this.EnvelopeWindow != null)
                    hash = hash * 59 + this.EnvelopeWindow.GetHashCode();
                if (this.CanvasImageCount != null)
                    hash = hash * 59 + this.CanvasImageCount.GetHashCode();
                if (this.Options != null)
                    hash = hash * 59 + this.Options.GetHashCode();
                if (this.DisplayType != null)
                    hash = hash * 59 + this.DisplayType.GetHashCode();
                if (this.Created != null)
                    hash = hash * 59 + this.Created.GetHashCode();
                if (this.Modified != null)
                    hash = hash * 59 + this.Modified.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.PdfColorProfileId != null)
                    hash = hash * 59 + this.PdfColorProfileId.GetHashCode();
                if (this.TypeId != null)
                    hash = hash * 59 + this.TypeId.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Materials != null)
                    hash = hash * 59 + this.Materials.GetHashCode();
                if (this.SizeMaterials != null)
                    hash = hash * 59 + this.SizeMaterials.GetHashCode();
                if (this.Products != null)
                    hash = hash * 59 + this.Products.GetHashCode();
                if (this.PdfColorProfile != null)
                    hash = hash * 59 + this.PdfColorProfile.GetHashCode();
                return hash;
            }
        }
    }

}
