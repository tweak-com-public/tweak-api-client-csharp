/* 
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.8-alpha.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace TweakApi.Model
{
    /// <summary>
    /// BillingLimitLog
    /// </summary>
    [DataContract]
    public partial class BillingLimitLog :  IEquatable<BillingLimitLog>
    {
        /// <summary>
        /// Gets or Sets Operation
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperationEnum
        {
            
            /// <summary>
            /// Enum Increase for "increase"
            /// </summary>
            [EnumMember(Value = "increase")]
            Increase,
            
            /// <summary>
            /// Enum Decrease for "decrease"
            /// </summary>
            [EnumMember(Value = "decrease")]
            Decrease
        }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LimitEnum
        {
            
            /// <summary>
            /// Enum TeamMember for "teamMember"
            /// </summary>
            [EnumMember(Value = "teamMember")]
            TeamMember,
            
            /// <summary>
            /// Enum Uploader for "uploader"
            /// </summary>
            [EnumMember(Value = "uploader")]
            Uploader,
            
            /// <summary>
            /// Enum Portal for "portal"
            /// </summary>
            [EnumMember(Value = "portal")]
            Portal,
            
            /// <summary>
            /// Enum Jpeg for "jpeg"
            /// </summary>
            [EnumMember(Value = "jpeg")]
            Jpeg,
            
            /// <summary>
            /// Enum Proof for "proof"
            /// </summary>
            [EnumMember(Value = "proof")]
            Proof,
            
            /// <summary>
            /// Enum HighResPdf for "highResPdf"
            /// </summary>
            [EnumMember(Value = "highResPdf")]
            HighResPdf,
            
            /// <summary>
            /// Enum Storage for "storage"
            /// </summary>
            [EnumMember(Value = "storage")]
            Storage,
            
            /// <summary>
            /// Enum StockImageLibrary for "stockImageLibrary"
            /// </summary>
            [EnumMember(Value = "stockImageLibrary")]
            StockImageLibrary,
            
            /// <summary>
            /// Enum ProductDbRecord for "productDbRecord"
            /// </summary>
            [EnumMember(Value = "productDbRecord")]
            ProductDbRecord,
            
            /// <summary>
            /// Enum Bandwidth for "bandwidth"
            /// </summary>
            [EnumMember(Value = "bandwidth")]
            Bandwidth,
            
            /// <summary>
            /// Enum PrinterApi for "printerApi"
            /// </summary>
            [EnumMember(Value = "printerApi")]
            PrinterApi
        }

        /// <summary>
        /// Gets or Sets Operation
        /// </summary>
        [DataMember(Name="operation", EmitDefaultValue=false)]
        public OperationEnum? Operation { get; set; }
        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [DataMember(Name="limit", EmitDefaultValue=false)]
        public LimitEnum? Limit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BillingLimitLog" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BillingLimitLog() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BillingLimitLog" /> class.
        /// </summary>
        /// <param name="Value">Value (required).</param>
        /// <param name="Operation">Operation.</param>
        /// <param name="Before">Before.</param>
        /// <param name="After">After.</param>
        /// <param name="Limit">Limit (required).</param>
        /// <param name="Message">Message (required).</param>
        /// <param name="Created">Created.</param>
        /// <param name="Modified">Modified.</param>
        /// <param name="Id">Id.</param>
        /// <param name="BillingId">BillingId.</param>
        /// <param name="Billing">Billing.</param>
        public BillingLimitLog(string Value = null, OperationEnum? Operation = null, BillingLimitCounter Before = null, BillingLimitCounter After = null, LimitEnum? Limit = null, string Message = null, DateTime? Created = null, DateTime? Modified = null, string Id = null, string BillingId = null, Billing Billing = null)
        {
            // to ensure "Value" is required (not null)
            if (Value == null)
            {
                throw new InvalidDataException("Value is a required property for BillingLimitLog and cannot be null");
            }
            else
            {
                this.Value = Value;
            }
            // to ensure "Limit" is required (not null)
            if (Limit == null)
            {
                throw new InvalidDataException("Limit is a required property for BillingLimitLog and cannot be null");
            }
            else
            {
                this.Limit = Limit;
            }
            // to ensure "Message" is required (not null)
            if (Message == null)
            {
                throw new InvalidDataException("Message is a required property for BillingLimitLog and cannot be null");
            }
            else
            {
                this.Message = Message;
            }
            this.Operation = Operation;
            this.Before = Before;
            this.After = After;
            this.Created = Created;
            this.Modified = Modified;
            this.Id = Id;
            this.BillingId = BillingId;
            this.Billing = Billing;
        }
        
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// Gets or Sets Before
        /// </summary>
        [DataMember(Name="before", EmitDefaultValue=false)]
        public BillingLimitCounter Before { get; set; }
        /// <summary>
        /// Gets or Sets After
        /// </summary>
        [DataMember(Name="after", EmitDefaultValue=false)]
        public BillingLimitCounter After { get; set; }
        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }
        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }
        /// <summary>
        /// Gets or Sets Modified
        /// </summary>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public DateTime? Modified { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets BillingId
        /// </summary>
        [DataMember(Name="billingId", EmitDefaultValue=false)]
        public string BillingId { get; set; }
        /// <summary>
        /// Gets or Sets Billing
        /// </summary>
        [DataMember(Name="billing", EmitDefaultValue=false)]
        public Billing Billing { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillingLimitLog {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Operation: ").Append(Operation).Append("\n");
            sb.Append("  Before: ").Append(Before).Append("\n");
            sb.Append("  After: ").Append(After).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BillingId: ").Append(BillingId).Append("\n");
            sb.Append("  Billing: ").Append(Billing).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BillingLimitLog);
        }

        /// <summary>
        /// Returns true if BillingLimitLog instances are equal
        /// </summary>
        /// <param name="other">Instance of BillingLimitLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillingLimitLog other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                ) && 
                (
                    this.Operation == other.Operation ||
                    this.Operation != null &&
                    this.Operation.Equals(other.Operation)
                ) && 
                (
                    this.Before == other.Before ||
                    this.Before != null &&
                    this.Before.Equals(other.Before)
                ) && 
                (
                    this.After == other.After ||
                    this.After != null &&
                    this.After.Equals(other.After)
                ) && 
                (
                    this.Limit == other.Limit ||
                    this.Limit != null &&
                    this.Limit.Equals(other.Limit)
                ) && 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                ) && 
                (
                    this.Created == other.Created ||
                    this.Created != null &&
                    this.Created.Equals(other.Created)
                ) && 
                (
                    this.Modified == other.Modified ||
                    this.Modified != null &&
                    this.Modified.Equals(other.Modified)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.BillingId == other.BillingId ||
                    this.BillingId != null &&
                    this.BillingId.Equals(other.BillingId)
                ) && 
                (
                    this.Billing == other.Billing ||
                    this.Billing != null &&
                    this.Billing.Equals(other.Billing)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                if (this.Operation != null)
                    hash = hash * 59 + this.Operation.GetHashCode();
                if (this.Before != null)
                    hash = hash * 59 + this.Before.GetHashCode();
                if (this.After != null)
                    hash = hash * 59 + this.After.GetHashCode();
                if (this.Limit != null)
                    hash = hash * 59 + this.Limit.GetHashCode();
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                if (this.Created != null)
                    hash = hash * 59 + this.Created.GetHashCode();
                if (this.Modified != null)
                    hash = hash * 59 + this.Modified.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.BillingId != null)
                    hash = hash * 59 + this.BillingId.GetHashCode();
                if (this.Billing != null)
                    hash = hash * 59 + this.Billing.GetHashCode();
                return hash;
            }
        }
    }

}
