/* 
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.8-alpha.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace TweakApi.Model
{
    /// <summary>
    /// BillingSourceSofort
    /// </summary>
    [DataContract]
    public partial class BillingSourceSofort :  IEquatable<BillingSourceSofort>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BillingSourceSofort" /> class.
        /// </summary>
        /// <param name="Country">Country.</param>
        /// <param name="BankCode">BankCode.</param>
        /// <param name="Bic">Bic.</param>
        /// <param name="BankName">BankName.</param>
        /// <param name="IbanLast4">IbanLast4.</param>
        /// <param name="PreferredLanguage">PreferredLanguage.</param>
        /// <param name="StatementDescriptor">StatementDescriptor.</param>
        /// <param name="Id">Id.</param>
        public BillingSourceSofort(string Country = null, string BankCode = null, string Bic = null, string BankName = null, string IbanLast4 = null, string PreferredLanguage = null, string StatementDescriptor = null, string Id = null)
        {
            this.Country = Country;
            this.BankCode = BankCode;
            this.Bic = Bic;
            this.BankName = BankName;
            this.IbanLast4 = IbanLast4;
            this.PreferredLanguage = PreferredLanguage;
            this.StatementDescriptor = StatementDescriptor;
            this.Id = Id;
        }
        
        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// Gets or Sets BankCode
        /// </summary>
        [DataMember(Name="bankCode", EmitDefaultValue=false)]
        public string BankCode { get; set; }
        /// <summary>
        /// Gets or Sets Bic
        /// </summary>
        [DataMember(Name="bic", EmitDefaultValue=false)]
        public string Bic { get; set; }
        /// <summary>
        /// Gets or Sets BankName
        /// </summary>
        [DataMember(Name="bankName", EmitDefaultValue=false)]
        public string BankName { get; set; }
        /// <summary>
        /// Gets or Sets IbanLast4
        /// </summary>
        [DataMember(Name="ibanLast4", EmitDefaultValue=false)]
        public string IbanLast4 { get; set; }
        /// <summary>
        /// Gets or Sets PreferredLanguage
        /// </summary>
        [DataMember(Name="preferredLanguage", EmitDefaultValue=false)]
        public string PreferredLanguage { get; set; }
        /// <summary>
        /// Gets or Sets StatementDescriptor
        /// </summary>
        [DataMember(Name="statementDescriptor", EmitDefaultValue=false)]
        public string StatementDescriptor { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillingSourceSofort {\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  BankCode: ").Append(BankCode).Append("\n");
            sb.Append("  Bic: ").Append(Bic).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  IbanLast4: ").Append(IbanLast4).Append("\n");
            sb.Append("  PreferredLanguage: ").Append(PreferredLanguage).Append("\n");
            sb.Append("  StatementDescriptor: ").Append(StatementDescriptor).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BillingSourceSofort);
        }

        /// <summary>
        /// Returns true if BillingSourceSofort instances are equal
        /// </summary>
        /// <param name="other">Instance of BillingSourceSofort to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillingSourceSofort other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.BankCode == other.BankCode ||
                    this.BankCode != null &&
                    this.BankCode.Equals(other.BankCode)
                ) && 
                (
                    this.Bic == other.Bic ||
                    this.Bic != null &&
                    this.Bic.Equals(other.Bic)
                ) && 
                (
                    this.BankName == other.BankName ||
                    this.BankName != null &&
                    this.BankName.Equals(other.BankName)
                ) && 
                (
                    this.IbanLast4 == other.IbanLast4 ||
                    this.IbanLast4 != null &&
                    this.IbanLast4.Equals(other.IbanLast4)
                ) && 
                (
                    this.PreferredLanguage == other.PreferredLanguage ||
                    this.PreferredLanguage != null &&
                    this.PreferredLanguage.Equals(other.PreferredLanguage)
                ) && 
                (
                    this.StatementDescriptor == other.StatementDescriptor ||
                    this.StatementDescriptor != null &&
                    this.StatementDescriptor.Equals(other.StatementDescriptor)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.BankCode != null)
                    hash = hash * 59 + this.BankCode.GetHashCode();
                if (this.Bic != null)
                    hash = hash * 59 + this.Bic.GetHashCode();
                if (this.BankName != null)
                    hash = hash * 59 + this.BankName.GetHashCode();
                if (this.IbanLast4 != null)
                    hash = hash * 59 + this.IbanLast4.GetHashCode();
                if (this.PreferredLanguage != null)
                    hash = hash * 59 + this.PreferredLanguage.GetHashCode();
                if (this.StatementDescriptor != null)
                    hash = hash * 59 + this.StatementDescriptor.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                return hash;
            }
        }
    }

}
