/* 
 * tweak-api
 *
 * Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.
 *
 * OpenAPI spec version: 1.0.8-alpha.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace TweakApi.Model
{
    /// <summary>
    /// BillingBankAccount
    /// </summary>
    [DataContract]
    public partial class BillingBankAccount :  IEquatable<BillingBankAccount>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BillingBankAccount" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="_Object">_Object (default to &quot;bank_account&quot;).</param>
        /// <param name="Account">Account.</param>
        /// <param name="AccountHolderName">AccountHolderName.</param>
        /// <param name="AccountHolderType">AccountHolderType.</param>
        /// <param name="BankName">BankName.</param>
        /// <param name="Country">Country.</param>
        /// <param name="Currency">Currency.</param>
        /// <param name="DefaultForCurrency">DefaultForCurrency (default to false).</param>
        /// <param name="Fingerprint">Fingerprint.</param>
        /// <param name="Last4">Last4.</param>
        /// <param name="RoutingNumber">RoutingNumber.</param>
        /// <param name="Status">Status.</param>
        /// <param name="Token">Token.</param>
        public BillingBankAccount(string Id = null, string _Object = null, string Account = null, string AccountHolderName = null, string AccountHolderType = null, string BankName = null, string Country = null, string Currency = null, bool? DefaultForCurrency = null, string Fingerprint = null, string Last4 = null, string RoutingNumber = null, string Status = null, string Token = null)
        {
            this.Id = Id;
            // use default value if no "_Object" provided
            if (_Object == null)
            {
                this._Object = "bank_account";
            }
            else
            {
                this._Object = _Object;
            }
            this.Account = Account;
            this.AccountHolderName = AccountHolderName;
            this.AccountHolderType = AccountHolderType;
            this.BankName = BankName;
            this.Country = Country;
            this.Currency = Currency;
            // use default value if no "DefaultForCurrency" provided
            if (DefaultForCurrency == null)
            {
                this.DefaultForCurrency = false;
            }
            else
            {
                this.DefaultForCurrency = DefaultForCurrency;
            }
            this.Fingerprint = Fingerprint;
            this.Last4 = Last4;
            this.RoutingNumber = RoutingNumber;
            this.Status = Status;
            this.Token = Token;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets _Object
        /// </summary>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public string _Object { get; set; }
        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public string Account { get; set; }
        /// <summary>
        /// Gets or Sets AccountHolderName
        /// </summary>
        [DataMember(Name="accountHolderName", EmitDefaultValue=false)]
        public string AccountHolderName { get; set; }
        /// <summary>
        /// Gets or Sets AccountHolderType
        /// </summary>
        [DataMember(Name="accountHolderType", EmitDefaultValue=false)]
        public string AccountHolderType { get; set; }
        /// <summary>
        /// Gets or Sets BankName
        /// </summary>
        [DataMember(Name="bankName", EmitDefaultValue=false)]
        public string BankName { get; set; }
        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }
        /// <summary>
        /// Gets or Sets DefaultForCurrency
        /// </summary>
        [DataMember(Name="defaultForCurrency", EmitDefaultValue=false)]
        public bool? DefaultForCurrency { get; set; }
        /// <summary>
        /// Gets or Sets Fingerprint
        /// </summary>
        [DataMember(Name="fingerprint", EmitDefaultValue=false)]
        public string Fingerprint { get; set; }
        /// <summary>
        /// Gets or Sets Last4
        /// </summary>
        [DataMember(Name="last4", EmitDefaultValue=false)]
        public string Last4 { get; set; }
        /// <summary>
        /// Gets or Sets RoutingNumber
        /// </summary>
        [DataMember(Name="routingNumber", EmitDefaultValue=false)]
        public string RoutingNumber { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillingBankAccount {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  _Object: ").Append(_Object).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  AccountHolderName: ").Append(AccountHolderName).Append("\n");
            sb.Append("  AccountHolderType: ").Append(AccountHolderType).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  DefaultForCurrency: ").Append(DefaultForCurrency).Append("\n");
            sb.Append("  Fingerprint: ").Append(Fingerprint).Append("\n");
            sb.Append("  Last4: ").Append(Last4).Append("\n");
            sb.Append("  RoutingNumber: ").Append(RoutingNumber).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BillingBankAccount);
        }

        /// <summary>
        /// Returns true if BillingBankAccount instances are equal
        /// </summary>
        /// <param name="other">Instance of BillingBankAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillingBankAccount other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this._Object == other._Object ||
                    this._Object != null &&
                    this._Object.Equals(other._Object)
                ) && 
                (
                    this.Account == other.Account ||
                    this.Account != null &&
                    this.Account.Equals(other.Account)
                ) && 
                (
                    this.AccountHolderName == other.AccountHolderName ||
                    this.AccountHolderName != null &&
                    this.AccountHolderName.Equals(other.AccountHolderName)
                ) && 
                (
                    this.AccountHolderType == other.AccountHolderType ||
                    this.AccountHolderType != null &&
                    this.AccountHolderType.Equals(other.AccountHolderType)
                ) && 
                (
                    this.BankName == other.BankName ||
                    this.BankName != null &&
                    this.BankName.Equals(other.BankName)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.Currency == other.Currency ||
                    this.Currency != null &&
                    this.Currency.Equals(other.Currency)
                ) && 
                (
                    this.DefaultForCurrency == other.DefaultForCurrency ||
                    this.DefaultForCurrency != null &&
                    this.DefaultForCurrency.Equals(other.DefaultForCurrency)
                ) && 
                (
                    this.Fingerprint == other.Fingerprint ||
                    this.Fingerprint != null &&
                    this.Fingerprint.Equals(other.Fingerprint)
                ) && 
                (
                    this.Last4 == other.Last4 ||
                    this.Last4 != null &&
                    this.Last4.Equals(other.Last4)
                ) && 
                (
                    this.RoutingNumber == other.RoutingNumber ||
                    this.RoutingNumber != null &&
                    this.RoutingNumber.Equals(other.RoutingNumber)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Token == other.Token ||
                    this.Token != null &&
                    this.Token.Equals(other.Token)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this._Object != null)
                    hash = hash * 59 + this._Object.GetHashCode();
                if (this.Account != null)
                    hash = hash * 59 + this.Account.GetHashCode();
                if (this.AccountHolderName != null)
                    hash = hash * 59 + this.AccountHolderName.GetHashCode();
                if (this.AccountHolderType != null)
                    hash = hash * 59 + this.AccountHolderType.GetHashCode();
                if (this.BankName != null)
                    hash = hash * 59 + this.BankName.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.Currency != null)
                    hash = hash * 59 + this.Currency.GetHashCode();
                if (this.DefaultForCurrency != null)
                    hash = hash * 59 + this.DefaultForCurrency.GetHashCode();
                if (this.Fingerprint != null)
                    hash = hash * 59 + this.Fingerprint.GetHashCode();
                if (this.Last4 != null)
                    hash = hash * 59 + this.Last4.GetHashCode();
                if (this.RoutingNumber != null)
                    hash = hash * 59 + this.RoutingNumber.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Token != null)
                    hash = hash * 59 + this.Token.GetHashCode();
                return hash;
            }
        }
    }

}
